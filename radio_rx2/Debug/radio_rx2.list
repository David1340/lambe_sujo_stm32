
radio_rx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008e9c  08008e9c  00018e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f14  08008f14  0002019c  2**0
                  CONTENTS
  4 .ARM          00000000  08008f14  08008f14  0002019c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f14  08008f14  0002019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f14  08008f14  00018f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f18  08008f18  00018f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08008f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  2000019c  080090b8  0002019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f0  080090b8  000213f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f87c  00000000  00000000  000201c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e93  00000000  00000000  0002fa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000328d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  000335f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dfd  00000000  00000000  000341a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e4  00000000  00000000  0004df9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b78  00000000  00000000  0005e781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e52f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003374  00000000  00000000  000e534c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000019c 	.word	0x2000019c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e84 	.word	0x08008e84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001a0 	.word	0x200001a0
 8000148:	08008e84 	.word	0x08008e84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fe69 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f867 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8f5 	bl	8000358 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f8bd 	bl	80002ec <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000172:	f008 f9bf 	bl	80084f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	nrfRx.CE_port = CE_GPIO_Port;
 8000176:	4b28      	ldr	r3, [pc, #160]	; (8000218 <main+0xbc>)
 8000178:	4a28      	ldr	r2, [pc, #160]	; (800021c <main+0xc0>)
 800017a:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin = CE_Pin;
 800017c:	4b26      	ldr	r3, [pc, #152]	; (8000218 <main+0xbc>)
 800017e:	2201      	movs	r2, #1
 8000180:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port = CSN_GPIO_Port;
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <main+0xbc>)
 8000184:	4a26      	ldr	r2, [pc, #152]	; (8000220 <main+0xc4>)
 8000186:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = CSN_Pin;
 8000188:	4b23      	ldr	r3, [pc, #140]	; (8000218 <main+0xbc>)
 800018a:	2208      	movs	r2, #8
 800018c:	809a      	strh	r2, [r3, #4]
	nrfRx.IRQ_port = IRQ_GPIO_Port;
 800018e:	4b22      	ldr	r3, [pc, #136]	; (8000218 <main+0xbc>)
 8000190:	4a23      	ldr	r2, [pc, #140]	; (8000220 <main+0xc4>)
 8000192:	611a      	str	r2, [r3, #16]
	nrfRx.IRQ_pin = IRQ_Pin;
 8000194:	4b20      	ldr	r3, [pc, #128]	; (8000218 <main+0xbc>)
 8000196:	2210      	movs	r2, #16
 8000198:	829a      	strh	r2, [r3, #20]
	nrfRx.hSPIx = &hspi1;
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <main+0xbc>)
 800019c:	4a21      	ldr	r2, [pc, #132]	; (8000224 <main+0xc8>)
 800019e:	619a      	str	r2, [r3, #24]

	nrf24_init(&nrfRx);
 80001a0:	481d      	ldr	r0, [pc, #116]	; (8000218 <main+0xbc>)
 80001a2:	f000 f97e 	bl	80004a2 <nrf24_init>
	nrf24_setDataRate(&nrfRx, _250kbs);
 80001a6:	2100      	movs	r1, #0
 80001a8:	481b      	ldr	r0, [pc, #108]	; (8000218 <main+0xbc>)
 80001aa:	f000 f9b4 	bl	8000516 <nrf24_setDataRate>
	nrf24_setPALevel(&nrfRx, high);
 80001ae:	2103      	movs	r1, #3
 80001b0:	4819      	ldr	r0, [pc, #100]	; (8000218 <main+0xbc>)
 80001b2:	f000 f9fb 	bl	80005ac <nrf24_setPALevel>

	nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 80001b6:	2316      	movs	r3, #22
 80001b8:	2200      	movs	r2, #0
 80001ba:	491b      	ldr	r1, [pc, #108]	; (8000228 <main+0xcc>)
 80001bc:	4816      	ldr	r0, [pc, #88]	; (8000218 <main+0xbc>)
 80001be:	f000 fab5 	bl	800072c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
 80001c2:	2316      	movs	r3, #22
 80001c4:	2201      	movs	r2, #1
 80001c6:	4919      	ldr	r1, [pc, #100]	; (800022c <main+0xd0>)
 80001c8:	4813      	ldr	r0, [pc, #76]	; (8000218 <main+0xbc>)
 80001ca:	f000 faaf 	bl	800072c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
 80001ce:	2316      	movs	r3, #22
 80001d0:	2202      	movs	r2, #2
 80001d2:	4917      	ldr	r1, [pc, #92]	; (8000230 <main+0xd4>)
 80001d4:	4810      	ldr	r0, [pc, #64]	; (8000218 <main+0xbc>)
 80001d6:	f000 faa9 	bl	800072c <nrf24_setRxPipe>
	nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
 80001da:	2316      	movs	r3, #22
 80001dc:	2203      	movs	r2, #3
 80001de:	4915      	ldr	r1, [pc, #84]	; (8000234 <main+0xd8>)
 80001e0:	480d      	ldr	r0, [pc, #52]	; (8000218 <main+0xbc>)
 80001e2:	f000 faa3 	bl	800072c <nrf24_setRxPipe>
	nrf24_setMode(&nrfRx, rxMode);
 80001e6:	2103      	movs	r1, #3
 80001e8:	480b      	ldr	r0, [pc, #44]	; (8000218 <main+0xbc>)
 80001ea:	f000 fa4d 	bl	8000688 <nrf24_setMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (int i = 0; i < 4; i++) {
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e00d      	b.n	8000210 <main+0xb4>
			if (isDataAvailable(&nrfRx, i) == 1) readData();
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	4619      	mov	r1, r3
 80001fa:	4807      	ldr	r0, [pc, #28]	; (8000218 <main+0xbc>)
 80001fc:	f000 fb2a 	bl	8000854 <isDataAvailable>
 8000200:	4603      	mov	r3, r0
 8000202:	2b01      	cmp	r3, #1
 8000204:	d101      	bne.n	800020a <main+0xae>
 8000206:	f000 f929 	bl	800045c <readData>
		for (int i = 0; i < 4; i++) {
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b03      	cmp	r3, #3
 8000214:	ddee      	ble.n	80001f4 <main+0x98>
 8000216:	e7ea      	b.n	80001ee <main+0x92>
 8000218:	20000210 	.word	0x20000210
 800021c:	40010c00 	.word	0x40010c00
 8000220:	40010800 	.word	0x40010800
 8000224:	200001b8 	.word	0x200001b8
 8000228:	20000000 	.word	0x20000000
 800022c:	20000008 	.word	0x20000008
 8000230:	20000018 	.word	0x20000018
 8000234:	20000010 	.word	0x20000010

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f008 fe14 	bl	8008e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fdde 	bl	8002e50 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f8fd 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 f84a 	bl	8003354 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 f8e7 	bl	8000498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ca:	2310      	movs	r3, #16
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 f9a3 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e0:	f000 f8da 	bl	8000498 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3750      	adds	r7, #80	; 0x50
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_SPI1_Init+0x64>)
 80002f2:	4a18      	ldr	r2, [pc, #96]	; (8000354 <MX_SPI1_Init+0x68>)
 80002f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <MX_SPI1_Init+0x64>)
 80002f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_SPI1_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_SPI1_Init+0x64>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_SPI1_Init+0x64>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_SPI1_Init+0x64>)
 8000312:	2200      	movs	r2, #0
 8000314:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_SPI1_Init+0x64>)
 8000318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800031c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_SPI1_Init+0x64>)
 8000320:	2208      	movs	r2, #8
 8000322:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <MX_SPI1_Init+0x64>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_SPI1_Init+0x64>)
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_SPI1_Init+0x64>)
 8000332:	2200      	movs	r2, #0
 8000334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_SPI1_Init+0x64>)
 8000338:	220a      	movs	r2, #10
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_SPI1_Init+0x64>)
 800033e:	f003 fa25 	bl	800378c <HAL_SPI_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000348:	f000 f8a6 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200001b8 	.word	0x200001b8
 8000354:	40013000 	.word	0x40013000

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <MX_GPIO_Init+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a36      	ldr	r2, [pc, #216]	; (800044c <MX_GPIO_Init+0xf4>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b34      	ldr	r3, [pc, #208]	; (800044c <MX_GPIO_Init+0xf4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <MX_GPIO_Init+0xf4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a30      	ldr	r2, [pc, #192]	; (800044c <MX_GPIO_Init+0xf4>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <MX_GPIO_Init+0xf4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b2b      	ldr	r3, [pc, #172]	; (800044c <MX_GPIO_Init+0xf4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2a      	ldr	r2, [pc, #168]	; (800044c <MX_GPIO_Init+0xf4>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_GPIO_Init+0xf4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xf4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xf4>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <MX_GPIO_Init+0xf4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	481f      	ldr	r0, [pc, #124]	; (8000450 <MX_GPIO_Init+0xf8>)
 80003d4:	f001 f848 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|IRQ_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2118      	movs	r1, #24
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <MX_GPIO_Init+0xfc>)
 80003de:	f001 f843 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2101      	movs	r1, #1
 80003e6:	481c      	ldr	r0, [pc, #112]	; (8000458 <MX_GPIO_Init+0x100>)
 80003e8:	f001 f83e 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4812      	ldr	r0, [pc, #72]	; (8000450 <MX_GPIO_Init+0xf8>)
 8000406:	f000 feab 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|IRQ_Pin;
 800040a:	2318      	movs	r3, #24
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000416:	2302      	movs	r3, #2
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_GPIO_Init+0xfc>)
 8000422:	f000 fe9d 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000426:	2301      	movs	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2302      	movs	r3, #2
 8000434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_GPIO_Init+0x100>)
 800043e:	f000 fe8f 	bl	8001160 <HAL_GPIO_Init>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010800 	.word	0x40010800
 8000458:	40010c00 	.word	0x40010c00

0800045c <readData>:

/* USER CODE BEGIN 4 */
void readData(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	nrf24_Receive(&nrfRx, rxData, PAYLOAD);
 8000460:	2216      	movs	r2, #22
 8000462:	490a      	ldr	r1, [pc, #40]	; (800048c <readData+0x30>)
 8000464:	480a      	ldr	r0, [pc, #40]	; (8000490 <readData+0x34>)
 8000466:	f000 fa25 	bl	80008b4 <nrf24_Receive>
	CDC_Transmit_FS(rxData, strlen(rxData));
 800046a:	4808      	ldr	r0, [pc, #32]	; (800048c <readData+0x30>)
 800046c:	f7ff fe6e 	bl	800014c <strlen>
 8000470:	4603      	mov	r3, r0
 8000472:	b29b      	uxth	r3, r3
 8000474:	4619      	mov	r1, r3
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <readData+0x30>)
 8000478:	f008 f8fa 	bl	8008670 <CDC_Transmit_FS>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800047c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <readData+0x38>)
 8000482:	f001 f809 	bl	8001498 <HAL_GPIO_TogglePin>
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000230 	.word	0x20000230
 8000490:	20000210 	.word	0x20000210
 8000494:	40011000 	.word	0x40011000

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <Error_Handler+0x8>

080004a2 <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 fa54 	bl	8000958 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 fa7f 	bl	80009b8 <nrf24_writeReg>
	node->crc = no_CRC;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2200      	movs	r2, #0
 80004be:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 80004c0:	2200      	movs	r2, #0
 80004c2:	2101      	movs	r1, #1
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 fa77 	bl	80009b8 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 80004ca:	2200      	movs	r2, #0
 80004cc:	2102      	movs	r1, #2
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f000 fa72 	bl	80009b8 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 80004d4:	2203      	movs	r2, #3
 80004d6:	2103      	movs	r1, #3
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f000 fa6d 	bl	80009b8 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 80004de:	2200      	movs	r2, #0
 80004e0:	2104      	movs	r1, #4
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f000 fa68 	bl	80009b8 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 80004e8:	2100      	movs	r1, #0
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f813 	bl	8000516 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 80004f0:	2103      	movs	r1, #3
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 f85a 	bl	80005ac <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 80004f8:	2164      	movs	r1, #100	; 0x64
 80004fa:	6878      	ldr	r0, [r7, #4]
 80004fc:	f000 f8ae 	bl	800065c <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000500:	2101      	movs	r1, #1
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f8c0 	bl	8000688 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fa15 	bl	8000938 <nrf24_CE_enable>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b084      	sub	sp, #16
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	460b      	mov	r3, r1
 8000520:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 fa18 	bl	8000958 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000528:	2106      	movs	r1, #6
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 faab 	bl	8000a86 <nrf24_readReg>
 8000530:	4603      	mov	r3, r0
 8000532:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d01e      	beq.n	8000578 <nrf24_setDataRate+0x62>
 800053a:	2b02      	cmp	r3, #2
 800053c:	dc28      	bgt.n	8000590 <nrf24_setDataRate+0x7a>
 800053e:	2b00      	cmp	r3, #0
 8000540:	d002      	beq.n	8000548 <nrf24_setDataRate+0x32>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d00c      	beq.n	8000560 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000546:	e023      	b.n	8000590 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	f023 0308 	bic.w	r3, r3, #8
 8000556:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2200      	movs	r2, #0
 800055c:	775a      	strb	r2, [r3, #29]
			break;
 800055e:	e018      	b.n	8000592 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	f023 0320 	bic.w	r3, r3, #32
 8000566:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	f023 0308 	bic.w	r3, r3, #8
 800056e:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2201      	movs	r2, #1
 8000574:	775a      	strb	r2, [r3, #29]
			break;
 8000576:	e00c      	b.n	8000592 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f023 0320 	bic.w	r3, r3, #32
 800057e:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2202      	movs	r2, #2
 800058c:	775a      	strb	r2, [r3, #29]
			break;
 800058e:	e000      	b.n	8000592 <nrf24_setDataRate+0x7c>
			break;
 8000590:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	461a      	mov	r2, r3
 8000596:	2106      	movs	r1, #6
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 fa0d 	bl	80009b8 <nrf24_writeReg>
	nrf24_CE_enable(node);
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f9ca 	bl	8000938 <nrf24_CE_enable>
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 f9cd 	bl	8000958 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 80005be:	2106      	movs	r1, #6
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 fa60 	bl	8000a86 <nrf24_readReg>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d837      	bhi.n	8000640 <nrf24_setPALevel+0x94>
 80005d0:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <nrf24_setPALevel+0x2c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	08000601 	.word	0x08000601
 80005e0:	08000619 	.word	0x08000619
 80005e4:	08000631 	.word	0x08000631
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f023 0304 	bic.w	r3, r3, #4
 80005ee:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f023 0302 	bic.w	r3, r3, #2
 80005f6:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	771a      	strb	r2, [r3, #28]
			break;
 80005fe:	e020      	b.n	8000642 <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	f023 0304 	bic.w	r3, r3, #4
 8000606:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	f043 0302 	orr.w	r3, r3, #2
 800060e:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2201      	movs	r2, #1
 8000614:	771a      	strb	r2, [r3, #28]
			break;
 8000616:	e014      	b.n	8000642 <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0302 	bic.w	r3, r3, #2
 8000626:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2202      	movs	r2, #2
 800062c:	771a      	strb	r2, [r3, #28]
			break;
 800062e:	e008      	b.n	8000642 <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f043 0306 	orr.w	r3, r3, #6
 8000636:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2203      	movs	r2, #3
 800063c:	771a      	strb	r2, [r3, #28]
			break;
 800063e:	e000      	b.n	8000642 <nrf24_setPALevel+0x96>

		default:
			break;
 8000640:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	461a      	mov	r2, r3
 8000646:	2106      	movs	r1, #6
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f000 f9b5 	bl	80009b8 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f972 	bl	8000938 <nrf24_CE_enable>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f975 	bl	8000958 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	461a      	mov	r2, r3
 8000672:	2105      	movs	r1, #5
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f99f 	bl	80009b8 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f95c 	bl	8000938 <nrf24_CE_enable>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f9f5 	bl	8000a86 <nrf24_readReg>
 800069c:	4603      	mov	r3, r0
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 80006a0:	78fb      	ldrb	r3, [r7, #3]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d837      	bhi.n	8000716 <nrf24_setMode+0x8e>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <nrf24_setMode+0x24>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006cd 	.word	0x080006cd
 80006b4:	080006e3 	.word	0x080006e3
 80006b8:	08000701 	.word	0x08000701
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	f023 0302 	bic.w	r3, r3, #2
 80006c2:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2200      	movs	r2, #0
 80006c8:	779a      	strb	r2, [r3, #30]
			break;
 80006ca:	e025      	b.n	8000718 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f943 	bl	8000958 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2201      	movs	r2, #1
 80006de:	779a      	strb	r2, [r3, #30]
			break;
 80006e0:	e01a      	b.n	8000718 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f928 	bl	8000938 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f043 0302 	orr.w	r3, r3, #2
 80006ee:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f023 0301 	bic.w	r3, r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2202      	movs	r2, #2
 80006fc:	779a      	strb	r2, [r3, #30]
			break;
 80006fe:	e00b      	b.n	8000718 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f919 	bl	8000938 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	f043 0303 	orr.w	r3, r3, #3
 800070c:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2203      	movs	r2, #3
 8000712:	779a      	strb	r2, [r3, #30]
			break;
 8000714:	e000      	b.n	8000718 <nrf24_setMode+0x90>

		default:
			break;
 8000716:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	461a      	mov	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f94a 	bl	80009b8 <nrf24_writeReg>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	4611      	mov	r1, r2
 8000738:	461a      	mov	r2, r3
 800073a:	460b      	mov	r3, r1
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	4613      	mov	r3, r2
 8000740:	71bb      	strb	r3, [r7, #6]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 f908 	bl	8000958 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 8000748:	2107      	movs	r1, #7
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f000 f9ea 	bl	8000b24 <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000750:	2102      	movs	r1, #2
 8000752:	68f8      	ldr	r0, [r7, #12]
 8000754:	f000 f997 	bl	8000a86 <nrf24_readReg>
 8000758:	4603      	mov	r3, r0
 800075a:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2201      	movs	r2, #1
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	b25a      	sxtb	r2, r3
 8000766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800076a:	4313      	orrs	r3, r2
 800076c:	b25b      	sxtb	r3, r3
 800076e:	75fb      	strb	r3, [r7, #23]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	461a      	mov	r2, r3
 8000774:	2102      	movs	r1, #2
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f000 f91e 	bl	80009b8 <nrf24_writeReg>
	/* We must write the address for Data Pipe 1, if we want to use any pipe from 2 to 5
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1
	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b05      	cmp	r3, #5
 8000780:	d860      	bhi.n	8000844 <nrf24_setRxPipe+0x118>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <nrf24_setRxPipe+0x5c>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	080007a1 	.word	0x080007a1
 800078c:	080007bb 	.word	0x080007bb
 8000790:	080007d5 	.word	0x080007d5
 8000794:	080007f1 	.word	0x080007f1
 8000798:	0800080d 	.word	0x0800080d
 800079c:	08000829 	.word	0x08000829
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 80007a0:	2305      	movs	r3, #5
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	210a      	movs	r1, #10
 80007a6:	68f8      	ldr	r0, [r7, #12]
 80007a8:	f000 f931 	bl	8000a0e <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	461a      	mov	r2, r3
 80007b0:	2111      	movs	r1, #17
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f900 	bl	80009b8 <nrf24_writeReg>
			break;
 80007b8:	e045      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 80007ba:	2305      	movs	r3, #5
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	210b      	movs	r1, #11
 80007c0:	68f8      	ldr	r0, [r7, #12]
 80007c2:	f000 f924 	bl	8000a0e <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	461a      	mov	r2, r3
 80007ca:	2112      	movs	r1, #18
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f000 f8f3 	bl	80009b8 <nrf24_writeReg>
			break;
 80007d2:	e038      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	210c      	movs	r1, #12
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f000 f8eb 	bl	80009b8 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 80007e2:	79bb      	ldrb	r3, [r7, #6]
 80007e4:	461a      	mov	r2, r3
 80007e6:	2113      	movs	r1, #19
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f000 f8e5 	bl	80009b8 <nrf24_writeReg>
			break;
 80007ee:	e02a      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	210d      	movs	r1, #13
 80007f8:	68f8      	ldr	r0, [r7, #12]
 80007fa:	f000 f8dd 	bl	80009b8 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	461a      	mov	r2, r3
 8000802:	2114      	movs	r1, #20
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f000 f8d7 	bl	80009b8 <nrf24_writeReg>
			break;
 800080a:	e01c      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	210e      	movs	r1, #14
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f000 f8cf 	bl	80009b8 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	461a      	mov	r2, r3
 800081e:	2115      	movs	r1, #21
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 f8c9 	bl	80009b8 <nrf24_writeReg>
			break;
 8000826:	e00e      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	210f      	movs	r1, #15
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 f8c1 	bl	80009b8 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	461a      	mov	r2, r3
 800083a:	2116      	movs	r1, #22
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f000 f8bb 	bl	80009b8 <nrf24_writeReg>
			break;
 8000842:	e000      	b.n	8000846 <nrf24_setRxPipe+0x11a>

		default:
			break;
 8000844:	bf00      	nop
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f876 	bl	8000938 <nrf24_CE_enable>
}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <isDataAvailable>:
// -----------------------------------------------------------------------------

uint8_t isDataAvailable(nrf24 *node, uint8_t pipenum) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
	uint8_t status = nrf24_readReg(node, STATUS);
 8000860:	2107      	movs	r1, #7
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f90f 	bl	8000a86 <nrf24_readReg>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]
	if ((status - 64 == 0) && pipenum == 0) {
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	2b40      	cmp	r3, #64	; 0x40
 8000870:	d109      	bne.n	8000886 <isDataAvailable+0x32>
 8000872:	78fb      	ldrb	r3, [r7, #3]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d106      	bne.n	8000886 <isDataAvailable+0x32>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	2107      	movs	r1, #7
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f89b 	bl	80009b8 <nrf24_writeReg>
		return 1;
 8000882:	2301      	movs	r3, #1
 8000884:	e012      	b.n	80008ac <isDataAvailable+0x58>
	}
	else if ((status & (1 << 6)) && (status & (pipenum << 1))) {
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00c      	beq.n	80008aa <isDataAvailable+0x56>
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	78fb      	ldrb	r3, [r7, #3]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4013      	ands	r3, r2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d006      	beq.n	80008aa <isDataAvailable+0x56>
		nrf24_writeReg(node, STATUS, (1 << 6));
 800089c:	2240      	movs	r2, #64	; 0x40
 800089e:	2107      	movs	r1, #7
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f889 	bl	80009b8 <nrf24_writeReg>
		return 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e000      	b.n	80008ac <isDataAvailable+0x58>
	}
	return 0;
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <nrf24_Receive>:
// -----------------------------------------------------------------------------

void nrf24_Receive(nrf24 *node, uint8_t *data, uint8_t len) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	4613      	mov	r3, r2
 80008c0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]

	nrf24_CSN_enable(node);		//select the device
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f856 	bl	8000978 <nrf24_CSN_enable>
	cmdtosend = R_RX_PAYLOAD;	//payload command
 80008cc:	2361      	movs	r3, #97	; 0x61
 80008ce:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6998      	ldr	r0, [r3, #24]
 80008d4:	f107 0117 	add.w	r1, r7, #23
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	2201      	movs	r2, #1
 80008dc:	f002 ffda 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80008e0:	bf00      	nop
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fbc3 	bl	8004072 <HAL_SPI_GetState>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d1f7      	bne.n	80008e2 <nrf24_Receive+0x2e>
	//Receive the payload
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6998      	ldr	r0, [r3, #24]
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	f003 f904 	bl	8003b0c <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000904:	bf00      	nop
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fbb1 	bl	8004072 <HAL_SPI_GetState>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1f7      	bne.n	8000906 <nrf24_Receive+0x52>
	nrf24_CSN_disable(node);	//Unselect the device
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 f83e 	bl	8000998 <nrf24_CSN_disable>
	HAL_Delay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f000 faed 	bl	8000efc <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000922:	23e2      	movs	r3, #226	; 0xe2
 8000924:	75fb      	strb	r3, [r7, #23]
	nrf_sendCmd(node, cmdtosend);
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f000 f8d8 	bl	8000ae0 <nrf_sendCmd>
}
 8000930:	bf00      	nop
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6898      	ldr	r0, [r3, #8]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	899b      	ldrh	r3, [r3, #12]
 8000948:	2201      	movs	r2, #1
 800094a:	4619      	mov	r1, r3
 800094c:	f000 fd8c 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6898      	ldr	r0, [r3, #8]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	899b      	ldrh	r3, [r3, #12]
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	f000 fd7c 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	889b      	ldrh	r3, [r3, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	4619      	mov	r1, r3
 800098c:	f000 fd6c 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	889b      	ldrh	r3, [r3, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	f000 fd5c 	bl	8001468 <HAL_GPIO_WritePin>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
 80009c4:	4613      	mov	r3, r2
 80009c6:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80009d2:	78bb      	ldrb	r3, [r7, #2]
 80009d4:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffce 	bl	8000978 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6998      	ldr	r0, [r3, #24]
 80009e0:	f107 010c 	add.w	r1, r7, #12
 80009e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009e8:	2202      	movs	r2, #2
 80009ea:	f002 ff53 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80009ee:	bf00      	nop
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fb3c 	bl	8004072 <HAL_SPI_GetState>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d1f7      	bne.n	80009f0 <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f7ff ffc9 	bl	8000998 <nrf24_CSN_disable>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	72fb      	strb	r3, [r7, #11]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000a22:	7afb      	ldrb	r3, [r7, #11]
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	f7ff ffa3 	bl	8000978 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6998      	ldr	r0, [r3, #24]
 8000a36:	f107 0114 	add.w	r1, r7, #20
 8000a3a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f002 ff28 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000a44:	bf00      	nop
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 fb11 	bl	8004072 <HAL_SPI_GetState>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d1f7      	bne.n	8000a46 <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6998      	ldr	r0, [r3, #24]
 8000a5a:	893a      	ldrh	r2, [r7, #8]
 8000a5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	f002 ff17 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000a66:	bf00      	nop
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fb00 	bl	8004072 <HAL_SPI_GetState>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d1f7      	bne.n	8000a68 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff ff8d 	bl	8000998 <nrf24_CSN_disable>
}
 8000a7e:	bf00      	nop
 8000a80:	3718      	adds	r7, #24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff ff6e 	bl	8000978 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6998      	ldr	r0, [r3, #24]
 8000aa0:	1cf9      	adds	r1, r7, #3
 8000aa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f002 fef4 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000aac:	bf00      	nop
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f003 fadd 	bl	8004072 <HAL_SPI_GetState>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d1f7      	bne.n	8000aae <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6998      	ldr	r0, [r3, #24]
 8000ac2:	f107 010f 	add.w	r1, r7, #15
 8000ac6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000aca:	2201      	movs	r2, #1
 8000acc:	f003 f81e 	bl	8003b0c <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff61 	bl	8000998 <nrf24_CSN_disable>
	return data;
 8000ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
	nrf24_CSN_enable(node);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff43 	bl	8000978 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6998      	ldr	r0, [r3, #24]
 8000af6:	1cf9      	adds	r1, r7, #3
 8000af8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000afc:	2201      	movs	r2, #1
 8000afe:	f002 fec9 	bl	8003894 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000b02:	bf00      	nop
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fab2 	bl	8004072 <HAL_SPI_GetState>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d1f7      	bne.n	8000b04 <nrf_sendCmd+0x24>
	nrf24_CSN_disable(node);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff3f 	bl	8000998 <nrf24_CSN_disable>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d105      	bne.n	8000b42 <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2107      	movs	r1, #7
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ff3c 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000b40:	e0a8      	b.n	8000c94 <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	2b17      	cmp	r3, #23
 8000b46:	d105      	bne.n	8000b54 <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000b48:	2211      	movs	r2, #17
 8000b4a:	2117      	movs	r1, #23
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff33 	bl	80009b8 <nrf24_writeReg>
}
 8000b52:	e09f      	b.n	8000c94 <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000b54:	2208      	movs	r2, #8
 8000b56:	2100      	movs	r1, #0
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff2d 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000b5e:	223f      	movs	r2, #63	; 0x3f
 8000b60:	2101      	movs	r1, #1
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff28 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000b68:	2203      	movs	r2, #3
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff23 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000b72:	2203      	movs	r2, #3
 8000b74:	2103      	movs	r1, #3
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff1e 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	2104      	movs	r1, #4
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff19 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000b86:	2202      	movs	r2, #2
 8000b88:	2105      	movs	r1, #5
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ff14 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000b90:	220e      	movs	r2, #14
 8000b92:	2106      	movs	r1, #6
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff0f 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2107      	movs	r1, #7
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ff0a 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ff05 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2109      	movs	r1, #9
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff00 	bl	80009b8 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000bb8:	4a38      	ldr	r2, [pc, #224]	; (8000c9c <nrf24_reset+0x178>)
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc2:	6018      	str	r0, [r3, #0]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000bc8:	f107 0218 	add.w	r2, r7, #24
 8000bcc:	2305      	movs	r3, #5
 8000bce:	210a      	movs	r1, #10
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff1c 	bl	8000a0e <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000bd6:	4a32      	ldr	r2, [pc, #200]	; (8000ca0 <nrf24_reset+0x17c>)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be0:	6018      	str	r0, [r3, #0]
 8000be2:	3304      	adds	r3, #4
 8000be4:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000be6:	f107 0210 	add.w	r2, r7, #16
 8000bea:	2305      	movs	r3, #5
 8000bec:	210b      	movs	r1, #11
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ff0d 	bl	8000a0e <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000bf4:	22c3      	movs	r2, #195	; 0xc3
 8000bf6:	210c      	movs	r1, #12
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fedd 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000bfe:	22c4      	movs	r2, #196	; 0xc4
 8000c00:	210d      	movs	r1, #13
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fed8 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000c08:	22c5      	movs	r2, #197	; 0xc5
 8000c0a:	210e      	movs	r1, #14
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fed3 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000c12:	22c6      	movs	r2, #198	; 0xc6
 8000c14:	210f      	movs	r1, #15
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fece 	bl	80009b8 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <nrf24_reset+0x178>)
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c26:	6018      	str	r0, [r3, #0]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000c2c:	f107 0208 	add.w	r2, r7, #8
 8000c30:	2305      	movs	r3, #5
 8000c32:	2110      	movs	r1, #16
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff feea 	bl	8000a0e <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2111      	movs	r1, #17
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff feba 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2112      	movs	r1, #18
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff feb5 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2113      	movs	r1, #19
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff feb0 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2114      	movs	r1, #20
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff feab 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2115      	movs	r1, #21
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fea6 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2116      	movs	r1, #22
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fea1 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000c76:	2211      	movs	r2, #17
 8000c78:	2117      	movs	r1, #23
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fe9c 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	211c      	movs	r1, #28
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff fe97 	bl	80009b8 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	211d      	movs	r1, #29
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fe92 	bl	80009b8 <nrf24_writeReg>
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08008e9c 	.word	0x08008e9c
 8000ca0:	08008ea4 	.word	0x08008ea4

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6193      	str	r3, [r2, #24]
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_MspInit+0x40>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d12f      	bne.n	8000d68 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d08:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d38:	23a0      	movs	r3, #160	; 0xa0
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_SPI_MspInit+0x90>)
 8000d4c:	f000 fa08 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_SPI_MspInit+0x90>)
 8000d64:	f000 f9fc 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40013000 	.word	0x40013000
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f87f 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000dd2:	f000 fcab 	bl	800172c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000ee4 	.word	0x20000ee4

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e12:	f7ff ffe5 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f008 f809 	bl	8008e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff f99f 	bl	800015c <main>
  bx lr
 8000e1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8000e28:	08008f1c 	.word	0x08008f1c
  ldr r2, =_sbss
 8000e2c:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8000e30:	200013f0 	.word	0x200013f0

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x28>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f947 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff ff26 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f95f 	bl	8001146 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f927 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000020 	.word	0x20000020
 8000ebc:	20000028 	.word	0x20000028
 8000ec0:	20000024 	.word	0x20000024

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000028 	.word	0x20000028
 8000ee4:	20000248 	.word	0x20000248

08000ee8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000248 	.word	0x20000248

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff fff0 	bl	8000ee8 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffe0 	bl	8000ee8 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000028 	.word	0x20000028

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <__NVIC_EnableIRQ+0x34>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff90 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2d 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff42 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff90 	bl	8001034 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5f 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b08b      	sub	sp, #44	; 0x2c
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e169      	b.n	8001448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001174:	2201      	movs	r2, #1
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 8158 	bne.w	8001442 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a9a      	ldr	r2, [pc, #616]	; (8001400 <HAL_GPIO_Init+0x2a0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d05e      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 800119c:	4a98      	ldr	r2, [pc, #608]	; (8001400 <HAL_GPIO_Init+0x2a0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d875      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011a2:	4a98      	ldr	r2, [pc, #608]	; (8001404 <HAL_GPIO_Init+0x2a4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d058      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011a8:	4a96      	ldr	r2, [pc, #600]	; (8001404 <HAL_GPIO_Init+0x2a4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d86f      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ae:	4a96      	ldr	r2, [pc, #600]	; (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d052      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011b4:	4a94      	ldr	r2, [pc, #592]	; (8001408 <HAL_GPIO_Init+0x2a8>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d869      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011ba:	4a94      	ldr	r2, [pc, #592]	; (800140c <HAL_GPIO_Init+0x2ac>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d04c      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011c0:	4a92      	ldr	r2, [pc, #584]	; (800140c <HAL_GPIO_Init+0x2ac>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d863      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011c6:	4a92      	ldr	r2, [pc, #584]	; (8001410 <HAL_GPIO_Init+0x2b0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d046      	beq.n	800125a <HAL_GPIO_Init+0xfa>
 80011cc:	4a90      	ldr	r2, [pc, #576]	; (8001410 <HAL_GPIO_Init+0x2b0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d85d      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011d2:	2b12      	cmp	r3, #18
 80011d4:	d82a      	bhi.n	800122c <HAL_GPIO_Init+0xcc>
 80011d6:	2b12      	cmp	r3, #18
 80011d8:	d859      	bhi.n	800128e <HAL_GPIO_Init+0x12e>
 80011da:	a201      	add	r2, pc, #4	; (adr r2, 80011e0 <HAL_GPIO_Init+0x80>)
 80011dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	08001235 	.word	0x08001235
 80011e8:	08001247 	.word	0x08001247
 80011ec:	08001289 	.word	0x08001289
 80011f0:	0800128f 	.word	0x0800128f
 80011f4:	0800128f 	.word	0x0800128f
 80011f8:	0800128f 	.word	0x0800128f
 80011fc:	0800128f 	.word	0x0800128f
 8001200:	0800128f 	.word	0x0800128f
 8001204:	0800128f 	.word	0x0800128f
 8001208:	0800128f 	.word	0x0800128f
 800120c:	0800128f 	.word	0x0800128f
 8001210:	0800128f 	.word	0x0800128f
 8001214:	0800128f 	.word	0x0800128f
 8001218:	0800128f 	.word	0x0800128f
 800121c:	0800128f 	.word	0x0800128f
 8001220:	0800128f 	.word	0x0800128f
 8001224:	0800123d 	.word	0x0800123d
 8001228:	08001251 	.word	0x08001251
 800122c:	4a79      	ldr	r2, [pc, #484]	; (8001414 <HAL_GPIO_Init+0x2b4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001232:	e02c      	b.n	800128e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e029      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	3304      	adds	r3, #4
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e024      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	3308      	adds	r3, #8
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e01f      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	330c      	adds	r3, #12
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e01a      	b.n	8001290 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001262:	2304      	movs	r3, #4
 8001264:	623b      	str	r3, [r7, #32]
          break;
 8001266:	e013      	b.n	8001290 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001270:	2308      	movs	r3, #8
 8001272:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	611a      	str	r2, [r3, #16]
          break;
 800127a:	e009      	b.n	8001290 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800127c:	2308      	movs	r3, #8
 800127e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	615a      	str	r2, [r3, #20]
          break;
 8001286:	e003      	b.n	8001290 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x130>
          break;
 800128e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d801      	bhi.n	800129a <HAL_GPIO_Init+0x13a>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	e001      	b.n	800129e <HAL_GPIO_Init+0x13e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d802      	bhi.n	80012ac <HAL_GPIO_Init+0x14c>
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x152>
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	3b08      	subs	r3, #8
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	210f      	movs	r1, #15
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	401a      	ands	r2, r3
 80012c4:	6a39      	ldr	r1, [r7, #32]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	fa01 f303 	lsl.w	r3, r1, r3
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 80b1 	beq.w	8001442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	4b4d      	ldr	r3, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_GPIO_Init+0x2b8>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f8:	4a48      	ldr	r2, [pc, #288]	; (800141c <HAL_GPIO_Init+0x2bc>)
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a40      	ldr	r2, [pc, #256]	; (8001420 <HAL_GPIO_Init+0x2c0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1ec>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3f      	ldr	r2, [pc, #252]	; (8001424 <HAL_GPIO_Init+0x2c4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1e8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3e      	ldr	r2, [pc, #248]	; (8001428 <HAL_GPIO_Init+0x2c8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1e4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a3d      	ldr	r2, [pc, #244]	; (800142c <HAL_GPIO_Init+0x2cc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1e0>
 800133c:	2303      	movs	r3, #3
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001340:	2304      	movs	r3, #4
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1ee>
 800134c:	2300      	movs	r3, #0
 800134e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800135e:	492f      	ldr	r1, [pc, #188]	; (800141c <HAL_GPIO_Init+0x2bc>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	492c      	ldr	r1, [pc, #176]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4928      	ldr	r1, [pc, #160]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d006      	beq.n	80013ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4922      	ldr	r1, [pc, #136]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	491e      	ldr	r1, [pc, #120]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4918      	ldr	r1, [pc, #96]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4914      	ldr	r1, [pc, #80]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d021      	beq.n	8001434 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	490e      	ldr	r1, [pc, #56]	; (8001430 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e021      	b.n	8001442 <HAL_GPIO_Init+0x2e2>
 80013fe:	bf00      	nop
 8001400:	10320000 	.word	0x10320000
 8001404:	10310000 	.word	0x10310000
 8001408:	10220000 	.word	0x10220000
 800140c:	10210000 	.word	0x10210000
 8001410:	10120000 	.word	0x10120000
 8001414:	10110000 	.word	0x10110000
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	40010800 	.word	0x40010800
 8001424:	40010c00 	.word	0x40010c00
 8001428:	40011000 	.word	0x40011000
 800142c:	40011400 	.word	0x40011400
 8001430:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	43db      	mvns	r3, r3
 800143c:	4909      	ldr	r1, [pc, #36]	; (8001464 <HAL_GPIO_Init+0x304>)
 800143e:	4013      	ands	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	3301      	adds	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	fa22 f303 	lsr.w	r3, r2, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	f47f ae8e 	bne.w	8001174 <HAL_GPIO_Init+0x14>
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	372c      	adds	r7, #44	; 0x2c
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4013      	ands	r3, r2
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43d9      	mvns	r1, r3
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	400b      	ands	r3, r1
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014cc:	b08b      	sub	sp, #44	; 0x2c
 80014ce:	af06      	add	r7, sp, #24
 80014d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0fd      	b.n	80016d8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f007 f9f1 	bl	80088d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fee0 	bl	80042c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	687e      	ldr	r6, [r7, #4]
 8001510:	466d      	mov	r5, sp
 8001512:	f106 0410 	add.w	r4, r6, #16
 8001516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	602b      	str	r3, [r5, #0]
 800151e:	1d33      	adds	r3, r6, #4
 8001520:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	f002 feaa 	bl	800427c <USB_CoreInit>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2202      	movs	r2, #2
 8001532:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0ce      	b.n	80016d8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fedb 	bl	80042fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e04c      	b.n	80015e6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3301      	adds	r3, #1
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	440b      	add	r3, r1
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001576:	7bfa      	ldrb	r2, [r7, #15]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	b298      	uxth	r0, r3
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	440b      	add	r3, r1
 8001588:	3336      	adds	r3, #54	; 0x36
 800158a:	4602      	mov	r2, r0
 800158c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	3303      	adds	r3, #3
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	3338      	adds	r3, #56	; 0x38
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	333c      	adds	r3, #60	; 0x3c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3340      	adds	r3, #64	; 0x40
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	3301      	adds	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d3ad      	bcc.n	800154c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e044      	b.n	8001680 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015f6:	7bfa      	ldrb	r2, [r7, #15]
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	440b      	add	r3, r1
 800161a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	3301      	adds	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3b5      	bcc.n	80015f6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	687e      	ldr	r6, [r7, #4]
 8001692:	466d      	mov	r5, sp
 8001694:	f106 0410 	add.w	r4, r6, #16
 8001698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	1d33      	adds	r3, r6, #4
 80016a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f002 fe35 	bl	8004314 <USB_DevInit>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00d      	b.n	80016d8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 fae7 	bl	8006ca4 <USB_DevDisconnect>

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_PCD_Start+0x16>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e016      	b.n	8001724 <HAL_PCD_Start+0x44>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fdca 	bl	800429c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001708:	2101      	movs	r1, #1
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f007 fb57 	bl	8008dbe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fabb 	bl	8006c90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f005 fabd 	bl	8006cb8 <USB_ReadInterrupts>
 800173e:	4603      	mov	r3, r0
 8001740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001748:	d102      	bne.n	8001750 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fb5f 	bl	8001e0e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f005 faaf 	bl	8006cb8 <USB_ReadInterrupts>
 800175a:	4603      	mov	r3, r0
 800175c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001764:	d112      	bne.n	800178c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800176e:	b29a      	uxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001778:	b292      	uxth	r2, r2
 800177a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f007 f925 	bl	80089ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001784:	2100      	movs	r1, #0
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f923 	bl	80019d2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f005 fa91 	bl	8006cb8 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017a0:	d10b      	bne.n	80017ba <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fa7a 	bl	8006cb8 <USB_ReadInterrupts>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ce:	d10b      	bne.n	80017e8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d8:	b29a      	uxth	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 fa63 	bl	8006cb8 <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017fc:	d126      	bne.n	800184c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	b292      	uxth	r2, r2
 8001812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181e:	b29a      	uxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0208 	bic.w	r2, r2, #8
 8001828:	b292      	uxth	r2, r2
 800182a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f007 f906 	bl	8008a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001846:	b292      	uxth	r2, r2
 8001848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f005 fa31 	bl	8006cb8 <USB_ReadInterrupts>
 8001856:	4603      	mov	r3, r0
 8001858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001860:	f040 8082 	bne.w	8001968 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001864:	2300      	movs	r3, #0
 8001866:	77fb      	strb	r3, [r7, #31]
 8001868:	e010      	b.n	800188c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	7ffb      	ldrb	r3, [r7, #31]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	441a      	add	r2, r3
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	8812      	ldrh	r2, [r2, #0]
 800187a:	b292      	uxth	r2, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	3320      	adds	r3, #32
 8001880:	443b      	add	r3, r7
 8001882:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	3301      	adds	r3, #1
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	2b07      	cmp	r3, #7
 8001890:	d9eb      	bls.n	800186a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	b292      	uxth	r2, r2
 80018a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	b292      	uxth	r2, r2
 80018be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018c2:	bf00      	nop
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f6      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
 80018f2:	e00f      	b.n	8001914 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4611      	mov	r1, r2
 80018fc:	7ffa      	ldrb	r2, [r7, #31]
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	440a      	add	r2, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	3320      	adds	r3, #32
 8001906:	443b      	add	r3, r7
 8001908:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800190c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	3301      	adds	r3, #1
 8001912:	77fb      	strb	r3, [r7, #31]
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d9ec      	bls.n	80018f4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0208 	orr.w	r2, r2, #8
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001944:	b292      	uxth	r2, r2
 8001946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0204 	orr.w	r2, r2, #4
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f007 f852 	bl	8008a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f005 f9a3 	bl	8006cb8 <USB_ReadInterrupts>
 8001972:	4603      	mov	r3, r0
 8001974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800197c:	d10e      	bne.n	800199c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001986:	b29a      	uxth	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	b292      	uxth	r2, r2
 8001992:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f007 f80b 	bl	80089b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f005 f989 	bl	8006cb8 <USB_ReadInterrupts>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b0:	d10b      	bne.n	80019ca <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c4:	b292      	uxth	r2, r2
 80019c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_PCD_SetAddress+0x1a>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e013      	b.n	8001a14 <HAL_PCD_SetAddress+0x42>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f005 f930 	bl	8006c6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	70fb      	strb	r3, [r7, #3]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	803b      	strh	r3, [r7, #0]
 8001a32:	4613      	mov	r3, r2
 8001a34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da0e      	bge.n	8001a60 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	705a      	strb	r2, [r3, #1]
 8001a5e:	e00e      	b.n	8001a7e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 0207 	and.w	r2, r3, #7
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a8a:	883a      	ldrh	r2, [r7, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	78ba      	ldrb	r2, [r7, #2]
 8001a94:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	785b      	ldrb	r3, [r3, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aa8:	78bb      	ldrb	r3, [r7, #2]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d102      	bne.n	8001ab4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_PCD_EP_Open+0xa6>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e00e      	b.n	8001ae0 <HAL_PCD_EP_Open+0xc4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68f9      	ldr	r1, [r7, #12]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 fc3f 	bl	8004354 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ade:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da0e      	bge.n	8001b1a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	705a      	strb	r2, [r3, #1]
 8001b18:	e00e      	b.n	8001b38 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 0207 	and.w	r2, r3, #7
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_EP_Close+0x6a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e00e      	b.n	8001b70 <HAL_PCD_EP_Close+0x88>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 ff61 	bl	8004a28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 0207 	and.w	r2, r3, #7
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb8:	7afb      	ldrb	r3, [r7, #11]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6979      	ldr	r1, [r7, #20]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f913 	bl	8004e00 <USB_EPStartXfer>
 8001bda:	e005      	b.n	8001be8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6979      	ldr	r1, [r7, #20]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 f90c 	bl	8004e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	f003 0207 	and.w	r2, r3, #7
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c14:	681b      	ldr	r3, [r3, #0]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f8b9 	bl	8004e00 <USB_EPStartXfer>
 8001c8e:	e005      	b.n	8001c9c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6979      	ldr	r1, [r7, #20]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f8b2 	bl	8004e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 0207 	and.w	r2, r3, #7
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d901      	bls.n	8001cc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04c      	b.n	8001d5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0e      	bge.n	8001cea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00c      	b.n	8001d04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_SetStall+0x7e>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e01c      	b.n	8001d5e <HAL_PCD_EP_SetStall+0xb8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fe9c 	bl	8006a70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d108      	bne.n	8001d54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f004 ffc1 	bl	8006cd6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 020f 	and.w	r2, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d901      	bls.n	8001d84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e040      	b.n	8001e06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da0e      	bge.n	8001daa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	705a      	strb	r2, [r3, #1]
 8001da8:	e00e      	b.n	8001dc8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 0207 	and.w	r2, r3, #7
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_PCD_EP_ClrStall+0x82>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_ClrStall+0xa0>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68f9      	ldr	r1, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fe8a 	bl	8006b10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b08e      	sub	sp, #56	; 0x38
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e16:	e2ec      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 8161 	bne.w	80020fa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d152      	bne.n	8001ee8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	81fb      	strh	r3, [r7, #14]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3328      	adds	r3, #40	; 0x28
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	3302      	adds	r3, #2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f006 fd68 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 829b 	beq.w	80023f2 <PCD_EP_ISR_Handler+0x5e4>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f040 8296 	bne.w	80023f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b292      	uxth	r2, r2
 8001eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ee6:	e284      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ef8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d034      	beq.n	8001f6c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	3306      	adds	r3, #6
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f004 ff18 	bl	8006d76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f52:	4013      	ands	r3, r2
 8001f54:	823b      	strh	r3, [r7, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	8a3a      	ldrh	r2, [r7, #16]
 8001f5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f60:	b292      	uxth	r2, r2
 8001f62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f006 fcdd 	bl	8008924 <HAL_PCD_SetupStageCallback>
 8001f6a:	e242      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f280 823e 	bge.w	80023f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f82:	4013      	ands	r3, r2
 8001f84:	83bb      	strh	r3, [r7, #28]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	8bba      	ldrh	r2, [r7, #28]
 8001f8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f90:	b292      	uxth	r2, r2
 8001f92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d019      	beq.n	8001ffc <PCD_EP_ISR_Handler+0x1ee>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d015      	beq.n	8001ffc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f004 fec8 	bl	8006d76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	441a      	add	r2, r3
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f006 fca6 	bl	8008948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002008:	2b00      	cmp	r3, #0
 800200a:	f040 81f2 	bne.w	80023f2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800201c:	b29b      	uxth	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4413      	add	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <PCD_EP_ISR_Handler+0x24e>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002040:	b29a      	uxth	r2, r3
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002054:	b29a      	uxth	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e02f      	b.n	80020bc <PCD_EP_ISR_Handler+0x2ae>
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b3e      	cmp	r3, #62	; 0x3e
 8002062:	d813      	bhi.n	800208c <PCD_EP_ISR_Handler+0x27e>
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	633b      	str	r3, [r7, #48]	; 0x30
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <PCD_EP_ISR_Handler+0x270>
 8002078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207a:	3301      	adds	r3, #1
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002080:	b29b      	uxth	r3, r3
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	b29a      	uxth	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	e017      	b.n	80020bc <PCD_EP_ISR_Handler+0x2ae>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	095b      	lsrs	r3, r3, #5
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <PCD_EP_ISR_Handler+0x298>
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	3b01      	subs	r3, #1
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020cc:	827b      	strh	r3, [r7, #18]
 80020ce:	8a7b      	ldrh	r3, [r7, #18]
 80020d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020d4:	827b      	strh	r3, [r7, #18]
 80020d6:	8a7b      	ldrh	r3, [r7, #18]
 80020d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020dc:	827b      	strh	r3, [r7, #18]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	8a7b      	ldrh	r3, [r7, #18]
 80020e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	8013      	strh	r3, [r2, #0]
 80020f8:	e17b      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800210c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002110:	2b00      	cmp	r3, #0
 8002112:	f280 80ea 	bge.w	80022ea <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29a      	uxth	r2, r3
 8002128:	f640 738f 	movw	r3, #3983	; 0xf8f
 800212c:	4013      	ands	r3, r2
 800212e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002144:	b292      	uxth	r2, r2
 8002146:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002148:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	7b1b      	ldrb	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d122      	bne.n	80021ac <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216e:	b29b      	uxth	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	3306      	adds	r3, #6
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002190:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	6959      	ldr	r1, [r3, #20]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	88da      	ldrh	r2, [r3, #6]
 80021a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a6:	f004 fde6 	bl	8006d76 <USB_ReadPMA>
 80021aa:	e07c      	b.n	80022a6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	78db      	ldrb	r3, [r3, #3]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d108      	bne.n	80021c6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b6:	461a      	mov	r2, r3
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f927 	bl	800240e <HAL_PCD_EP_DB_Receive>
 80021c0:	4603      	mov	r3, r0
 80021c2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021c4:	e06f      	b.n	80022a6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	441a      	add	r2, r3
 80021f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002202:	b29b      	uxth	r3, r3
 8002204:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	b29b      	uxth	r3, r3
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d021      	beq.n	8002264 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	3302      	adds	r3, #2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002248:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800224a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02a      	beq.n	80022a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	6959      	ldr	r1, [r3, #20]
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	891a      	ldrh	r2, [r3, #8]
 800225c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800225e:	f004 fd8a 	bl	8006d76 <USB_ReadPMA>
 8002262:	e020      	b.n	80022a6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	3306      	adds	r3, #6
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800228e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	6959      	ldr	r1, [r3, #20]
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	895a      	ldrh	r2, [r3, #10]
 80022a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022a2:	f004 fd68 	bl	8006d76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ac:	441a      	add	r2, r3
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b8:	441a      	add	r2, r3
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d004      	beq.n	80022d0 <PCD_EP_ISR_Handler+0x4c2>
 80022c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d206      	bcs.n	80022de <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f006 fb36 	bl	8008948 <HAL_PCD_DataOutStageCallback>
 80022dc:	e005      	b.n	80022ea <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fd8b 	bl	8004e00 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80022ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d07e      	beq.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80022f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	843b      	strh	r3, [r7, #32]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	8c3b      	ldrh	r3, [r7, #32]
 8002334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800233c:	b29b      	uxth	r3, r3
 800233e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	78db      	ldrb	r3, [r3, #3]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d00c      	beq.n	8002362 <PCD_EP_ISR_Handler+0x554>
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002354:	2b02      	cmp	r3, #2
 8002356:	d146      	bne.n	80023e6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002358:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d141      	bne.n	80023e6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800236a:	b29b      	uxth	r3, r3
 800236c:	461a      	mov	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	3302      	adds	r3, #2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	4413      	add	r3, r2
 8002380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	8bfb      	ldrh	r3, [r7, #30]
 8002392:	429a      	cmp	r2, r3
 8002394:	d906      	bls.n	80023a4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	8bfb      	ldrh	r3, [r7, #30]
 800239c:	1ad2      	subs	r2, r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	e002      	b.n	80023aa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	2200      	movs	r2, #0
 80023a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f006 fae0 	bl	800897e <HAL_PCD_DataInStageCallback>
 80023be:	e018      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	8bfb      	ldrh	r3, [r7, #30]
 80023c6:	441a      	add	r2, r3
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	8bfb      	ldrh	r3, [r7, #30]
 80023d2:	441a      	add	r2, r3
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023de:	4618      	mov	r0, r3
 80023e0:	f002 fd0e 	bl	8004e00 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80023e4:	e005      	b.n	80023f2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80023e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023e8:	461a      	mov	r2, r3
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f91b 	bl	8002628 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f6ff ad0a 	blt.w	8001e18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3738      	adds	r7, #56	; 0x38
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b088      	sub	sp, #32
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	4613      	mov	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07e      	beq.n	8002524 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	3302      	adds	r3, #2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4413      	add	r3, r2
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	8b7b      	ldrh	r3, [r7, #26]
 8002456:	429a      	cmp	r2, r3
 8002458:	d306      	bcc.n	8002468 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	1ad2      	subs	r2, r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	e002      	b.n	800246e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d123      	bne.n	80024be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800248c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002490:	833b      	strh	r3, [r7, #24]
 8002492:	8b3b      	ldrh	r3, [r7, #24]
 8002494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002498:	833b      	strh	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	441a      	add	r2, r3
 80024a8:	8b3b      	ldrh	r3, [r7, #24]
 80024aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01f      	beq.n	8002508 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e2:	82fb      	strh	r3, [r7, #22]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	8afb      	ldrh	r3, [r7, #22]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002508:	8b7b      	ldrh	r3, [r7, #26]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8087 	beq.w	800261e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6959      	ldr	r1, [r3, #20]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	891a      	ldrh	r2, [r3, #8]
 800251c:	8b7b      	ldrh	r3, [r7, #26]
 800251e:	f004 fc2a 	bl	8006d76 <USB_ReadPMA>
 8002522:	e07c      	b.n	800261e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	3306      	adds	r3, #6
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	8b7b      	ldrh	r3, [r7, #26]
 8002554:	429a      	cmp	r2, r3
 8002556:	d306      	bcc.n	8002566 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	8b7b      	ldrh	r3, [r7, #26]
 800255e:	1ad2      	subs	r2, r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	e002      	b.n	800256c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d123      	bne.n	80025bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	83fb      	strh	r3, [r7, #30]
 8002590:	8bfb      	ldrh	r3, [r7, #30]
 8002592:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002596:	83fb      	strh	r3, [r7, #30]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	441a      	add	r2, r3
 80025a6:	8bfb      	ldrh	r3, [r7, #30]
 80025a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	83bb      	strh	r3, [r7, #28]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	8bbb      	ldrh	r3, [r7, #28]
 80025f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002602:	b29b      	uxth	r3, r3
 8002604:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002606:	8b7b      	ldrh	r3, [r7, #26]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	6959      	ldr	r1, [r3, #20]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	895a      	ldrh	r2, [r3, #10]
 8002618:	8b7b      	ldrh	r3, [r7, #26]
 800261a:	f004 fbac 	bl	8006d76 <USB_ReadPMA>
    }
  }

  return count;
 800261e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0a2      	sub	sp, #136	; 0x88
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 81c7 	beq.w	80029d0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264a:	b29b      	uxth	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	3302      	adds	r3, #2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	4413      	add	r3, r2
 8002660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800266a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002676:	429a      	cmp	r2, r3
 8002678:	d907      	bls.n	800268a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	619a      	str	r2, [r3, #24]
 8002688:	e002      	b.n	8002690 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 80b9 	bne.w	800280c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	785b      	ldrb	r3, [r3, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d126      	bne.n	80026f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	4413      	add	r3, r2
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	011a      	lsls	r2, r3, #4
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	4413      	add	r3, r2
 80026c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e01a      	b.n	8002726 <HAL_PCD_EP_DB_Transmit+0xfe>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	785b      	ldrb	r3, [r3, #1]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d116      	bne.n	8002726 <HAL_PCD_EP_DB_Transmit+0xfe>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	4413      	add	r3, r2
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	011a      	lsls	r2, r3, #4
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	4413      	add	r3, r2
 800271a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d126      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4413      	add	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	011a      	lsls	r2, r3, #4
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002766:	b29a      	uxth	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	801a      	strh	r2, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277a:	b29a      	uxth	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e017      	b.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d113      	bne.n	80027b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	4413      	add	r3, r2
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	011a      	lsls	r2, r3, #4
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	4413      	add	r3, r2
 80027a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2200      	movs	r2, #0
 80027b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f006 f8e0 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 82d4 	beq.w	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e4:	827b      	strh	r3, [r7, #18]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	441a      	add	r2, r3
 80027f4:	8a7b      	ldrh	r3, [r7, #18]
 80027f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002806:	b29b      	uxth	r3, r3
 8002808:	8013      	strh	r3, [r2, #0]
 800280a:	e2b2      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800280c:	88fb      	ldrh	r3, [r7, #6]
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d021      	beq.n	800285a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002830:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	b29b      	uxth	r3, r3
 8002858:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002860:	2b01      	cmp	r3, #1
 8002862:	f040 8286 	bne.w	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286e:	441a      	add	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800287c:	441a      	add	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d309      	bcc.n	80028a2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	621a      	str	r2, [r3, #32]
 80028a0:	e015      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d107      	bne.n	80028ba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80028aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028b8:	e009      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d155      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x35a>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	4413      	add	r3, r2
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028fc:	637b      	str	r3, [r7, #52]	; 0x34
 80028fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002900:	2b00      	cmp	r3, #0
 8002902:	d112      	bne.n	800292a <HAL_PCD_EP_DB_Transmit+0x302>
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800290e:	b29a      	uxth	r2, r3
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	e047      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0x392>
 800292a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292c:	2b3e      	cmp	r3, #62	; 0x3e
 800292e:	d811      	bhi.n	8002954 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002932:	085b      	lsrs	r3, r3, #1
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
 8002936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002942:	3301      	adds	r3, #1
 8002944:	64bb      	str	r3, [r7, #72]	; 0x48
 8002946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002948:	b29b      	uxth	r3, r3
 800294a:	029b      	lsls	r3, r3, #10
 800294c:	b29a      	uxth	r2, r3
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	e032      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0x392>
 8002954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
 800295a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295c:	f003 031f 	and.w	r3, r3, #31
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_PCD_EP_DB_Transmit+0x342>
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	3b01      	subs	r3, #1
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
 800296a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296c:	b29b      	uxth	r3, r3
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	b29b      	uxth	r3, r3
 8002972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800297a:	b29a      	uxth	r2, r3
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	e01b      	b.n	80029ba <HAL_PCD_EP_DB_Transmit+0x392>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d117      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x392>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299e:	4413      	add	r3, r2
 80029a0:	643b      	str	r3, [r7, #64]	; 0x40
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	011a      	lsls	r2, r3, #4
 80029a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	6959      	ldr	r1, [r3, #20]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	891a      	ldrh	r2, [r3, #8]
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f004 f98f 	bl	8006cec <USB_WritePMA>
 80029ce:	e1d0      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d8:	b29b      	uxth	r3, r3
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	3306      	adds	r3, #6
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	699a      	ldr	r2, [r3, #24]
 8002a00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d307      	bcc.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a10:	1ad2      	subs	r2, r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	619a      	str	r2, [r3, #24]
 8002a16:	e002      	b.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 80c4 	bne.w	8002bb0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d126      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x456>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a44:	4413      	add	r3, r2
 8002a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	011a      	lsls	r2, r3, #4
 8002a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a50:	4413      	add	r3, r2
 8002a52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a66:	801a      	strh	r2, [r3, #0]
 8002a68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e01a      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	785b      	ldrb	r3, [r3, #1]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d116      	bne.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	677b      	str	r3, [r7, #116]	; 0x74
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9a:	4413      	add	r3, r2
 8002a9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	011a      	lsls	r2, r3, #4
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aac:	673b      	str	r3, [r7, #112]	; 0x70
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d12f      	bne.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ada:	4413      	add	r3, r2
 8002adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	011a      	lsls	r2, r3, #4
 8002ae6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aea:	4413      	add	r3, r2
 8002aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	e017      	b.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d113      	bne.n	8002b52 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b38:	4413      	add	r3, r2
 8002b3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	011a      	lsls	r2, r3, #4
 8002b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b44:	4413      	add	r3, r2
 8002b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f005 ff10 	bl	800897e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8104 	bne.w	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	441a      	add	r2, r3
 8002b96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	8013      	strh	r3, [r2, #0]
 8002bae:	e0e0      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d121      	bne.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 80b4 	bne.w	8002d72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c12:	441a      	add	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c20:	441a      	add	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d309      	bcc.n	8002c46 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	6a1a      	ldr	r2, [r3, #32]
 8002c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3e:	1ad2      	subs	r2, r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	621a      	str	r2, [r3, #32]
 8002c44:	e015      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002c4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c5c:	e009      	b.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	667b      	str	r3, [r7, #100]	; 0x64
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	785b      	ldrb	r3, [r3, #1]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d155      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x704>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c94:	4413      	add	r3, r2
 8002c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d112      	bne.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002cae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	e044      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd8:	d811      	bhi.n	8002cfe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	657b      	str	r3, [r7, #84]	; 0x54
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cec:	3301      	adds	r3, #1
 8002cee:	657b      	str	r3, [r7, #84]	; 0x54
 8002cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	029b      	lsls	r3, r3, #10
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	e02f      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54
 8002d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d102      	bne.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d10:	3b01      	subs	r3, #1
 8002d12:	657b      	str	r3, [r7, #84]	; 0x54
 8002d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	029b      	lsls	r3, r3, #10
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d28:	801a      	strh	r2, [r3, #0]
 8002d2a:	e018      	b.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d114      	bne.n	8002d5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d42:	4413      	add	r3, r2
 8002d44:	667b      	str	r3, [r7, #100]	; 0x64
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	011a      	lsls	r2, r3, #4
 8002d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4e:	4413      	add	r3, r2
 8002d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d54:	663b      	str	r3, [r7, #96]	; 0x60
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6959      	ldr	r1, [r3, #20]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	895a      	ldrh	r2, [r3, #10]
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f003 ffbd 	bl	8006cec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8c:	823b      	strh	r3, [r7, #16]
 8002d8e:	8a3b      	ldrh	r3, [r7, #16]
 8002d90:	f083 0310 	eor.w	r3, r3, #16
 8002d94:	823b      	strh	r3, [r7, #16]
 8002d96:	8a3b      	ldrh	r3, [r7, #16]
 8002d98:	f083 0320 	eor.w	r3, r3, #32
 8002d9c:	823b      	strh	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	8a3b      	ldrh	r3, [r7, #16]
 8002dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3788      	adds	r7, #136	; 0x88
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	817b      	strh	r3, [r7, #10]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dde:	897b      	ldrh	r3, [r7, #10]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dea:	897b      	ldrh	r3, [r7, #10]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e009      	b.n	8002e16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e02:	897a      	ldrh	r2, [r7, #10]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	80da      	strh	r2, [r3, #6]
 8002e2a:	e00b      	b.n	8002e44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e272      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8087 	beq.w	8002f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e70:	4b92      	ldr	r3, [pc, #584]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d00c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e7c:	4b8f      	ldr	r3, [pc, #572]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 030c 	and.w	r3, r3, #12
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d112      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
 8002e88:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e94:	d10b      	bne.n	8002eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e96:	4b89      	ldr	r3, [pc, #548]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d06c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x12c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d168      	bne.n	8002f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e24c      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x76>
 8002eb8:	4b80      	ldr	r3, [pc, #512]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a7f      	ldr	r2, [pc, #508]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e02e      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b7b      	ldr	r3, [pc, #492]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a7a      	ldr	r2, [pc, #488]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b78      	ldr	r3, [pc, #480]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a77      	ldr	r2, [pc, #476]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0xbc>
 8002ef2:	4b72      	ldr	r3, [pc, #456]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a71      	ldr	r2, [pc, #452]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b6f      	ldr	r3, [pc, #444]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6e      	ldr	r2, [pc, #440]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xd4>
 8002f0c:	4b6b      	ldr	r3, [pc, #428]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a6a      	ldr	r2, [pc, #424]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b68      	ldr	r3, [pc, #416]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a67      	ldr	r2, [pc, #412]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fd ffdc 	bl	8000ee8 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fd ffd8 	bl	8000ee8 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e200      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b5d      	ldr	r3, [pc, #372]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xe4>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fd ffc8 	bl	8000ee8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fd ffc4 	bl	8000ee8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e1ec      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0x10c>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00b      	beq.n	8002fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f96:	4b49      	ldr	r3, [pc, #292]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d11c      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
 8002fa2:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d116      	bne.n	8002fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fae:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e1c0      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4939      	ldr	r1, [pc, #228]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	e03a      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd ff7d 	bl	8000ee8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fd ff79 	bl	8000ee8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e1a1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b2a      	ldr	r3, [pc, #168]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4927      	ldr	r1, [pc, #156]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003020:	4313      	orrs	r3, r2
 8003022:	600b      	str	r3, [r1, #0]
 8003024:	e015      	b.n	8003052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x270>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fd ff5c 	bl	8000ee8 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003034:	f7fd ff58 	bl	8000ee8 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e180      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03a      	beq.n	80030d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d019      	beq.n	800309a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306c:	f7fd ff3c 	bl	8000ee8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fd ff38 	bl	8000ee8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e160      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_RCC_OscConfig+0x26c>)
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f000 faa6 	bl	80035e4 <RCC_Delay>
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_OscConfig+0x274>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7fd ff22 	bl	8000ee8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a6:	e00f      	b.n	80030c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7fd ff1e 	bl	8000ee8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d908      	bls.n	80030c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e146      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	42420000 	.word	0x42420000
 80030c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b92      	ldr	r3, [pc, #584]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e9      	bne.n	80030a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80a6 	beq.w	800322e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b8b      	ldr	r3, [pc, #556]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a87      	ldr	r2, [pc, #540]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]
 80030fe:	4b85      	ldr	r3, [pc, #532]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310e:	4b82      	ldr	r3, [pc, #520]	; (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d118      	bne.n	800314c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311a:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0x4c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7e      	ldr	r2, [pc, #504]	; (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003126:	f7fd fedf 	bl	8000ee8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fd fedb 	bl	8000ee8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e103      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003140:	4b75      	ldr	r3, [pc, #468]	; (8003318 <HAL_RCC_OscConfig+0x4c8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0f0      	beq.n	800312e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6213      	str	r3, [r2, #32]
 8003160:	e02d      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10c      	bne.n	8003184 <HAL_RCC_OscConfig+0x334>
 800316a:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a69      	ldr	r2, [pc, #420]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6213      	str	r3, [r2, #32]
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4a66      	ldr	r2, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800317c:	f023 0304 	bic.w	r3, r3, #4
 8003180:	6213      	str	r3, [r2, #32]
 8003182:	e01c      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d10c      	bne.n	80031a6 <HAL_RCC_OscConfig+0x356>
 800318c:	4b61      	ldr	r3, [pc, #388]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4a60      	ldr	r2, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6213      	str	r3, [r2, #32]
 8003198:	4b5e      	ldr	r3, [pc, #376]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4a5d      	ldr	r2, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6213      	str	r3, [r2, #32]
 80031a4:	e00b      	b.n	80031be <HAL_RCC_OscConfig+0x36e>
 80031a6:	4b5b      	ldr	r3, [pc, #364]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	4b58      	ldr	r3, [pc, #352]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	f023 0304 	bic.w	r3, r3, #4
 80031bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c6:	f7fd fe8f 	bl	8000ee8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ce:	f7fd fe8b 	bl	8000ee8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0b1      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0ee      	beq.n	80031ce <HAL_RCC_OscConfig+0x37e>
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f2:	f7fd fe79 	bl	8000ee8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fd fe75 	bl	8000ee8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e09b      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003210:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d105      	bne.n	800322e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a3b      	ldr	r2, [pc, #236]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8087 	beq.w	8003346 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003238:	4b36      	ldr	r3, [pc, #216]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b08      	cmp	r3, #8
 8003242:	d061      	beq.n	8003308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d146      	bne.n	80032da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_RCC_OscConfig+0x4cc>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003252:	f7fd fe49 	bl	8000ee8 <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325a:	f7fd fe45 	bl	8000ee8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e06d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f0      	bne.n	800325a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003280:	d108      	bne.n	8003294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4921      	ldr	r1, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a19      	ldr	r1, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	430b      	orrs	r3, r1
 80032a6:	491b      	ldr	r1, [pc, #108]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fd fe19 	bl	8000ee8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd fe15 	bl	8000ee8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e03d      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
 80032d8:	e035      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fe02 	bl	8000ee8 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fdfe 	bl	8000ee8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e026      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x498>
 8003306:	e01e      	b.n	8003346 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e019      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
 8003314:	40021000 	.word	0x40021000
 8003318:	40007000 	.word	0x40007000
 800331c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_OscConfig+0x500>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	429a      	cmp	r2, r3
 8003332:	d106      	bne.n	8003342 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000

08003354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0d0      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d910      	bls.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4965      	ldr	r1, [pc, #404]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0b8      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033b0:	4b59      	ldr	r3, [pc, #356]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c8:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b50      	ldr	r3, [pc, #320]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	494d      	ldr	r1, [pc, #308]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d040      	beq.n	8003474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d115      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e07f      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d107      	bne.n	8003422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e073      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e06b      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003432:	4b39      	ldr	r3, [pc, #228]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f023 0203 	bic.w	r2, r3, #3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	4936      	ldr	r1, [pc, #216]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003444:	f7fd fd50 	bl	8000ee8 <HAL_GetTick>
 8003448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	e00a      	b.n	8003462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	f7fd fd4c 	bl	8000ee8 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e053      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 020c 	and.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	429a      	cmp	r2, r3
 8003472:	d1eb      	bne.n	800344c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	429a      	cmp	r2, r3
 8003480:	d210      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	4922      	ldr	r1, [pc, #136]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003492:	4b20      	ldr	r3, [pc, #128]	; (8003514 <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e032      	b.n	800350a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4916      	ldr	r1, [pc, #88]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034e2:	f000 f821 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	5ccb      	ldrb	r3, [r1, r3]
 80034f6:	fa22 f303 	lsr.w	r3, r2, r3
 80034fa:	4a09      	ldr	r2, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1cc>)
 80034fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_ClockConfig+0x1d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fcae 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40022000 	.word	0x40022000
 8003518:	40021000 	.word	0x40021000
 800351c:	08008f04 	.word	0x08008f04
 8003520:	20000020 	.word	0x20000020
 8003524:	20000024 	.word	0x20000024

08003528 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b490      	push	{r4, r7}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800352e:	4b29      	ldr	r3, [pc, #164]	; (80035d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003530:	1d3c      	adds	r4, r7, #4
 8003532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003538:	f240 2301 	movw	r3, #513	; 0x201
 800353c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x40>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x46>
 8003566:	e02b      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800356a:	623b      	str	r3, [r7, #32]
      break;
 800356c:	e02b      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	0c9b      	lsrs	r3, r3, #18
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3328      	adds	r3, #40	; 0x28
 8003578:	443b      	add	r3, r7
 800357a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800357e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d012      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	0c5b      	lsrs	r3, r3, #17
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	3328      	adds	r3, #40	; 0x28
 8003596:	443b      	add	r3, r7
 8003598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800359c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80035a2:	fb03 f202 	mul.w	r2, r3, r2
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e004      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4a0b      	ldr	r2, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	623b      	str	r3, [r7, #32]
      break;
 80035be:	e002      	b.n	80035c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80035c2:	623b      	str	r3, [r7, #32]
      break;
 80035c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc90      	pop	{r4, r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	08008eac 	.word	0x08008eac
 80035d8:	40021000 	.word	0x40021000
 80035dc:	007a1200 	.word	0x007a1200
 80035e0:	003d0900 	.word	0x003d0900

080035e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <RCC_Delay+0x34>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <RCC_Delay+0x38>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003600:	bf00      	nop
  }
  while (Delay --);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <RCC_Delay+0x1c>
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000020 	.word	0x20000020
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d07d      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003640:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364c:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a4b      	ldr	r2, [pc, #300]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
 8003658:	4b49      	ldr	r3, [pc, #292]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d118      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a42      	ldr	r2, [pc, #264]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800367a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003680:	f7fd fc32 	bl	8000ee8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fd fc2e 	bl	8000ee8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e06d      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b3a      	ldr	r3, [pc, #232]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036a6:	4b36      	ldr	r3, [pc, #216]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d02e      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d027      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036c4:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036ce:	4b2e      	ldr	r3, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036d4:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036da:	4a29      	ldr	r2, [pc, #164]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d014      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd fbfd 	bl	8000ee8 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fd fbf9 	bl	8000ee8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e036      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ee      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003714:	4b1a      	ldr	r3, [pc, #104]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4917      	ldr	r1, [pc, #92]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d105      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003744:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	490b      	ldr	r1, [pc, #44]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003762:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	40007000 	.word	0x40007000
 8003788:	42420440 	.word	0x42420440

0800378c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e076      	b.n	800388c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ae:	d009      	beq.n	80037c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
 80037b6:	e005      	b.n	80037c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fa82 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	0c1a      	lsrs	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f002 0204 	and.w	r2, r2, #4
 800386a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800387a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_Transmit+0x22>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e126      	b.n	8003b04 <HAL_SPI_Transmit+0x270>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038be:	f7fd fb13 	bl	8000ee8 <HAL_GetTick>
 80038c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038d8:	e10b      	b.n	8003af2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_SPI_Transmit+0x52>
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ea:	e102      	b.n	8003af2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2203      	movs	r2, #3
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003932:	d10f      	bne.n	8003954 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003942:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003952:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d007      	beq.n	8003972 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397a:	d14b      	bne.n	8003a14 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_Transmit+0xf6>
 8003984:	8afb      	ldrh	r3, [r7, #22]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d13e      	bne.n	8003a08 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	881a      	ldrh	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	1c9a      	adds	r2, r3, #2
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039ae:	e02b      	b.n	8003a08 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d112      	bne.n	80039e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	1c9a      	adds	r2, r3, #2
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80039e2:	e011      	b.n	8003a08 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e4:	f7fd fa80 	bl	8000ee8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d803      	bhi.n	80039fc <HAL_SPI_Transmit+0x168>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d102      	bne.n	8003a02 <HAL_SPI_Transmit+0x16e>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d102      	bne.n	8003a08 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a06:	e074      	b.n	8003af2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ce      	bne.n	80039b0 <HAL_SPI_Transmit+0x11c>
 8003a12:	e04c      	b.n	8003aae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x18e>
 8003a1c:	8afb      	ldrh	r3, [r7, #22]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d140      	bne.n	8003aa4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a48:	e02c      	b.n	8003aa4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d113      	bne.n	8003a80 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a7e:	e011      	b.n	8003aa4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a80:	f7fd fa32 	bl	8000ee8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d803      	bhi.n	8003a98 <HAL_SPI_Transmit+0x204>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x20a>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003aa2:	e026      	b.n	8003af2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1cd      	bne.n	8003a4a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fbc4 	bl	8004240 <SPI_EndRxTxTransaction>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e000      	b.n	8003af2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b28:	d112      	bne.n	8003b50 <HAL_SPI_Receive+0x44>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10e      	bne.n	8003b50 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2204      	movs	r2, #4
 8003b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8f1 	bl	8003d2e <HAL_SPI_TransmitReceive>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	e0ea      	b.n	8003d26 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_SPI_Receive+0x52>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0e3      	b.n	8003d26 <HAL_SPI_Receive+0x21a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b66:	f7fd f9bf 	bl	8000ee8 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d002      	beq.n	8003b7e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b7c:	e0ca      	b.n	8003d14 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Receive+0x7e>
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b8e:	e0c1      	b.n	8003d14 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2204      	movs	r2, #4
 8003b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	88fa      	ldrh	r2, [r7, #6]
 8003ba8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d007      	beq.n	8003c16 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d162      	bne.n	8003ce4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c1e:	e02e      	b.n	8003c7e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d115      	bne.n	8003c5a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f103 020c 	add.w	r2, r3, #12
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	7812      	ldrb	r2, [r2, #0]
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c58:	e011      	b.n	8003c7e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5a:	f7fd f945 	bl	8000ee8 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d803      	bhi.n	8003c72 <HAL_SPI_Receive+0x166>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d102      	bne.n	8003c78 <HAL_SPI_Receive+0x16c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c7c:	e04a      	b.n	8003d14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1cb      	bne.n	8003c20 <HAL_SPI_Receive+0x114>
 8003c88:	e031      	b.n	8003cee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d113      	bne.n	8003cc0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	1c9a      	adds	r2, r3, #2
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cbe:	e011      	b.n	8003ce4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc0:	f7fd f912 	bl	8000ee8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d803      	bhi.n	8003cd8 <HAL_SPI_Receive+0x1cc>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd6:	d102      	bne.n	8003cde <HAL_SPI_Receive+0x1d2>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ce2:	e017      	b.n	8003d14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cd      	bne.n	8003c8a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fa52 	bl	800419c <SPI_EndRxTransaction>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	75fb      	strb	r3, [r7, #23]
 8003d10:	e000      	b.n	8003d14 <HAL_SPI_Receive+0x208>
  }

error :
 8003d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b08c      	sub	sp, #48	; 0x30
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x26>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e18a      	b.n	800406a <HAL_SPI_TransmitReceive+0x33c>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d5c:	f7fd f8c4 	bl	8000ee8 <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d00f      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x70>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d84:	d107      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d103      	bne.n	8003d96 <HAL_SPI_TransmitReceive+0x68>
 8003d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d003      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d9c:	e15b      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x82>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x82>
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003db6:	e14e      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d003      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d007      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e28:	d178      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x10a>
 8003e32:	8b7b      	ldrh	r3, [r7, #26]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d166      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	1c9a      	adds	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5c:	e053      	b.n	8003f06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x176>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_SPI_TransmitReceive+0x176>
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d113      	bne.n	8003ea4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	881a      	ldrh	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d119      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x1b8>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d014      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ee6:	f7fc ffff 	bl	8000ee8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d807      	bhi.n	8003f06 <HAL_SPI_TransmitReceive+0x1d8>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d003      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f04:	e0a7      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1a6      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x130>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1a1      	bne.n	8003e5e <HAL_SPI_TransmitReceive+0x130>
 8003f1a:	e07c      	b.n	8004016 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x1fc>
 8003f24:	8b7b      	ldrh	r3, [r7, #26]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d16b      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f50:	e057      	b.n	8004002 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d11c      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x26c>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d017      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x26c>
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d114      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	330c      	adds	r3, #12
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d119      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x2ae>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d014      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fdc:	f7fc ff84 	bl	8000ee8 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d803      	bhi.n	8003ff4 <HAL_SPI_TransmitReceive+0x2c6>
 8003fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d102      	bne.n	8003ffa <HAL_SPI_TransmitReceive+0x2cc>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004000:	e029      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1a2      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x224>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d19d      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004018:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f910 	bl	8004240 <SPI_EndRxTxTransaction>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004032:	e010      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	e000      	b.n	8004056 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004054:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004066:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800406a:	4618      	mov	r0, r3
 800406c:	3730      	adds	r7, #48	; 0x30
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004080:	b2db      	uxtb	r3, r3
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800409c:	f7fc ff24 	bl	8000ee8 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040ac:	f7fc ff1c 	bl	8000ee8 <HAL_GetTick>
 80040b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040b2:	4b39      	ldr	r3, [pc, #228]	; (8004198 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	015b      	lsls	r3, r3, #5
 80040b8:	0d1b      	lsrs	r3, r3, #20
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	fb02 f303 	mul.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c2:	e054      	b.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ca:	d050      	beq.n	800416e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040cc:	f7fc ff0c 	bl	8000ee8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d902      	bls.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d13d      	bne.n	800415e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d111      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004104:	d004      	beq.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410e:	d107      	bne.n	8004120 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004128:	d10f      	bne.n	800414a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004148:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e017      	b.n	800418e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3b01      	subs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d19b      	bne.n	80040c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000020 	.word	0x20000020

0800419c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b0:	d111      	bne.n	80041d6 <SPI_EndRxTransaction+0x3a>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d004      	beq.n	80041c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d107      	bne.n	80041d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d117      	bne.n	8004210 <SPI_EndRxTransaction+0x74>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d112      	bne.n	8004210 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2101      	movs	r1, #1
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff ff49 	bl	800408c <SPI_WaitFlagStateUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01a      	beq.n	8004236 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f043 0220 	orr.w	r2, r3, #32
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e013      	b.n	8004238 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ff36 	bl	800408c <SPI_WaitFlagStateUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e000      	b.n	8004238 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff18 	bl	800408c <SPI_WaitFlagStateUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	f043 0220 	orr.w	r2, r3, #32
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e000      	b.n	8004274 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800427c:	b084      	sub	sp, #16
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	f107 0014 	add.w	r0, r7, #20
 800428a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	b004      	add	sp, #16
 800429a:	4770      	bx	lr

0800429c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4013      	ands	r3, r2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004314:	b084      	sub	sp, #16
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	f107 0014 	add.w	r0, r7, #20
 8004322:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	b004      	add	sp, #16
 8004352:	4770      	bx	lr

08004354 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004354:	b480      	push	{r7}
 8004356:	b09b      	sub	sp, #108	; 0x6c
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	78db      	ldrb	r3, [r3, #3]
 8004382:	2b03      	cmp	r3, #3
 8004384:	d81f      	bhi.n	80043c6 <USB_ActivateEndpoint+0x72>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <USB_ActivateEndpoint+0x38>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	0800439d 	.word	0x0800439d
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043cf 	.word	0x080043cf
 8004398:	080043ab 	.word	0x080043ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800439c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043a8:	e012      	b.n	80043d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043b6:	e00b      	b.n	80043d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80043c4:	e004      	b.n	80043d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80043cc:	e000      	b.n	80043d0 <USB_ActivateEndpoint+0x7c>
      break;
 80043ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004408:	b29a      	uxth	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4313      	orrs	r3, r2
 8004412:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	441a      	add	r2, r3
 8004420:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004434:	b29b      	uxth	r3, r3
 8004436:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	7b1b      	ldrb	r3, [r3, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f040 8149 	bne.w	80046d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8084 	beq.w	8004554 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4413      	add	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	88db      	ldrh	r3, [r3, #6]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	b29b      	uxth	r3, r3
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	81fb      	strh	r3, [r7, #14]
 800448e:	89fb      	ldrh	r3, [r7, #14]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <USB_ActivateEndpoint+0x17c>
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	81bb      	strh	r3, [r7, #12]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	89bb      	ldrh	r3, [r7, #12]
 80044bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	78db      	ldrb	r3, [r3, #3]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d020      	beq.n	800451a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ee:	813b      	strh	r3, [r7, #8]
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	f083 0320 	eor.w	r3, r3, #32
 80044f6:	813b      	strh	r3, [r7, #8]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800450c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004514:	b29b      	uxth	r3, r3
 8004516:	8013      	strh	r3, [r2, #0]
 8004518:	e27f      	b.n	8004a1a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	b29b      	uxth	r3, r3
 8004528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	441a      	add	r2, r3
 800453c:	897b      	ldrh	r3, [r7, #10]
 800453e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	b29b      	uxth	r3, r3
 8004550:	8013      	strh	r3, [r2, #0]
 8004552:	e262      	b.n	8004a1a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	4413      	add	r3, r2
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	011a      	lsls	r2, r3, #4
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	4413      	add	r3, r2
 8004572:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	88db      	ldrh	r3, [r3, #6]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	b29b      	uxth	r3, r3
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	4413      	add	r3, r2
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d112      	bne.n	80045da <USB_ActivateEndpoint+0x286>
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	e02f      	b.n	800463a <USB_ActivateEndpoint+0x2e6>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b3e      	cmp	r3, #62	; 0x3e
 80045e0:	d813      	bhi.n	800460a <USB_ActivateEndpoint+0x2b6>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	085b      	lsrs	r3, r3, #1
 80045e8:	663b      	str	r3, [r7, #96]	; 0x60
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <USB_ActivateEndpoint+0x2a8>
 80045f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f8:	3301      	adds	r3, #1
 80045fa:	663b      	str	r3, [r7, #96]	; 0x60
 80045fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fe:	b29b      	uxth	r3, r3
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	b29a      	uxth	r2, r3
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	e017      	b.n	800463a <USB_ActivateEndpoint+0x2e6>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <USB_ActivateEndpoint+0x2d0>
 800461e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004620:	3b01      	subs	r3, #1
 8004622:	663b      	str	r3, [r7, #96]	; 0x60
 8004624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004626:	b29b      	uxth	r3, r3
 8004628:	029b      	lsls	r3, r3, #10
 800462a:	b29b      	uxth	r3, r3
 800462c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004634:	b29a      	uxth	r2, r3
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	83fb      	strh	r3, [r7, #30]
 8004648:	8bfb      	ldrh	r3, [r7, #30]
 800464a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01b      	beq.n	800468a <USB_ActivateEndpoint+0x336>
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004668:	83bb      	strh	r3, [r7, #28]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	8bbb      	ldrh	r3, [r7, #28]
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	837b      	strh	r3, [r7, #26]
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
 80046a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046a8:	837b      	strh	r3, [r7, #26]
 80046aa:	8b7b      	ldrh	r3, [r7, #26]
 80046ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046b0:	837b      	strh	r3, [r7, #26]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	441a      	add	r2, r3
 80046bc:	8b7b      	ldrh	r3, [r7, #26]
 80046be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8013      	strh	r3, [r2, #0]
 80046d2:	e1a2      	b.n	8004a1a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004704:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470c:	b29b      	uxth	r3, r3
 800470e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65bb      	str	r3, [r7, #88]	; 0x58
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004720:	4413      	add	r3, r2
 8004722:	65bb      	str	r3, [r7, #88]	; 0x58
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472c:	4413      	add	r3, r2
 800472e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004732:	657b      	str	r3, [r7, #84]	; 0x54
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	891b      	ldrh	r3, [r3, #8]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	b29b      	uxth	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004742:	801a      	strh	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	653b      	str	r3, [r7, #80]	; 0x50
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004754:	4413      	add	r3, r2
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	011a      	lsls	r2, r3, #4
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	4413      	add	r3, r2
 8004762:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	895b      	ldrh	r3, [r3, #10]
 800476c:	085b      	lsrs	r3, r3, #1
 800476e:	b29b      	uxth	r3, r3
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 8091 	bne.w	80048a4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004790:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01b      	beq.n	80047d2 <USB_ActivateEndpoint+0x47e>
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	441a      	add	r2, r3
 80047bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	873b      	strh	r3, [r7, #56]	; 0x38
 80047e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01b      	beq.n	8004822 <USB_ActivateEndpoint+0x4ce>
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	441a      	add	r2, r3
 800480c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800480e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800481e:	b29b      	uxth	r3, r3
 8004820:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004838:	86bb      	strh	r3, [r7, #52]	; 0x34
 800483a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800483c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004840:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004842:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004844:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004848:	86bb      	strh	r3, [r7, #52]	; 0x34
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004880:	867b      	strh	r3, [r7, #50]	; 0x32
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]
 80048a2:	e0ba      	b.n	8004a1a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80048b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01d      	beq.n	80048fc <USB_ActivateEndpoint+0x5a8>
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	441a      	add	r2, r3
 80048e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800490c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01d      	beq.n	8004954 <USB_ActivateEndpoint+0x600>
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	441a      	add	r2, r3
 800493c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004950:	b29b      	uxth	r3, r3
 8004952:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	78db      	ldrb	r3, [r3, #3]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d024      	beq.n	80049a6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004972:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004976:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800497a:	f083 0320 	eor.w	r3, r3, #32
 800497e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	441a      	add	r2, r3
 800498c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	8013      	strh	r3, [r2, #0]
 80049a4:	e01d      	b.n	80049e2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	441a      	add	r2, r3
 80049ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004a1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	376c      	adds	r7, #108	; 0x6c
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr

08004a28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b08d      	sub	sp, #52	; 0x34
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	7b1b      	ldrb	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 808e 	bne.w	8004b58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d044      	beq.n	8004ace <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	81bb      	strh	r3, [r7, #12]
 8004a52:	89bb      	ldrh	r3, [r7, #12]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <USB_DeactivateEndpoint+0x6c>
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	817b      	strh	r3, [r7, #10]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	897b      	ldrh	r3, [r7, #10]
 8004a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aaa:	813b      	strh	r3, [r7, #8]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	893b      	ldrh	r3, [r7, #8]
 8004ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	8013      	strh	r3, [r2, #0]
 8004acc:	e192      	b.n	8004df4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	827b      	strh	r3, [r7, #18]
 8004adc:	8a7b      	ldrh	r3, [r7, #18]
 8004ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01b      	beq.n	8004b1e <USB_DeactivateEndpoint+0xf6>
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	823b      	strh	r3, [r7, #16]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	8a3b      	ldrh	r3, [r7, #16]
 8004b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b34:	81fb      	strh	r3, [r7, #14]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	441a      	add	r2, r3
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	8013      	strh	r3, [r2, #0]
 8004b56:	e14d      	b.n	8004df4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 80a5 	bne.w	8004cac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	843b      	strh	r3, [r7, #32]
 8004b70:	8c3b      	ldrh	r3, [r7, #32]
 8004b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01b      	beq.n	8004bb2 <USB_DeactivateEndpoint+0x18a>
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b90:	83fb      	strh	r3, [r7, #30]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	441a      	add	r2, r3
 8004b9c:	8bfb      	ldrh	r3, [r7, #30]
 8004b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	83bb      	strh	r3, [r7, #28]
 8004bc0:	8bbb      	ldrh	r3, [r7, #28]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01b      	beq.n	8004c02 <USB_DeactivateEndpoint+0x1da>
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be0:	837b      	strh	r3, [r7, #26]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	8b7b      	ldrh	r3, [r7, #26]
 8004bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c18:	833b      	strh	r3, [r7, #24]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8b3b      	ldrh	r3, [r7, #24]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	82fb      	strh	r3, [r7, #22]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	8afb      	ldrh	r3, [r7, #22]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c88:	82bb      	strh	r3, [r7, #20]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	441a      	add	r2, r3
 8004c94:	8abb      	ldrh	r3, [r7, #20]
 8004c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	8013      	strh	r3, [r2, #0]
 8004caa:	e0a3      	b.n	8004df4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <USB_DeactivateEndpoint+0x2d4>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01b      	beq.n	8004d4c <USB_DeactivateEndpoint+0x324>
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3734      	adds	r7, #52	; 0x34
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b0cc      	sub	sp, #304	; 0x130
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0e:	6018      	str	r0, [r3, #0]
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	f041 817d 	bne.w	8006126 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d908      	bls.n	8004e5a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004e58:	e007      	b.n	8004e6a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	7b1b      	ldrb	r3, [r3, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d152      	bne.n	8004f20 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6959      	ldr	r1, [r3, #20]
 8004e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	88da      	ldrh	r2, [r3, #6]
 8004e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ea0:	6800      	ldr	r0, [r0, #0]
 8004ea2:	f001 ff23 	bl	8006cec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004eae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eb2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ed4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ed8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	440a      	add	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4413      	add	r3, r2
 8004efc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	f001 b8b5 	b.w	800608a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	78db      	ldrb	r3, [r3, #3]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	f040 84c6 	bne.w	80058be <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	f240 8443 	bls.w	80057d6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	441a      	add	r2, r3
 8004f94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 823e 	beq.w	800546e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ffa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ffe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f040 809a 	bne.w	800514c <USB_EPStartXfer+0x34c>
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005020:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005024:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005028:	6812      	ldr	r2, [r2, #0]
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503a:	b29b      	uxth	r3, r3
 800503c:	4619      	mov	r1, r3
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005046:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800504a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	440a      	add	r2, r1
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4413      	add	r3, r2
 800506e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005076:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d122      	bne.n	80050ca <USB_EPStartXfer+0x2ca>
 8005084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005088:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005096:	b29a      	uxth	r2, r3
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e079      	b.n	80051be <USB_EPStartXfer+0x3be>
 80050ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ce:	2b3e      	cmp	r3, #62	; 0x3e
 80050d0:	d81b      	bhi.n	800510a <USB_EPStartXfer+0x30a>
 80050d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d6:	085b      	lsrs	r3, r3, #1
 80050d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d004      	beq.n	80050f2 <USB_EPStartXfer+0x2f2>
 80050e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ec:	3301      	adds	r3, #1
 80050ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e059      	b.n	80051be <USB_EPStartXfer+0x3be>
 800510a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <USB_EPStartXfer+0x32a>
 8005120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005124:	3b01      	subs	r3, #1
 8005126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800512a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29b      	uxth	r3, r3
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29a      	uxth	r2, r3
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	801a      	strh	r2, [r3, #0]
 800514a:	e038      	b.n	80051be <USB_EPStartXfer+0x3be>
 800514c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d130      	bne.n	80051be <USB_EPStartXfer+0x3be>
 800515c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005160:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005176:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800517a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	440a      	add	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4413      	add	r3, r2
 800519e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	895b      	ldrh	r3, [r3, #10]
 80051ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6959      	ldr	r1, [r3, #20]
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051ec:	6800      	ldr	r0, [r0, #0]
 80051ee:	f001 fd7d 	bl	8006cec <USB_WritePMA>
            ep->xfer_buff += len;
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	441a      	add	r2, r3
 8005204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d90f      	bls.n	800524c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	1ad2      	subs	r2, r2, r3
 800523e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	621a      	str	r2, [r3, #32]
 800524a:	e00e      	b.n	800526a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800524c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800525c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 809a 	bne.w	80053b0 <USB_EPStartXfer+0x5b0>
 800527c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005280:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005284:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005288:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005294:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	4619      	mov	r1, r3
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052ae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	440a      	add	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d122      	bne.n	800532e <USB_EPStartXfer+0x52e>
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005300:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800531a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531e:	b29a      	uxth	r2, r3
 8005320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005324:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	e083      	b.n	8005436 <USB_EPStartXfer+0x636>
 800532e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005332:	2b3e      	cmp	r3, #62	; 0x3e
 8005334:	d81b      	bhi.n	800536e <USB_EPStartXfer+0x56e>
 8005336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <USB_EPStartXfer+0x556>
 800534c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005350:	3301      	adds	r3, #1
 8005352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005356:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800535a:	b29b      	uxth	r3, r3
 800535c:	029b      	lsls	r3, r3, #10
 800535e:	b29a      	uxth	r2, r3
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	e063      	b.n	8005436 <USB_EPStartXfer+0x636>
 800536e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800537c:	f003 031f 	and.w	r3, r3, #31
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <USB_EPStartXfer+0x58e>
 8005384:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005388:	3b01      	subs	r3, #1
 800538a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800538e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	e042      	b.n	8005436 <USB_EPStartXfer+0x636>
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d13a      	bne.n	8005436 <USB_EPStartXfer+0x636>
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	4619      	mov	r1, r3
 80053e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	440a      	add	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	011a      	lsls	r2, r3, #4
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4413      	add	r3, r2
 8005416:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800541a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800541e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005428:	b29a      	uxth	r2, r3
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	891b      	ldrh	r3, [r3, #8]
 8005442:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6959      	ldr	r1, [r3, #20]
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	b29b      	uxth	r3, r3
 8005458:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800545c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005460:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005464:	6800      	ldr	r0, [r0, #0]
 8005466:	f001 fc41 	bl	8006cec <USB_WritePMA>
 800546a:	f000 be0e 	b.w	800608a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d16d      	bne.n	800555a <USB_EPStartXfer+0x75a>
 800547e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005498:	b29b      	uxth	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549e:	4413      	add	r3, r2
 80054a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	011a      	lsls	r2, r3, #4
 80054b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b2:	4413      	add	r3, r2
 80054b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054b8:	647b      	str	r3, [r7, #68]	; 0x44
 80054ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d112      	bne.n	80054e8 <USB_EPStartXfer+0x6e8>
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e063      	b.n	80055b0 <USB_EPStartXfer+0x7b0>
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	2b3e      	cmp	r3, #62	; 0x3e
 80054ee:	d817      	bhi.n	8005520 <USB_EPStartXfer+0x720>
 80054f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <USB_EPStartXfer+0x710>
 8005506:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800550a:	3301      	adds	r3, #1
 800550c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005510:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005514:	b29b      	uxth	r3, r3
 8005516:	029b      	lsls	r3, r3, #10
 8005518:	b29a      	uxth	r2, r3
 800551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e047      	b.n	80055b0 <USB_EPStartXfer+0x7b0>
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <USB_EPStartXfer+0x740>
 8005536:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800553a:	3b01      	subs	r3, #1
 800553c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005540:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005544:	b29b      	uxth	r3, r3
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e02a      	b.n	80055b0 <USB_EPStartXfer+0x7b0>
 800555a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800555e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d122      	bne.n	80055b0 <USB_EPStartXfer+0x7b0>
 800556a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
 8005576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005584:	b29b      	uxth	r3, r3
 8005586:	461a      	mov	r2, r3
 8005588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800558a:	4413      	add	r3, r2
 800558c:	653b      	str	r3, [r7, #80]	; 0x50
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	011a      	lsls	r2, r3, #4
 800559c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800559e:	4413      	add	r3, r2
 80055a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	891b      	ldrh	r3, [r3, #8]
 80055bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6959      	ldr	r1, [r3, #20]
 80055cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055de:	6800      	ldr	r0, [r0, #0]
 80055e0:	f001 fb84 	bl	8006cec <USB_WritePMA>
            ep->xfer_buff += len;
 80055e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f4:	441a      	add	r2, r3
 80055f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d90f      	bls.n	800563e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800561e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	621a      	str	r2, [r3, #32]
 800563c:	e00e      	b.n	800565c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d16d      	bne.n	8005754 <USB_EPStartXfer+0x954>
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005692:	b29b      	uxth	r3, r3
 8005694:	461a      	mov	r2, r3
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	4413      	add	r3, r2
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	011a      	lsls	r2, r3, #4
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	4413      	add	r3, r2
 80056ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d112      	bne.n	80056e2 <USB_EPStartXfer+0x8e2>
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056da:	b29a      	uxth	r2, r3
 80056dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	e05d      	b.n	800579e <USB_EPStartXfer+0x99e>
 80056e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e6:	2b3e      	cmp	r3, #62	; 0x3e
 80056e8:	d817      	bhi.n	800571a <USB_EPStartXfer+0x91a>
 80056ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <USB_EPStartXfer+0x90a>
 8005700:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005704:	3301      	adds	r3, #1
 8005706:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800570a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800570e:	b29b      	uxth	r3, r3
 8005710:	029b      	lsls	r3, r3, #10
 8005712:	b29a      	uxth	r2, r3
 8005714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e041      	b.n	800579e <USB_EPStartXfer+0x99e>
 800571a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571e:	095b      	lsrs	r3, r3, #5
 8005720:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <USB_EPStartXfer+0x93a>
 8005730:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005734:	3b01      	subs	r3, #1
 8005736:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800573a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800573e:	b29b      	uxth	r3, r3
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	b29b      	uxth	r3, r3
 8005744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574c:	b29a      	uxth	r2, r3
 800574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e024      	b.n	800579e <USB_EPStartXfer+0x99e>
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11c      	bne.n	800579e <USB_EPStartXfer+0x99e>
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005778:	4413      	add	r3, r2
 800577a:	643b      	str	r3, [r7, #64]	; 0x40
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	011a      	lsls	r2, r3, #4
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	4413      	add	r3, r2
 800578e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005798:	b29a      	uxth	r2, r3
 800579a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	895b      	ldrh	r3, [r3, #10]
 80057aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6959      	ldr	r1, [r3, #20]
 80057ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f001 fa8d 	bl	8006cec <USB_WritePMA>
 80057d2:	f000 bc5a 	b.w	800608a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800582e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583e:	b29b      	uxth	r3, r3
 8005840:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005862:	4413      	add	r3, r2
 8005864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	011a      	lsls	r2, r3, #4
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	4413      	add	r3, r2
 8005878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800587c:	65bb      	str	r3, [r7, #88]	; 0x58
 800587e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005882:	b29a      	uxth	r2, r3
 8005884:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005886:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	891b      	ldrh	r3, [r3, #8]
 8005894:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6959      	ldr	r1, [r3, #20]
 80058a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058b2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	f001 fa18 	bl	8006cec <USB_WritePMA>
 80058bc:	e3e5      	b.n	800608a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005916:	b29b      	uxth	r3, r3
 8005918:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800591a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a1a      	ldr	r2, [r3, #32]
 8005926:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800592a:	1ad2      	subs	r2, r2, r3
 800592c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 81bc 	beq.w	8005cd8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	785b      	ldrb	r3, [r3, #1]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d16d      	bne.n	8005a5a <USB_EPStartXfer+0xc5a>
 800597e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	67bb      	str	r3, [r7, #120]	; 0x78
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005998:	b29b      	uxth	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800599e:	4413      	add	r3, r2
 80059a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b8:	677b      	str	r3, [r7, #116]	; 0x74
 80059ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d112      	bne.n	80059e8 <USB_EPStartXfer+0xbe8>
 80059c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e060      	b.n	8005aaa <USB_EPStartXfer+0xcaa>
 80059e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ec:	2b3e      	cmp	r3, #62	; 0x3e
 80059ee:	d817      	bhi.n	8005a20 <USB_EPStartXfer+0xc20>
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <USB_EPStartXfer+0xc10>
 8005a06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e044      	b.n	8005aaa <USB_EPStartXfer+0xcaa>
 8005a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USB_EPStartXfer+0xc40>
 8005a36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e027      	b.n	8005aaa <USB_EPStartXfer+0xcaa>
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d11f      	bne.n	8005aaa <USB_EPStartXfer+0xcaa>
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a80:	4413      	add	r3, r2
 8005a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aa8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	895b      	ldrh	r3, [r3, #10]
 8005ab6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6959      	ldr	r1, [r3, #20]
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ad0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ad4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ad8:	6800      	ldr	r0, [r0, #0]
 8005ada:	f001 f907 	bl	8006cec <USB_WritePMA>
          ep->xfer_buff += len;
 8005ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695a      	ldr	r2, [r3, #20]
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	441a      	add	r2, r3
 8005af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d90f      	bls.n	8005b38 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a1a      	ldr	r2, [r3, #32]
 8005b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b28:	1ad2      	subs	r2, r2, r3
 8005b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	621a      	str	r2, [r3, #32]
 8005b36:	e00e      	b.n	8005b56 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8295 	beq.w	800608a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d16d      	bne.n	8005c4c <USB_EPStartXfer+0xe4c>
 8005b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b90:	4413      	add	r3, r2
 8005b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	011a      	lsls	r2, r3, #4
 8005ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005baa:	667b      	str	r3, [r7, #100]	; 0x64
 8005bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d112      	bne.n	8005bda <USB_EPStartXfer+0xdda>
 8005bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e063      	b.n	8005ca2 <USB_EPStartXfer+0xea2>
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	2b3e      	cmp	r3, #62	; 0x3e
 8005be0:	d817      	bhi.n	8005c12 <USB_EPStartXfer+0xe12>
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <USB_EPStartXfer+0xe02>
 8005bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e047      	b.n	8005ca2 <USB_EPStartXfer+0xea2>
 8005c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <USB_EPStartXfer+0xe32>
 8005c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	e02a      	b.n	8005ca2 <USB_EPStartXfer+0xea2>
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d122      	bne.n	8005ca2 <USB_EPStartXfer+0xea2>
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	673b      	str	r3, [r7, #112]	; 0x70
 8005c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	4413      	add	r3, r2
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	011a      	lsls	r2, r3, #4
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	4413      	add	r3, r2
 8005c92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	891b      	ldrh	r3, [r3, #8]
 8005cae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6959      	ldr	r1, [r3, #20]
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ccc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cd0:	6800      	ldr	r0, [r0, #0]
 8005cd2:	f001 f80b 	bl	8006cec <USB_WritePMA>
 8005cd6:	e1d8      	b.n	800608a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d178      	bne.n	8005dda <USB_EPStartXfer+0xfda>
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	461a      	mov	r2, r3
 8005d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d116      	bne.n	8005d64 <USB_EPStartXfer+0xf64>
 8005d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	e06b      	b.n	8005e3c <USB_EPStartXfer+0x103c>
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d68:	2b3e      	cmp	r3, #62	; 0x3e
 8005d6a:	d818      	bhi.n	8005d9e <USB_EPStartXfer+0xf9e>
 8005d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d70:	085b      	lsrs	r3, r3, #1
 8005d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <USB_EPStartXfer+0xf8c>
 8005d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d86:	3301      	adds	r3, #1
 8005d88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	029b      	lsls	r3, r3, #10
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	e04e      	b.n	8005e3c <USB_EPStartXfer+0x103c>
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <USB_EPStartXfer+0xfbe>
 8005db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005dbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e030      	b.n	8005e3c <USB_EPStartXfer+0x103c>
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d128      	bne.n	8005e3c <USB_EPStartXfer+0x103c>
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e0e:	4413      	add	r3, r2
 8005e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	011a      	lsls	r2, r3, #4
 8005e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	891b      	ldrh	r3, [r3, #8]
 8005e48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6959      	ldr	r1, [r3, #20]
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e62:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e66:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	f000 ff3e 	bl	8006cec <USB_WritePMA>
          ep->xfer_buff += len;
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e80:	441a      	add	r2, r3
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a1a      	ldr	r2, [r3, #32]
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90f      	bls.n	8005eca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	621a      	str	r2, [r3, #32]
 8005ec8:	e00e      	b.n	8005ee8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80cc 	beq.w	800608a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d178      	bne.n	8006002 <USB_EPStartXfer+0x1202>
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f34:	4413      	add	r3, r2
 8005f36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <USB_EPStartXfer+0x118c>
 8005f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f70:	801a      	strh	r2, [r3, #0]
 8005f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	e064      	b.n	8006056 <USB_EPStartXfer+0x1256>
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	2b3e      	cmp	r3, #62	; 0x3e
 8005f92:	d818      	bhi.n	8005fc6 <USB_EPStartXfer+0x11c6>
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	085b      	lsrs	r3, r3, #1
 8005f9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d004      	beq.n	8005fb4 <USB_EPStartXfer+0x11b4>
 8005faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e047      	b.n	8006056 <USB_EPStartXfer+0x1256>
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d104      	bne.n	8005fe6 <USB_EPStartXfer+0x11e6>
 8005fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	e029      	b.n	8006056 <USB_EPStartXfer+0x1256>
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d121      	bne.n	8006056 <USB_EPStartXfer+0x1256>
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006020:	b29b      	uxth	r3, r3
 8006022:	461a      	mov	r2, r3
 8006024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006028:	4413      	add	r3, r2
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006040:	4413      	add	r3, r2
 8006042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800604a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604e:	b29a      	uxth	r2, r3
 8006050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006054:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	895b      	ldrh	r3, [r3, #10]
 8006062:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006076:	b29b      	uxth	r3, r3
 8006078:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800607c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006080:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006084:	6800      	ldr	r0, [r0, #0]
 8006086:	f000 fe31 	bl	8006cec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800608a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060ac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b8:	8013      	strh	r3, [r2, #0]
 80060ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	f082 0210 	eor.w	r2, r2, #16
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80060da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060de:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	f082 0220 	eor.w	r2, r2, #32
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]
 8006122:	f000 bc9f 	b.w	8006a64 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	7b1b      	ldrb	r3, [r3, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f040 80ae 	bne.w	8006294 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	429a      	cmp	r2, r3
 8006152:	d917      	bls.n	8006184 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	619a      	str	r2, [r3, #24]
 8006182:	e00e      	b.n	80061a2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80061a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061c6:	4413      	add	r3, r2
 80061c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	011a      	lsls	r2, r3, #4
 80061da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061de:	4413      	add	r3, r2
 80061e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d116      	bne.n	800621e <USB_EPStartXfer+0x141e>
 80061f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e3e8      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
 800621e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006222:	2b3e      	cmp	r3, #62	; 0x3e
 8006224:	d818      	bhi.n	8006258 <USB_EPStartXfer+0x1458>
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <USB_EPStartXfer+0x1446>
 800623c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006240:	3301      	adds	r3, #1
 8006242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006246:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800624a:	b29b      	uxth	r3, r3
 800624c:	029b      	lsls	r3, r3, #10
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e3cb      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
 8006258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006266:	f003 031f 	and.w	r3, r3, #31
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <USB_EPStartXfer+0x1478>
 800626e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006272:	3b01      	subs	r3, #1
 8006274:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006278:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800627c:	b29b      	uxth	r3, r3
 800627e:	029b      	lsls	r3, r3, #10
 8006280:	b29b      	uxth	r3, r3
 8006282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e3ad      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	78db      	ldrb	r3, [r3, #3]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	f040 8200 	bne.w	80066a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 8091 	bne.w	80063da <USB_EPStartXfer+0x15da>
 80062b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062dc:	4413      	add	r3, r2
 80062de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	011a      	lsls	r2, r3, #4
 80062f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d116      	bne.n	800633c <USB_EPStartXfer+0x153c>
 800630e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	e083      	b.n	8006444 <USB_EPStartXfer+0x1644>
 800633c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b3e      	cmp	r3, #62	; 0x3e
 800634a:	d820      	bhi.n	800638e <USB_EPStartXfer+0x158e>
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	2b00      	cmp	r3, #0
 8006370:	d004      	beq.n	800637c <USB_EPStartXfer+0x157c>
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006376:	3301      	adds	r3, #1
 8006378:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006380:	b29b      	uxth	r3, r3
 8006382:	029b      	lsls	r3, r3, #10
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	e05a      	b.n	8006444 <USB_EPStartXfer+0x1644>
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <USB_EPStartXfer+0x15be>
 80063b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b8:	3b01      	subs	r3, #1
 80063ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063d6:	801a      	strh	r2, [r3, #0]
 80063d8:	e034      	b.n	8006444 <USB_EPStartXfer+0x1644>
 80063da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d12c      	bne.n	8006444 <USB_EPStartXfer+0x1644>
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640e:	4413      	add	r3, r2
 8006410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006426:	4413      	add	r3, r2
 8006428:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800642c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8091 	bne.w	8006586 <USB_EPStartXfer+0x1786>
 8006464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006488:	4413      	add	r3, r2
 800648a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	011a      	lsls	r2, r3, #4
 800649c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <USB_EPStartXfer+0x16e8>
 80064ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e07c      	b.n	80065e2 <USB_EPStartXfer+0x17e2>
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b3e      	cmp	r3, #62	; 0x3e
 80064f6:	d820      	bhi.n	800653a <USB_EPStartXfer+0x173a>
 80064f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <USB_EPStartXfer+0x1728>
 800651e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006522:	3301      	adds	r3, #1
 8006524:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006528:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800652c:	b29b      	uxth	r3, r3
 800652e:	029b      	lsls	r3, r3, #10
 8006530:	b29a      	uxth	r2, r3
 8006532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	e053      	b.n	80065e2 <USB_EPStartXfer+0x17e2>
 800653a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800654c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2b00      	cmp	r3, #0
 800655e:	d104      	bne.n	800656a <USB_EPStartXfer+0x176a>
 8006560:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006564:	3b01      	subs	r3, #1
 8006566:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800656a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800656e:	b29b      	uxth	r3, r3
 8006570:	029b      	lsls	r3, r3, #10
 8006572:	b29b      	uxth	r3, r3
 8006574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	e02d      	b.n	80065e2 <USB_EPStartXfer+0x17e2>
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d125      	bne.n	80065e2 <USB_EPStartXfer+0x17e2>
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065ac:	4413      	add	r3, r2
 80065ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	011a      	lsls	r2, r3, #4
 80065c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c4:	4413      	add	r3, r2
 80065c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	b29a      	uxth	r2, r3
 80065dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 81fe 	beq.w	80069f0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006614:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <USB_EPStartXfer+0x182c>
 8006620:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10d      	bne.n	8006648 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800662c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 81db 	bne.w	80069f0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800663a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	f040 81d4 	bne.w	80069f0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	8013      	strh	r3, [r2, #0]
 80066a4:	e1a4      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	78db      	ldrb	r3, [r3, #3]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	f040 819a 	bne.w	80069ec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d917      	bls.n	8006704 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80066d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80066e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699a      	ldr	r2, [r3, #24]
 80066f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	619a      	str	r2, [r3, #24]
 8006702:	e00e      	b.n	8006722 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	785b      	ldrb	r3, [r3, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d178      	bne.n	8006824 <USB_EPStartXfer+0x1a24>
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800674e:	b29b      	uxth	r3, r3
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006756:	4413      	add	r3, r2
 8006758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800675c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	011a      	lsls	r2, r3, #4
 800676a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800676e:	4413      	add	r3, r2
 8006770:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006774:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d116      	bne.n	80067ae <USB_EPStartXfer+0x19ae>
 8006780:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e06b      	b.n	8006886 <USB_EPStartXfer+0x1a86>
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b2:	2b3e      	cmp	r3, #62	; 0x3e
 80067b4:	d818      	bhi.n	80067e8 <USB_EPStartXfer+0x19e8>
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <USB_EPStartXfer+0x19d6>
 80067cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d0:	3301      	adds	r3, #1
 80067d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067da:	b29b      	uxth	r3, r3
 80067dc:	029b      	lsls	r3, r3, #10
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	e04e      	b.n	8006886 <USB_EPStartXfer+0x1a86>
 80067e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ec:	095b      	lsrs	r3, r3, #5
 80067ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <USB_EPStartXfer+0x1a08>
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006802:	3b01      	subs	r3, #1
 8006804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800680c:	b29b      	uxth	r3, r3
 800680e:	029b      	lsls	r3, r3, #10
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	e030      	b.n	8006886 <USB_EPStartXfer+0x1a86>
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d128      	bne.n	8006886 <USB_EPStartXfer+0x1a86>
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	4413      	add	r3, r2
 800685a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800685e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	011a      	lsls	r2, r3, #4
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	4413      	add	r3, r2
 8006872:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006876:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800687a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687e:	b29a      	uxth	r2, r3
 8006880:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800688a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d178      	bne.n	8006996 <USB_EPStartXfer+0x1b96>
 80068a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c8:	4413      	add	r3, r2
 80068ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	011a      	lsls	r2, r3, #4
 80068dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <USB_EPStartXfer+0x1b20>
 80068f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068fe:	b29a      	uxth	r2, r3
 8006900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006904:	801a      	strh	r2, [r3, #0]
 8006906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	b29b      	uxth	r3, r3
 800690e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006916:	b29a      	uxth	r2, r3
 8006918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e067      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
 8006920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006924:	2b3e      	cmp	r3, #62	; 0x3e
 8006926:	d818      	bhi.n	800695a <USB_EPStartXfer+0x1b5a>
 8006928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <USB_EPStartXfer+0x1b48>
 800693e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006942:	3301      	adds	r3, #1
 8006944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800694c:	b29b      	uxth	r3, r3
 800694e:	029b      	lsls	r3, r3, #10
 8006950:	b29a      	uxth	r2, r3
 8006952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	e04a      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <USB_EPStartXfer+0x1b7a>
 8006970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006974:	3b01      	subs	r3, #1
 8006976:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800697a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800697e:	b29b      	uxth	r3, r3
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	b29b      	uxth	r3, r3
 8006984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800698c:	b29a      	uxth	r2, r3
 800698e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006992:	801a      	strh	r2, [r3, #0]
 8006994:	e02c      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
 8006996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d124      	bne.n	80069f0 <USB_EPStartXfer+0x1bf0>
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069bc:	4413      	add	r3, r2
 80069be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	011a      	lsls	r2, r3, #4
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	4413      	add	r3, r2
 80069d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	e001      	b.n	80069f0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e03a      	b.n	8006a66 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	441a      	add	r2, r3
 8006a4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d020      	beq.n	8006ac4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a98:	81bb      	strh	r3, [r7, #12]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	f083 0310 	eor.w	r3, r3, #16
 8006aa0:	81bb      	strh	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	89bb      	ldrh	r3, [r7, #12]
 8006aae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ab2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	8013      	strh	r3, [r2, #0]
 8006ac2:	e01f      	b.n	8006b04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	881b      	ldrh	r3, [r3, #0]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ada:	81fb      	strh	r3, [r7, #14]
 8006adc:	89fb      	ldrh	r3, [r7, #14]
 8006ade:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ae2:	81fb      	strh	r3, [r7, #14]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	441a      	add	r2, r3
 8006aee:	89fb      	ldrh	r3, [r7, #14]
 8006af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	7b1b      	ldrb	r3, [r3, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f040 809d 	bne.w	8006c5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d04c      	beq.n	8006bc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	823b      	strh	r3, [r7, #16]
 8006b3a:	8a3b      	ldrh	r3, [r7, #16]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01b      	beq.n	8006b7c <USB_EPClearStall+0x6c>
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	81fb      	strh	r3, [r7, #14]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	441a      	add	r2, r3
 8006b66:	89fb      	ldrh	r3, [r7, #14]
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	78db      	ldrb	r3, [r3, #3]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d06c      	beq.n	8006c5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9a:	81bb      	strh	r3, [r7, #12]
 8006b9c:	89bb      	ldrh	r3, [r7, #12]
 8006b9e:	f083 0320 	eor.w	r3, r3, #32
 8006ba2:	81bb      	strh	r3, [r7, #12]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	89bb      	ldrh	r3, [r7, #12]
 8006bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	8013      	strh	r3, [r2, #0]
 8006bc4:	e04b      	b.n	8006c5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	82fb      	strh	r3, [r7, #22]
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01b      	beq.n	8006c16 <USB_EPClearStall+0x106>
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	82bb      	strh	r3, [r7, #20]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8abb      	ldrh	r3, [r7, #20]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	827b      	strh	r3, [r7, #18]
 8006c2e:	8a7b      	ldrh	r3, [r7, #18]
 8006c30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c34:	827b      	strh	r3, [r7, #18]
 8006c36:	8a7b      	ldrh	r3, [r7, #18]
 8006c38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c3c:	827b      	strh	r3, [r7, #18]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	8a7b      	ldrh	r3, [r7, #18]
 8006c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	371c      	adds	r7, #28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr

08006c6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	460b      	mov	r3, r1
 8006c74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d103      	bne.n	8006c84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cca:	68fb      	ldr	r3, [r7, #12]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b08d      	sub	sp, #52	; 0x34
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	80fb      	strh	r3, [r7, #6]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d02:	88bb      	ldrh	r3, [r7, #4]
 8006d04:	3301      	adds	r3, #1
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	005a      	lsls	r2, r3, #1
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d24:	e01e      	b.n	8006d64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	3301      	adds	r3, #1
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	3302      	adds	r3, #2
 8006d50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	3302      	adds	r3, #2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	3b01      	subs	r3, #1
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1dd      	bne.n	8006d26 <USB_WritePMA+0x3a>
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3734      	adds	r7, #52	; 0x34
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr

08006d76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b08b      	sub	sp, #44	; 0x2c
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	4611      	mov	r1, r2
 8006d82:	461a      	mov	r2, r3
 8006d84:	460b      	mov	r3, r1
 8006d86:	80fb      	strh	r3, [r7, #6]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d8c:	88bb      	ldrh	r3, [r7, #4]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	005a      	lsls	r2, r3, #1
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006da8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
 8006dae:	e01b      	b.n	8006de8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006db0:	6a3b      	ldr	r3, [r7, #32]
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	3302      	adds	r3, #2
 8006dbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	0a1b      	lsrs	r3, r3, #8
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	3302      	adds	r3, #2
 8006de0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	3b01      	subs	r3, #1
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e0      	bne.n	8006db0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dee:	88bb      	ldrh	r3, [r7, #4]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	701a      	strb	r2, [r3, #0]
  }
}
 8006e0a:	bf00      	nop
 8006e0c:	372c      	adds	r7, #44	; 0x2c
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c1b      	ldrb	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e30:	2202      	movs	r2, #2
 8006e32:	2181      	movs	r1, #129	; 0x81
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 fe86 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e44:	2202      	movs	r2, #2
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fe7c 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006e56:	e012      	b.n	8006e7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	2181      	movs	r1, #129	; 0x81
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fe71 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe68 	bl	8008b46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e7e:	2308      	movs	r3, #8
 8006e80:	2203      	movs	r2, #3
 8006e82:	2182      	movs	r1, #130	; 0x82
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 fe5e 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e94:	f001 ff7e 	bl	8008d94 <USBD_static_malloc>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	73fb      	strb	r3, [r7, #15]
 8006eae:	e026      	b.n	8006efe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 ff1e 	bl	8008d28 <USBD_LL_PrepareReceive>
 8006eec:	e007      	b.n	8006efe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ef4:	2340      	movs	r3, #64	; 0x40
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 ff15 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f18:	2181      	movs	r1, #129	; 0x81
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 fe39 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f26:	2101      	movs	r1, #1
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fe32 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f36:	2182      	movs	r1, #130	; 0x82
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fe2a 	bl	8008b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00e      	beq.n	8006f6c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 ff24 	bl	8008dac <USBD_static_free>
    pdev->pClassData = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b086      	sub	sp, #24
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d039      	beq.n	8007014 <USBD_CDC_Setup+0x9e>
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d17f      	bne.n	80070a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	88db      	ldrh	r3, [r3, #6]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d029      	beq.n	8007000 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da11      	bge.n	8006fda <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	88d2      	ldrh	r2, [r2, #6]
 8006fc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006fca:	6939      	ldr	r1, [r7, #16]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	88db      	ldrh	r3, [r3, #6]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 fa09 	bl	80083ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006fd8:	e06b      	b.n	80070b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	785a      	ldrb	r2, [r3, #1]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88db      	ldrh	r3, [r3, #6]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ff0:	6939      	ldr	r1, [r7, #16]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	88db      	ldrh	r3, [r3, #6]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fa24 	bl	8008446 <USBD_CtlPrepareRx>
      break;
 8006ffe:	e058      	b.n	80070b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	7850      	ldrb	r0, [r2, #1]
 800700c:	2200      	movs	r2, #0
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	4798      	blx	r3
      break;
 8007012:	e04e      	b.n	80070b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b0b      	cmp	r3, #11
 800701a:	d02e      	beq.n	800707a <USBD_CDC_Setup+0x104>
 800701c:	2b0b      	cmp	r3, #11
 800701e:	dc38      	bgt.n	8007092 <USBD_CDC_Setup+0x11c>
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <USBD_CDC_Setup+0xb4>
 8007024:	2b0a      	cmp	r3, #10
 8007026:	d014      	beq.n	8007052 <USBD_CDC_Setup+0xdc>
 8007028:	e033      	b.n	8007092 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007030:	2b03      	cmp	r3, #3
 8007032:	d107      	bne.n	8007044 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	2202      	movs	r2, #2
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f9d4 	bl	80083ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007042:	e02e      	b.n	80070a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f965 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 800704c:	2302      	movs	r3, #2
 800704e:	75fb      	strb	r3, [r7, #23]
          break;
 8007050:	e027      	b.n	80070a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007058:	2b03      	cmp	r3, #3
 800705a:	d107      	bne.n	800706c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800705c:	f107 030f 	add.w	r3, r7, #15
 8007060:	2201      	movs	r2, #1
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 f9c0 	bl	80083ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800706a:	e01a      	b.n	80070a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f951 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 8007074:	2302      	movs	r3, #2
 8007076:	75fb      	strb	r3, [r7, #23]
          break;
 8007078:	e013      	b.n	80070a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	2b03      	cmp	r3, #3
 8007082:	d00d      	beq.n	80070a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f001 f945 	bl	8008316 <USBD_CtlError>
            ret = USBD_FAIL;
 800708c:	2302      	movs	r3, #2
 800708e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007090:	e006      	b.n	80070a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f93e 	bl	8008316 <USBD_CtlError>
          ret = USBD_FAIL;
 800709a:	2302      	movs	r3, #2
 800709c:	75fb      	strb	r3, [r7, #23]
          break;
 800709e:	e000      	b.n	80070a2 <USBD_CDC_Setup+0x12c>
          break;
 80070a0:	bf00      	nop
      }
      break;
 80070a2:	e006      	b.n	80070b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 f935 	bl	8008316 <USBD_CtlError>
      ret = USBD_FAIL;
 80070ac:	2302      	movs	r3, #2
 80070ae:	75fb      	strb	r3, [r7, #23]
      break;
 80070b0:	bf00      	nop
  }

  return ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d03a      	beq.n	8007158 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	440b      	add	r3, r1
 80070f0:	331c      	adds	r3, #28
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d029      	beq.n	800714c <USBD_CDC_DataIn+0x90>
 80070f8:	78fa      	ldrb	r2, [r7, #3]
 80070fa:	6879      	ldr	r1, [r7, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	440b      	add	r3, r1
 8007106:	331c      	adds	r3, #28
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	78f9      	ldrb	r1, [r7, #3]
 800710c:	68b8      	ldr	r0, [r7, #8]
 800710e:	460b      	mov	r3, r1
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4403      	add	r3, r0
 8007118:	3338      	adds	r3, #56	; 0x38
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	331c      	adds	r3, #28
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800713e:	78f9      	ldrb	r1, [r7, #3]
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fdcc 	bl	8008ce2 <USBD_LL_Transmit>
 800714a:	e003      	b.n	8007154 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b084      	sub	sp, #16
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007174:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007176:	78fb      	ldrb	r3, [r7, #3]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fdf7 	bl	8008d6e <USBD_LL_GetRxDataSize>
 8007180:	4602      	mov	r2, r0
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80071a6:	4611      	mov	r1, r2
 80071a8:	4798      	blx	r3

    return USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	e000      	b.n	80071b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80071ae:	2302      	movs	r3, #2
  }
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <USBD_CDC_EP0_RxReady+0x46>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071d8:	2bff      	cmp	r3, #255	; 0xff
 80071da:	d010      	beq.n	80071fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80071ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071f2:	b292      	uxth	r2, r2
 80071f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	22ff      	movs	r2, #255	; 0xff
 80071fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2243      	movs	r2, #67	; 0x43
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	200000b4 	.word	0x200000b4

08007228 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2243      	movs	r2, #67	; 0x43
 8007234:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007236:	4b03      	ldr	r3, [pc, #12]	; (8007244 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	bc80      	pop	{r7}
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000070 	.word	0x20000070

08007248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2243      	movs	r2, #67	; 0x43
 8007254:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007256:	4b03      	ldr	r3, [pc, #12]	; (8007264 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007258:	4618      	mov	r0, r3
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	200000f8 	.word	0x200000f8

08007268 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	220a      	movs	r2, #10
 8007274:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007276:	4b03      	ldr	r3, [pc, #12]	; (8007284 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	2000002c 	.word	0x2000002c

08007288 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007292:	2302      	movs	r3, #2
 8007294:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d005      	beq.n	80072a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bc80      	pop	{r7}
 80072b2:	4770      	bx	lr

080072b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80072d2:	88fa      	ldrh	r2, [r7, #6]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr

080072e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr

0800730c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01c      	beq.n	8007360 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800732c:	2b00      	cmp	r3, #0
 800732e:	d115      	bne.n	800735c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800734e:	b29b      	uxth	r3, r3
 8007350:	2181      	movs	r1, #129	; 0x81
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fcc5 	bl	8008ce2 <USBD_LL_Transmit>

      return USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	e002      	b.n	8007362 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d017      	beq.n	80073b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	7c1b      	ldrb	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d109      	bne.n	80073a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fcc5 	bl	8008d28 <USBD_LL_PrepareReceive>
 800739e:	e007      	b.n	80073b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	2101      	movs	r1, #1
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 fcbc 	bl	8008d28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	4613      	mov	r3, r2
 80073ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80073d2:	2302      	movs	r3, #2
 80073d4:	e01a      	b.n	800740c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	79fa      	ldrb	r2, [r7, #7]
 8007402:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fb29 	bl	8008a5c <USBD_LL_Init>

  return USBD_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d006      	beq.n	8007436 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
 8007434:	e001      	b.n	800743a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007436:	2302      	movs	r3, #2
 8007438:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr

08007446 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 fb5e 	bl	8008b10 <USBD_LL_Start>

  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr

08007472 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800747e:	2302      	movs	r3, #2
 8007480:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	4611      	mov	r1, r2
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	4611      	mov	r1, r2
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	4798      	blx	r3

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fed8 	bl	800829e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80074fc:	461a      	mov	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b02      	cmp	r3, #2
 8007510:	d016      	beq.n	8007540 <USBD_LL_SetupStage+0x6a>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d81c      	bhi.n	8007550 <USBD_LL_SetupStage+0x7a>
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_LL_SetupStage+0x4a>
 800751a:	2b01      	cmp	r3, #1
 800751c:	d008      	beq.n	8007530 <USBD_LL_SetupStage+0x5a>
 800751e:	e017      	b.n	8007550 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9cb 	bl	80078c4 <USBD_StdDevReq>
      break;
 800752e:	e01a      	b.n	8007566 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa2d 	bl	8007998 <USBD_StdItfReq>
      break;
 800753e:	e012      	b.n	8007566 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fa6d 	bl	8007a28 <USBD_StdEPReq>
      break;
 800754e:	e00a      	b.n	8007566 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007556:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800755a:	b2db      	uxtb	r3, r3
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fb36 	bl	8008bd0 <USBD_LL_StallEP>
      break;
 8007564:	bf00      	nop
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	460b      	mov	r3, r1
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d14b      	bne.n	800761c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800758a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007592:	2b03      	cmp	r3, #3
 8007594:	d134      	bne.n	8007600 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d919      	bls.n	80075d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	1ad2      	subs	r2, r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d203      	bcs.n	80075c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	e002      	b.n	80075ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	461a      	mov	r2, r3
 80075cc:	6879      	ldr	r1, [r7, #4]
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 ff57 	bl	8008482 <USBD_CtlContinueRx>
 80075d4:	e038      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d105      	bne.n	80075f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 ff54 	bl	80084a6 <USBD_CtlSendStatus>
 80075fe:	e023      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007606:	2b05      	cmp	r3, #5
 8007608:	d11e      	bne.n	8007648 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007612:	2100      	movs	r1, #0
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f001 fadb 	bl	8008bd0 <USBD_LL_StallEP>
 800761a:	e015      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800762e:	2b03      	cmp	r3, #3
 8007630:	d108      	bne.n	8007644 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	7afa      	ldrb	r2, [r7, #11]
 800763c:	4611      	mov	r1, r2
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	4798      	blx	r3
 8007642:	e001      	b.n	8007648 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007644:	2302      	movs	r3, #2
 8007646:	e000      	b.n	800764a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	460b      	mov	r3, r1
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d17f      	bne.n	8007766 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3314      	adds	r3, #20
 800766a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007672:	2b02      	cmp	r3, #2
 8007674:	d15c      	bne.n	8007730 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d915      	bls.n	80076ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	1ad2      	subs	r2, r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	b29b      	uxth	r3, r3
 8007696:	461a      	mov	r2, r3
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fec1 	bl	8008422 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076a0:	2300      	movs	r3, #0
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 fb3e 	bl	8008d28 <USBD_LL_PrepareReceive>
 80076ac:	e04e      	b.n	800774c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	6912      	ldr	r2, [r2, #16]
 80076b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80076ba:	fb01 f202 	mul.w	r2, r1, r2
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11c      	bne.n	80076fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d316      	bcc.n	80076fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076da:	429a      	cmp	r2, r3
 80076dc:	d20f      	bcs.n	80076fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fe9d 	bl	8008422 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076f0:	2300      	movs	r3, #0
 80076f2:	2200      	movs	r2, #0
 80076f4:	2100      	movs	r1, #0
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f001 fb16 	bl	8008d28 <USBD_LL_PrepareReceive>
 80076fc:	e026      	b.n	800774c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007710:	2b03      	cmp	r3, #3
 8007712:	d105      	bne.n	8007720 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f001 fa54 	bl	8008bd0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fecf 	bl	80084cc <USBD_CtlReceiveStatus>
 800772e:	e00d      	b.n	800774c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007736:	2b04      	cmp	r3, #4
 8007738:	d004      	beq.n	8007744 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007744:	2180      	movs	r1, #128	; 0x80
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f001 fa42 	bl	8008bd0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007752:	2b01      	cmp	r3, #1
 8007754:	d11d      	bne.n	8007792 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fe81 	bl	800745e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007764:	e015      	b.n	8007792 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00d      	beq.n	800778e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007778:	2b03      	cmp	r3, #3
 800777a:	d108      	bne.n	800778e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	7afa      	ldrb	r2, [r7, #11]
 8007786:	4611      	mov	r1, r2
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	4798      	blx	r3
 800778c:	e001      	b.n	8007792 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	e000      	b.n	8007794 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a4:	2340      	movs	r3, #64	; 0x40
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f9cb 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	; 0x80
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f001 f9bd 	bl	8008b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2240      	movs	r2, #64	; 0x40
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6852      	ldr	r2, [r2, #4]
 800780c:	b2d2      	uxtb	r2, r2
 800780e:	4611      	mov	r1, r2
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
  }

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2204      	movs	r2, #4
 8007854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	bc80      	pop	{r7}
 8007862:	4770      	bx	lr

08007864 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007872:	2b04      	cmp	r3, #4
 8007874:	d105      	bne.n	8007882 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	bc80      	pop	{r7}
 800788c:	4770      	bx	lr

0800788e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789c:	2b03      	cmp	r3, #3
 800789e:	d10b      	bne.n	80078b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078da:	2b40      	cmp	r3, #64	; 0x40
 80078dc:	d005      	beq.n	80078ea <USBD_StdDevReq+0x26>
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d84f      	bhi.n	8007982 <USBD_StdDevReq+0xbe>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <USBD_StdDevReq+0x36>
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d14b      	bne.n	8007982 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
      break;
 80078f8:	e048      	b.n	800798c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	2b09      	cmp	r3, #9
 8007900:	d839      	bhi.n	8007976 <USBD_StdDevReq+0xb2>
 8007902:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <USBD_StdDevReq+0x44>)
 8007904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007908:	08007959 	.word	0x08007959
 800790c:	0800796d 	.word	0x0800796d
 8007910:	08007977 	.word	0x08007977
 8007914:	08007963 	.word	0x08007963
 8007918:	08007977 	.word	0x08007977
 800791c:	0800793b 	.word	0x0800793b
 8007920:	08007931 	.word	0x08007931
 8007924:	08007977 	.word	0x08007977
 8007928:	0800794f 	.word	0x0800794f
 800792c:	08007945 	.word	0x08007945
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9dc 	bl	8007cf0 <USBD_GetDescriptor>
          break;
 8007938:	e022      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb3f 	bl	8007fc0 <USBD_SetAddress>
          break;
 8007942:	e01d      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fb7e 	bl	8008048 <USBD_SetConfig>
          break;
 800794c:	e018      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc07 	bl	8008164 <USBD_GetConfig>
          break;
 8007956:	e013      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fc37 	bl	80081ce <USBD_GetStatus>
          break;
 8007960:	e00e      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc65 	bl	8008234 <USBD_SetFeature>
          break;
 800796a:	e009      	b.n	8007980 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc74 	bl	800825c <USBD_ClrFeature>
          break;
 8007974:	e004      	b.n	8007980 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fccc 	bl	8008316 <USBD_CtlError>
          break;
 800797e:	bf00      	nop
      }
      break;
 8007980:	e004      	b.n	800798c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fcc6 	bl	8008316 <USBD_CtlError>
      break;
 800798a:	bf00      	nop
  }

  return ret;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop

08007998 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d005      	beq.n	80079be <USBD_StdItfReq+0x26>
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d82e      	bhi.n	8007a14 <USBD_StdItfReq+0x7c>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <USBD_StdItfReq+0x26>
 80079ba:	2b20      	cmp	r3, #32
 80079bc:	d12a      	bne.n	8007a14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	3b01      	subs	r3, #1
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d81d      	bhi.n	8007a06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	889b      	ldrh	r3, [r3, #4]
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d813      	bhi.n	80079fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	88db      	ldrh	r3, [r3, #6]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <USBD_StdItfReq+0x78>
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10d      	bne.n	8007a10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fd56 	bl	80084a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079fa:	e009      	b.n	8007a10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc89 	bl	8008316 <USBD_CtlError>
          break;
 8007a04:	e004      	b.n	8007a10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc84 	bl	8008316 <USBD_CtlError>
          break;
 8007a0e:	e000      	b.n	8007a12 <USBD_StdItfReq+0x7a>
          break;
 8007a10:	bf00      	nop
      }
      break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc7d 	bl	8008316 <USBD_CtlError>
      break;
 8007a1c:	bf00      	nop
  }

  return USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	889b      	ldrh	r3, [r3, #4]
 8007a3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d007      	beq.n	8007a58 <USBD_StdEPReq+0x30>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	f200 8146 	bhi.w	8007cda <USBD_StdEPReq+0x2b2>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <USBD_StdEPReq+0x40>
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	f040 8141 	bne.w	8007cda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	4798      	blx	r3
      break;
 8007a66:	e13d      	b.n	8007ce4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d10a      	bne.n	8007a8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	e12d      	b.n	8007ce6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d007      	beq.n	8007aa2 <USBD_StdEPReq+0x7a>
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f300 811b 	bgt.w	8007cce <USBD_StdEPReq+0x2a6>
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d072      	beq.n	8007b82 <USBD_StdEPReq+0x15a>
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d03a      	beq.n	8007b16 <USBD_StdEPReq+0xee>
 8007aa0:	e115      	b.n	8007cce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d002      	beq.n	8007ab2 <USBD_StdEPReq+0x8a>
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d015      	beq.n	8007adc <USBD_StdEPReq+0xb4>
 8007ab0:	e02b      	b.n	8007b0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00c      	beq.n	8007ad2 <USBD_StdEPReq+0xaa>
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d009      	beq.n	8007ad2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f884 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ac8:	2180      	movs	r1, #128	; 0x80
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f880 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ad0:	e020      	b.n	8007b14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fc1e 	bl	8008316 <USBD_CtlError>
              break;
 8007ada:	e01b      	b.n	8007b14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	885b      	ldrh	r3, [r3, #2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10e      	bne.n	8007b02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <USBD_StdEPReq+0xda>
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d008      	beq.n	8007b02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	88db      	ldrh	r3, [r3, #6]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d104      	bne.n	8007b02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f867 	bl	8008bd0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fccf 	bl	80084a6 <USBD_CtlSendStatus>

              break;
 8007b08:	e004      	b.n	8007b14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fc02 	bl	8008316 <USBD_CtlError>
              break;
 8007b12:	bf00      	nop
          }
          break;
 8007b14:	e0e0      	b.n	8007cd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d002      	beq.n	8007b26 <USBD_StdEPReq+0xfe>
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d015      	beq.n	8007b50 <USBD_StdEPReq+0x128>
 8007b24:	e026      	b.n	8007b74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00c      	beq.n	8007b46 <USBD_StdEPReq+0x11e>
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b80      	cmp	r3, #128	; 0x80
 8007b30:	d009      	beq.n	8007b46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f84a 	bl	8008bd0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b3c:	2180      	movs	r1, #128	; 0x80
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f001 f846 	bl	8008bd0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b44:	e01c      	b.n	8007b80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fbe4 	bl	8008316 <USBD_CtlError>
              break;
 8007b4e:	e017      	b.n	8007b80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d112      	bne.n	8007b7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f851 	bl	8008c0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fc9a 	bl	80084a6 <USBD_CtlSendStatus>
              }
              break;
 8007b72:	e004      	b.n	8007b7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fbcd 	bl	8008316 <USBD_CtlError>
              break;
 8007b7c:	e000      	b.n	8007b80 <USBD_StdEPReq+0x158>
              break;
 8007b7e:	bf00      	nop
          }
          break;
 8007b80:	e0aa      	b.n	8007cd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d002      	beq.n	8007b92 <USBD_StdEPReq+0x16a>
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d032      	beq.n	8007bf6 <USBD_StdEPReq+0x1ce>
 8007b90:	e097      	b.n	8007cc2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <USBD_StdEPReq+0x180>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d004      	beq.n	8007ba8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fbb8 	bl	8008316 <USBD_CtlError>
                break;
 8007ba6:	e091      	b.n	8007ccc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da0b      	bge.n	8007bc8 <USBD_StdEPReq+0x1a0>
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	3310      	adds	r3, #16
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	e00b      	b.n	8007be0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bc8:	7bbb      	ldrb	r3, [r7, #14]
 8007bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4413      	add	r3, r2
 8007bde:	3304      	adds	r3, #4
 8007be0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	2202      	movs	r2, #2
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fbfb 	bl	80083ea <USBD_CtlSendData>
              break;
 8007bf4:	e06a      	b.n	8007ccc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da11      	bge.n	8007c22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	f003 020f 	and.w	r2, r3, #15
 8007c04:	6879      	ldr	r1, [r7, #4]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	440b      	add	r3, r1
 8007c10:	3318      	adds	r3, #24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d117      	bne.n	8007c48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fb7b 	bl	8008316 <USBD_CtlError>
                  break;
 8007c20:	e054      	b.n	8007ccc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fb68 	bl	8008316 <USBD_CtlError>
                  break;
 8007c46:	e041      	b.n	8007ccc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da0b      	bge.n	8007c68 <USBD_StdEPReq+0x240>
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c56:	4613      	mov	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4413      	add	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	3310      	adds	r3, #16
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4413      	add	r3, r2
 8007c64:	3304      	adds	r3, #4
 8007c66:	e00b      	b.n	8007c80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3304      	adds	r3, #4
 8007c80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <USBD_StdEPReq+0x266>
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b80      	cmp	r3, #128	; 0x80
 8007c8c:	d103      	bne.n	8007c96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e00e      	b.n	8007cb4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ffd6 	bl	8008c4c <USBD_LL_IsStallEP>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	e002      	b.n	8007cb4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fb95 	bl	80083ea <USBD_CtlSendData>
              break;
 8007cc0:	e004      	b.n	8007ccc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fb26 	bl	8008316 <USBD_CtlError>
              break;
 8007cca:	bf00      	nop
          }
          break;
 8007ccc:	e004      	b.n	8007cd8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fb20 	bl	8008316 <USBD_CtlError>
          break;
 8007cd6:	bf00      	nop
      }
      break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb1a 	bl	8008316 <USBD_CtlError>
      break;
 8007ce2:	bf00      	nop
  }

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	885b      	ldrh	r3, [r3, #2]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	2b06      	cmp	r3, #6
 8007d12:	f200 8128 	bhi.w	8007f66 <USBD_GetDescriptor+0x276>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <USBD_GetDescriptor+0x2c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d51 	.word	0x08007d51
 8007d24:	08007d91 	.word	0x08007d91
 8007d28:	08007f67 	.word	0x08007f67
 8007d2c:	08007f67 	.word	0x08007f67
 8007d30:	08007f07 	.word	0x08007f07
 8007d34:	08007f33 	.word	0x08007f33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      break;
 8007d4e:	e112      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7c1b      	ldrb	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d72:	e100      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 0208 	add.w	r2, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e0f2      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	885b      	ldrh	r3, [r3, #2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	f200 80ac 	bhi.w	8007ef4 <USBD_GetDescriptor+0x204>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_GetDescriptor+0xb4>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007e25 	.word	0x08007e25
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e8d 	.word	0x08007e8d
 8007db8:	08007ec1 	.word	0x08007ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e091      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa97 	bl	8008316 <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e089      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e077      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa7d 	bl	8008316 <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e06f      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e05d      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa63 	bl	8008316 <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e055      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e043      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa49 	bl	8008316 <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e029      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa2f 	bl	8008316 <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e021      	b.n	8007f04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e00f      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa15 	bl	8008316 <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e007      	b.n	8007f04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa0d 	bl	8008316 <USBD_CtlError>
          err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007f02:	e038      	b.n	8007f76 <USBD_GetDescriptor+0x286>
 8007f04:	e037      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7c1b      	ldrb	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4798      	blx	r3
 8007f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f20:	e029      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f9f6 	bl	8008316 <USBD_CtlError>
        err++;
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f30:	e021      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7c1b      	ldrb	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	f107 0208 	add.w	r2, r7, #8
 8007f46:	4610      	mov	r0, r2
 8007f48:	4798      	blx	r3
 8007f4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	2207      	movs	r2, #7
 8007f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f54:	e00f      	b.n	8007f76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f9dc 	bl	8008316 <USBD_CtlError>
        err++;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	3301      	adds	r3, #1
 8007f62:	72fb      	strb	r3, [r7, #11]
      break;
 8007f64:	e007      	b.n	8007f76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f9d4 	bl	8008316 <USBD_CtlError>
      err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	bf00      	nop
  }

  if (err != 0U)
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11c      	bne.n	8007fb6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f7c:	893b      	ldrh	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d011      	beq.n	8007fa6 <USBD_GetDescriptor+0x2b6>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	88db      	ldrh	r3, [r3, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88da      	ldrh	r2, [r3, #6]
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bf28      	it	cs
 8007f94:	4613      	movcs	r3, r2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa22 	bl	80083ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	88db      	ldrh	r3, [r3, #6]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d104      	bne.n	8007fb8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa79 	bl	80084a6 <USBD_CtlSendStatus>
 8007fb4:	e000      	b.n	8007fb8 <USBD_GetDescriptor+0x2c8>
    return;
 8007fb6:	bf00      	nop
    }
  }
}
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop

08007fc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d130      	bne.n	8008034 <USBD_SetAddress+0x74>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d12c      	bne.n	8008034 <USBD_SetAddress+0x74>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe0:	d828      	bhi.n	8008034 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d104      	bne.n	8008002 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f98b 	bl	8008316 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008000:	e01d      	b.n	800803e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7bfa      	ldrb	r2, [r7, #15]
 8008006:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fe48 	bl	8008ca4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa46 	bl	80084a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008028:	e009      	b.n	800803e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008032:	e004      	b.n	800803e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f96d 	bl	8008316 <USBD_CtlError>
  }
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	4b41      	ldr	r3, [pc, #260]	; (8008160 <USBD_SetConfig+0x118>)
 800805a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800805c:	4b40      	ldr	r3, [pc, #256]	; (8008160 <USBD_SetConfig+0x118>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d904      	bls.n	800806e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f955 	bl	8008316 <USBD_CtlError>
 800806c:	e075      	b.n	800815a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008074:	2b02      	cmp	r3, #2
 8008076:	d002      	beq.n	800807e <USBD_SetConfig+0x36>
 8008078:	2b03      	cmp	r3, #3
 800807a:	d023      	beq.n	80080c4 <USBD_SetConfig+0x7c>
 800807c:	e062      	b.n	8008144 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800807e:	4b38      	ldr	r3, [pc, #224]	; (8008160 <USBD_SetConfig+0x118>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01a      	beq.n	80080bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008086:	4b36      	ldr	r3, [pc, #216]	; (8008160 <USBD_SetConfig+0x118>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2203      	movs	r2, #3
 8008094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008098:	4b31      	ldr	r3, [pc, #196]	; (8008160 <USBD_SetConfig+0x118>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff f9e7 	bl	8007472 <USBD_SetClassConfig>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d104      	bne.n	80080b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f932 	bl	8008316 <USBD_CtlError>
            return;
 80080b2:	e052      	b.n	800815a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f9f6 	bl	80084a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080ba:	e04e      	b.n	800815a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9f2 	bl	80084a6 <USBD_CtlSendStatus>
        break;
 80080c2:	e04a      	b.n	800815a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80080c4:	4b26      	ldr	r3, [pc, #152]	; (8008160 <USBD_SetConfig+0x118>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d112      	bne.n	80080f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80080d4:	4b22      	ldr	r3, [pc, #136]	; (8008160 <USBD_SetConfig+0x118>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80080de:	4b20      	ldr	r3, [pc, #128]	; (8008160 <USBD_SetConfig+0x118>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff f9e3 	bl	80074b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f9db 	bl	80084a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80080f0:	e033      	b.n	800815a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <USBD_SetConfig+0x118>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d01d      	beq.n	800813c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff f9d1 	bl	80074b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800810e:	4b14      	ldr	r3, [pc, #80]	; (8008160 <USBD_SetConfig+0x118>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <USBD_SetConfig+0x118>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff f9a7 	bl	8007472 <USBD_SetClassConfig>
 8008124:	4603      	mov	r3, r0
 8008126:	2b02      	cmp	r3, #2
 8008128:	d104      	bne.n	8008134 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8f2 	bl	8008316 <USBD_CtlError>
            return;
 8008132:	e012      	b.n	800815a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f9b6 	bl	80084a6 <USBD_CtlSendStatus>
        break;
 800813a:	e00e      	b.n	800815a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f9b2 	bl	80084a6 <USBD_CtlSendStatus>
        break;
 8008142:	e00a      	b.n	800815a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f8e5 	bl	8008316 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800814c:	4b04      	ldr	r3, [pc, #16]	; (8008160 <USBD_SetConfig+0x118>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff f9ac 	bl	80074b0 <USBD_ClrClassConfig>
        break;
 8008158:	bf00      	nop
    }
  }
}
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	2000024c 	.word	0x2000024c

08008164 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	88db      	ldrh	r3, [r3, #6]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d004      	beq.n	8008180 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f8cc 	bl	8008316 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800817e:	e022      	b.n	80081c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008186:	2b02      	cmp	r3, #2
 8008188:	dc02      	bgt.n	8008190 <USBD_GetConfig+0x2c>
 800818a:	2b00      	cmp	r3, #0
 800818c:	dc03      	bgt.n	8008196 <USBD_GetConfig+0x32>
 800818e:	e015      	b.n	80081bc <USBD_GetConfig+0x58>
 8008190:	2b03      	cmp	r3, #3
 8008192:	d00b      	beq.n	80081ac <USBD_GetConfig+0x48>
 8008194:	e012      	b.n	80081bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3308      	adds	r3, #8
 80081a0:	2201      	movs	r2, #1
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f920 	bl	80083ea <USBD_CtlSendData>
        break;
 80081aa:	e00c      	b.n	80081c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	2201      	movs	r2, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f918 	bl	80083ea <USBD_CtlSendData>
        break;
 80081ba:	e004      	b.n	80081c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f8a9 	bl	8008316 <USBD_CtlError>
        break;
 80081c4:	bf00      	nop
}
 80081c6:	bf00      	nop
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081de:	3b01      	subs	r3, #1
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d81e      	bhi.n	8008222 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d004      	beq.n	80081f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f891 	bl	8008316 <USBD_CtlError>
        break;
 80081f4:	e01a      	b.n	800822c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f043 0202 	orr.w	r2, r3, #2
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	330c      	adds	r3, #12
 8008216:	2202      	movs	r2, #2
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f8e5 	bl	80083ea <USBD_CtlSendData>
      break;
 8008220:	e004      	b.n	800822c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f876 	bl	8008316 <USBD_CtlError>
      break;
 800822a:	bf00      	nop
  }
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	885b      	ldrh	r3, [r3, #2]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d106      	bne.n	8008254 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f929 	bl	80084a6 <USBD_CtlSendStatus>
  }
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826c:	3b01      	subs	r3, #1
 800826e:	2b02      	cmp	r3, #2
 8008270:	d80b      	bhi.n	800828a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	885b      	ldrh	r3, [r3, #2]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d10c      	bne.n	8008294 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f90f 	bl	80084a6 <USBD_CtlSendStatus>
      }
      break;
 8008288:	e004      	b.n	8008294 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f842 	bl	8008316 <USBD_CtlError>
      break;
 8008292:	e000      	b.n	8008296 <USBD_ClrFeature+0x3a>
      break;
 8008294:	bf00      	nop
  }
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	785a      	ldrb	r2, [r3, #1]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	3302      	adds	r3, #2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	3303      	adds	r3, #3
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4413      	add	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	3304      	adds	r3, #4
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	3305      	adds	r3, #5
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4413      	add	r3, r2
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	3306      	adds	r3, #6
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3307      	adds	r3, #7
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	b29b      	uxth	r3, r3
 8008304:	4413      	add	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	80da      	strh	r2, [r3, #6]

}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008320:	2180      	movs	r1, #128	; 0x80
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc54 	bl	8008bd0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008328:	2100      	movs	r1, #0
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc50 	bl	8008bd0 <USBD_LL_StallEP>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d032      	beq.n	80083b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 f834 	bl	80083bc <USBD_GetLen>
 8008354:	4603      	mov	r3, r0
 8008356:	3301      	adds	r3, #1
 8008358:	b29b      	uxth	r3, r3
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	75fa      	strb	r2, [r7, #23]
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4413      	add	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	75fa      	strb	r2, [r7, #23]
 800837a:	461a      	mov	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4413      	add	r3, r2
 8008380:	2203      	movs	r2, #3
 8008382:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008384:	e012      	b.n	80083ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	60fa      	str	r2, [r7, #12]
 800838c:	7dfa      	ldrb	r2, [r7, #23]
 800838e:	1c51      	adds	r1, r2, #1
 8008390:	75f9      	strb	r1, [r7, #23]
 8008392:	4611      	mov	r1, r2
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	440a      	add	r2, r1
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	75fa      	strb	r2, [r7, #23]
 80083a2:	461a      	mov	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4413      	add	r3, r2
 80083a8:	2200      	movs	r2, #0
 80083aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e8      	bne.n	8008386 <USBD_GetString+0x4e>
    }
  }
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80083c8:	e005      	b.n	80083d6 <USBD_GetLen+0x1a>
  {
    len++;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	3301      	adds	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3301      	adds	r3, #1
 80083d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f5      	bne.n	80083ca <USBD_GetLen+0xe>
  }

  return len;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	4613      	mov	r3, r2
 80083f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008400:	88fa      	ldrh	r2, [r7, #6]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008406:	88fa      	ldrh	r2, [r7, #6]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	2100      	movs	r1, #0
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 fc65 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	2100      	movs	r1, #0
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fc53 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2203      	movs	r2, #3
 8008458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800845c:	88fa      	ldrh	r2, [r7, #6]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008464:	88fa      	ldrh	r2, [r7, #6]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	2100      	movs	r1, #0
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fc58 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	4613      	mov	r3, r2
 800848e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008490:	88fb      	ldrh	r3, [r7, #6]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fc46 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2204      	movs	r2, #4
 80084b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084b6:	2300      	movs	r3, #0
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc10 	bl	8008ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2205      	movs	r2, #5
 80084d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fc20 	bl	8008d28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
	...

080084f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80084f8:	2200      	movs	r2, #0
 80084fa:	4912      	ldr	r1, [pc, #72]	; (8008544 <MX_USB_DEVICE_Init+0x50>)
 80084fc:	4812      	ldr	r0, [pc, #72]	; (8008548 <MX_USB_DEVICE_Init+0x54>)
 80084fe:	f7fe ff5e 	bl	80073be <USBD_Init>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d001      	beq.n	800850c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008508:	f7f7 ffc6 	bl	8000498 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800850c:	490f      	ldr	r1, [pc, #60]	; (800854c <MX_USB_DEVICE_Init+0x58>)
 800850e:	480e      	ldr	r0, [pc, #56]	; (8008548 <MX_USB_DEVICE_Init+0x54>)
 8008510:	f7fe ff80 	bl	8007414 <USBD_RegisterClass>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800851a:	f7f7 ffbd 	bl	8000498 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800851e:	490c      	ldr	r1, [pc, #48]	; (8008550 <MX_USB_DEVICE_Init+0x5c>)
 8008520:	4809      	ldr	r0, [pc, #36]	; (8008548 <MX_USB_DEVICE_Init+0x54>)
 8008522:	f7fe feb1 	bl	8007288 <USBD_CDC_RegisterInterface>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800852c:	f7f7 ffb4 	bl	8000498 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008530:	4805      	ldr	r0, [pc, #20]	; (8008548 <MX_USB_DEVICE_Init+0x54>)
 8008532:	f7fe ff88 	bl	8007446 <USBD_Start>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800853c:	f7f7 ffac 	bl	8000498 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008540:	bf00      	nop
 8008542:	bd80      	pop	{r7, pc}
 8008544:	2000014c 	.word	0x2000014c
 8008548:	20000250 	.word	0x20000250
 800854c:	20000038 	.word	0x20000038
 8008550:	2000013c 	.word	0x2000013c

08008554 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008558:	2200      	movs	r2, #0
 800855a:	4905      	ldr	r1, [pc, #20]	; (8008570 <CDC_Init_FS+0x1c>)
 800855c:	4805      	ldr	r0, [pc, #20]	; (8008574 <CDC_Init_FS+0x20>)
 800855e:	f7fe fea9 	bl	80072b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008562:	4905      	ldr	r1, [pc, #20]	; (8008578 <CDC_Init_FS+0x24>)
 8008564:	4803      	ldr	r0, [pc, #12]	; (8008574 <CDC_Init_FS+0x20>)
 8008566:	f7fe febe 	bl	80072e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800856a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800856c:	4618      	mov	r0, r3
 800856e:	bd80      	pop	{r7, pc}
 8008570:	200008fc 	.word	0x200008fc
 8008574:	20000250 	.word	0x20000250
 8008578:	20000514 	.word	0x20000514

0800857c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008580:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008582:	4618      	mov	r0, r3
 8008584:	46bd      	mov	sp, r7
 8008586:	bc80      	pop	{r7}
 8008588:	4770      	bx	lr
	...

0800858c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	6039      	str	r1, [r7, #0]
 8008596:	71fb      	strb	r3, [r7, #7]
 8008598:	4613      	mov	r3, r2
 800859a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b23      	cmp	r3, #35	; 0x23
 80085a0:	d84a      	bhi.n	8008638 <CDC_Control_FS+0xac>
 80085a2:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <CDC_Control_FS+0x1c>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	08008639 	.word	0x08008639
 80085ac:	08008639 	.word	0x08008639
 80085b0:	08008639 	.word	0x08008639
 80085b4:	08008639 	.word	0x08008639
 80085b8:	08008639 	.word	0x08008639
 80085bc:	08008639 	.word	0x08008639
 80085c0:	08008639 	.word	0x08008639
 80085c4:	08008639 	.word	0x08008639
 80085c8:	08008639 	.word	0x08008639
 80085cc:	08008639 	.word	0x08008639
 80085d0:	08008639 	.word	0x08008639
 80085d4:	08008639 	.word	0x08008639
 80085d8:	08008639 	.word	0x08008639
 80085dc:	08008639 	.word	0x08008639
 80085e0:	08008639 	.word	0x08008639
 80085e4:	08008639 	.word	0x08008639
 80085e8:	08008639 	.word	0x08008639
 80085ec:	08008639 	.word	0x08008639
 80085f0:	08008639 	.word	0x08008639
 80085f4:	08008639 	.word	0x08008639
 80085f8:	08008639 	.word	0x08008639
 80085fc:	08008639 	.word	0x08008639
 8008600:	08008639 	.word	0x08008639
 8008604:	08008639 	.word	0x08008639
 8008608:	08008639 	.word	0x08008639
 800860c:	08008639 	.word	0x08008639
 8008610:	08008639 	.word	0x08008639
 8008614:	08008639 	.word	0x08008639
 8008618:	08008639 	.word	0x08008639
 800861c:	08008639 	.word	0x08008639
 8008620:	08008639 	.word	0x08008639
 8008624:	08008639 	.word	0x08008639
 8008628:	08008639 	.word	0x08008639
 800862c:	08008639 	.word	0x08008639
 8008630:	08008639 	.word	0x08008639
 8008634:	08008639 	.word	0x08008639
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008638:	bf00      	nop
  }

  return (USBD_OK);
 800863a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800863c:	4618      	mov	r0, r3
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop

08008648 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4805      	ldr	r0, [pc, #20]	; (800866c <CDC_Receive_FS+0x24>)
 8008656:	f7fe fe46 	bl	80072e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800865a:	4804      	ldr	r0, [pc, #16]	; (800866c <CDC_Receive_FS+0x24>)
 800865c:	f7fe fe85 	bl	800736a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008660:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000250 	.word	0x20000250

08008670 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008680:	4b0d      	ldr	r3, [pc, #52]	; (80086b8 <CDC_Transmit_FS+0x48>)
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008692:	2301      	movs	r3, #1
 8008694:	e00b      	b.n	80086ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	461a      	mov	r2, r3
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4806      	ldr	r0, [pc, #24]	; (80086b8 <CDC_Transmit_FS+0x48>)
 800869e:	f7fe fe09 	bl	80072b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <CDC_Transmit_FS+0x48>)
 80086a4:	f7fe fe32 	bl	800730c <USBD_CDC_TransmitPacket>
 80086a8:	4603      	mov	r3, r0
 80086aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000250 	.word	0x20000250

080086bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2212      	movs	r2, #18
 80086cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086ce:	4b03      	ldr	r3, [pc, #12]	; (80086dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20000168 	.word	0x20000168

080086e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	6039      	str	r1, [r7, #0]
 80086ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	2204      	movs	r2, #4
 80086f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80086f2:	4b03      	ldr	r3, [pc, #12]	; (8008700 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	2000017c 	.word	0x2000017c

08008704 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	6039      	str	r1, [r7, #0]
 800870e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d105      	bne.n	8008722 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4907      	ldr	r1, [pc, #28]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
 800871a:	4808      	ldr	r0, [pc, #32]	; (800873c <USBD_FS_ProductStrDescriptor+0x38>)
 800871c:	f7ff fe0c 	bl	8008338 <USBD_GetString>
 8008720:	e004      	b.n	800872c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	4904      	ldr	r1, [pc, #16]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
 8008726:	4805      	ldr	r0, [pc, #20]	; (800873c <USBD_FS_ProductStrDescriptor+0x38>)
 8008728:	f7ff fe06 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000ce4 	.word	0x20000ce4
 800873c:	08008ebc 	.word	0x08008ebc

08008740 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	6039      	str	r1, [r7, #0]
 800874a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	4904      	ldr	r1, [pc, #16]	; (8008760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008750:	4804      	ldr	r0, [pc, #16]	; (8008764 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008752:	f7ff fdf1 	bl	8008338 <USBD_GetString>
  return USBD_StrDesc;
 8008756:	4b02      	ldr	r3, [pc, #8]	; (8008760 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008758:	4618      	mov	r0, r3
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000ce4 	.word	0x20000ce4
 8008764:	08008ed4 	.word	0x08008ed4

08008768 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	221a      	movs	r2, #26
 8008778:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800877a:	f000 f843 	bl	8008804 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800877e:	4b02      	ldr	r3, [pc, #8]	; (8008788 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	20000180 	.word	0x20000180

0800878c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	4907      	ldr	r1, [pc, #28]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087a2:	4808      	ldr	r0, [pc, #32]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087a4:	f7ff fdc8 	bl	8008338 <USBD_GetString>
 80087a8:	e004      	b.n	80087b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087b0:	f7ff fdc2 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000ce4 	.word	0x20000ce4
 80087c4:	08008ee8 	.word	0x08008ee8

080087c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087e0:	f7ff fdaa 	bl	8008338 <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	; (8008800 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087ec:	f7ff fda4 	bl	8008338 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000ce4 	.word	0x20000ce4
 8008800:	08008ef4 	.word	0x08008ef4

08008804 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <Get_SerialNum+0x44>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008810:	4b0e      	ldr	r3, [pc, #56]	; (800884c <Get_SerialNum+0x48>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <Get_SerialNum+0x4c>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4413      	add	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800882a:	2208      	movs	r2, #8
 800882c:	4909      	ldr	r1, [pc, #36]	; (8008854 <Get_SerialNum+0x50>)
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 f814 	bl	800885c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008834:	2204      	movs	r2, #4
 8008836:	4908      	ldr	r1, [pc, #32]	; (8008858 <Get_SerialNum+0x54>)
 8008838:	68b8      	ldr	r0, [r7, #8]
 800883a:	f000 f80f 	bl	800885c <IntToUnicode>
  }
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	1ffff7e8 	.word	0x1ffff7e8
 800884c:	1ffff7ec 	.word	0x1ffff7ec
 8008850:	1ffff7f0 	.word	0x1ffff7f0
 8008854:	20000182 	.word	0x20000182
 8008858:	20000192 	.word	0x20000192

0800885c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800886e:	2300      	movs	r3, #0
 8008870:	75fb      	strb	r3, [r7, #23]
 8008872:	e027      	b.n	80088c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	0f1b      	lsrs	r3, r3, #28
 8008878:	2b09      	cmp	r3, #9
 800887a:	d80b      	bhi.n	8008894 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0f1b      	lsrs	r3, r3, #28
 8008880:	b2da      	uxtb	r2, r3
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	4619      	mov	r1, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	440b      	add	r3, r1
 800888c:	3230      	adds	r2, #48	; 0x30
 800888e:	b2d2      	uxtb	r2, r2
 8008890:	701a      	strb	r2, [r3, #0]
 8008892:	e00a      	b.n	80088aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0f1b      	lsrs	r3, r3, #28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	440b      	add	r3, r1
 80088a4:	3237      	adds	r2, #55	; 0x37
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	3301      	adds	r3, #1
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	4413      	add	r3, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	3301      	adds	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
 80088c4:	7dfa      	ldrb	r2, [r7, #23]
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d3d3      	bcc.n	8008874 <IntToUnicode+0x18>
  }
}
 80088cc:	bf00      	nop
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <HAL_PCD_MspInit+0x44>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d113      	bne.n	8008912 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088f4:	61d3      	str	r3, [r2, #28]
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <HAL_PCD_MspInit+0x48>)
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2100      	movs	r1, #0
 8008906:	2014      	movs	r0, #20
 8008908:	f7f8 fbf3 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800890c:	2014      	movs	r0, #20
 800890e:	f7f8 fc0c 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40005c00 	.word	0x40005c00
 8008920:	40021000 	.word	0x40021000

08008924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008938:	4619      	mov	r1, r3
 800893a:	4610      	mov	r0, r2
 800893c:	f7fe fdcb 	bl	80074d6 <USBD_LL_SetupStage>
}
 8008940:	bf00      	nop
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800895a:	78fa      	ldrb	r2, [r7, #3]
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	440b      	add	r3, r1
 8008968:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	4619      	mov	r1, r3
 8008972:	f7fe fdfd 	bl	8007570 <USBD_LL_DataOutStage>
}
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
 8008986:	460b      	mov	r3, r1
 8008988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008990:	78fa      	ldrb	r2, [r7, #3]
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4613      	mov	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4413      	add	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	440b      	add	r3, r1
 800899e:	333c      	adds	r3, #60	; 0x3c
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	78fb      	ldrb	r3, [r7, #3]
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7fe fe54 	bl	8007652 <USBD_LL_DataInStage>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe ff64 	bl	800788e <USBD_LL_SOF>
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d001      	beq.n	80089e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089e2:	f7f7 fd59 	bl	8000498 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089ec:	7bfa      	ldrb	r2, [r7, #15]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe ff14 	bl	800781e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe fecd 	bl	800779c <USBD_LL_Reset>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe ff0e 	bl	800783c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d005      	beq.n	8008a34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4a03      	ldr	r2, [pc, #12]	; (8008a3c <HAL_PCD_SuspendCallback+0x30>)
 8008a2e:	f043 0306 	orr.w	r3, r3, #6
 8008a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	e000ed00 	.word	0xe000ed00

08008a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe ff08 	bl	8007864 <USBD_LL_Resume>
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a64:	4a28      	ldr	r2, [pc, #160]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a76:	4a25      	ldr	r2, [pc, #148]	; (8008b0c <USBD_LL_Init+0xb0>)
 8008a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a7a:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a80:	4b21      	ldr	r3, [pc, #132]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a82:	2202      	movs	r2, #2
 8008a84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a86:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a8c:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a92:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008a98:	481b      	ldr	r0, [pc, #108]	; (8008b08 <USBD_LL_Init+0xac>)
 8008a9a:	f7f8 fd16 	bl	80014ca <HAL_PCD_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008aa4:	f7f7 fcf8 	bl	8000498 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aae:	2318      	movs	r3, #24
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	f7fa f98a 	bl	8002dcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008abe:	2358      	movs	r3, #88	; 0x58
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2180      	movs	r1, #128	; 0x80
 8008ac4:	f7fa f982 	bl	8002dcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ace:	23c0      	movs	r3, #192	; 0xc0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2181      	movs	r1, #129	; 0x81
 8008ad4:	f7fa f97a 	bl	8002dcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ade:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	f7fa f971 	bl	8002dcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af4:	2200      	movs	r2, #0
 8008af6:	2182      	movs	r1, #130	; 0x82
 8008af8:	f7fa f968 	bl	8002dcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000ee4 	.word	0x20000ee4
 8008b0c:	40005c00 	.word	0x40005c00

08008b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f8 fdda 	bl	80016e0 <HAL_PCD_Start>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 f94e 	bl	8008dd4 <USBD_Get_USB_Status>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	4608      	mov	r0, r1
 8008b50:	4611      	mov	r1, r2
 8008b52:	461a      	mov	r2, r3
 8008b54:	4603      	mov	r3, r0
 8008b56:	70fb      	strb	r3, [r7, #3]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70bb      	strb	r3, [r7, #2]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b6e:	78bb      	ldrb	r3, [r7, #2]
 8008b70:	883a      	ldrh	r2, [r7, #0]
 8008b72:	78f9      	ldrb	r1, [r7, #3]
 8008b74:	f7f8 ff52 	bl	8001a1c <HAL_PCD_EP_Open>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f928 	bl	8008dd4 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7f8 ff99 	bl	8001ae8 <HAL_PCD_EP_Close>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 f909 	bl	8008dd4 <USBD_Get_USB_Status>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f9 f859 	bl	8001ca6 <HAL_PCD_EP_SetStall>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 f8ea 	bl	8008dd4 <USBD_Get_USB_Status>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7f9 f89a 	bl	8001d66 <HAL_PCD_EP_ClrStall>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 f8cb 	bl	8008dd4 <USBD_Get_USB_Status>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0c      	bge.n	8008c82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6e:	68f9      	ldr	r1, [r7, #12]
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	440b      	add	r3, r1
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	e00b      	b.n	8008c9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c88:	68f9      	ldr	r1, [r7, #12]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	00db      	lsls	r3, r3, #3
 8008c92:	440b      	add	r3, r1
 8008c94:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c98:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bc80      	pop	{r7}
 8008ca2:	4770      	bx	lr

08008ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f8 fe85 	bl	80019d2 <HAL_PCD_SetAddress>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 f880 	bl	8008dd4 <USBD_Get_USB_Status>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b086      	sub	sp, #24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	607a      	str	r2, [r7, #4]
 8008cec:	461a      	mov	r2, r3
 8008cee:	460b      	mov	r3, r1
 8008cf0:	72fb      	strb	r3, [r7, #11]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	7af9      	ldrb	r1, [r7, #11]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f7f8 ff89 	bl	8001c20 <HAL_PCD_EP_Transmit>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f85d 	bl	8008dd4 <USBD_Get_USB_Status>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	461a      	mov	r2, r3
 8008d34:	460b      	mov	r3, r1
 8008d36:	72fb      	strb	r3, [r7, #11]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d4a:	893b      	ldrh	r3, [r7, #8]
 8008d4c:	7af9      	ldrb	r1, [r7, #11]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	f7f8 ff12 	bl	8001b78 <HAL_PCD_EP_Receive>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f83a 	bl	8008dd4 <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d64:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f8 ff34 	bl	8001bf2 <HAL_PCD_EP_GetRxCount>
 8008d8a:	4603      	mov	r3, r0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_static_malloc+0x14>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr
 8008da8:	200011d0 	.word	0x200011d0

08008dac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]

}
 8008db4:	bf00      	nop
 8008db6:	370c      	adds	r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr

08008dd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d817      	bhi.n	8008e18 <USBD_Get_USB_Status+0x44>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <USBD_Get_USB_Status+0x1c>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e07 	.word	0x08008e07
 8008df8:	08008e0d 	.word	0x08008e0d
 8008dfc:	08008e13 	.word	0x08008e13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
    break;
 8008e04:	e00b      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0a:	e008      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e10:	e005      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e12:	2302      	movs	r3, #2
 8008e14:	73fb      	strb	r3, [r7, #15]
    break;
 8008e16:	e002      	b.n	8008e1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1c:	bf00      	nop
  }
  return usb_status;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bc80      	pop	{r7}
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop

08008e2c <__libc_init_array>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	2600      	movs	r6, #0
 8008e30:	4d0c      	ldr	r5, [pc, #48]	; (8008e64 <__libc_init_array+0x38>)
 8008e32:	4c0d      	ldr	r4, [pc, #52]	; (8008e68 <__libc_init_array+0x3c>)
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	42a6      	cmp	r6, r4
 8008e3a:	d109      	bne.n	8008e50 <__libc_init_array+0x24>
 8008e3c:	f000 f822 	bl	8008e84 <_init>
 8008e40:	2600      	movs	r6, #0
 8008e42:	4d0a      	ldr	r5, [pc, #40]	; (8008e6c <__libc_init_array+0x40>)
 8008e44:	4c0a      	ldr	r4, [pc, #40]	; (8008e70 <__libc_init_array+0x44>)
 8008e46:	1b64      	subs	r4, r4, r5
 8008e48:	10a4      	asrs	r4, r4, #2
 8008e4a:	42a6      	cmp	r6, r4
 8008e4c:	d105      	bne.n	8008e5a <__libc_init_array+0x2e>
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e54:	4798      	blx	r3
 8008e56:	3601      	adds	r6, #1
 8008e58:	e7ee      	b.n	8008e38 <__libc_init_array+0xc>
 8008e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5e:	4798      	blx	r3
 8008e60:	3601      	adds	r6, #1
 8008e62:	e7f2      	b.n	8008e4a <__libc_init_array+0x1e>
 8008e64:	08008f14 	.word	0x08008f14
 8008e68:	08008f14 	.word	0x08008f14
 8008e6c:	08008f14 	.word	0x08008f14
 8008e70:	08008f18 	.word	0x08008f18

08008e74 <memset>:
 8008e74:	4603      	mov	r3, r0
 8008e76:	4402      	add	r2, r0
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d100      	bne.n	8008e7e <memset+0xa>
 8008e7c:	4770      	bx	lr
 8008e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e82:	e7f9      	b.n	8008e78 <memset+0x4>

08008e84 <_init>:
 8008e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e86:	bf00      	nop
 8008e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8a:	bc08      	pop	{r3}
 8008e8c:	469e      	mov	lr, r3
 8008e8e:	4770      	bx	lr

08008e90 <_fini>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr
