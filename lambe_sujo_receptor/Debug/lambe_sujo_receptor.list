
lambe_sujo_receptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afbc  0800afbc  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800afbc  0800afbc  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afbc  0800afbc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc0  0800afc0  0001afc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800afc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  20000200  0800b1c4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000159c  0800b1c4  0002159c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014efd  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003584  00000000  00000000  00035126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  000386b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b22c  00000000  00000000  0003aab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001637c  00000000  00000000  00055ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f41d  00000000  00000000  0006c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb47d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  000fb4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000200 	.word	0x20000200
 8000128:	00000000 	.word	0x00000000
 800012c:	0800aee8 	.word	0x0800aee8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000204 	.word	0x20000204
 8000148:	0800aee8 	.word	0x0800aee8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_IC_CaptureCallback>:
uint32_t counter2 = 0;
uint16_t position2 = 0;
int16_t speed2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d10a      	bne.n	8000184 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		counter = __HAL_TIM_GET_COUNTER(htim);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000174:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <HAL_TIM_IC_CaptureCallback+0x50>)
 8000176:	6013      	str	r3, [r2, #0]
		position = (int16_t)counter;
 8000178:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <HAL_TIM_IC_CaptureCallback+0x50>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000180:	801a      	strh	r2, [r3, #0]
	}else if(htim->Instance == TIM4){
		counter2 = __HAL_TIM_GET_COUNTER(htim);
		position2 = (int16_t)counter2;
	}

}
 8000182:	e00e      	b.n	80001a2 <HAL_TIM_IC_CaptureCallback+0x46>
	}else if(htim->Instance == TIM4){
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a0a      	ldr	r2, [pc, #40]	; (80001b4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d109      	bne.n	80001a2 <HAL_TIM_IC_CaptureCallback+0x46>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000194:	4a08      	ldr	r2, [pc, #32]	; (80001b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000196:	6013      	str	r3, [r2, #0]
		position2 = (int16_t)counter2;
 8000198:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	b29a      	uxth	r2, r3
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <HAL_TIM_IC_CaptureCallback+0x60>)
 80001a0:	801a      	strh	r2, [r3, #0]
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200003b4 	.word	0x200003b4
 80001b0:	200003b8 	.word	0x200003b8
 80001b4:	40000800 	.word	0x40000800
 80001b8:	200003bc 	.word	0x200003bc
 80001bc:	200003c0 	.word	0x200003c0

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c4:	f001 f978 	bl	80014b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c8:	f000 f88c 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001cc:	f000 faf0 	bl	80007b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d0:	f000 f8e2 	bl	8000398 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001d4:	f000 f916 	bl	8000404 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001d8:	f000 f9cc 	bl	8000574 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001dc:	f000 fa1e 	bl	800061c <MX_TIM3_Init>
  MX_TIM4_Init();
 80001e0:	f000 fa92 	bl	8000708 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80001e4:	f009 fd38 	bl	8009c58 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Configuração do rádio */
  nrfRx.CE_port = CE_GPIO_Port;
 80001e8:	4b30      	ldr	r3, [pc, #192]	; (80002ac <main+0xec>)
 80001ea:	4a31      	ldr	r2, [pc, #196]	; (80002b0 <main+0xf0>)
 80001ec:	609a      	str	r2, [r3, #8]
  nrfRx.CE_pin = CE_Pin;
 80001ee:	4b2f      	ldr	r3, [pc, #188]	; (80002ac <main+0xec>)
 80001f0:	2201      	movs	r2, #1
 80001f2:	819a      	strh	r2, [r3, #12]
  nrfRx.CSN_port = CSN_GPIO_Port;
 80001f4:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <main+0xec>)
 80001f6:	4a2f      	ldr	r2, [pc, #188]	; (80002b4 <main+0xf4>)
 80001f8:	601a      	str	r2, [r3, #0]
  nrfRx.CSN_pin = CSN_Pin;
 80001fa:	4b2c      	ldr	r3, [pc, #176]	; (80002ac <main+0xec>)
 80001fc:	2208      	movs	r2, #8
 80001fe:	809a      	strh	r2, [r3, #4]
  nrfRx.IRQ_port = IRQ_GPIO_Port;
 8000200:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <main+0xec>)
 8000202:	4a2c      	ldr	r2, [pc, #176]	; (80002b4 <main+0xf4>)
 8000204:	611a      	str	r2, [r3, #16]
  nrfRx.IRQ_pin = IRQ_Pin;
 8000206:	4b29      	ldr	r3, [pc, #164]	; (80002ac <main+0xec>)
 8000208:	2210      	movs	r2, #16
 800020a:	829a      	strh	r2, [r3, #20]
  nrfRx.hSPIx = &hspi1;
 800020c:	4b27      	ldr	r3, [pc, #156]	; (80002ac <main+0xec>)
 800020e:	4a2a      	ldr	r2, [pc, #168]	; (80002b8 <main+0xf8>)
 8000210:	619a      	str	r2, [r3, #24]

  nrf24_init(&nrfRx);
 8000212:	4826      	ldr	r0, [pc, #152]	; (80002ac <main+0xec>)
 8000214:	f000 fb55 	bl	80008c2 <nrf24_init>
  nrf24_setDataRate(&nrfRx, _250kbs);
 8000218:	2100      	movs	r1, #0
 800021a:	4824      	ldr	r0, [pc, #144]	; (80002ac <main+0xec>)
 800021c:	f000 fb8b 	bl	8000936 <nrf24_setDataRate>
  nrf24_setPALevel(&nrfRx, high);
 8000220:	2103      	movs	r1, #3
 8000222:	4822      	ldr	r0, [pc, #136]	; (80002ac <main+0xec>)
 8000224:	f000 fbd2 	bl	80009cc <nrf24_setPALevel>

  nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 8000228:	230b      	movs	r3, #11
 800022a:	2200      	movs	r2, #0
 800022c:	4923      	ldr	r1, [pc, #140]	; (80002bc <main+0xfc>)
 800022e:	481f      	ldr	r0, [pc, #124]	; (80002ac <main+0xec>)
 8000230:	f000 fc8c 	bl	8000b4c <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
 8000234:	230b      	movs	r3, #11
 8000236:	2201      	movs	r2, #1
 8000238:	4921      	ldr	r1, [pc, #132]	; (80002c0 <main+0x100>)
 800023a:	481c      	ldr	r0, [pc, #112]	; (80002ac <main+0xec>)
 800023c:	f000 fc86 	bl	8000b4c <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
 8000240:	230b      	movs	r3, #11
 8000242:	2202      	movs	r2, #2
 8000244:	491f      	ldr	r1, [pc, #124]	; (80002c4 <main+0x104>)
 8000246:	4819      	ldr	r0, [pc, #100]	; (80002ac <main+0xec>)
 8000248:	f000 fc80 	bl	8000b4c <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
 800024c:	230b      	movs	r3, #11
 800024e:	2203      	movs	r2, #3
 8000250:	491d      	ldr	r1, [pc, #116]	; (80002c8 <main+0x108>)
 8000252:	4816      	ldr	r0, [pc, #88]	; (80002ac <main+0xec>)
 8000254:	f000 fc7a 	bl	8000b4c <nrf24_setRxPipe>
  nrf24_setMode(&nrfRx, rxMode);
 8000258:	2103      	movs	r1, #3
 800025a:	4814      	ldr	r0, [pc, #80]	; (80002ac <main+0xec>)
 800025c:	f000 fc24 	bl	8000aa8 <nrf24_setMode>
  /* Configuração dos timers referentes aos encoders */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000260:	213c      	movs	r1, #60	; 0x3c
 8000262:	481a      	ldr	r0, [pc, #104]	; (80002cc <main+0x10c>)
 8000264:	f004 fcfa 	bl	8004c5c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000268:	213c      	movs	r1, #60	; 0x3c
 800026a:	4819      	ldr	r0, [pc, #100]	; (80002d0 <main+0x110>)
 800026c:	f004 fcf6 	bl	8004c5c <HAL_TIM_Encoder_Start_IT>
  /* Configuração dos timers referentes ao PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000270:	2100      	movs	r1, #0
 8000272:	4818      	ldr	r0, [pc, #96]	; (80002d4 <main+0x114>)
 8000274:	f004 fbae 	bl	80049d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000278:	2104      	movs	r1, #4
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <main+0x114>)
 800027c:	f004 fbaa 	bl	80049d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000280:	2100      	movs	r1, #0
 8000282:	4815      	ldr	r0, [pc, #84]	; (80002d8 <main+0x118>)
 8000284:	f004 fba6 	bl	80049d4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000288:	2108      	movs	r1, #8
 800028a:	4812      	ldr	r0, [pc, #72]	; (80002d4 <main+0x114>)
 800028c:	f004 fba2 	bl	80049d4 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 80;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <main+0x11c>)
 8000292:	2250      	movs	r2, #80	; 0x50
 8000294:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 40;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <main+0x11c>)
 8000298:	2228      	movs	r2, #40	; 0x28
 800029a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 20;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <main+0x120>)
 800029e:	2214      	movs	r2, #20
 80002a0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR3 = 20;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0x11c>)
 80002a4:	2214      	movs	r2, #20
 80002a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0xe8>
 80002aa:	bf00      	nop
 80002ac:	20000394 	.word	0x20000394
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	40010800 	.word	0x40010800
 80002b8:	2000021c 	.word	0x2000021c
 80002bc:	20000000 	.word	0x20000000
 80002c0:	20000008 	.word	0x20000008
 80002c4:	20000018 	.word	0x20000018
 80002c8:	20000010 	.word	0x20000010
 80002cc:	200002bc 	.word	0x200002bc
 80002d0:	2000034c 	.word	0x2000034c
 80002d4:	20000274 	.word	0x20000274
 80002d8:	20000304 	.word	0x20000304
 80002dc:	40012c00 	.word	0x40012c00
 80002e0:	40000400 	.word	0x40000400

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b094      	sub	sp, #80	; 0x50
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f00a f976 	bl	800a5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f8:	f107 0314 	add.w	r3, r7, #20
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000314:	2301      	movs	r3, #1
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000322:	2301      	movs	r3, #1
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	2302      	movs	r3, #2
 8000328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000330:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033a:	4618      	mov	r0, r3
 800033c:	f003 f88c 	bl	8003458 <HAL_RCC_OscConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000346:	f000 fab7 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034a:	230f      	movs	r3, #15
 800034c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800035a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000360:	f107 0314 	add.w	r3, r7, #20
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f003 faf8 	bl	800395c <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000372:	f000 faa1 	bl	80008b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000376:	2310      	movs	r3, #16
 8000378:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4618      	mov	r0, r3
 8000382:	f003 fc51 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800038c:	f000 fa94 	bl	80008b8 <Error_Handler>
  }
}
 8000390:	bf00      	nop
 8000392:	3750      	adds	r7, #80	; 0x50
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_SPI1_Init+0x64>)
 800039e:	4a18      	ldr	r2, [pc, #96]	; (8000400 <MX_SPI1_Init+0x68>)
 80003a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_SPI1_Init+0x64>)
 80003a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_SPI1_Init+0x64>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_SPI1_Init+0x64>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_SPI1_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_SPI1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_SPI1_Init+0x64>)
 80003c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_SPI1_Init+0x64>)
 80003cc:	2208      	movs	r2, #8
 80003ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_SPI1_Init+0x64>)
 80003e4:	220a      	movs	r2, #10
 80003e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <MX_SPI1_Init+0x64>)
 80003ea:	f003 fcd3 	bl	8003d94 <HAL_SPI_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003f4:	f000 fa60 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	2000021c 	.word	0x2000021c
 8000400:	40013000 	.word	0x40013000

08000404 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b096      	sub	sp, #88	; 0x58
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2220      	movs	r2, #32
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f00a f8d1 	bl	800a5e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000442:	4b4a      	ldr	r3, [pc, #296]	; (800056c <MX_TIM1_Init+0x168>)
 8000444:	4a4a      	ldr	r2, [pc, #296]	; (8000570 <MX_TIM1_Init+0x16c>)
 8000446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14-1;
 8000448:	4b48      	ldr	r3, [pc, #288]	; (800056c <MX_TIM1_Init+0x168>)
 800044a:	220d      	movs	r2, #13
 800044c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b47      	ldr	r3, [pc, #284]	; (800056c <MX_TIM1_Init+0x168>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 101-1;
 8000454:	4b45      	ldr	r3, [pc, #276]	; (800056c <MX_TIM1_Init+0x168>)
 8000456:	2264      	movs	r2, #100	; 0x64
 8000458:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b44      	ldr	r3, [pc, #272]	; (800056c <MX_TIM1_Init+0x168>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000460:	4b42      	ldr	r3, [pc, #264]	; (800056c <MX_TIM1_Init+0x168>)
 8000462:	2200      	movs	r2, #0
 8000464:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000466:	4b41      	ldr	r3, [pc, #260]	; (800056c <MX_TIM1_Init+0x168>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800046c:	483f      	ldr	r0, [pc, #252]	; (800056c <MX_TIM1_Init+0x168>)
 800046e:	f004 fa09 	bl	8004884 <HAL_TIM_Base_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000478:	f000 fa1e 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800047c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000480:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000482:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000486:	4619      	mov	r1, r3
 8000488:	4838      	ldr	r0, [pc, #224]	; (800056c <MX_TIM1_Init+0x168>)
 800048a:	f004 fe5b 	bl	8005144 <HAL_TIM_ConfigClockSource>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000494:	f000 fa10 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000498:	4834      	ldr	r0, [pc, #208]	; (800056c <MX_TIM1_Init+0x168>)
 800049a:	f004 fa42 	bl	8004922 <HAL_TIM_PWM_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80004a4:	f000 fa08 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004b4:	4619      	mov	r1, r3
 80004b6:	482d      	ldr	r0, [pc, #180]	; (800056c <MX_TIM1_Init+0x168>)
 80004b8:	f005 f9d0 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80004c2:	f000 f9f9 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c6:	2360      	movs	r3, #96	; 0x60
 80004c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80004ca:	2300      	movs	r3, #0
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004d2:	2300      	movs	r3, #0
 80004d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004da:	2300      	movs	r3, #0
 80004dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004de:	2300      	movs	r3, #0
 80004e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e6:	2200      	movs	r2, #0
 80004e8:	4619      	mov	r1, r3
 80004ea:	4820      	ldr	r0, [pc, #128]	; (800056c <MX_TIM1_Init+0x168>)
 80004ec:	f004 fd6c 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80004f6:	f000 f9df 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fe:	2204      	movs	r2, #4
 8000500:	4619      	mov	r1, r3
 8000502:	481a      	ldr	r0, [pc, #104]	; (800056c <MX_TIM1_Init+0x168>)
 8000504:	f004 fd60 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800050e:	f000 f9d3 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000516:	2208      	movs	r2, #8
 8000518:	4619      	mov	r1, r3
 800051a:	4814      	ldr	r0, [pc, #80]	; (800056c <MX_TIM1_Init+0x168>)
 800051c:	f004 fd54 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000526:	f000 f9c7 	bl	80008b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800053e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000542:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <MX_TIM1_Init+0x168>)
 800054e:	f005 f9e3 	bl	8005918 <HAL_TIMEx_ConfigBreakDeadTime>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000558:	f000 f9ae 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <MX_TIM1_Init+0x168>)
 800055e:	f000 fe35 	bl	80011cc <HAL_TIM_MspPostInit>

}
 8000562:	bf00      	nop
 8000564:	3758      	adds	r7, #88	; 0x58
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000274 	.word	0x20000274
 8000570:	40012c00 	.word	0x40012c00

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	2224      	movs	r2, #36	; 0x24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f00a f82e 	bl	800a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <MX_TIM2_Init+0xa4>)
 8000592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4-1;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_TIM2_Init+0xa4>)
 800059a:	2203      	movs	r2, #3
 800059c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005b8:	2303      	movs	r3, #3
 80005ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80005cc:	2302      	movs	r3, #2
 80005ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	480d      	ldr	r0, [pc, #52]	; (8000618 <MX_TIM2_Init+0xa4>)
 80005e4:	f004 fa98 	bl	8004b18 <HAL_TIM_Encoder_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005ee:	f000 f963 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_TIM2_Init+0xa4>)
 8000600:	f005 f92c 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800060a:	f000 f955 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200002bc 	.word	0x200002bc

0800061c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
 800064a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_TIM3_Init+0xe4>)
 800064e:	4a2d      	ldr	r2, [pc, #180]	; (8000704 <MX_TIM3_Init+0xe8>)
 8000650:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14-1;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_TIM3_Init+0xe4>)
 8000654:	220d      	movs	r2, #13
 8000656:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_TIM3_Init+0xe4>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 101-1;
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_TIM3_Init+0xe4>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <MX_TIM3_Init+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_TIM3_Init+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <MX_TIM3_Init+0xe4>)
 8000672:	f004 f907 	bl	8004884 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800067c:	f000 f91c 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	4619      	mov	r1, r3
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <MX_TIM3_Init+0xe4>)
 800068e:	f004 fd59 	bl	8005144 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000698:	f000 f90e 	bl	80008b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_TIM3_Init+0xe4>)
 800069e:	f004 f940 	bl	8004922 <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 f906 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4619      	mov	r1, r3
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_TIM3_Init+0xe4>)
 80006bc:	f005 f8ce 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80006c6:	f000 f8f7 	bl	80008b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ca:	2360      	movs	r3, #96	; 0x60
 80006cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM3_Init+0xe4>)
 80006e2:	f004 fc71 	bl	8004fc8 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006ec:	f000 f8e4 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_TIM3_Init+0xe4>)
 80006f2:	f000 fd6b 	bl	80011cc <HAL_TIM_MspPostInit>

}
 80006f6:	bf00      	nop
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000304 	.word	0x20000304
 8000704:	40000400 	.word	0x40000400

08000708 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2224      	movs	r2, #36	; 0x24
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f009 ff64 	bl	800a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_TIM4_Init+0xa4>)
 8000728:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_TIM4_Init+0xa0>)
 800072c:	2203      	movs	r2, #3
 800072e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800074a:	2303      	movs	r3, #3
 800074c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800074e:	2302      	movs	r3, #2
 8000750:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000762:	2301      	movs	r3, #1
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000776:	f004 f9cf 	bl	8004b18 <HAL_TIM_Encoder_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000780:	f000 f89a 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM4_Init+0xa0>)
 8000792:	f005 f863 	bl	800585c <HAL_TIMEx_MasterConfigSynchronization>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800079c:	f000 f88c 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000034c 	.word	0x2000034c
 80007ac:	40000800 	.word	0x40000800

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a37      	ldr	r2, [pc, #220]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0310 	and.w	r3, r3, #16
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b32      	ldr	r3, [pc, #200]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a31      	ldr	r2, [pc, #196]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0320 	and.w	r3, r3, #32
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <MX_GPIO_Init+0xf8>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_GPIO_Init+0xf8>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_GPIO_Init+0xf8>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <MX_GPIO_Init+0xf8>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	4820      	ldr	r0, [pc, #128]	; (80008ac <MX_GPIO_Init+0xfc>)
 800082c:	f001 f938 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|IRQ_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2118      	movs	r1, #24
 8000834:	481e      	ldr	r0, [pc, #120]	; (80008b0 <MX_GPIO_Init+0x100>)
 8000836:	f001 f933 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|DIP1_Pin|DIP2_Pin|DIP3_Pin
 800083a:	2200      	movs	r2, #0
 800083c:	f24f 0101 	movw	r1, #61441	; 0xf001
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <MX_GPIO_Init+0x104>)
 8000842:	f001 f92d 	bl	8001aa0 <HAL_GPIO_WritePin>
                          |DIP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_GPIO_Init+0xfc>)
 8000860:	f000 ff9a 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|IRQ_Pin;
 8000864:	2318      	movs	r3, #24
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MX_GPIO_Init+0x100>)
 800087c:	f000 ff8c 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin DIP1_Pin DIP2_Pin DIP3_Pin
                           DIP4_Pin */
  GPIO_InitStruct.Pin = CE_Pin|DIP1_Pin|DIP2_Pin|DIP3_Pin
 8000880:	f24f 0301 	movw	r3, #61441	; 0xf001
 8000884:	613b      	str	r3, [r7, #16]
                          |DIP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <MX_GPIO_Init+0x104>)
 800089a:	f000 ff7d 	bl	8001798 <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40011000 	.word	0x40011000
 80008b0:	40010800 	.word	0x40010800
 80008b4:	40010c00 	.word	0x40010c00

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>

080008c2 <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f9e2 	bl	8000c94 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa0d 	bl	8000cf4 <nrf24_writeReg>
	node->crc = no_CRC;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2200      	movs	r2, #0
 80008de:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 fa05 	bl	8000cf4 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 80008ea:	2200      	movs	r2, #0
 80008ec:	2102      	movs	r1, #2
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fa00 	bl	8000cf4 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 80008f4:	2203      	movs	r2, #3
 80008f6:	2103      	movs	r1, #3
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 f9fb 	bl	8000cf4 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 80008fe:	2200      	movs	r2, #0
 8000900:	2104      	movs	r1, #4
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f9f6 	bl	8000cf4 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000908:	2100      	movs	r1, #0
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f813 	bl	8000936 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000910:	2103      	movs	r1, #3
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 f85a 	bl	80009cc <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000918:	2164      	movs	r1, #100	; 0x64
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f8ae 	bl	8000a7c <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000920:	2101      	movs	r1, #1
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f000 f8c0 	bl	8000aa8 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 f9a3 	bl	8000c74 <nrf24_CE_enable>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	460b      	mov	r3, r1
 8000940:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 f9a6 	bl	8000c94 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000948:	2106      	movs	r1, #6
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 fa39 	bl	8000dc2 <nrf24_readReg>
 8000950:	4603      	mov	r3, r0
 8000952:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000954:	78fb      	ldrb	r3, [r7, #3]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d01e      	beq.n	8000998 <nrf24_setDataRate+0x62>
 800095a:	2b02      	cmp	r3, #2
 800095c:	dc28      	bgt.n	80009b0 <nrf24_setDataRate+0x7a>
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <nrf24_setDataRate+0x32>
 8000962:	2b01      	cmp	r3, #1
 8000964:	d00c      	beq.n	8000980 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000966:	e023      	b.n	80009b0 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	f043 0320 	orr.w	r3, r3, #32
 800096e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	f023 0308 	bic.w	r3, r3, #8
 8000976:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2200      	movs	r2, #0
 800097c:	775a      	strb	r2, [r3, #29]
			break;
 800097e:	e018      	b.n	80009b2 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	f023 0320 	bic.w	r3, r3, #32
 8000986:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	f023 0308 	bic.w	r3, r3, #8
 800098e:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	775a      	strb	r2, [r3, #29]
			break;
 8000996:	e00c      	b.n	80009b2 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f023 0320 	bic.w	r3, r3, #32
 800099e:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	f043 0308 	orr.w	r3, r3, #8
 80009a6:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2202      	movs	r2, #2
 80009ac:	775a      	strb	r2, [r3, #29]
			break;
 80009ae:	e000      	b.n	80009b2 <nrf24_setDataRate+0x7c>
			break;
 80009b0:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2106      	movs	r1, #6
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 f99b 	bl	8000cf4 <nrf24_writeReg>
	nrf24_CE_enable(node);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f958 	bl	8000c74 <nrf24_CE_enable>
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f95b 	bl	8000c94 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 80009de:	2106      	movs	r1, #6
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f9ee 	bl	8000dc2 <nrf24_readReg>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	d837      	bhi.n	8000a60 <nrf24_setPALevel+0x94>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <nrf24_setPALevel+0x2c>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a09 	.word	0x08000a09
 80009fc:	08000a21 	.word	0x08000a21
 8000a00:	08000a39 	.word	0x08000a39
 8000a04:	08000a51 	.word	0x08000a51
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	f023 0304 	bic.w	r3, r3, #4
 8000a0e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	f023 0302 	bic.w	r3, r3, #2
 8000a16:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	771a      	strb	r2, [r3, #28]
			break;
 8000a1e:	e020      	b.n	8000a62 <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	f023 0304 	bic.w	r3, r3, #4
 8000a26:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	f043 0302 	orr.w	r3, r3, #2
 8000a2e:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2201      	movs	r2, #1
 8000a34:	771a      	strb	r2, [r3, #28]
			break;
 8000a36:	e014      	b.n	8000a62 <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000a38:	7bfb      	ldrb	r3, [r7, #15]
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f023 0302 	bic.w	r3, r3, #2
 8000a46:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	771a      	strb	r2, [r3, #28]
			break;
 8000a4e:	e008      	b.n	8000a62 <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f043 0306 	orr.w	r3, r3, #6
 8000a56:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	771a      	strb	r2, [r3, #28]
			break;
 8000a5e:	e000      	b.n	8000a62 <nrf24_setPALevel+0x96>

		default:
			break;
 8000a60:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	461a      	mov	r2, r3
 8000a66:	2106      	movs	r1, #6
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f000 f943 	bl	8000cf4 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f900 	bl	8000c74 <nrf24_CE_enable>
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f903 	bl	8000c94 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	461a      	mov	r2, r3
 8000a92:	2105      	movs	r1, #5
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f92d 	bl	8000cf4 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f8ea 	bl	8000c74 <nrf24_CE_enable>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f983 	bl	8000dc2 <nrf24_readReg>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b03      	cmp	r3, #3
 8000ac4:	d837      	bhi.n	8000b36 <nrf24_setMode+0x8e>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <nrf24_setMode+0x24>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000add 	.word	0x08000add
 8000ad0:	08000aed 	.word	0x08000aed
 8000ad4:	08000b03 	.word	0x08000b03
 8000ad8:	08000b21 	.word	0x08000b21
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f023 0302 	bic.w	r3, r3, #2
 8000ae2:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	779a      	strb	r2, [r3, #30]
			break;
 8000aea:	e025      	b.n	8000b38 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 f8d1 	bl	8000c94 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2201      	movs	r2, #1
 8000afe:	779a      	strb	r2, [r3, #30]
			break;
 8000b00:	e01a      	b.n	8000b38 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f8b6 	bl	8000c74 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	779a      	strb	r2, [r3, #30]
			break;
 8000b1e:	e00b      	b.n	8000b38 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f000 f8a7 	bl	8000c74 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
 8000b28:	f043 0303 	orr.w	r3, r3, #3
 8000b2c:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2203      	movs	r2, #3
 8000b32:	779a      	strb	r2, [r3, #30]
			break;
 8000b34:	e000      	b.n	8000b38 <nrf24_setMode+0x90>

		default:
			break;
 8000b36:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f8d8 	bl	8000cf4 <nrf24_writeReg>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	71bb      	strb	r3, [r7, #6]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f896 	bl	8000c94 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 8000b68:	2107      	movs	r1, #7
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f000 f956 	bl	8000e1c <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000b70:	2102      	movs	r1, #2
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 f925 	bl	8000dc2 <nrf24_readReg>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	b25a      	sxtb	r2, r3
 8000b86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	75fb      	strb	r3, [r7, #23]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	461a      	mov	r2, r3
 8000b94:	2102      	movs	r1, #2
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f8ac 	bl	8000cf4 <nrf24_writeReg>
	/* We must write the address for Data Pipe 1, if we want to use any pipe from 2 to 5
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1
	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d860      	bhi.n	8000c64 <nrf24_setRxPipe+0x118>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <nrf24_setRxPipe+0x5c>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000bc1 	.word	0x08000bc1
 8000bac:	08000bdb 	.word	0x08000bdb
 8000bb0:	08000bf5 	.word	0x08000bf5
 8000bb4:	08000c11 	.word	0x08000c11
 8000bb8:	08000c2d 	.word	0x08000c2d
 8000bbc:	08000c49 	.word	0x08000c49
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	210a      	movs	r1, #10
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f000 f8bf 	bl	8000d4a <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2111      	movs	r1, #17
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f000 f88e 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000bd8:	e045      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 8000bda:	2305      	movs	r3, #5
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	210b      	movs	r1, #11
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f000 f8b2 	bl	8000d4a <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	461a      	mov	r2, r3
 8000bea:	2112      	movs	r1, #18
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f000 f881 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000bf2:	e038      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	210c      	movs	r1, #12
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f000 f879 	bl	8000cf4 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	461a      	mov	r2, r3
 8000c06:	2113      	movs	r1, #19
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f000 f873 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000c0e:	e02a      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	210d      	movs	r1, #13
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f86b 	bl	8000cf4 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2114      	movs	r1, #20
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 f865 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000c2a:	e01c      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	210e      	movs	r1, #14
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f85d 	bl	8000cf4 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2115      	movs	r1, #21
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f857 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000c46:	e00e      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	210f      	movs	r1, #15
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f84f 	bl	8000cf4 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2116      	movs	r1, #22
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f849 	bl	8000cf4 <nrf24_writeReg>
			break;
 8000c62:	e000      	b.n	8000c66 <nrf24_setRxPipe+0x11a>

		default:
			break;
 8000c64:	bf00      	nop
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f804 	bl	8000c74 <nrf24_CE_enable>
}
 8000c6c:	bf00      	nop
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6898      	ldr	r0, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	899b      	ldrh	r3, [r3, #12]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	f000 ff0a 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6898      	ldr	r0, [r3, #8]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	899b      	ldrh	r3, [r3, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f000 fefa 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f000 feea 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f000 feda 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	f043 0320 	orr.w	r3, r3, #32
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000d0e:	78bb      	ldrb	r3, [r7, #2]
 8000d10:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffce 	bl	8000cb4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6998      	ldr	r0, [r3, #24]
 8000d1c:	f107 010c 	add.w	r1, r7, #12
 8000d20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d24:	2202      	movs	r2, #2
 8000d26:	f003 f8b9 	bl	8003e9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d2a:	bf00      	nop
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fca2 	bl	800467a <HAL_SPI_GetState>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d1f7      	bne.n	8000d2c <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ffc9 	bl	8000cd4 <nrf24_CSN_disable>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	461a      	mov	r2, r3
 8000d56:	460b      	mov	r3, r1
 8000d58:	72fb      	strb	r3, [r7, #11]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000d5e:	7afb      	ldrb	r3, [r7, #11]
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff ffa3 	bl	8000cb4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6998      	ldr	r0, [r3, #24]
 8000d72:	f107 0114 	add.w	r1, r7, #20
 8000d76:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f003 f88e 	bl	8003e9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d80:	bf00      	nop
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 fc77 	bl	800467a <HAL_SPI_GetState>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d1f7      	bne.n	8000d82 <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	6998      	ldr	r0, [r3, #24]
 8000d96:	893a      	ldrh	r2, [r7, #8]
 8000d98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	f003 f87d 	bl	8003e9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000da2:	bf00      	nop
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fc66 	bl	800467a <HAL_SPI_GetState>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d1f7      	bne.n	8000da4 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f7ff ff8d 	bl	8000cd4 <nrf24_CSN_disable>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff6e 	bl	8000cb4 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6998      	ldr	r0, [r3, #24]
 8000ddc:	1cf9      	adds	r1, r7, #3
 8000dde:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000de2:	2201      	movs	r2, #1
 8000de4:	f003 f85a 	bl	8003e9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000de8:	bf00      	nop
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fc43 	bl	800467a <HAL_SPI_GetState>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d1f7      	bne.n	8000dea <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6998      	ldr	r0, [r3, #24]
 8000dfe:	f107 010f 	add.w	r1, r7, #15
 8000e02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e06:	2201      	movs	r2, #1
 8000e08:	f003 f984 	bl	8004114 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff61 	bl	8000cd4 <nrf24_CSN_disable>
	return data;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <nrf24_reset>:
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d105      	bne.n	8000e3a <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2107      	movs	r1, #7
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff5e 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000e38:	e0a8      	b.n	8000f8c <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	2b17      	cmp	r3, #23
 8000e3e:	d105      	bne.n	8000e4c <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000e40:	2211      	movs	r2, #17
 8000e42:	2117      	movs	r1, #23
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff55 	bl	8000cf4 <nrf24_writeReg>
}
 8000e4a:	e09f      	b.n	8000f8c <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	2100      	movs	r1, #0
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff ff4f 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000e56:	223f      	movs	r2, #63	; 0x3f
 8000e58:	2101      	movs	r1, #1
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff4a 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000e60:	2203      	movs	r2, #3
 8000e62:	2102      	movs	r1, #2
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff45 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff40 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000e74:	2203      	movs	r2, #3
 8000e76:	2104      	movs	r1, #4
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff3b 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000e7e:	2202      	movs	r2, #2
 8000e80:	2105      	movs	r1, #5
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff36 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000e88:	220e      	movs	r2, #14
 8000e8a:	2106      	movs	r1, #6
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff31 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2107      	movs	r1, #7
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff2c 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff27 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2109      	movs	r1, #9
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff22 	bl	8000cf4 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000eb0:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <nrf24_reset+0x178>)
 8000eb2:	f107 0318 	add.w	r3, r7, #24
 8000eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eba:	6018      	str	r0, [r3, #0]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000ec0:	f107 0218 	add.w	r2, r7, #24
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	210a      	movs	r1, #10
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff3e 	bl	8000d4a <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <nrf24_reset+0x17c>)
 8000ed0:	f107 0310 	add.w	r3, r7, #16
 8000ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed8:	6018      	str	r0, [r3, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000ede:	f107 0210 	add.w	r2, r7, #16
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	210b      	movs	r1, #11
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff2f 	bl	8000d4a <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000eec:	22c3      	movs	r2, #195	; 0xc3
 8000eee:	210c      	movs	r1, #12
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff feff 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000ef6:	22c4      	movs	r2, #196	; 0xc4
 8000ef8:	210d      	movs	r1, #13
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fefa 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000f00:	22c5      	movs	r2, #197	; 0xc5
 8000f02:	210e      	movs	r1, #14
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fef5 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000f0a:	22c6      	movs	r2, #198	; 0xc6
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fef0 	bl	8000cf4 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <nrf24_reset+0x178>)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1e:	6018      	str	r0, [r3, #0]
 8000f20:	3304      	adds	r3, #4
 8000f22:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000f24:	f107 0208 	add.w	r2, r7, #8
 8000f28:	2305      	movs	r3, #5
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff0c 	bl	8000d4a <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2111      	movs	r1, #17
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fedc 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2112      	movs	r1, #18
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fed7 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2113      	movs	r1, #19
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fed2 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2114      	movs	r1, #20
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fecd 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2115      	movs	r1, #21
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fec8 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2116      	movs	r1, #22
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fec3 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000f6e:	2211      	movs	r2, #17
 8000f70:	2117      	movs	r1, #23
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff febe 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	211c      	movs	r1, #28
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff feb9 	bl	8000cf4 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	211d      	movs	r1, #29
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff feb4 	bl	8000cf4 <nrf24_writeReg>
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0800af00 	.word	0x0800af00
 8000f98:	0800af08 	.word	0x0800af08

08000f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_MspInit+0x40>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_MspInit+0x40>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_MspInit+0x40>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_MspInit+0x40>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_MspInit+0x40>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_MspInit+0x40>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d12f      	bne.n	8001060 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_SPI_MspInit+0x90>)
 8001044:	f000 fba8 	bl	8001798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_MspInit+0x90>)
 800105c:	f000 fb9c 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40013000 	.word	0x40013000
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_TIM_Base_MspInit+0x58>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10c      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 800108c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001090:	6193      	str	r3, [r2, #24]
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800109e:	e010      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40012c00 	.word	0x40012c00
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40000400 	.word	0x40000400

080010d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f6:	d12c      	bne.n	8001152 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	61d3      	str	r3, [r2, #28]
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a29      	ldr	r2, [pc, #164]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001128:	2303      	movs	r3, #3
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4619      	mov	r1, r3
 800113a:	4821      	ldr	r0, [pc, #132]	; (80011c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800113c:	f000 fb2c 	bl	8001798 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f000 faf0 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114a:	201c      	movs	r0, #28
 800114c:	f000 fb09 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001150:	e030      	b.n	80011b4 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d12b      	bne.n	80011b4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	61d3      	str	r3, [r2, #28]
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800118c:	23c0      	movs	r3, #192	; 0xc0
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4619      	mov	r1, r3
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <HAL_TIM_Encoder_MspInit+0xf0>)
 80011a0:	f000 fafa 	bl	8001798 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2100      	movs	r1, #0
 80011a8:	201e      	movs	r0, #30
 80011aa:	f000 fabe 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011ae:	201e      	movs	r0, #30
 80011b0:	f000 fad7 	bl	8001762 <HAL_NVIC_EnableIRQ>
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40000800 	.word	0x40000800
 80011c8:	40010c00 	.word	0x40010c00

080011cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <HAL_TIM_MspPostInit+0xbc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d119      	bne.n	8001220 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001204:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	481d      	ldr	r0, [pc, #116]	; (8001290 <HAL_TIM_MspPostInit+0xc4>)
 800121a:	f000 fabd 	bl	8001798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800121e:	e02e      	b.n	800127e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_TIM_MspPostInit+0xc8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d129      	bne.n	800127e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6193      	str	r3, [r2, #24]
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <HAL_TIM_MspPostInit+0xc0>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001242:	2310      	movs	r3, #16
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4810      	ldr	r0, [pc, #64]	; (8001298 <HAL_TIM_MspPostInit+0xcc>)
 8001256:	f000 fa9f 	bl	8001798 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_TIM_MspPostInit+0xd0>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_TIM_MspPostInit+0xd0>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	6053      	str	r3, [r2, #4]
}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40012c00 	.word	0x40012c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40010800 	.word	0x40010800
 8001294:	40000400 	.word	0x40000400
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40010000 	.word	0x40010000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <SysTick_Handler+0xac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <SysTick_Handler+0xac>)
 80012f0:	6013      	str	r3, [r2, #0]
		if (indx == 500)
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <SysTick_Handler+0xac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012fa:	d144      	bne.n	8001386 <SysTick_Handler+0xa2>
		{
			speed = ((position - oldpos)*2);  // speed in clicks/sec
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <SysTick_Handler+0xb0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <SysTick_Handler+0xb4>)
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	b29b      	uxth	r3, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <SysTick_Handler+0xb8>)
 8001310:	801a      	strh	r2, [r3, #0]
			oldpos = position;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <SysTick_Handler+0xb0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <SysTick_Handler+0xb4>)
 800131a:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e1: %d\n",speed);
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SysTick_Handler+0xb8>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	461a      	mov	r2, r3
 8001324:	491e      	ldr	r1, [pc, #120]	; (80013a0 <SysTick_Handler+0xbc>)
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <SysTick_Handler+0xc0>)
 8001328:	f009 f964 	bl	800a5f4 <siprintf>
			CDC_Transmit_FS(buffer, strlen(buffer));
 800132c:	481d      	ldr	r0, [pc, #116]	; (80013a4 <SysTick_Handler+0xc0>)
 800132e:	f7fe ff0d 	bl	800014c <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29b      	uxth	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	481a      	ldr	r0, [pc, #104]	; (80013a4 <SysTick_Handler+0xc0>)
 800133a:	f008 fd4b 	bl	8009dd4 <CDC_Transmit_FS>

			speed2 = ((position2 - oldpos2)*2);  // speed in clicks/sec
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <SysTick_Handler+0xc4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <SysTick_Handler+0xc8>)
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	b29b      	uxth	r3, r3
 800134e:	b21a      	sxth	r2, r3
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <SysTick_Handler+0xcc>)
 8001352:	801a      	strh	r2, [r3, #0]
			oldpos2 = position2;
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <SysTick_Handler+0xc4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <SysTick_Handler+0xc8>)
 800135c:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e2: %d\n",speed2);
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <SysTick_Handler+0xcc>)
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	461a      	mov	r2, r3
 8001366:	4913      	ldr	r1, [pc, #76]	; (80013b4 <SysTick_Handler+0xd0>)
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <SysTick_Handler+0xc0>)
 800136a:	f009 f943 	bl	800a5f4 <siprintf>
			CDC_Transmit_FS(buffer, strlen(buffer));
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <SysTick_Handler+0xc0>)
 8001370:	f7fe feec 	bl	800014c <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29b      	uxth	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	480a      	ldr	r0, [pc, #40]	; (80013a4 <SysTick_Handler+0xc0>)
 800137c:	f008 fd2a 	bl	8009dd4 <CDC_Transmit_FS>

			indx = 0;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <SysTick_Handler+0xac>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
		}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001386:	f000 f8dd 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200003c4 	.word	0x200003c4
 8001394:	200003b8 	.word	0x200003b8
 8001398:	200003c8 	.word	0x200003c8
 800139c:	200003ba 	.word	0x200003ba
 80013a0:	0800af10 	.word	0x0800af10
 80013a4:	200003cc 	.word	0x200003cc
 80013a8:	200003c0 	.word	0x200003c0
 80013ac:	200003ca 	.word	0x200003ca
 80013b0:	200003c2 	.word	0x200003c2
 80013b4:	0800af18 	.word	0x0800af18

080013b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013be:	f000 fcb8 	bl	8001d32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20001080 	.word	0x20001080

080013cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <TIM2_IRQHandler+0x10>)
 80013d2:	f003 fcf1 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200002bc 	.word	0x200002bc

080013e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM4_IRQHandler+0x10>)
 80013e6:	f003 fce7 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000034c 	.word	0x2000034c

080013f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013fc:	4a14      	ldr	r2, [pc, #80]	; (8001450 <_sbrk+0x5c>)
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <_sbrk+0x60>)
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <_sbrk+0x64>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_sbrk+0x64>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <_sbrk+0x68>)
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	429a      	cmp	r2, r3
 8001422:	d207      	bcs.n	8001434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001424:	f009 f8b4 	bl	800a590 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	220c      	movs	r2, #12
 800142c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	e009      	b.n	8001448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <_sbrk+0x64>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <_sbrk+0x64>)
 8001444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20005000 	.word	0x20005000
 8001454:	00000400 	.word	0x00000400
 8001458:	200003e0 	.word	0x200003e0
 800145c:	200015a0 	.word	0x200015a0

08001460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001492:	f7ff ffe5 	bl	8001460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001496:	f009 f881 	bl	800a59c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149a:	f7fe fe91 	bl	80001c0 <main>
  bx lr
 800149e:	4770      	bx	lr
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80014a8:	0800afc4 	.word	0x0800afc4
  ldr r2, =_sbss
 80014ac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80014b0:	2000159c 	.word	0x2000159c

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>
	...

080014b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x28>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x28>)
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f923 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	200f      	movs	r0, #15
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fd62 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40022000 	.word	0x40022000

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f93b 	bl	800177e <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f903 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000020 	.word	0x20000020
 800153c:	20000028 	.word	0x20000028
 8001540:	20000024 	.word	0x20000024

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <HAL_IncTick+0x20>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000028 	.word	0x20000028
 8001564:	200003e4 	.word	0x200003e4

08001568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	; (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	200003e4 	.word	0x200003e4

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4906      	ldr	r1, [pc, #24]	; (8001614 <__NVIC_EnableIRQ+0x34>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff2d 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff42 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e169      	b.n	8001a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8158 	bne.w	8001a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a9a      	ldr	r2, [pc, #616]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4a98      	ldr	r2, [pc, #608]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a96      	ldr	r2, [pc, #600]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a96      	ldr	r2, [pc, #600]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a94      	ldr	r2, [pc, #592]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a94      	ldr	r2, [pc, #592]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a92      	ldr	r2, [pc, #584]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a92      	ldr	r2, [pc, #584]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a90      	ldr	r2, [pc, #576]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <HAL_GPIO_Init+0x2b4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80b1 	beq.w	8001a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x1ec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1e8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3e      	ldr	r2, [pc, #248]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1e4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001978:	2304      	movs	r3, #4
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001984:	2300      	movs	r3, #0
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001996:	492f      	ldr	r1, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	492c      	ldr	r1, [pc, #176]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4928      	ldr	r1, [pc, #160]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4922      	ldr	r1, [pc, #136]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	491e      	ldr	r1, [pc, #120]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4918      	ldr	r1, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4914      	ldr	r1, [pc, #80]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e021      	b.n	8001a7a <HAL_GPIO_Init+0x2e2>
 8001a36:	bf00      	nop
 8001a38:	10320000 	.word	0x10320000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10220000 	.word	0x10220000
 8001a44:	10210000 	.word	0x10210000
 8001a48:	10120000 	.word	0x10120000
 8001a4c:	10110000 	.word	0x10110000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	40011000 	.word	0x40011000
 8001a64:	40011400 	.word	0x40011400
 8001a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	4909      	ldr	r1, [pc, #36]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f ae8e 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
 8001ad4:	af06      	add	r7, sp, #24
 8001ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0fd      	b.n	8001cde <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f008 faa0 	bl	800a03c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 ff8e 	bl	8005a2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	687e      	ldr	r6, [r7, #4]
 8001b16:	466d      	mov	r5, sp
 8001b18:	f106 0410 	add.w	r4, r6, #16
 8001b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	602b      	str	r3, [r5, #0]
 8001b24:	1d33      	adds	r3, r6, #4
 8001b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b28:	6838      	ldr	r0, [r7, #0]
 8001b2a:	f003 ff58 	bl	80059de <USB_CoreInit>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0ce      	b.n	8001cde <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 ff89 	bl	8005a5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e04c      	b.n	8001bec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3301      	adds	r3, #1
 8001b64:	2201      	movs	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	b298      	uxth	r0, r3
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3336      	adds	r3, #54	; 0x36
 8001b90:	4602      	mov	r2, r0
 8001b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3303      	adds	r3, #3
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3338      	adds	r3, #56	; 0x38
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	333c      	adds	r3, #60	; 0x3c
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3340      	adds	r3, #64	; 0x40
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	3301      	adds	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d3ad      	bcc.n	8001b52 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	e044      	b.n	8001c86 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	440b      	add	r3, r1
 8001c36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	3301      	adds	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3b5      	bcc.n	8001bfc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	687e      	ldr	r6, [r7, #4]
 8001c98:	466d      	mov	r5, sp
 8001c9a:	f106 0410 	add.w	r4, r6, #16
 8001c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	602b      	str	r3, [r5, #0]
 8001ca6:	1d33      	adds	r3, r6, #4
 8001ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f003 fee3 	bl	8005a76 <USB_DevInit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00d      	b.n	8001cde <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f006 fb96 	bl	8008408 <USB_DevDisconnect>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ce6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_Start+0x16>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e016      	b.n	8001d2a <HAL_PCD_Start+0x44>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fe78 	bl	80059fe <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f008 fc06 	bl	800a522 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f006 fb6a 	bl	80083f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b088      	sub	sp, #32
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 fb6c 	bl	800841c <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4e:	d102      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 fb5f 	bl	8002414 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 fb5e 	bl	800841c <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d112      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f008 f9d4 	bl	800a132 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f923 	bl	8001fd8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f006 fb40 	bl	800841c <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da6:	d10b      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f006 fb29 	bl	800841c <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd4:	d10b      	bne.n	8001dee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de8:	b292      	uxth	r2, r2
 8001dea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fb12 	bl	800841c <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e02:	d126      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	b292      	uxth	r2, r2
 8001e18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0208 	bic.w	r2, r2, #8
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f008 f9b5 	bl	800a1a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f006 fae0 	bl	800841c <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e66:	f040 8082 	bne.w	8001f6e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	77fb      	strb	r3, [r7, #31]
 8001e6e:	e010      	b.n	8001e92 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	7ffb      	ldrb	r3, [r7, #31]
 8001e7e:	8812      	ldrh	r2, [r2, #0]
 8001e80:	b292      	uxth	r2, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	3320      	adds	r3, #32
 8001e86:	443b      	add	r3, r7
 8001e88:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e8c:	7ffb      	ldrb	r3, [r7, #31]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	77fb      	strb	r3, [r7, #31]
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	2b07      	cmp	r3, #7
 8001e96:	d9eb      	bls.n	8001e70 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	b292      	uxth	r2, r2
 8001ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ec8:	bf00      	nop
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f6      	beq.n	8001eca <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	77fb      	strb	r3, [r7, #31]
 8001ef8:	e00f      	b.n	8001f1a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	4611      	mov	r1, r2
 8001f02:	7ffa      	ldrb	r2, [r7, #31]
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	440a      	add	r2, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	3320      	adds	r3, #32
 8001f0c:	443b      	add	r3, r7
 8001f0e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f12:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f14:	7ffb      	ldrb	r3, [r7, #31]
 8001f16:	3301      	adds	r3, #1
 8001f18:	77fb      	strb	r3, [r7, #31]
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	d9ec      	bls.n	8001efa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0208 	orr.w	r2, r2, #8
 8001f32:	b292      	uxth	r2, r2
 8001f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	b292      	uxth	r2, r2
 8001f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0204 	orr.w	r2, r2, #4
 8001f62:	b292      	uxth	r2, r2
 8001f64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f008 f901 	bl	800a170 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f006 fa52 	bl	800841c <USB_ReadInterrupts>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f82:	d10e      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f008 f8ba 	bl	800a116 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f006 fa38 	bl	800841c <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_SetAddress+0x1a>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e013      	b.n	800201a <HAL_PCD_SetAddress+0x42>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f006 f9df 	bl	80083ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	4608      	mov	r0, r1
 800202c:	4611      	mov	r1, r2
 800202e:	461a      	mov	r2, r3
 8002030:	4603      	mov	r3, r0
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	460b      	mov	r3, r1
 8002036:	803b      	strh	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002044:	2b00      	cmp	r3, #0
 8002046:	da0e      	bge.n	8002066 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	705a      	strb	r2, [r3, #1]
 8002064:	e00e      	b.n	8002084 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 0207 	and.w	r2, r3, #7
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002090:	883a      	ldrh	r2, [r7, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	78ba      	ldrb	r2, [r7, #2]
 800209a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d004      	beq.n	80020ae <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ae:	78bb      	ldrb	r3, [r7, #2]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_EP_Open+0xa6>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e00e      	b.n	80020e6 <HAL_PCD_EP_Open+0xc4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fcee 	bl	8005ab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0e      	bge.n	8002120 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	705a      	strb	r2, [r3, #1]
 800211e:	e00e      	b.n	800213e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0207 	and.w	r2, r3, #7
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	b2da      	uxtb	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002150:	2b01      	cmp	r3, #1
 8002152:	d101      	bne.n	8002158 <HAL_PCD_EP_Close+0x6a>
 8002154:	2302      	movs	r3, #2
 8002156:	e00e      	b.n	8002176 <HAL_PCD_EP_Close+0x88>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 f810 	bl	800618c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	607a      	str	r2, [r7, #4]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	460b      	mov	r3, r1
 800218c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800218e:	7afb      	ldrb	r3, [r7, #11]
 8002190:	f003 0207 	and.w	r2, r3, #7
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2200      	movs	r2, #0
 80021bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d106      	bne.n	80021e2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6979      	ldr	r1, [r7, #20]
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 f9c2 	bl	8006564 <USB_EPStartXfer>
 80021e0:	e005      	b.n	80021ee <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6979      	ldr	r1, [r7, #20]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 f9bb 	bl	8006564 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 0207 	and.w	r2, r3, #7
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	460b      	mov	r3, r1
 8002234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002236:	7afb      	ldrb	r3, [r7, #11]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2201      	movs	r2, #1
 8002270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002272:	7afb      	ldrb	r3, [r7, #11]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	b2da      	uxtb	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800227e:	7afb      	ldrb	r3, [r7, #11]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6979      	ldr	r1, [r7, #20]
 800228e:	4618      	mov	r0, r3
 8002290:	f004 f968 	bl	8006564 <USB_EPStartXfer>
 8002294:	e005      	b.n	80022a2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	4618      	mov	r0, r3
 800229e:	f004 f961 	bl	8006564 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 0207 	and.w	r2, r3, #7
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d901      	bls.n	80022ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e04c      	b.n	8002364 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da0e      	bge.n	80022f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	705a      	strb	r2, [r3, #1]
 80022ee:	e00c      	b.n	800230a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	b2da      	uxtb	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_EP_SetStall+0x7e>
 8002326:	2302      	movs	r3, #2
 8002328:	e01c      	b.n	8002364 <HAL_PCD_EP_SetStall+0xb8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	4618      	mov	r0, r3
 800233a:	f005 ff4b 	bl	80081d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	2b00      	cmp	r3, #0
 8002346:	d108      	bne.n	800235a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f006 f870 	bl	800843a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d901      	bls.n	800238a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e040      	b.n	800240c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0e      	bge.n	80023b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0207 	and.w	r2, r3, #7
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_PCD_EP_ClrStall+0x82>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e00e      	b.n	800240c <HAL_PCD_EP_ClrStall+0xa0>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 ff39 	bl	8008274 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08e      	sub	sp, #56	; 0x38
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800241c:	e2ec      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002426:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002438:	2b00      	cmp	r3, #0
 800243a:	f040 8161 	bne.w	8002700 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800243e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002440:	f003 0310 	and.w	r3, r3, #16
 8002444:	2b00      	cmp	r3, #0
 8002446:	d152      	bne.n	80024ee <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002458:	81fb      	strh	r3, [r7, #14]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	89fb      	ldrh	r3, [r7, #14]
 8002460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002468:	b29b      	uxth	r3, r3
 800246a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3328      	adds	r3, #40	; 0x28
 8002470:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	3302      	adds	r3, #2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	441a      	add	r2, r3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024ac:	2100      	movs	r1, #0
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f007 fe17 	bl	800a0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 829b 	beq.w	80029f8 <PCD_EP_ISR_Handler+0x5e4>
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8296 	bne.w	80029f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	b292      	uxth	r2, r2
 80024e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ec:	e284      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	2b00      	cmp	r3, #0
 8002506:	d034      	beq.n	8002572 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	3306      	adds	r3, #6
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002546:	b29b      	uxth	r3, r3
 8002548:	f005 ffc7 	bl	80084da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	b29a      	uxth	r2, r3
 8002554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002558:	4013      	ands	r3, r2
 800255a:	823b      	strh	r3, [r7, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	8a3a      	ldrh	r2, [r7, #16]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	b292      	uxth	r2, r2
 8002568:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f007 fd8c 	bl	800a088 <HAL_PCD_SetupStageCallback>
 8002570:	e242      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002572:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002576:	2b00      	cmp	r3, #0
 8002578:	f280 823e 	bge.w	80029f8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	b29a      	uxth	r2, r3
 8002584:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002588:	4013      	ands	r3, r2
 800258a:	83bb      	strh	r3, [r7, #28]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	8bba      	ldrh	r2, [r7, #28]
 8002592:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002596:	b292      	uxth	r2, r2
 8002598:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	3306      	adds	r3, #6
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d019      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ee>
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d015      	beq.n	8002602 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	6959      	ldr	r1, [r3, #20]
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f005 ff77 	bl	80084da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	441a      	add	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025fa:	2100      	movs	r1, #0
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f007 fd55 	bl	800a0ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b29b      	uxth	r3, r3
 800260a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 81f2 	bne.w	80029f8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002622:	b29b      	uxth	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d112      	bne.n	8002662 <PCD_EP_ISR_Handler+0x24e>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002646:	b29a      	uxth	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29a      	uxth	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e02f      	b.n	80026c2 <PCD_EP_ISR_Handler+0x2ae>
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b3e      	cmp	r3, #62	; 0x3e
 8002668:	d813      	bhi.n	8002692 <PCD_EP_ISR_Handler+0x27e>
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <PCD_EP_ISR_Handler+0x270>
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	3301      	adds	r3, #1
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	b29b      	uxth	r3, r3
 8002688:	029b      	lsls	r3, r3, #10
 800268a:	b29a      	uxth	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	801a      	strh	r2, [r3, #0]
 8002690:	e017      	b.n	80026c2 <PCD_EP_ISR_Handler+0x2ae>
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <PCD_EP_ISR_Handler+0x298>
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	3b01      	subs	r3, #1
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	827b      	strh	r3, [r7, #18]
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026da:	827b      	strh	r3, [r7, #18]
 80026dc:	8a7b      	ldrh	r3, [r7, #18]
 80026de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026e2:	827b      	strh	r3, [r7, #18]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	8a7b      	ldrh	r3, [r7, #18]
 80026ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8013      	strh	r3, [r2, #0]
 80026fe:	e17b      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002712:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002716:	2b00      	cmp	r3, #0
 8002718:	f280 80ea 	bge.w	80028f0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002732:	4013      	ands	r3, r2
 8002734:	853b      	strh	r3, [r7, #40]	; 0x28
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274a:	b292      	uxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800274e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	7b1b      	ldrb	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d122      	bne.n	80027b2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	3306      	adds	r3, #6
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002794:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002796:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8087 	beq.w	80028ac <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	6959      	ldr	r1, [r3, #20]
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	88da      	ldrh	r2, [r3, #6]
 80027aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ac:	f005 fe95 	bl	80084da <USB_ReadPMA>
 80027b0:	e07c      	b.n	80028ac <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	78db      	ldrb	r3, [r3, #3]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d108      	bne.n	80027cc <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027bc:	461a      	mov	r2, r3
 80027be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f927 	bl	8002a14 <HAL_PCD_EP_DB_Receive>
 80027c6:	4603      	mov	r3, r0
 80027c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027ca:	e06f      	b.n	80028ac <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	441a      	add	r2, r3
 80027f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002804:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002808:	b29b      	uxth	r3, r3
 800280a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d021      	beq.n	800286a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4413      	add	r3, r2
 800283a:	3302      	adds	r3, #2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800284e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02a      	beq.n	80028ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	6959      	ldr	r1, [r3, #20]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	891a      	ldrh	r2, [r3, #8]
 8002862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002864:	f005 fe39 	bl	80084da <USB_ReadPMA>
 8002868:	e020      	b.n	80028ac <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	3306      	adds	r3, #6
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	4413      	add	r3, r2
 8002888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002892:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	6959      	ldr	r1, [r3, #20]
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	895a      	ldrh	r2, [r3, #10]
 80028a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a8:	f005 fe17 	bl	80084da <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b2:	441a      	add	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028be:	441a      	add	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <PCD_EP_ISR_Handler+0x4c2>
 80028cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d206      	bcs.n	80028e4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f007 fbe5 	bl	800a0ac <HAL_PCD_DataOutStageCallback>
 80028e2:	e005      	b.n	80028f0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 fe3a 	bl	8006564 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07e      	beq.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80028fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002928:	843b      	strh	r3, [r7, #32]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	441a      	add	r2, r3
 8002938:	8c3b      	ldrh	r3, [r7, #32]
 800293a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002942:	b29b      	uxth	r3, r3
 8002944:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	78db      	ldrb	r3, [r3, #3]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d00c      	beq.n	8002968 <PCD_EP_ISR_Handler+0x554>
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	78db      	ldrb	r3, [r3, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800295a:	2b02      	cmp	r3, #2
 800295c:	d146      	bne.n	80029ec <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800295e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d141      	bne.n	80029ec <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	3302      	adds	r3, #2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	8bfb      	ldrh	r3, [r7, #30]
 8002998:	429a      	cmp	r2, r3
 800299a:	d906      	bls.n	80029aa <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	8bfb      	ldrh	r3, [r7, #30]
 80029a2:	1ad2      	subs	r2, r2, r3
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	619a      	str	r2, [r3, #24]
 80029a8:	e002      	b.n	80029b0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f007 fb8f 	bl	800a0e2 <HAL_PCD_DataInStageCallback>
 80029c4:	e018      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	8bfb      	ldrh	r3, [r7, #30]
 80029cc:	441a      	add	r2, r3
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	8bfb      	ldrh	r3, [r7, #30]
 80029d8:	441a      	add	r2, r3
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fdbd 	bl	8006564 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029ea:	e005      	b.n	80029f8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ee:	461a      	mov	r2, r3
 80029f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f91b 	bl	8002c2e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f6ff ad0a 	blt.w	800241e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3738      	adds	r7, #56	; 0x38
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d07e      	beq.n	8002b2a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3302      	adds	r3, #2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	699a      	ldr	r2, [r3, #24]
 8002a5a:	8b7b      	ldrh	r3, [r7, #26]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d306      	bcc.n	8002a6e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	8b7b      	ldrh	r3, [r7, #26]
 8002a66:	1ad2      	subs	r2, r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	619a      	str	r2, [r3, #24]
 8002a6c:	e002      	b.n	8002a74 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d123      	bne.n	8002ac4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	833b      	strh	r3, [r7, #24]
 8002a98:	8b3b      	ldrh	r3, [r7, #24]
 8002a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a9e:	833b      	strh	r3, [r7, #24]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	8b3b      	ldrh	r3, [r7, #24]
 8002ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01f      	beq.n	8002b0e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae8:	82fb      	strh	r3, [r7, #22]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	441a      	add	r2, r3
 8002af8:	8afb      	ldrh	r3, [r7, #22]
 8002afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b0e:	8b7b      	ldrh	r3, [r7, #26]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8087 	beq.w	8002c24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6959      	ldr	r1, [r3, #20]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	891a      	ldrh	r2, [r3, #8]
 8002b22:	8b7b      	ldrh	r3, [r7, #26]
 8002b24:	f005 fcd9 	bl	80084da <USB_ReadPMA>
 8002b28:	e07c      	b.n	8002c24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3306      	adds	r3, #6
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	8b7b      	ldrh	r3, [r7, #26]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d306      	bcc.n	8002b6c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	8b7b      	ldrh	r3, [r7, #26]
 8002b64:	1ad2      	subs	r2, r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	619a      	str	r2, [r3, #24]
 8002b6a:	e002      	b.n	8002b72 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d123      	bne.n	8002bc2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	83fb      	strh	r3, [r7, #30]
 8002b96:	8bfb      	ldrh	r3, [r7, #30]
 8002b98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b9c:	83fb      	strh	r3, [r7, #30]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	441a      	add	r2, r3
 8002bac:	8bfb      	ldrh	r3, [r7, #30]
 8002bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11f      	bne.n	8002c0c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	83bb      	strh	r3, [r7, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	441a      	add	r2, r3
 8002bf6:	8bbb      	ldrh	r3, [r7, #28]
 8002bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c0c:	8b7b      	ldrh	r3, [r7, #26]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	6959      	ldr	r1, [r3, #20]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	895a      	ldrh	r2, [r3, #10]
 8002c1e:	8b7b      	ldrh	r3, [r7, #26]
 8002c20:	f005 fc5b 	bl	80084da <USB_ReadPMA>
    }
  }

  return count;
 8002c24:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b0a2      	sub	sp, #136	; 0x88
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 81c7 	beq.w	8002fd6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	699a      	ldr	r2, [r3, #24]
 8002c78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d907      	bls.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c88:	1ad2      	subs	r2, r2, r3
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	619a      	str	r2, [r3, #24]
 8002c8e:	e002      	b.n	8002c96 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80b9 	bne.w	8002e12 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d126      	bne.n	8002cf6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	4413      	add	r3, r2
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	801a      	strh	r2, [r3, #0]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	801a      	strh	r2, [r3, #0]
 8002cf4:	e01a      	b.n	8002d2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d116      	bne.n	8002d2c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	4413      	add	r3, r2
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	011a      	lsls	r2, r3, #4
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	4413      	add	r3, r2
 8002d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	2200      	movs	r2, #0
 8002d2a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	623b      	str	r3, [r7, #32]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d126      	bne.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	4413      	add	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	011a      	lsls	r2, r3, #4
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	801a      	strh	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e017      	b.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d113      	bne.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	4413      	add	r3, r2
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	011a      	lsls	r2, r3, #4
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	2200      	movs	r2, #0
 8002db6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f007 f98f 	bl	800a0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 82d4 	beq.w	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	827b      	strh	r3, [r7, #18]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	8a7b      	ldrh	r3, [r7, #18]
 8002dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]
 8002e10:	e2b2      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 8286 	bne.w	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	441a      	add	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e82:	441a      	add	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d309      	bcc.n	8002ea8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	621a      	str	r2, [r3, #32]
 8002ea6:	e015      	b.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ebe:	e009      	b.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d155      	bne.n	8002f88 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	4413      	add	r3, r2
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	011a      	lsls	r2, r3, #4
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	4413      	add	r3, r2
 8002efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d112      	bne.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x302>
 8002f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	801a      	strh	r2, [r3, #0]
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e047      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	2b3e      	cmp	r3, #62	; 0x3e
 8002f34:	d811      	bhi.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f48:	3301      	adds	r3, #1
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	e032      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_EP_DB_Transmit+0x342>
 8002f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	029b      	lsls	r3, r3, #10
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	801a      	strh	r2, [r3, #0]
 8002f86:	e01b      	b.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	785b      	ldrb	r3, [r3, #1]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d117      	bne.n	8002fc0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	643b      	str	r3, [r7, #64]	; 0x40
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	4413      	add	r3, r2
 8002fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6959      	ldr	r1, [r3, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	891a      	ldrh	r2, [r3, #8]
 8002fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f005 fa3e 	bl	8008450 <USB_WritePMA>
 8002fd4:	e1d0      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3306      	adds	r3, #6
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800300a:	429a      	cmp	r2, r3
 800300c:	d307      	bcc.n	800301e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003016:	1ad2      	subs	r2, r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	619a      	str	r2, [r3, #24]
 800301c:	e002      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 80c4 	bne.w	80031b6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	785b      	ldrb	r3, [r3, #1]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d126      	bne.n	8003084 <HAL_PCD_EP_DB_Transmit+0x456>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003044:	b29b      	uxth	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304a:	4413      	add	r3, r2
 800304c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	011a      	lsls	r2, r3, #4
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	4413      	add	r3, r2
 8003058:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800305c:	66bb      	str	r3, [r7, #104]	; 0x68
 800305e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003060:	881b      	ldrh	r3, [r3, #0]
 8003062:	b29b      	uxth	r3, r3
 8003064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003068:	b29a      	uxth	r2, r3
 800306a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307c:	b29a      	uxth	r2, r3
 800307e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	e01a      	b.n	80030ba <HAL_PCD_EP_DB_Transmit+0x48c>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	785b      	ldrb	r3, [r3, #1]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d116      	bne.n	80030ba <HAL_PCD_EP_DB_Transmit+0x48c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	677b      	str	r3, [r7, #116]	; 0x74
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309a:	b29b      	uxth	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a0:	4413      	add	r3, r2
 80030a2:	677b      	str	r3, [r7, #116]	; 0x74
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	011a      	lsls	r2, r3, #4
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	4413      	add	r3, r2
 80030ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030b2:	673b      	str	r3, [r7, #112]	; 0x70
 80030b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030b6:	2200      	movs	r2, #0
 80030b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	67bb      	str	r3, [r7, #120]	; 0x78
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12f      	bne.n	8003128 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d8:	b29b      	uxth	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030e0:	4413      	add	r3, r2
 80030e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	4413      	add	r3, r2
 80030f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003106:	b29a      	uxth	r2, r3
 8003108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800311e:	b29a      	uxth	r2, r3
 8003120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003124:	801a      	strh	r2, [r3, #0]
 8003126:	e017      	b.n	8003158 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d113      	bne.n	8003158 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313e:	4413      	add	r3, r2
 8003140:	67bb      	str	r3, [r7, #120]	; 0x78
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	011a      	lsls	r2, r3, #4
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	4413      	add	r3, r2
 800314c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003150:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003154:	2200      	movs	r2, #0
 8003156:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f006 ffbf 	bl	800a0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 8104 	bne.w	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	441a      	add	r2, r3
 800319c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	8013      	strh	r3, [r2, #0]
 80031b4:	e0e0      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d121      	bne.n	8003204 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	441a      	add	r2, r3
 80031ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003200:	b29b      	uxth	r3, r3
 8003202:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800320a:	2b01      	cmp	r3, #1
 800320c:	f040 80b4 	bne.w	8003378 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003218:	441a      	add	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003226:	441a      	add	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d309      	bcc.n	800324c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003244:	1ad2      	subs	r2, r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	621a      	str	r2, [r3, #32]
 800324a:	e015      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d107      	bne.n	8003264 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003262:	e009      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	667b      	str	r3, [r7, #100]	; 0x64
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d155      	bne.n	8003332 <HAL_PCD_EP_DB_Transmit+0x704>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003294:	b29b      	uxth	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	4413      	add	r3, r2
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	011a      	lsls	r2, r3, #4
 80032a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a6:	4413      	add	r3, r2
 80032a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d112      	bne.n	80032da <HAL_PCD_EP_DB_Transmit+0x6ac>
 80032b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032be:	b29a      	uxth	r2, r3
 80032c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c2:	801a      	strh	r2, [r3, #0]
 80032c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	e044      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x736>
 80032da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032dc:	2b3e      	cmp	r3, #62	; 0x3e
 80032de:	d811      	bhi.n	8003304 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80032e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	657b      	str	r3, [r7, #84]	; 0x54
 80032e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	3301      	adds	r3, #1
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
 80032f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	029b      	lsls	r3, r3, #10
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003300:	801a      	strh	r2, [r3, #0]
 8003302:	e02f      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x736>
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	657b      	str	r3, [r7, #84]	; 0x54
 800330a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	3b01      	subs	r3, #1
 8003318:	657b      	str	r3, [r7, #84]	; 0x54
 800331a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331c:	b29b      	uxth	r3, r3
 800331e:	029b      	lsls	r3, r3, #10
 8003320:	b29b      	uxth	r3, r3
 8003322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800332a:	b29a      	uxth	r2, r3
 800332c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332e:	801a      	strh	r2, [r3, #0]
 8003330:	e018      	b.n	8003364 <HAL_PCD_EP_DB_Transmit+0x736>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d114      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x736>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003342:	b29b      	uxth	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003348:	4413      	add	r3, r2
 800334a:	667b      	str	r3, [r7, #100]	; 0x64
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	011a      	lsls	r2, r3, #4
 8003352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003354:	4413      	add	r3, r2
 8003356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800335a:	663b      	str	r3, [r7, #96]	; 0x60
 800335c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800335e:	b29a      	uxth	r2, r3
 8003360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003362:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6959      	ldr	r1, [r3, #20]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	895a      	ldrh	r2, [r3, #10]
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	b29b      	uxth	r3, r3
 8003374:	f005 f86c 	bl	8008450 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003392:	823b      	strh	r3, [r7, #16]
 8003394:	8a3b      	ldrh	r3, [r7, #16]
 8003396:	f083 0310 	eor.w	r3, r3, #16
 800339a:	823b      	strh	r3, [r7, #16]
 800339c:	8a3b      	ldrh	r3, [r7, #16]
 800339e:	f083 0320 	eor.w	r3, r3, #32
 80033a2:	823b      	strh	r3, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	8a3b      	ldrh	r3, [r7, #16]
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3788      	adds	r7, #136	; 0x88
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
 80033e0:	4613      	mov	r3, r2
 80033e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	897b      	ldrh	r3, [r7, #10]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e009      	b.n	800341c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003408:	897a      	ldrh	r2, [r7, #10]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800341c:	893b      	ldrh	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	b29a      	uxth	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	80da      	strh	r2, [r3, #6]
 8003430:	e00b      	b.n	800344a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2201      	movs	r2, #1
 8003436:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	b29a      	uxth	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0c1b      	lsrs	r3, r3, #16
 8003444:	b29a      	uxth	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	371c      	adds	r7, #28
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
	...

08003458 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e272      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5e>
 8003490:	4b8c      	ldr	r3, [pc, #560]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b89      	ldr	r3, [pc, #548]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x12c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e24c      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x76>
 80034c0:	4b80      	ldr	r3, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a7f      	ldr	r2, [pc, #508]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x98>
 80034d6:	4b7b      	ldr	r3, [pc, #492]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7a      	ldr	r2, [pc, #488]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b78      	ldr	r3, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xbc>
 80034fa:	4b72      	ldr	r3, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd4>
 8003514:	4b6b      	ldr	r3, [pc, #428]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6a      	ldr	r2, [pc, #424]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe f818 	bl	8001568 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe f814 	bl	8001568 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e200      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b5d      	ldr	r3, [pc, #372]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe4>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe f804 	bl	8001568 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe f800 	bl	8001568 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e1ec      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b53      	ldr	r3, [pc, #332]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x10c>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d063      	beq.n	800365a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b4c      	ldr	r3, [pc, #304]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800359e:	4b49      	ldr	r3, [pc, #292]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x18c>
 80035aa:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x176>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1c0      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4939      	ldr	r1, [pc, #228]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e03a      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fd ffb9 	bl	8001568 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fd ffb5 	bl	8001568 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e1a1      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4927      	ldr	r1, [pc, #156]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	600b      	str	r3, [r1, #0]
 800362c:	e015      	b.n	800365a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd ff98 	bl	8001568 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363c:	f7fd ff94 	bl	8001568 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e180      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364e:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03a      	beq.n	80036dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d019      	beq.n	80036a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_RCC_OscConfig+0x274>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003674:	f7fd ff78 	bl	8001568 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800367c:	f7fd ff74 	bl	8001568 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e160      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <HAL_RCC_OscConfig+0x26c>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800369a:	2001      	movs	r0, #1
 800369c:	f000 faa6 	bl	8003bec <RCC_Delay>
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a2:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_RCC_OscConfig+0x274>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7fd ff5e 	bl	8001568 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fd ff5a 	bl	8001568 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e146      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000
 80036c8:	42420000 	.word	0x42420000
 80036cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b92      	ldr	r3, [pc, #584]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e9      	bne.n	80036b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a6 	beq.w	8003836 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ee:	4b8b      	ldr	r3, [pc, #556]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	4b88      	ldr	r3, [pc, #544]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4a87      	ldr	r2, [pc, #540]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003704:	61d3      	str	r3, [r2, #28]
 8003706:	4b85      	ldr	r3, [pc, #532]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b82      	ldr	r3, [pc, #520]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b7f      	ldr	r3, [pc, #508]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7e      	ldr	r2, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fd ff1b 	bl	8001568 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fd ff17 	bl	8001568 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e103      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b75      	ldr	r3, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x4c8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d106      	bne.n	800376a <HAL_RCC_OscConfig+0x312>
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4a6e      	ldr	r2, [pc, #440]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	e02d      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x334>
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	6213      	str	r3, [r2, #32]
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4a66      	ldr	r2, [pc, #408]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003784:	f023 0304 	bic.w	r3, r3, #4
 8003788:	6213      	str	r3, [r2, #32]
 800378a:	e01c      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d10c      	bne.n	80037ae <HAL_RCC_OscConfig+0x356>
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a60      	ldr	r2, [pc, #384]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800379a:	f043 0304 	orr.w	r3, r3, #4
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6213      	str	r3, [r2, #32]
 80037ac:	e00b      	b.n	80037c6 <HAL_RCC_OscConfig+0x36e>
 80037ae:	4b5b      	ldr	r3, [pc, #364]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a5a      	ldr	r2, [pc, #360]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6213      	str	r3, [r2, #32]
 80037ba:	4b58      	ldr	r3, [pc, #352]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d015      	beq.n	80037fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ce:	f7fd fecb 	bl	8001568 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fd fec7 	bl	8001568 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0b1      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	4b4b      	ldr	r3, [pc, #300]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ee      	beq.n	80037d6 <HAL_RCC_OscConfig+0x37e>
 80037f8:	e014      	b.n	8003824 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fa:	f7fd feb5 	bl	8001568 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd feb1 	bl	8001568 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e09b      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ee      	bne.n	8003802 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382a:	4b3c      	ldr	r3, [pc, #240]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	4a3b      	ldr	r2, [pc, #236]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003834:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 8087 	beq.w	800394e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d061      	beq.n	8003910 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d146      	bne.n	80038e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b33      	ldr	r3, [pc, #204]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd fe85 	bl	8001568 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fd fe81 	bl	8001568 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e06d      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d108      	bne.n	800389c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4921      	ldr	r1, [pc, #132]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a19      	ldr	r1, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	430b      	orrs	r3, r1
 80038ae:	491b      	ldr	r1, [pc, #108]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fd fe55 	bl	8001568 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fd fe51 	bl	8001568 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03d      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x46a>
 80038e0:	e035      	b.n	800394e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x4cc>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fd fe3e 	bl	8001568 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fd fe3a 	bl	8001568 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e026      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_RCC_OscConfig+0x4c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x498>
 800390e:	e01e      	b.n	800394e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e019      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
 800391c:	40021000 	.word	0x40021000
 8003920:	40007000 	.word	0x40007000
 8003924:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <HAL_RCC_OscConfig+0x500>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	429a      	cmp	r2, r3
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d001      	beq.n	800394e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000

0800395c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0d0      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d910      	bls.n	80039a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b67      	ldr	r3, [pc, #412]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 0207 	bic.w	r2, r3, #7
 8003986:	4965      	ldr	r1, [pc, #404]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398e:	4b63      	ldr	r3, [pc, #396]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0b8      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d020      	beq.n	80039ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b8:	4b59      	ldr	r3, [pc, #356]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d0:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	494d      	ldr	r1, [pc, #308]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d040      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d107      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d115      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e07f      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e073      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06b      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b39      	ldr	r3, [pc, #228]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4936      	ldr	r1, [pc, #216]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fd8c 	bl	8001568 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fd88 	bl	8001568 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e053      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d210      	bcs.n	8003aac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f023 0207 	bic.w	r2, r3, #7
 8003a92:	4922      	ldr	r1, [pc, #136]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a9a:	4b20      	ldr	r3, [pc, #128]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e032      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4916      	ldr	r1, [pc, #88]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aea:	f000 f821 	bl	8003b30 <HAL_RCC_GetSysClockFreq>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	490a      	ldr	r1, [pc, #40]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_ClockConfig+0x1cc>)
 8003b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <HAL_RCC_ClockConfig+0x1d0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fcea 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40022000 	.word	0x40022000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800af78 	.word	0x0800af78
 8003b28:	20000020 	.word	0x20000020
 8003b2c:	20000024 	.word	0x20000024

08003b30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b30:	b490      	push	{r4, r7}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_RCC_GetSysClockFreq+0xac>)
 8003b38:	1d3c      	adds	r4, r7, #4
 8003b3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b40:	f240 2301 	movw	r3, #513	; 0x201
 8003b44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d002      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x40>
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x46>
 8003b6e:	e02b      	b.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b72:	623b      	str	r3, [r7, #32]
      break;
 8003b74:	e02b      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	0c9b      	lsrs	r3, r3, #18
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3328      	adds	r3, #40	; 0x28
 8003b80:	443b      	add	r3, r7
 8003b82:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b86:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d012      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0c5b      	lsrs	r3, r3, #17
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	3328      	adds	r3, #40	; 0x28
 8003b9e:	443b      	add	r3, r7
 8003ba0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ba4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003baa:	fb03 f202 	mul.w	r2, r3, r2
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bbc:	fb02 f303 	mul.w	r3, r2, r3
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	623b      	str	r3, [r7, #32]
      break;
 8003bc6:	e002      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bca:	623b      	str	r3, [r7, #32]
      break;
 8003bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	; 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc90      	pop	{r4, r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	0800af20 	.word	0x0800af20
 8003be0:	40021000 	.word	0x40021000
 8003be4:	007a1200 	.word	0x007a1200
 8003be8:	003d0900 	.word	0x003d0900

08003bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <RCC_Delay+0x34>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a0a      	ldr	r2, [pc, #40]	; (8003c24 <RCC_Delay+0x38>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	0a5b      	lsrs	r3, r3, #9
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c08:	bf00      	nop
  }
  while (Delay --);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	60fa      	str	r2, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <RCC_Delay+0x1c>
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	20000020 	.word	0x20000020
 8003c24:	10624dd3 	.word	0x10624dd3

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d07d      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c44:	2300      	movs	r3, #0
 8003c46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	4a4b      	ldr	r2, [pc, #300]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	61d3      	str	r3, [r2, #28]
 8003c60:	4b49      	ldr	r3, [pc, #292]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c70:	4b46      	ldr	r3, [pc, #280]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d118      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7c:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a42      	ldr	r2, [pc, #264]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c88:	f7fd fc6e 	bl	8001568 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c90:	f7fd fc6a 	bl	8001568 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	; 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e06d      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cae:	4b36      	ldr	r3, [pc, #216]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d02e      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d027      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf2:	f7fd fc39 	bl	8001568 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fd fc35 	bl	8001568 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e036      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d10:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0ee      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4917      	ldr	r1, [pc, #92]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	490b      	ldr	r1, [pc, #44]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6a:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	42420440 	.word	0x42420440

08003d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e076      	b.n	8003e94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d009      	beq.n	8003dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
 8003dbe:	e005      	b.n	8003dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f8fa 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	0c1a      	lsrs	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f002 0204 	and.w	r2, r2, #4
 8003e72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_SPI_Transmit+0x22>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e126      	b.n	800410c <HAL_SPI_Transmit+0x270>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ec6:	f7fd fb4f 	bl	8001568 <HAL_GetTick>
 8003eca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d002      	beq.n	8003ee2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
 8003ede:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ee0:	e10b      	b.n	80040fa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_Transmit+0x52>
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ef2:	e102      	b.n	80040fa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d10f      	bne.n	8003f5c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d007      	beq.n	8003f7a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d14b      	bne.n	800401c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_SPI_Transmit+0xf6>
 8003f8c:	8afb      	ldrh	r3, [r7, #22]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d13e      	bne.n	8004010 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	881a      	ldrh	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	1c9a      	adds	r2, r3, #2
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fb6:	e02b      	b.n	8004010 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d112      	bne.n	8003fec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	881a      	ldrh	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fea:	e011      	b.n	8004010 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fec:	f7fd fabc 	bl	8001568 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d803      	bhi.n	8004004 <HAL_SPI_Transmit+0x168>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <HAL_SPI_Transmit+0x16e>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800400e:	e074      	b.n	80040fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004014:	b29b      	uxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ce      	bne.n	8003fb8 <HAL_SPI_Transmit+0x11c>
 800401a:	e04c      	b.n	80040b6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_SPI_Transmit+0x18e>
 8004024:	8afb      	ldrh	r3, [r7, #22]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d140      	bne.n	80040ac <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	330c      	adds	r3, #12
 8004034:	7812      	ldrb	r2, [r2, #0]
 8004036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004050:	e02c      	b.n	80040ac <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d113      	bne.n	8004088 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	86da      	strh	r2, [r3, #54]	; 0x36
 8004086:	e011      	b.n	80040ac <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004088:	f7fd fa6e 	bl	8001568 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d803      	bhi.n	80040a0 <HAL_SPI_Transmit+0x204>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <HAL_SPI_Transmit+0x20a>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040aa:	e026      	b.n	80040fa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1cd      	bne.n	8004052 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 fbc4 	bl	8004848 <SPI_EndRxTxTransaction>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e000      	b.n	80040fa <HAL_SPI_Transmit+0x25e>
  }

error:
 80040f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800410a:	7ffb      	ldrb	r3, [r7, #31]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004130:	d112      	bne.n	8004158 <HAL_SPI_Receive+0x44>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10e      	bne.n	8004158 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2204      	movs	r2, #4
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8f1 	bl	8004336 <HAL_SPI_TransmitReceive>
 8004154:	4603      	mov	r3, r0
 8004156:	e0ea      	b.n	800432e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_SPI_Receive+0x52>
 8004162:	2302      	movs	r3, #2
 8004164:	e0e3      	b.n	800432e <HAL_SPI_Receive+0x21a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800416e:	f7fd f9fb 	bl	8001568 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004180:	2302      	movs	r3, #2
 8004182:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004184:	e0ca      	b.n	800431c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_SPI_Receive+0x7e>
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004196:	e0c1      	b.n	800431c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2204      	movs	r2, #4
 800419c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	88fa      	ldrh	r2, [r7, #6]
 80041b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041de:	d10f      	bne.n	8004200 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b40      	cmp	r3, #64	; 0x40
 800420c:	d007      	beq.n	800421e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d162      	bne.n	80042ec <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004226:	e02e      	b.n	8004286 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d115      	bne.n	8004262 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f103 020c 	add.w	r2, r3, #12
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004260:	e011      	b.n	8004286 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004262:	f7fd f981 	bl	8001568 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d803      	bhi.n	800427a <HAL_SPI_Receive+0x166>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d102      	bne.n	8004280 <HAL_SPI_Receive+0x16c>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004284:	e04a      	b.n	800431c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1cb      	bne.n	8004228 <HAL_SPI_Receive+0x114>
 8004290:	e031      	b.n	80042f6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d113      	bne.n	80042c8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	b292      	uxth	r2, r2
 80042ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	1c9a      	adds	r2, r3, #2
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042c6:	e011      	b.n	80042ec <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042c8:	f7fd f94e 	bl	8001568 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d803      	bhi.n	80042e0 <HAL_SPI_Receive+0x1cc>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d102      	bne.n	80042e6 <HAL_SPI_Receive+0x1d2>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042ea:	e017      	b.n	800431c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cd      	bne.n	8004292 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fa52 	bl	80047a4 <SPI_EndRxTransaction>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	e000      	b.n	800431c <HAL_SPI_Receive+0x208>
  }

error :
 800431a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b08c      	sub	sp, #48	; 0x30
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004344:	2301      	movs	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_TransmitReceive+0x26>
 8004358:	2302      	movs	r3, #2
 800435a:	e18a      	b.n	8004672 <HAL_SPI_TransmitReceive+0x33c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fd f900 	bl	8001568 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800437a:	887b      	ldrh	r3, [r7, #2]
 800437c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800437e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004382:	2b01      	cmp	r3, #1
 8004384:	d00f      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x70>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800438c:	d107      	bne.n	800439e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <HAL_SPI_TransmitReceive+0x68>
 8004396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800439a:	2b04      	cmp	r3, #4
 800439c:	d003      	beq.n	80043a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800439e:	2302      	movs	r3, #2
 80043a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043a4:	e15b      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x82>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x82>
 80043b2:	887b      	ldrh	r3, [r7, #2]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d103      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043be:	e14e      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d003      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2205      	movs	r2, #5
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	887a      	ldrh	r2, [r7, #2]
 80043ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	887a      	ldrh	r2, [r7, #2]
 80043fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004414:	2b40      	cmp	r3, #64	; 0x40
 8004416:	d007      	beq.n	8004428 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	d178      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_TransmitReceive+0x10a>
 800443a:	8b7b      	ldrh	r3, [r7, #26]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d166      	bne.n	800450e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004464:	e053      	b.n	800450e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d11b      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x176>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d016      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x176>
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d113      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d119      	bne.n	80044ee <HAL_SPI_TransmitReceive+0x1b8>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d014      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	b292      	uxth	r2, r2
 80044d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044ea:	2301      	movs	r3, #1
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ee:	f7fd f83b 	bl	8001568 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d807      	bhi.n	800450e <HAL_SPI_TransmitReceive+0x1d8>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d003      	beq.n	800450e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800450c:	e0a7      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1a6      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x130>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1a1      	bne.n	8004466 <HAL_SPI_TransmitReceive+0x130>
 8004522:	e07c      	b.n	800461e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x1fc>
 800452c:	8b7b      	ldrh	r3, [r7, #26]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d16b      	bne.n	800460a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004558:	e057      	b.n	800460a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d11c      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x26c>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x26c>
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d114      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d119      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x2ae>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045e4:	f7fc ffc0 	bl	8001568 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d803      	bhi.n	80045fc <HAL_SPI_TransmitReceive+0x2c6>
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d102      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x2cc>
 80045fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d103      	bne.n	800460a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004608:	e029      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1a2      	bne.n	800455a <HAL_SPI_TransmitReceive+0x224>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d19d      	bne.n	800455a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f910 	bl	8004848 <SPI_EndRxTxTransaction>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d006      	beq.n	800463c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2220      	movs	r2, #32
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800463a:	e010      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	e000      	b.n	800465e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800465c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800466e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004672:	4618      	mov	r0, r3
 8004674:	3730      	adds	r7, #48	; 0x30
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004688:	b2db      	uxtb	r3, r3
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046a4:	f7fc ff60 	bl	8001568 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046b4:	f7fc ff58 	bl	8001568 <HAL_GetTick>
 80046b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	0d1b      	lsrs	r3, r3, #20
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	fb02 f303 	mul.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ca:	e054      	b.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d2:	d050      	beq.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046d4:	f7fc ff48 	bl	8001568 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d902      	bls.n	80046ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d13d      	bne.n	8004766 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004702:	d111      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470c:	d004      	beq.n	8004718 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004716:	d107      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004726:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004730:	d10f      	bne.n	8004752 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e017      	b.n	8004796 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3b01      	subs	r3, #1
 8004774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d19b      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000020 	.word	0x20000020

080047a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b8:	d111      	bne.n	80047de <SPI_EndRxTransaction+0x3a>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c2:	d004      	beq.n	80047ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d107      	bne.n	80047de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d117      	bne.n	8004818 <SPI_EndRxTransaction+0x74>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d112      	bne.n	8004818 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2101      	movs	r1, #1
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff ff49 	bl	8004694 <SPI_WaitFlagStateUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e013      	b.n	8004840 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	2180      	movs	r1, #128	; 0x80
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff36 	bl	8004694 <SPI_WaitFlagStateUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	f043 0220 	orr.w	r2, r3, #32
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e000      	b.n	8004840 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2200      	movs	r2, #0
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff ff18 	bl	8004694 <SPI_WaitFlagStateUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e000      	b.n	800487c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e041      	b.n	800491a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fbe2 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fd26 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e041      	b.n	80049b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f839 	bl	80049c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fcd7 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_TIM_PWM_Start+0x24>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e022      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d109      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x3e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	e015      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d109      	bne.n	8004a2c <HAL_TIM_PWM_Start+0x58>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e008      	b.n	8004a3e <HAL_TIM_PWM_Start+0x6a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e05e      	b.n	8004b04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start+0x82>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a54:	e013      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0x92>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a64:	e00b      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a74:	e003      	b.n	8004a7e <HAL_TIM_PWM_Start+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2201      	movs	r2, #1
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fec4 	bl	8005814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIM_PWM_Start+0x138>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d107      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a18      	ldr	r2, [pc, #96]	; (8004b0c <HAL_TIM_PWM_Start+0x138>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab8:	d009      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <HAL_TIM_PWM_Start+0x13c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_PWM_Start+0xfa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <HAL_TIM_PWM_Start+0x140>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d010      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	e007      	b.n	8004b02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800

08004b18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e093      	b.n	8004c54 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7fc fac9 	bl	80010d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b5c:	f023 0307 	bic.w	r3, r3, #7
 8004b60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 fbd1 	bl	8005314 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	4313      	orrs	r3, r2
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bb8:	f023 030c 	bic.w	r3, r3, #12
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	021b      	lsls	r3, r3, #8
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	011a      	lsls	r2, r3, #4
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	031b      	lsls	r3, r3, #12
 8004be8:	4313      	orrs	r3, r2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4313      	orrs	r3, r2
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c92:	7b7b      	ldrb	r3, [r7, #13]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e089      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cac:	e031      	b.n	8004d12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d110      	bne.n	8004cd6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d102      	bne.n	8004cc0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cba:	7b3b      	ldrb	r3, [r7, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e075      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd4:	e01d      	b.n	8004d12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d108      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	7b7b      	ldrb	r3, [r7, #13]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ce8:	7b3b      	ldrb	r3, [r7, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e05e      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d1e:	e01f      	b.n	8004d60 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fd73 	bl	8005814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0202 	orr.w	r2, r2, #2
 8004d3c:	60da      	str	r2, [r3, #12]
      break;
 8004d3e:	e02e      	b.n	8004d9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	2104      	movs	r1, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fd63 	bl	8005814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0204 	orr.w	r2, r2, #4
 8004d5c:	60da      	str	r2, [r3, #12]
      break;
 8004d5e:	e01e      	b.n	8004d9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fd53 	bl	8005814 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	2104      	movs	r1, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fd4c 	bl	8005814 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0202 	orr.w	r2, r2, #2
 8004d8a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0204 	orr.w	r2, r2, #4
 8004d9a:	60da      	str	r2, [r3, #12]
      break;
 8004d9c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0202 	mvn.w	r2, #2
 8004de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fb f9ae 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fa6b 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fa71 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb f984 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa41 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa47 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0208 	mvn.w	r2, #8
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2204      	movs	r2, #4
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fb f95a 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa17 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fa1d 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0210 	mvn.w	r2, #16
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fb f930 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9ed 	bl	80052de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9f3 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0201 	mvn.w	r2, #1
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f9c8 	bl	80052cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f46:	2b80      	cmp	r3, #128	; 0x80
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fd32 	bl	80059cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9b7 	bl	8005302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0220 	mvn.w	r2, #32
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fcfd 	bl	80059ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0ac      	b.n	800513c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	f200 809f 	bhi.w	8005130 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	08005131 	.word	0x08005131
 8005000:	08005131 	.word	0x08005131
 8005004:	08005131 	.word	0x08005131
 8005008:	0800506d 	.word	0x0800506d
 800500c:	08005131 	.word	0x08005131
 8005010:	08005131 	.word	0x08005131
 8005014:	08005131 	.word	0x08005131
 8005018:	080050af 	.word	0x080050af
 800501c:	08005131 	.word	0x08005131
 8005020:	08005131 	.word	0x08005131
 8005024:	08005131 	.word	0x08005131
 8005028:	080050ef 	.word	0x080050ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f9d0 	bl	80053d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	619a      	str	r2, [r3, #24]
      break;
 800506a:	e062      	b.n	8005132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fa16 	bl	80054a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
      break;
 80050ac:	e041      	b.n	8005132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fa5f 	bl	8005578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0208 	orr.w	r2, r2, #8
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0204 	bic.w	r2, r2, #4
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
      break;
 80050ec:	e021      	b.n	8005132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 faa9 	bl	800564c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	61da      	str	r2, [r3, #28]
      break;
 800512e:	e000      	b.n	8005132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_TIM_ConfigClockSource+0x18>
 8005158:	2302      	movs	r3, #2
 800515a:	e0b3      	b.n	80052c4 <HAL_TIM_ConfigClockSource+0x180>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800517a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005182:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005194:	d03e      	beq.n	8005214 <HAL_TIM_ConfigClockSource+0xd0>
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519a:	f200 8087 	bhi.w	80052ac <HAL_TIM_ConfigClockSource+0x168>
 800519e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a2:	f000 8085 	beq.w	80052b0 <HAL_TIM_ConfigClockSource+0x16c>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d87f      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051ac:	2b70      	cmp	r3, #112	; 0x70
 80051ae:	d01a      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xa2>
 80051b0:	2b70      	cmp	r3, #112	; 0x70
 80051b2:	d87b      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051b4:	2b60      	cmp	r3, #96	; 0x60
 80051b6:	d050      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x116>
 80051b8:	2b60      	cmp	r3, #96	; 0x60
 80051ba:	d877      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051bc:	2b50      	cmp	r3, #80	; 0x50
 80051be:	d03c      	beq.n	800523a <HAL_TIM_ConfigClockSource+0xf6>
 80051c0:	2b50      	cmp	r3, #80	; 0x50
 80051c2:	d873      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051c4:	2b40      	cmp	r3, #64	; 0x40
 80051c6:	d058      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x136>
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d86f      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051cc:	2b30      	cmp	r3, #48	; 0x30
 80051ce:	d064      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x156>
 80051d0:	2b30      	cmp	r3, #48	; 0x30
 80051d2:	d86b      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d060      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x156>
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d867      	bhi.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05c      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x156>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d05a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80051e4:	e062      	b.n	80052ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f000 faee 	bl	80057d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005208:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	609a      	str	r2, [r3, #8]
      break;
 8005212:	e04e      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6899      	ldr	r1, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f000 fad7 	bl	80057d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005236:	609a      	str	r2, [r3, #8]
      break;
 8005238:	e03b      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fa4e 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2150      	movs	r1, #80	; 0x50
 8005252:	4618      	mov	r0, r3
 8005254:	f000 faa5 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005258:	e02b      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa6c 	bl	8005744 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2160      	movs	r1, #96	; 0x60
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fa95 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005278:	e01b      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fa2e 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2140      	movs	r1, #64	; 0x40
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fa85 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005298:	e00b      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fa7c 	bl	80057a2 <TIM_ITRx_SetConfig>
        break;
 80052aa:	e002      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a29      	ldr	r2, [pc, #164]	; (80053cc <TIM_Base_SetConfig+0xb8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005332:	d007      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a26      	ldr	r2, [pc, #152]	; (80053d0 <TIM_Base_SetConfig+0xbc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_Base_SetConfig+0x30>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <TIM_Base_SetConfig+0xc0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d108      	bne.n	8005356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <TIM_Base_SetConfig+0xb8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00b      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005364:	d007      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <TIM_Base_SetConfig+0xbc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d003      	beq.n	8005376 <TIM_Base_SetConfig+0x62>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <TIM_Base_SetConfig+0xc0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d108      	bne.n	8005388 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a07      	ldr	r2, [pc, #28]	; (80053cc <TIM_Base_SetConfig+0xb8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d103      	bne.n	80053bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	615a      	str	r2, [r3, #20]
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800

080053d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f023 0201 	bic.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 0302 	bic.w	r3, r3, #2
 8005420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a1c      	ldr	r2, [pc, #112]	; (80054a0 <TIM_OC1_SetConfig+0xc8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d10c      	bne.n	800544e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f023 0308 	bic.w	r3, r3, #8
 800543a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 0304 	bic.w	r3, r3, #4
 800544c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <TIM_OC1_SetConfig+0xc8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d111      	bne.n	800547a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	621a      	str	r2, [r3, #32]
}
 8005494:	bf00      	nop
 8005496:	371c      	adds	r7, #28
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00

080054a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0210 	bic.w	r2, r3, #16
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f023 0320 	bic.w	r3, r3, #32
 80054ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <TIM_OC2_SetConfig+0xd0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10d      	bne.n	8005520 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <TIM_OC2_SetConfig+0xd0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d113      	bne.n	8005550 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800552e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr
 8005574:	40012c00 	.word	0x40012c00

08005578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10d      	bne.n	80055f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC3_SetConfig+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00

0800564c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	031b      	lsls	r3, r3, #12
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <TIM_OC4_SetConfig+0x98>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 0210 	bic.w	r2, r3, #16
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	031b      	lsls	r3, r3, #12
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	bc80      	pop	{r7}
 80057a0:	4770      	bx	lr

080057a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	f043 0307 	orr.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	021a      	lsls	r2, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	609a      	str	r2, [r3, #8]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005870:	2302      	movs	r3, #2
 8005872:	e046      	b.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a16      	ldr	r2, [pc, #88]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d009      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a10      	ldr	r2, [pc, #64]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10c      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00
 8005910:	40000400 	.word	0x40000400
 8005914:	40000800 	.word	0x40000800

08005918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005930:	2302      	movs	r3, #2
 8005932:	e03d      	b.n	80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr

080059ba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059de:	b084      	sub	sp, #16
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	f107 0014 	add.w	r0, r7, #20
 80059ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	b004      	add	sp, #16
 80059fc:	4770      	bx	lr

080059fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a0e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a32:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	43db      	mvns	r3, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4013      	ands	r3, r2
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	460b      	mov	r3, r1
 8005a68:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr

08005a76 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a76:	b084      	sub	sp, #16
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	f107 0014 	add.w	r0, r7, #20
 8005a84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	b004      	add	sp, #16
 8005ab4:	4770      	bx	lr
	...

08005ab8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b09b      	sub	sp, #108	; 0x6c
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	78db      	ldrb	r3, [r3, #3]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d81f      	bhi.n	8005b2a <USB_ActivateEndpoint+0x72>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <USB_ActivateEndpoint+0x38>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b1d 	.word	0x08005b1d
 8005af8:	08005b33 	.word	0x08005b33
 8005afc:	08005b0f 	.word	0x08005b0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b08:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b0c:	e012      	b.n	8005b34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b1a:	e00b      	b.n	8005b34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b28:	e004      	b.n	8005b34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005b30:	e000      	b.n	8005b34 <USB_ActivateEndpoint+0x7c>
      break;
 8005b32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	441a      	add	r2, r3
 8005b3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8149 	bne.w	8005e38 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8084 	beq.w	8005cb8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	011a      	lsls	r2, r3, #4
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	88db      	ldrh	r3, [r3, #6]
 8005bd8:	085b      	lsrs	r3, r3, #1
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	81fb      	strh	r3, [r7, #14]
 8005bf2:	89fb      	ldrh	r3, [r7, #14]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01b      	beq.n	8005c34 <USB_ActivateEndpoint+0x17c>
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	81bb      	strh	r3, [r7, #12]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	89bb      	ldrh	r3, [r7, #12]
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d020      	beq.n	8005c7e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c52:	813b      	strh	r3, [r7, #8]
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	f083 0320 	eor.w	r3, r3, #32
 8005c5a:	813b      	strh	r3, [r7, #8]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	893b      	ldrh	r3, [r7, #8]
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
 8005c7c:	e27f      	b.n	800617e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	897b      	ldrh	r3, [r7, #10]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]
 8005cb6:	e262      	b.n	800617e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	4413      	add	r3, r2
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	4413      	add	r3, r2
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	011a      	lsls	r2, r3, #4
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d0e:	623b      	str	r3, [r7, #32]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d112      	bne.n	8005d3e <USB_ActivateEndpoint+0x286>
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e02f      	b.n	8005d9e <USB_ActivateEndpoint+0x2e6>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b3e      	cmp	r3, #62	; 0x3e
 8005d44:	d813      	bhi.n	8005d6e <USB_ActivateEndpoint+0x2b6>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <USB_ActivateEndpoint+0x2a8>
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	029b      	lsls	r3, r3, #10
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	e017      	b.n	8005d9e <USB_ActivateEndpoint+0x2e6>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	663b      	str	r3, [r7, #96]	; 0x60
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <USB_ActivateEndpoint+0x2d0>
 8005d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d84:	3b01      	subs	r3, #1
 8005d86:	663b      	str	r3, [r7, #96]	; 0x60
 8005d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	029b      	lsls	r3, r3, #10
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	83fb      	strh	r3, [r7, #30]
 8005dac:	8bfb      	ldrh	r3, [r7, #30]
 8005dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01b      	beq.n	8005dee <USB_ActivateEndpoint+0x336>
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dcc:	83bb      	strh	r3, [r7, #28]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	8bbb      	ldrh	r3, [r7, #28]
 8005dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	837b      	strh	r3, [r7, #26]
 8005e06:	8b7b      	ldrh	r3, [r7, #26]
 8005e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e0c:	837b      	strh	r3, [r7, #26]
 8005e0e:	8b7b      	ldrh	r3, [r7, #26]
 8005e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e14:	837b      	strh	r3, [r7, #26]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	8b7b      	ldrh	r3, [r7, #26]
 8005e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8013      	strh	r3, [r2, #0]
 8005e36:	e1a2      	b.n	800617e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e84:	4413      	add	r3, r2
 8005e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	011a      	lsls	r2, r3, #4
 8005e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e96:	657b      	str	r3, [r7, #84]	; 0x54
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	891b      	ldrh	r3, [r3, #8]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea6:	801a      	strh	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	4413      	add	r3, r2
 8005eba:	653b      	str	r3, [r7, #80]	; 0x50
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	895b      	ldrh	r3, [r3, #10]
 8005ed0:	085b      	lsrs	r3, r3, #1
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 8091 	bne.w	8006008 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ef4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01b      	beq.n	8005f36 <USB_ActivateEndpoint+0x47e>
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01b      	beq.n	8005f86 <USB_ActivateEndpoint+0x4ce>
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fa4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
 8006006:	e0ba      	b.n	800617e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01d      	beq.n	8006060 <USB_ActivateEndpoint+0x5a8>
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800604c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01d      	beq.n	80060b8 <USB_ActivateEndpoint+0x600>
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	78db      	ldrb	r3, [r3, #3]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d024      	beq.n	800610a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060de:	f083 0320 	eor.w	r3, r3, #32
 80060e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	441a      	add	r2, r3
 80060f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006104:	b29b      	uxth	r3, r3
 8006106:	8013      	strh	r3, [r2, #0]
 8006108:	e01d      	b.n	8006146 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006120:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800616a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617a:	b29b      	uxth	r3, r3
 800617c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800617e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006182:	4618      	mov	r0, r3
 8006184:	376c      	adds	r7, #108	; 0x6c
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800618c:	b480      	push	{r7}
 800618e:	b08d      	sub	sp, #52	; 0x34
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	7b1b      	ldrb	r3, [r3, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 808e 	bne.w	80062bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d044      	beq.n	8006232 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	81bb      	strh	r3, [r7, #12]
 80061b6:	89bb      	ldrh	r3, [r7, #12]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <USB_DeactivateEndpoint+0x6c>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	817b      	strh	r3, [r7, #10]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	897b      	ldrh	r3, [r7, #10]
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800620e:	813b      	strh	r3, [r7, #8]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]
 8006230:	e192      	b.n	8006558 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	827b      	strh	r3, [r7, #18]
 8006240:	8a7b      	ldrh	r3, [r7, #18]
 8006242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01b      	beq.n	8006282 <USB_DeactivateEndpoint+0xf6>
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	823b      	strh	r3, [r7, #16]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8a3b      	ldrh	r3, [r7, #16]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006276:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006298:	81fb      	strh	r3, [r7, #14]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
 80062ba:	e14d      	b.n	8006558 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f040 80a5 	bne.w	8006410 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	843b      	strh	r3, [r7, #32]
 80062d4:	8c3b      	ldrh	r3, [r7, #32]
 80062d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01b      	beq.n	8006316 <USB_DeactivateEndpoint+0x18a>
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	83fb      	strh	r3, [r7, #30]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	8bfb      	ldrh	r3, [r7, #30]
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800630e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	83bb      	strh	r3, [r7, #28]
 8006324:	8bbb      	ldrh	r3, [r7, #28]
 8006326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01b      	beq.n	8006366 <USB_DeactivateEndpoint+0x1da>
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006344:	837b      	strh	r3, [r7, #26]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	441a      	add	r2, r3
 8006350:	8b7b      	ldrh	r3, [r7, #26]
 8006352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800635a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006362:	b29b      	uxth	r3, r3
 8006364:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	833b      	strh	r3, [r7, #24]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8b3b      	ldrh	r3, [r7, #24]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	82fb      	strh	r3, [r7, #22]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8afb      	ldrh	r3, [r7, #22]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ec:	82bb      	strh	r3, [r7, #20]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8abb      	ldrh	r3, [r7, #20]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
 800640e:	e0a3      	b.n	8006558 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800641e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01b      	beq.n	8006460 <USB_DeactivateEndpoint+0x2d4>
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800646e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01b      	beq.n	80064b0 <USB_DeactivateEndpoint+0x324>
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800649c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	847b      	strh	r3, [r7, #34]	; 0x22
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3734      	adds	r7, #52	; 0x34
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr

08006564 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b0cc      	sub	sp, #304	; 0x130
 8006568:	af00      	add	r7, sp, #0
 800656a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006572:	6018      	str	r0, [r3, #0]
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	2b01      	cmp	r3, #1
 800658c:	f041 817d 	bne.w	800788a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d908      	bls.n	80065be <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80065bc:	e007      	b.n	80065ce <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	7b1b      	ldrb	r3, [r3, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d152      	bne.n	8006684 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	88da      	ldrh	r2, [r3, #6]
 80065f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006600:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006604:	6800      	ldr	r0, [r0, #0]
 8006606:	f001 ff23 	bl	8008450 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800660a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006612:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006616:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	4619      	mov	r1, r3
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006638:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800663c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	440a      	add	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006658:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4413      	add	r3, r2
 8006660:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006668:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006672:	b29a      	uxth	r2, r3
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	f001 b8b5 	b.w	80077ee <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	78db      	ldrb	r3, [r3, #3]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f040 84c6 	bne.w	8007022 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a1a      	ldr	r2, [r3, #32]
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	f240 8443 	bls.w	8006f3a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80066b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006704:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006720:	1ad2      	subs	r2, r2, r3
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	881b      	ldrh	r3, [r3, #0]
 800674a:	b29b      	uxth	r3, r3
 800674c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 823e 	beq.w	8006bd2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800675e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006762:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 809a 	bne.w	80068b0 <USB_EPStartXfer+0x34c>
 800677c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006784:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006788:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4619      	mov	r1, r3
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	440a      	add	r2, r1
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d122      	bne.n	800682e <USB_EPStartXfer+0x2ca>
 80067e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681e:	b29a      	uxth	r2, r3
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	e079      	b.n	8006922 <USB_EPStartXfer+0x3be>
 800682e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006832:	2b3e      	cmp	r3, #62	; 0x3e
 8006834:	d81b      	bhi.n	800686e <USB_EPStartXfer+0x30a>
 8006836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <USB_EPStartXfer+0x2f2>
 800684c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006850:	3301      	adds	r3, #1
 8006852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800685a:	b29b      	uxth	r3, r3
 800685c:	029b      	lsls	r3, r3, #10
 800685e:	b29a      	uxth	r2, r3
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e059      	b.n	8006922 <USB_EPStartXfer+0x3be>
 800686e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687c:	f003 031f 	and.w	r3, r3, #31
 8006880:	2b00      	cmp	r3, #0
 8006882:	d104      	bne.n	800688e <USB_EPStartXfer+0x32a>
 8006884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006888:	3b01      	subs	r3, #1
 800688a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800688e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006892:	b29b      	uxth	r3, r3
 8006894:	029b      	lsls	r3, r3, #10
 8006896:	b29b      	uxth	r3, r3
 8006898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e038      	b.n	8006922 <USB_EPStartXfer+0x3be>
 80068b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d130      	bne.n	8006922 <USB_EPStartXfer+0x3be>
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80068da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	440a      	add	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	011a      	lsls	r2, r3, #4
 80068f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4413      	add	r3, r2
 8006902:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006914:	b29a      	uxth	r2, r3
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	895b      	ldrh	r3, [r3, #10]
 800692e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6959      	ldr	r1, [r3, #20]
 800693e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006942:	b29b      	uxth	r3, r3
 8006944:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006948:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800694c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006950:	6800      	ldr	r0, [r0, #0]
 8006952:	f001 fd7d 	bl	8008450 <USB_WritePMA>
            ep->xfer_buff += len;
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006966:	441a      	add	r2, r3
 8006968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d90f      	bls.n	80069b0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	621a      	str	r2, [r3, #32]
 80069ae:	e00e      	b.n	80069ce <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 809a 	bne.w	8006b14 <USB_EPStartXfer+0x5b0>
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80069e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4619      	mov	r1, r3
 8006a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a12:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	440a      	add	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	011a      	lsls	r2, r3, #4
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d122      	bne.n	8006a92 <USB_EPStartXfer+0x52e>
 8006a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e083      	b.n	8006b9a <USB_EPStartXfer+0x636>
 8006a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a96:	2b3e      	cmp	r3, #62	; 0x3e
 8006a98:	d81b      	bhi.n	8006ad2 <USB_EPStartXfer+0x56e>
 8006a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <USB_EPStartXfer+0x556>
 8006ab0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006aba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	029b      	lsls	r3, r3, #10
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	801a      	strh	r2, [r3, #0]
 8006ad0:	e063      	b.n	8006b9a <USB_EPStartXfer+0x636>
 8006ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <USB_EPStartXfer+0x58e>
 8006ae8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006aec:	3b01      	subs	r3, #1
 8006aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006af2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	801a      	strh	r2, [r3, #0]
 8006b12:	e042      	b.n	8006b9a <USB_EPStartXfer+0x636>
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d13a      	bne.n	8006b9a <USB_EPStartXfer+0x636>
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b30:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b34:	6812      	ldr	r2, [r2, #0]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b56:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	891b      	ldrh	r3, [r3, #8]
 8006ba6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6959      	ldr	r1, [r3, #20]
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006bc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006bc8:	6800      	ldr	r0, [r0, #0]
 8006bca:	f001 fc41 	bl	8008450 <USB_WritePMA>
 8006bce:	f000 be0e 	b.w	80077ee <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d16d      	bne.n	8006cbe <USB_EPStartXfer+0x75a>
 8006be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c02:	4413      	add	r3, r2
 8006c04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	011a      	lsls	r2, r3, #4
 8006c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c16:	4413      	add	r3, r2
 8006c18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d112      	bne.n	8006c4c <USB_EPStartXfer+0x6e8>
 8006c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c34:	801a      	strh	r2, [r3, #0]
 8006c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c48:	801a      	strh	r2, [r3, #0]
 8006c4a:	e063      	b.n	8006d14 <USB_EPStartXfer+0x7b0>
 8006c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c50:	2b3e      	cmp	r3, #62	; 0x3e
 8006c52:	d817      	bhi.n	8006c84 <USB_EPStartXfer+0x720>
 8006c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <USB_EPStartXfer+0x710>
 8006c6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c6e:	3301      	adds	r3, #1
 8006c70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e047      	b.n	8006d14 <USB_EPStartXfer+0x7b0>
 8006c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <USB_EPStartXfer+0x740>
 8006c9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ca4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	029b      	lsls	r3, r3, #10
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cba:	801a      	strh	r2, [r3, #0]
 8006cbc:	e02a      	b.n	8006d14 <USB_EPStartXfer+0x7b0>
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d122      	bne.n	8006d14 <USB_EPStartXfer+0x7b0>
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	461a      	mov	r2, r3
 8006cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cee:	4413      	add	r3, r2
 8006cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	011a      	lsls	r2, r3, #4
 8006d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d02:	4413      	add	r3, r2
 8006d04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	891b      	ldrh	r3, [r3, #8]
 8006d20:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6959      	ldr	r1, [r3, #20]
 8006d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d3a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d3e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d42:	6800      	ldr	r0, [r0, #0]
 8006d44:	f001 fb84 	bl	8008450 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	441a      	add	r2, r3
 8006d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d90f      	bls.n	8006da2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	621a      	str	r2, [r3, #32]
 8006da0:	e00e      	b.n	8006dc0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	643b      	str	r3, [r7, #64]	; 0x40
 8006dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d16d      	bne.n	8006eb8 <USB_EPStartXfer+0x954>
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfc:	4413      	add	r3, r2
 8006dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
 8006e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d112      	bne.n	8006e46 <USB_EPStartXfer+0x8e2>
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e2e:	801a      	strh	r2, [r3, #0]
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e42:	801a      	strh	r2, [r3, #0]
 8006e44:	e05d      	b.n	8006f02 <USB_EPStartXfer+0x99e>
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e4c:	d817      	bhi.n	8006e7e <USB_EPStartXfer+0x91a>
 8006e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <USB_EPStartXfer+0x90a>
 8006e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	029b      	lsls	r3, r3, #10
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e041      	b.n	8006f02 <USB_EPStartXfer+0x99e>
 8006e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <USB_EPStartXfer+0x93a>
 8006e94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	029b      	lsls	r3, r3, #10
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb4:	801a      	strh	r2, [r3, #0]
 8006eb6:	e024      	b.n	8006f02 <USB_EPStartXfer+0x99e>
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	785b      	ldrb	r3, [r3, #1]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d11c      	bne.n	8006f02 <USB_EPStartXfer+0x99e>
 8006ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006edc:	4413      	add	r3, r2
 8006ede:	643b      	str	r3, [r7, #64]	; 0x40
 8006ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	011a      	lsls	r2, r3, #4
 8006eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	895b      	ldrh	r3, [r3, #10]
 8006f0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6959      	ldr	r1, [r3, #20]
 8006f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f30:	6800      	ldr	r0, [r0, #0]
 8006f32:	f001 fa8d 	bl	8008450 <USB_WritePMA>
 8006f36:	f000 bc5a 	b.w	80077ee <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	441a      	add	r2, r3
 8006f8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc6:	4413      	add	r3, r2
 8006fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fe0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	891b      	ldrh	r3, [r3, #8]
 8006ff8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6959      	ldr	r1, [r3, #20]
 8007008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800700c:	b29b      	uxth	r3, r3
 800700e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007012:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007016:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	f001 fa18 	bl	8008450 <USB_WritePMA>
 8007020:	e3e5      	b.n	80077ee <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800704c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800706a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007072:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	b29b      	uxth	r3, r3
 800707c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a1a      	ldr	r2, [r3, #32]
 800708a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708e:	1ad2      	subs	r2, r2, r3
 8007090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800709c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 81bc 	beq.w	800743c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d16d      	bne.n	80071be <USB_EPStartXfer+0xc5a>
 80070e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007102:	4413      	add	r3, r2
 8007104:	67bb      	str	r3, [r7, #120]	; 0x78
 8007106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	011a      	lsls	r2, r3, #4
 8007114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007116:	4413      	add	r3, r2
 8007118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800711c:	677b      	str	r3, [r7, #116]	; 0x74
 800711e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d112      	bne.n	800714c <USB_EPStartXfer+0xbe8>
 8007126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	b29b      	uxth	r3, r3
 800712c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007130:	b29a      	uxth	r2, r3
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007144:	b29a      	uxth	r2, r3
 8007146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e060      	b.n	800720e <USB_EPStartXfer+0xcaa>
 800714c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007150:	2b3e      	cmp	r3, #62	; 0x3e
 8007152:	d817      	bhi.n	8007184 <USB_EPStartXfer+0xc20>
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800715e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <USB_EPStartXfer+0xc10>
 800716a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800716e:	3301      	adds	r3, #1
 8007170:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007174:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29a      	uxth	r2, r3
 800717e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007180:	801a      	strh	r2, [r3, #0]
 8007182:	e044      	b.n	800720e <USB_EPStartXfer+0xcaa>
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800718e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <USB_EPStartXfer+0xc40>
 800719a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800719e:	3b01      	subs	r3, #1
 80071a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	029b      	lsls	r3, r3, #10
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e027      	b.n	800720e <USB_EPStartXfer+0xcaa>
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d11f      	bne.n	800720e <USB_EPStartXfer+0xcaa>
 80071ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071dc:	b29b      	uxth	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071e4:	4413      	add	r3, r2
 80071e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	011a      	lsls	r2, r3, #4
 80071f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80071fc:	4413      	add	r3, r2
 80071fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007202:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	b29a      	uxth	r2, r3
 800720a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800720c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	895b      	ldrh	r3, [r3, #10]
 800721a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6959      	ldr	r1, [r3, #20]
 800722a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722e:	b29b      	uxth	r3, r3
 8007230:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007234:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007238:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f001 f907 	bl	8008450 <USB_WritePMA>
          ep->xfer_buff += len;
 8007242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007252:	441a      	add	r2, r3
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6a1a      	ldr	r2, [r3, #32]
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	429a      	cmp	r2, r3
 800727a:	d90f      	bls.n	800729c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728c:	1ad2      	subs	r2, r2, r3
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	621a      	str	r2, [r3, #32]
 800729a:	e00e      	b.n	80072ba <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8295 	beq.w	80077ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	785b      	ldrb	r3, [r3, #1]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d16d      	bne.n	80073b0 <USB_EPStartXfer+0xe4c>
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072f4:	4413      	add	r3, r2
 80072f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	011a      	lsls	r2, r3, #4
 8007306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007308:	4413      	add	r3, r2
 800730a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800730e:	667b      	str	r3, [r7, #100]	; 0x64
 8007310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d112      	bne.n	800733e <USB_EPStartXfer+0xdda>
 8007318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007322:	b29a      	uxth	r2, r3
 8007324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007336:	b29a      	uxth	r2, r3
 8007338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800733a:	801a      	strh	r2, [r3, #0]
 800733c:	e063      	b.n	8007406 <USB_EPStartXfer+0xea2>
 800733e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007342:	2b3e      	cmp	r3, #62	; 0x3e
 8007344:	d817      	bhi.n	8007376 <USB_EPStartXfer+0xe12>
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <USB_EPStartXfer+0xe02>
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007360:	3301      	adds	r3, #1
 8007362:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736a:	b29b      	uxth	r3, r3
 800736c:	029b      	lsls	r3, r3, #10
 800736e:	b29a      	uxth	r2, r3
 8007370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	e047      	b.n	8007406 <USB_EPStartXfer+0xea2>
 8007376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <USB_EPStartXfer+0xe32>
 800738c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007390:	3b01      	subs	r3, #1
 8007392:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739a:	b29b      	uxth	r3, r3
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	b29b      	uxth	r3, r3
 80073a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ac:	801a      	strh	r2, [r3, #0]
 80073ae:	e02a      	b.n	8007406 <USB_EPStartXfer+0xea2>
 80073b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	785b      	ldrb	r3, [r3, #1]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d122      	bne.n	8007406 <USB_EPStartXfer+0xea2>
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	673b      	str	r3, [r7, #112]	; 0x70
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073e0:	4413      	add	r3, r2
 80073e2:	673b      	str	r3, [r7, #112]	; 0x70
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	011a      	lsls	r2, r3, #4
 80073f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073f4:	4413      	add	r3, r2
 80073f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007400:	b29a      	uxth	r2, r3
 8007402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007404:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	891b      	ldrh	r3, [r3, #8]
 8007412:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6959      	ldr	r1, [r3, #20]
 8007422:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007426:	b29b      	uxth	r3, r3
 8007428:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800742c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007430:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007434:	6800      	ldr	r0, [r0, #0]
 8007436:	f001 f80b 	bl	8008450 <USB_WritePMA>
 800743a:	e1d8      	b.n	80077ee <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d178      	bne.n	800753e <USB_EPStartXfer+0xfda>
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800745a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007470:	4413      	add	r3, r2
 8007472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	011a      	lsls	r2, r3, #4
 8007484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007488:	4413      	add	r3, r2
 800748a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800748e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d116      	bne.n	80074c8 <USB_EPStartXfer+0xf64>
 800749a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e06b      	b.n	80075a0 <USB_EPStartXfer+0x103c>
 80074c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074cc:	2b3e      	cmp	r3, #62	; 0x3e
 80074ce:	d818      	bhi.n	8007502 <USB_EPStartXfer+0xf9e>
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	085b      	lsrs	r3, r3, #1
 80074d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <USB_EPStartXfer+0xf8c>
 80074e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074ea:	3301      	adds	r3, #1
 80074ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80074f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	029b      	lsls	r3, r3, #10
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	e04e      	b.n	80075a0 <USB_EPStartXfer+0x103c>
 8007502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007506:	095b      	lsrs	r3, r3, #5
 8007508:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800750c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	2b00      	cmp	r3, #0
 8007516:	d104      	bne.n	8007522 <USB_EPStartXfer+0xfbe>
 8007518:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800751c:	3b01      	subs	r3, #1
 800751e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007522:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007526:	b29b      	uxth	r3, r3
 8007528:	029b      	lsls	r3, r3, #10
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800753a:	801a      	strh	r2, [r3, #0]
 800753c:	e030      	b.n	80075a0 <USB_EPStartXfer+0x103c>
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d128      	bne.n	80075a0 <USB_EPStartXfer+0x103c>
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800755c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007572:	4413      	add	r3, r2
 8007574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	011a      	lsls	r2, r3, #4
 8007586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800758a:	4413      	add	r3, r2
 800758c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007598:	b29a      	uxth	r2, r3
 800759a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800759e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	891b      	ldrh	r3, [r3, #8]
 80075ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6959      	ldr	r1, [r3, #20]
 80075bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075ce:	6800      	ldr	r0, [r0, #0]
 80075d0:	f000 ff3e 	bl	8008450 <USB_WritePMA>
          ep->xfer_buff += len;
 80075d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	441a      	add	r2, r3
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6a1a      	ldr	r2, [r3, #32]
 80075fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90f      	bls.n	800762e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	621a      	str	r2, [r3, #32]
 800762c:	e00e      	b.n	800764c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2200      	movs	r2, #0
 800764a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800764c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80cc 	beq.w	80077ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d178      	bne.n	8007766 <USB_EPStartXfer+0x1202>
 8007674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007678:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007698:	4413      	add	r3, r2
 800769a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	011a      	lsls	r2, r3, #4
 80076ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d116      	bne.n	80076f0 <USB_EPStartXfer+0x118c>
 80076c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e064      	b.n	80077ba <USB_EPStartXfer+0x1256>
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	2b3e      	cmp	r3, #62	; 0x3e
 80076f6:	d818      	bhi.n	800772a <USB_EPStartXfer+0x11c6>
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <USB_EPStartXfer+0x11b4>
 800770e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007712:	3301      	adds	r3, #1
 8007714:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800771c:	b29b      	uxth	r3, r3
 800771e:	029b      	lsls	r3, r3, #10
 8007720:	b29a      	uxth	r2, r3
 8007722:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e047      	b.n	80077ba <USB_EPStartXfer+0x1256>
 800772a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <USB_EPStartXfer+0x11e6>
 8007740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007744:	3b01      	subs	r3, #1
 8007746:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800774a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800774e:	b29b      	uxth	r3, r3
 8007750:	029b      	lsls	r3, r3, #10
 8007752:	b29b      	uxth	r3, r3
 8007754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775c:	b29a      	uxth	r2, r3
 800775e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007762:	801a      	strh	r2, [r3, #0]
 8007764:	e029      	b.n	80077ba <USB_EPStartXfer+0x1256>
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	785b      	ldrb	r3, [r3, #1]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d121      	bne.n	80077ba <USB_EPStartXfer+0x1256>
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007784:	b29b      	uxth	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800778c:	4413      	add	r3, r2
 800778e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	011a      	lsls	r2, r3, #4
 80077a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077a4:	4413      	add	r3, r2
 80077a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	895b      	ldrh	r3, [r3, #10]
 80077c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6959      	ldr	r1, [r3, #20]
 80077d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077e8:	6800      	ldr	r0, [r0, #0]
 80077ea:	f000 fe31 	bl	8008450 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80077ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007810:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781c:	8013      	strh	r3, [r2, #0]
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007826:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800782a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800782e:	8812      	ldrh	r2, [r2, #0]
 8007830:	f082 0210 	eor.w	r2, r2, #16
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800783e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007842:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007846:	8812      	ldrh	r2, [r2, #0]
 8007848:	f082 0220 	eor.w	r2, r2, #32
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	441a      	add	r2, r3
 8007868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800787a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007882:	b29b      	uxth	r3, r3
 8007884:	8013      	strh	r3, [r2, #0]
 8007886:	f000 bc9f 	b.w	80081c8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	7b1b      	ldrb	r3, [r3, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 80ae 	bne.w	80079f8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800789c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d917      	bls.n	80078e8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80078c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d8:	1ad2      	subs	r2, r2, r3
 80078da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	619a      	str	r2, [r3, #24]
 80078e6:	e00e      	b.n	8007906 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80078e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80078f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800792a:	4413      	add	r3, r2
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	011a      	lsls	r2, r3, #4
 800793e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007942:	4413      	add	r3, r2
 8007944:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800794c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d116      	bne.n	8007982 <USB_EPStartXfer+0x141e>
 8007954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e3e8      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
 8007982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007986:	2b3e      	cmp	r3, #62	; 0x3e
 8007988:	d818      	bhi.n	80079bc <USB_EPStartXfer+0x1458>
 800798a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <USB_EPStartXfer+0x1446>
 80079a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079a4:	3301      	adds	r3, #1
 80079a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	029b      	lsls	r3, r3, #10
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079b8:	801a      	strh	r2, [r3, #0]
 80079ba:	e3cb      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
 80079bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c0:	095b      	lsrs	r3, r3, #5
 80079c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <USB_EPStartXfer+0x1478>
 80079d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079d6:	3b01      	subs	r3, #1
 80079d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	029b      	lsls	r3, r3, #10
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079f4:	801a      	strh	r2, [r3, #0]
 80079f6:	e3ad      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	78db      	ldrb	r3, [r3, #3]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	f040 8200 	bne.w	8007e0a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 8091 	bne.w	8007b3e <USB_EPStartXfer+0x15da>
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a40:	4413      	add	r3, r2
 8007a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	011a      	lsls	r2, r3, #4
 8007a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a58:	4413      	add	r3, r2
 8007a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d116      	bne.n	8007aa0 <USB_EPStartXfer+0x153c>
 8007a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e083      	b.n	8007ba8 <USB_EPStartXfer+0x1644>
 8007aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	2b3e      	cmp	r3, #62	; 0x3e
 8007aae:	d820      	bhi.n	8007af2 <USB_EPStartXfer+0x158e>
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	085b      	lsrs	r3, r3, #1
 8007abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <USB_EPStartXfer+0x157c>
 8007ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ada:	3301      	adds	r3, #1
 8007adc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	029b      	lsls	r3, r3, #10
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e05a      	b.n	8007ba8 <USB_EPStartXfer+0x1644>
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f003 031f 	and.w	r3, r3, #31
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <USB_EPStartXfer+0x15be>
 8007b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	029b      	lsls	r3, r3, #10
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b3a:	801a      	strh	r2, [r3, #0]
 8007b3c:	e034      	b.n	8007ba8 <USB_EPStartXfer+0x1644>
 8007b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d12c      	bne.n	8007ba8 <USB_EPStartXfer+0x1644>
 8007b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b72:	4413      	add	r3, r2
 8007b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	011a      	lsls	r2, r3, #4
 8007b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 8091 	bne.w	8007cea <USB_EPStartXfer+0x1786>
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bec:	4413      	add	r3, r2
 8007bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	011a      	lsls	r2, r3, #4
 8007c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c04:	4413      	add	r3, r2
 8007c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d116      	bne.n	8007c4c <USB_EPStartXfer+0x16e8>
 8007c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c36:	881b      	ldrh	r3, [r3, #0]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e07c      	b.n	8007d46 <USB_EPStartXfer+0x17e2>
 8007c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5a:	d820      	bhi.n	8007c9e <USB_EPStartXfer+0x173a>
 8007c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d004      	beq.n	8007c8c <USB_EPStartXfer+0x1728>
 8007c82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c86:	3301      	adds	r3, #1
 8007c88:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	029b      	lsls	r3, r3, #10
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e053      	b.n	8007d46 <USB_EPStartXfer+0x17e2>
 8007c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <USB_EPStartXfer+0x176a>
 8007cc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ce6:	801a      	strh	r2, [r3, #0]
 8007ce8:	e02d      	b.n	8007d46 <USB_EPStartXfer+0x17e2>
 8007cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d125      	bne.n	8007d46 <USB_EPStartXfer+0x17e2>
 8007cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d10:	4413      	add	r3, r2
 8007d12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	011a      	lsls	r2, r3, #4
 8007d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 81fe 	beq.w	8008154 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <USB_EPStartXfer+0x182c>
 8007d84:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10d      	bne.n	8007dac <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d90:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 81db 	bne.w	8008154 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007d9e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f040 81d4 	bne.w	8008154 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	441a      	add	r2, r3
 8007df0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	8013      	strh	r3, [r2, #0]
 8007e08:	e1a4      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	78db      	ldrb	r3, [r3, #3]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	f040 819a 	bne.w	8008150 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d917      	bls.n	8007e68 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e58:	1ad2      	subs	r2, r2, r3
 8007e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	619a      	str	r2, [r3, #24]
 8007e66:	e00e      	b.n	8007e86 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	785b      	ldrb	r3, [r3, #1]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d178      	bne.n	8007f88 <USB_EPStartXfer+0x1a24>
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007eba:	4413      	add	r3, r2
 8007ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	011a      	lsls	r2, r3, #4
 8007ece:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d116      	bne.n	8007f12 <USB_EPStartXfer+0x19ae>
 8007ee4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e06b      	b.n	8007fea <USB_EPStartXfer+0x1a86>
 8007f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f16:	2b3e      	cmp	r3, #62	; 0x3e
 8007f18:	d818      	bhi.n	8007f4c <USB_EPStartXfer+0x19e8>
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <USB_EPStartXfer+0x19d6>
 8007f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f34:	3301      	adds	r3, #1
 8007f36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	029b      	lsls	r3, r3, #10
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e04e      	b.n	8007fea <USB_EPStartXfer+0x1a86>
 8007f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <USB_EPStartXfer+0x1a08>
 8007f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f66:	3b01      	subs	r3, #1
 8007f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	029b      	lsls	r3, r3, #10
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f84:	801a      	strh	r2, [r3, #0]
 8007f86:	e030      	b.n	8007fea <USB_EPStartXfer+0x1a86>
 8007f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d128      	bne.n	8007fea <USB_EPStartXfer+0x1a86>
 8007f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	011a      	lsls	r2, r3, #4
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d178      	bne.n	80080fa <USB_EPStartXfer+0x1b96>
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008024:	b29b      	uxth	r3, r3
 8008026:	461a      	mov	r2, r3
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800802c:	4413      	add	r3, r2
 800802e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	011a      	lsls	r2, r3, #4
 8008040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008044:	4413      	add	r3, r2
 8008046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800804a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800804e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d116      	bne.n	8008084 <USB_EPStartXfer+0x1b20>
 8008056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008062:	b29a      	uxth	r2, r3
 8008064:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807a:	b29a      	uxth	r2, r3
 800807c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008080:	801a      	strh	r2, [r3, #0]
 8008082:	e067      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	2b3e      	cmp	r3, #62	; 0x3e
 800808a:	d818      	bhi.n	80080be <USB_EPStartXfer+0x1b5a>
 800808c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008090:	085b      	lsrs	r3, r3, #1
 8008092:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d004      	beq.n	80080ac <USB_EPStartXfer+0x1b48>
 80080a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080a6:	3301      	adds	r3, #1
 80080a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	029b      	lsls	r3, r3, #10
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e04a      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080cc:	f003 031f 	and.w	r3, r3, #31
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d104      	bne.n	80080de <USB_EPStartXfer+0x1b7a>
 80080d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080d8:	3b01      	subs	r3, #1
 80080da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	029b      	lsls	r3, r3, #10
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080f6:	801a      	strh	r2, [r3, #0]
 80080f8:	e02c      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
 80080fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d124      	bne.n	8008154 <USB_EPStartXfer+0x1bf0>
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008118:	b29b      	uxth	r3, r3
 800811a:	461a      	mov	r2, r3
 800811c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008120:	4413      	add	r3, r2
 8008122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	011a      	lsls	r2, r3, #4
 8008134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008138:	4413      	add	r3, r2
 800813a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800813e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008146:	b29a      	uxth	r2, r3
 8008148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e001      	b.n	8008154 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e03a      	b.n	80081ca <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800817a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800817e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008182:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008186:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800818a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800818e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008192:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	441a      	add	r2, r3
 80081b0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d020      	beq.n	8008228 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fc:	81bb      	strh	r3, [r7, #12]
 80081fe:	89bb      	ldrh	r3, [r7, #12]
 8008200:	f083 0310 	eor.w	r3, r3, #16
 8008204:	81bb      	strh	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	89bb      	ldrh	r3, [r7, #12]
 8008212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008222:	b29b      	uxth	r3, r3
 8008224:	8013      	strh	r3, [r2, #0]
 8008226:	e01f      	b.n	8008268 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823e:	81fb      	strh	r3, [r7, #14]
 8008240:	89fb      	ldrh	r3, [r7, #14]
 8008242:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008246:	81fb      	strh	r3, [r7, #14]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	441a      	add	r2, r3
 8008252:	89fb      	ldrh	r3, [r7, #14]
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	7b1b      	ldrb	r3, [r3, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 809d 	bne.w	80083c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	785b      	ldrb	r3, [r3, #1]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d04c      	beq.n	800832a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	823b      	strh	r3, [r7, #16]
 800829e:	8a3b      	ldrh	r3, [r7, #16]
 80082a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01b      	beq.n	80082e0 <USB_EPClearStall+0x6c>
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082be:	81fb      	strh	r3, [r7, #14]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082dc:	b29b      	uxth	r3, r3
 80082de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	78db      	ldrb	r3, [r3, #3]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d06c      	beq.n	80083c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fe:	81bb      	strh	r3, [r7, #12]
 8008300:	89bb      	ldrh	r3, [r7, #12]
 8008302:	f083 0320 	eor.w	r3, r3, #32
 8008306:	81bb      	strh	r3, [r7, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	89bb      	ldrh	r3, [r7, #12]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
 8008328:	e04b      	b.n	80083c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	82fb      	strh	r3, [r7, #22]
 8008338:	8afb      	ldrh	r3, [r7, #22]
 800833a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01b      	beq.n	800837a <USB_EPClearStall+0x106>
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	881b      	ldrh	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	82bb      	strh	r3, [r7, #20]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	8abb      	ldrh	r3, [r7, #20]
 8008366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008376:	b29b      	uxth	r3, r3
 8008378:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	b29b      	uxth	r3, r3
 8008388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008390:	827b      	strh	r3, [r7, #18]
 8008392:	8a7b      	ldrh	r3, [r7, #18]
 8008394:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008398:	827b      	strh	r3, [r7, #18]
 800839a:	8a7b      	ldrh	r3, [r7, #18]
 800839c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083a0:	827b      	strh	r3, [r7, #18]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	8a7b      	ldrh	r3, [r7, #18]
 80083ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	371c      	adds	r7, #28
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2280      	movs	r2, #128	; 0x80
 80083e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800842a:	b29b      	uxth	r3, r3
 800842c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	bc80      	pop	{r7}
 8008438:	4770      	bx	lr

0800843a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr

08008450 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008450:	b480      	push	{r7}
 8008452:	b08d      	sub	sp, #52	; 0x34
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	460b      	mov	r3, r1
 8008460:	80fb      	strh	r3, [r7, #6]
 8008462:	4613      	mov	r3, r2
 8008464:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008466:	88bb      	ldrh	r3, [r7, #4]
 8008468:	3301      	adds	r3, #1
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	005a      	lsls	r2, r3, #1
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	4413      	add	r3, r2
 800847e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008488:	e01e      	b.n	80084c8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	3301      	adds	r3, #1
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	b29b      	uxth	r3, r3
 80084a0:	461a      	mov	r2, r3
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	3302      	adds	r3, #2
 80084b4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	3302      	adds	r3, #2
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	3301      	adds	r3, #1
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	3b01      	subs	r3, #1
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1dd      	bne.n	800848a <USB_WritePMA+0x3a>
  }
}
 80084ce:	bf00      	nop
 80084d0:	bf00      	nop
 80084d2:	3734      	adds	r7, #52	; 0x34
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr

080084da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084da:	b480      	push	{r7}
 80084dc:	b08b      	sub	sp, #44	; 0x2c
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	4611      	mov	r1, r2
 80084e6:	461a      	mov	r2, r3
 80084e8:	460b      	mov	r3, r1
 80084ea:	80fb      	strh	r3, [r7, #6]
 80084ec:	4613      	mov	r3, r2
 80084ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80084f0:	88bb      	ldrh	r3, [r7, #4]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	005a      	lsls	r2, r3, #1
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
 8008512:	e01b      	b.n	800854c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	b29b      	uxth	r3, r3
 800851a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	3302      	adds	r3, #2
 8008520:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	b2da      	uxtb	r2, r3
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3301      	adds	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b2da      	uxtb	r2, r3
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	3301      	adds	r3, #1
 800853e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	3302      	adds	r3, #2
 8008544:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	3b01      	subs	r3, #1
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e0      	bne.n	8008514 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008552:	88bb      	ldrh	r3, [r7, #4]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	b2da      	uxtb	r2, r3
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	701a      	strb	r2, [r3, #0]
  }
}
 800856e:	bf00      	nop
 8008570:	372c      	adds	r7, #44	; 0x2c
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	7c1b      	ldrb	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d115      	bne.n	80085bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008594:	2202      	movs	r2, #2
 8008596:	2181      	movs	r1, #129	; 0x81
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 fe86 	bl	800a2aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085a8:	2202      	movs	r2, #2
 80085aa:	2101      	movs	r1, #1
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fe7c 	bl	800a2aa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80085ba:	e012      	b.n	80085e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	2202      	movs	r2, #2
 80085c0:	2181      	movs	r1, #129	; 0x81
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fe71 	bl	800a2aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	2202      	movs	r2, #2
 80085d2:	2101      	movs	r1, #1
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 fe68 	bl	800a2aa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085e2:	2308      	movs	r3, #8
 80085e4:	2203      	movs	r2, #3
 80085e6:	2182      	movs	r1, #130	; 0x82
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f001 fe5e 	bl	800a2aa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80085f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80085f8:	f001 ff7e 	bl	800a4f8 <USBD_static_malloc>
 80085fc:	4602      	mov	r2, r0
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800860e:	2301      	movs	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	e026      	b.n	8008662 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	7c1b      	ldrb	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008648:	2101      	movs	r1, #1
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 ff1e 	bl	800a48c <USBD_LL_PrepareReceive>
 8008650:	e007      	b.n	8008662 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008658:	2340      	movs	r3, #64	; 0x40
 800865a:	2101      	movs	r1, #1
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 ff15 	bl	800a48c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800867c:	2181      	movs	r1, #129	; 0x81
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fe39 	bl	800a2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800868a:	2101      	movs	r1, #1
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fe32 	bl	800a2f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800869a:	2182      	movs	r1, #130	; 0x82
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fe2a 	bl	800a2f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00e      	beq.n	80086d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f001 ff24 	bl	800a510 <USBD_static_free>
    pdev->pClassData = NULL;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b086      	sub	sp, #24
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008700:	2b00      	cmp	r3, #0
 8008702:	d039      	beq.n	8008778 <USBD_CDC_Setup+0x9e>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d17f      	bne.n	8008808 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d029      	beq.n	8008764 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b25b      	sxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	da11      	bge.n	800873e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008726:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008728:	683a      	ldr	r2, [r7, #0]
 800872a:	88d2      	ldrh	r2, [r2, #6]
 800872c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800872e:	6939      	ldr	r1, [r7, #16]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	88db      	ldrh	r3, [r3, #6]
 8008734:	461a      	mov	r2, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 fa09 	bl	8009b4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800873c:	e06b      	b.n	8008816 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	785a      	ldrb	r2, [r3, #1]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	b2da      	uxtb	r2, r3
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008754:	6939      	ldr	r1, [r7, #16]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	88db      	ldrh	r3, [r3, #6]
 800875a:	461a      	mov	r2, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fa24 	bl	8009baa <USBD_CtlPrepareRx>
      break;
 8008762:	e058      	b.n	8008816 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	7850      	ldrb	r0, [r2, #1]
 8008770:	2200      	movs	r2, #0
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	4798      	blx	r3
      break;
 8008776:	e04e      	b.n	8008816 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	2b0b      	cmp	r3, #11
 800877e:	d02e      	beq.n	80087de <USBD_CDC_Setup+0x104>
 8008780:	2b0b      	cmp	r3, #11
 8008782:	dc38      	bgt.n	80087f6 <USBD_CDC_Setup+0x11c>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <USBD_CDC_Setup+0xb4>
 8008788:	2b0a      	cmp	r3, #10
 800878a:	d014      	beq.n	80087b6 <USBD_CDC_Setup+0xdc>
 800878c:	e033      	b.n	80087f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008794:	2b03      	cmp	r3, #3
 8008796:	d107      	bne.n	80087a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008798:	f107 030c 	add.w	r3, r7, #12
 800879c:	2202      	movs	r2, #2
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f9d4 	bl	8009b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087a6:	e02e      	b.n	8008806 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f001 f965 	bl	8009a7a <USBD_CtlError>
            ret = USBD_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	75fb      	strb	r3, [r7, #23]
          break;
 80087b4:	e027      	b.n	8008806 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d107      	bne.n	80087d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80087c0:	f107 030f 	add.w	r3, r7, #15
 80087c4:	2201      	movs	r2, #1
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f9c0 	bl	8009b4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087ce:	e01a      	b.n	8008806 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 f951 	bl	8009a7a <USBD_CtlError>
            ret = USBD_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	75fb      	strb	r3, [r7, #23]
          break;
 80087dc:	e013      	b.n	8008806 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d00d      	beq.n	8008804 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f945 	bl	8009a7a <USBD_CtlError>
            ret = USBD_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80087f4:	e006      	b.n	8008804 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f001 f93e 	bl	8009a7a <USBD_CtlError>
          ret = USBD_FAIL;
 80087fe:	2302      	movs	r3, #2
 8008800:	75fb      	strb	r3, [r7, #23]
          break;
 8008802:	e000      	b.n	8008806 <USBD_CDC_Setup+0x12c>
          break;
 8008804:	bf00      	nop
      }
      break;
 8008806:	e006      	b.n	8008816 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 f935 	bl	8009a7a <USBD_CtlError>
      ret = USBD_FAIL;
 8008810:	2302      	movs	r3, #2
 8008812:	75fb      	strb	r3, [r7, #23]
      break;
 8008814:	bf00      	nop
  }

  return ret;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800883a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d03a      	beq.n	80088bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008846:	78fa      	ldrb	r2, [r7, #3]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	331c      	adds	r3, #28
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d029      	beq.n	80088b0 <USBD_CDC_DataIn+0x90>
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	331c      	adds	r3, #28
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	78f9      	ldrb	r1, [r7, #3]
 8008870:	68b8      	ldr	r0, [r7, #8]
 8008872:	460b      	mov	r3, r1
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	4403      	add	r3, r0
 800887c:	3338      	adds	r3, #56	; 0x38
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	fbb2 f1f3 	udiv	r1, r2, r3
 8008884:	fb01 f303 	mul.w	r3, r1, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d110      	bne.n	80088b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800888e:	78fa      	ldrb	r2, [r7, #3]
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	331c      	adds	r3, #28
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088a2:	78f9      	ldrb	r1, [r7, #3]
 80088a4:	2300      	movs	r3, #0
 80088a6:	2200      	movs	r2, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 fdcc 	bl	800a446 <USBD_LL_Transmit>
 80088ae:	e003      	b.n	80088b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	e000      	b.n	80088be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80088bc:	2302      	movs	r3, #2
  }
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fdf7 	bl	800a4d2 <USBD_LL_GetRxDataSize>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00d      	beq.n	8008912 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800890a:	4611      	mov	r1, r2
 800890c:	4798      	blx	r3

    return USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	e000      	b.n	8008914 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008912:	2302      	movs	r3, #2
  }
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008932:	2b00      	cmp	r3, #0
 8008934:	d015      	beq.n	8008962 <USBD_CDC_EP0_RxReady+0x46>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800893c:	2bff      	cmp	r3, #255	; 0xff
 800893e:	d010      	beq.n	8008962 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800894e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008956:	b292      	uxth	r2, r2
 8008958:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	22ff      	movs	r2, #255	; 0xff
 800895e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2243      	movs	r2, #67	; 0x43
 8008978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800897a:	4b03      	ldr	r3, [pc, #12]	; (8008988 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	200000b4 	.word	0x200000b4

0800898c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2243      	movs	r2, #67	; 0x43
 8008998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800899a:	4b03      	ldr	r3, [pc, #12]	; (80089a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800899c:	4618      	mov	r0, r3
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	20000070 	.word	0x20000070

080089ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2243      	movs	r2, #67	; 0x43
 80089b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80089ba:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bc80      	pop	{r7}
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	200000f8 	.word	0x200000f8

080089cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220a      	movs	r2, #10
 80089d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80089da:	4b03      	ldr	r3, [pc, #12]	; (80089e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bc80      	pop	{r7}
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	2000002c 	.word	0x2000002c

080089ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80089f6:	2302      	movs	r3, #2
 80089f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr

08008a18 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a36:	88fa      	ldrh	r2, [r7, #6]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bc80      	pop	{r7}
 8008a48:	4770      	bx	lr

08008a4a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a5a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr

08008a70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01c      	beq.n	8008ac4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d115      	bne.n	8008ac0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2181      	movs	r1, #129	; 0x81
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fcc5 	bl	800a446 <USBD_LL_Transmit>

      return USBD_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e002      	b.n	8008ac6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ac4:	2302      	movs	r3, #2
  }
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d017      	beq.n	8008b18 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7c1b      	ldrb	r3, [r3, #16]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d109      	bne.n	8008b04 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008afa:	2101      	movs	r1, #1
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f001 fcc5 	bl	800a48c <USBD_LL_PrepareReceive>
 8008b02:	e007      	b.n	8008b14 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b0a:	2340      	movs	r3, #64	; 0x40
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 fcbc 	bl	800a48c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	e000      	b.n	8008b1a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008b18:	2302      	movs	r3, #2
  }
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	e01a      	b.n	8008b70 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	79fa      	ldrb	r2, [r7, #7]
 8008b66:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f001 fb29 	bl	800a1c0 <USBD_LL_Init>

  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d006      	beq.n	8008b9a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
 8008b98:	e001      	b.n	8008b9e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fb5e 	bl	800a274 <USBD_LL_Start>

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr

08008bd6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008be2:	2302      	movs	r3, #2
 8008be4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00c      	beq.n	8008c0a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	4798      	blx	r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b082      	sub	sp, #8
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fed8 	bl	8009a02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d016      	beq.n	8008ca4 <USBD_LL_SetupStage+0x6a>
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d81c      	bhi.n	8008cb4 <USBD_LL_SetupStage+0x7a>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <USBD_LL_SetupStage+0x4a>
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d008      	beq.n	8008c94 <USBD_LL_SetupStage+0x5a>
 8008c82:	e017      	b.n	8008cb4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f9cb 	bl	8009028 <USBD_StdDevReq>
      break;
 8008c92:	e01a      	b.n	8008cca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fa2d 	bl	80090fc <USBD_StdItfReq>
      break;
 8008ca2:	e012      	b.n	8008cca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fa6d 	bl	800918c <USBD_StdEPReq>
      break;
 8008cb2:	e00a      	b.n	8008cca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fb36 	bl	800a334 <USBD_LL_StallEP>
      break;
 8008cc8:	bf00      	nop
  }

  return USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	607a      	str	r2, [r7, #4]
 8008ce0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d14b      	bne.n	8008d80 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008cee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d134      	bne.n	8008d64 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d919      	bls.n	8008d3a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d203      	bcs.n	8008d28 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	e002      	b.n	8008d2e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	461a      	mov	r2, r3
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 ff57 	bl	8009be6 <USBD_CtlContinueRx>
 8008d38:	e038      	b.n	8008dac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d105      	bne.n	8008d5c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 ff54 	bl	8009c0a <USBD_CtlSendStatus>
 8008d62:	e023      	b.n	8008dac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d6a:	2b05      	cmp	r3, #5
 8008d6c:	d11e      	bne.n	8008dac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008d76:	2100      	movs	r1, #0
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f001 fadb 	bl	800a334 <USBD_LL_StallEP>
 8008d7e:	e015      	b.n	8008dac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00d      	beq.n	8008da8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d108      	bne.n	8008da8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	7afa      	ldrb	r2, [r7, #11]
 8008da0:	4611      	mov	r1, r2
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	4798      	blx	r3
 8008da6:	e001      	b.n	8008dac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008da8:	2302      	movs	r3, #2
 8008daa:	e000      	b.n	8008dae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b086      	sub	sp, #24
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	60f8      	str	r0, [r7, #12]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008dc4:	7afb      	ldrb	r3, [r7, #11]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d17f      	bne.n	8008eca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3314      	adds	r3, #20
 8008dce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d15c      	bne.n	8008e94 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d915      	bls.n	8008e12 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fec1 	bl	8009b86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e04:	2300      	movs	r3, #0
 8008e06:	2200      	movs	r2, #0
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f001 fb3e 	bl	800a48c <USBD_LL_PrepareReceive>
 8008e10:	e04e      	b.n	8008eb0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	6912      	ldr	r2, [r2, #16]
 8008e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e1e:	fb01 f202 	mul.w	r2, r1, r2
 8008e22:	1a9b      	subs	r3, r3, r2
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11c      	bne.n	8008e62 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d316      	bcc.n	8008e62 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	689a      	ldr	r2, [r3, #8]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d20f      	bcs.n	8008e62 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fe9d 	bl	8009b86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f001 fb16 	bl	800a48c <USBD_LL_PrepareReceive>
 8008e60:	e026      	b.n	8008eb0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d105      	bne.n	8008e84 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008e84:	2180      	movs	r1, #128	; 0x80
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f001 fa54 	bl	800a334 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fecf 	bl	8009c30 <USBD_CtlReceiveStatus>
 8008e92:	e00d      	b.n	8008eb0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d004      	beq.n	8008ea8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ea8:	2180      	movs	r1, #128	; 0x80
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f001 fa42 	bl	800a334 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d11d      	bne.n	8008ef6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fe81 	bl	8008bc2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ec8:	e015      	b.n	8008ef6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00d      	beq.n	8008ef2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d108      	bne.n	8008ef2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	7afa      	ldrb	r2, [r7, #11]
 8008eea:	4611      	mov	r1, r2
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	4798      	blx	r3
 8008ef0:	e001      	b.n	8008ef6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e000      	b.n	8008ef8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f001 f9cb 	bl	800a2aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2240      	movs	r2, #64	; 0x40
 8008f20:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	2200      	movs	r2, #0
 8008f28:	2180      	movs	r1, #128	; 0x80
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 f9bd 	bl	800a2aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2240      	movs	r2, #64	; 0x40
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d009      	beq.n	8008f78 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6852      	ldr	r2, [r2, #4]
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	4611      	mov	r1, r2
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
  }

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	78fa      	ldrb	r2, [r7, #3]
 8008f92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr

08008fa0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d105      	bne.n	8008fe6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr

08008ff2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009000:	2b03      	cmp	r3, #3
 8009002:	d10b      	bne.n	800901c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800903e:	2b40      	cmp	r3, #64	; 0x40
 8009040:	d005      	beq.n	800904e <USBD_StdDevReq+0x26>
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	d84f      	bhi.n	80090e6 <USBD_StdDevReq+0xbe>
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <USBD_StdDevReq+0x36>
 800904a:	2b20      	cmp	r3, #32
 800904c:	d14b      	bne.n	80090e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	4798      	blx	r3
      break;
 800905c:	e048      	b.n	80090f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	785b      	ldrb	r3, [r3, #1]
 8009062:	2b09      	cmp	r3, #9
 8009064:	d839      	bhi.n	80090da <USBD_StdDevReq+0xb2>
 8009066:	a201      	add	r2, pc, #4	; (adr r2, 800906c <USBD_StdDevReq+0x44>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	080090bd 	.word	0x080090bd
 8009070:	080090d1 	.word	0x080090d1
 8009074:	080090db 	.word	0x080090db
 8009078:	080090c7 	.word	0x080090c7
 800907c:	080090db 	.word	0x080090db
 8009080:	0800909f 	.word	0x0800909f
 8009084:	08009095 	.word	0x08009095
 8009088:	080090db 	.word	0x080090db
 800908c:	080090b3 	.word	0x080090b3
 8009090:	080090a9 	.word	0x080090a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f9dc 	bl	8009454 <USBD_GetDescriptor>
          break;
 800909c:	e022      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb3f 	bl	8009724 <USBD_SetAddress>
          break;
 80090a6:	e01d      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fb7e 	bl	80097ac <USBD_SetConfig>
          break;
 80090b0:	e018      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fc07 	bl	80098c8 <USBD_GetConfig>
          break;
 80090ba:	e013      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc37 	bl	8009932 <USBD_GetStatus>
          break;
 80090c4:	e00e      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fc65 	bl	8009998 <USBD_SetFeature>
          break;
 80090ce:	e009      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc74 	bl	80099c0 <USBD_ClrFeature>
          break;
 80090d8:	e004      	b.n	80090e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80090da:	6839      	ldr	r1, [r7, #0]
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fccc 	bl	8009a7a <USBD_CtlError>
          break;
 80090e2:	bf00      	nop
      }
      break;
 80090e4:	e004      	b.n	80090f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fcc6 	bl	8009a7a <USBD_CtlError>
      break;
 80090ee:	bf00      	nop
  }

  return ret;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop

080090fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009112:	2b40      	cmp	r3, #64	; 0x40
 8009114:	d005      	beq.n	8009122 <USBD_StdItfReq+0x26>
 8009116:	2b40      	cmp	r3, #64	; 0x40
 8009118:	d82e      	bhi.n	8009178 <USBD_StdItfReq+0x7c>
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <USBD_StdItfReq+0x26>
 800911e:	2b20      	cmp	r3, #32
 8009120:	d12a      	bne.n	8009178 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009128:	3b01      	subs	r3, #1
 800912a:	2b02      	cmp	r3, #2
 800912c:	d81d      	bhi.n	800916a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	889b      	ldrh	r3, [r3, #4]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b01      	cmp	r3, #1
 8009136:	d813      	bhi.n	8009160 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	88db      	ldrh	r3, [r3, #6]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d110      	bne.n	8009174 <USBD_StdItfReq+0x78>
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10d      	bne.n	8009174 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fd56 	bl	8009c0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800915e:	e009      	b.n	8009174 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fc89 	bl	8009a7a <USBD_CtlError>
          break;
 8009168:	e004      	b.n	8009174 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fc84 	bl	8009a7a <USBD_CtlError>
          break;
 8009172:	e000      	b.n	8009176 <USBD_StdItfReq+0x7a>
          break;
 8009174:	bf00      	nop
      }
      break;
 8009176:	e004      	b.n	8009182 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fc7d 	bl	8009a7a <USBD_CtlError>
      break;
 8009180:	bf00      	nop
  }

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	889b      	ldrh	r3, [r3, #4]
 800919e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a8:	2b40      	cmp	r3, #64	; 0x40
 80091aa:	d007      	beq.n	80091bc <USBD_StdEPReq+0x30>
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	f200 8146 	bhi.w	800943e <USBD_StdEPReq+0x2b2>
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <USBD_StdEPReq+0x40>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	f040 8141 	bne.w	800943e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	4798      	blx	r3
      break;
 80091ca:	e13d      	b.n	8009448 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	d10a      	bne.n	80091ee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	e12d      	b.n	800944a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	785b      	ldrb	r3, [r3, #1]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d007      	beq.n	8009206 <USBD_StdEPReq+0x7a>
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	f300 811b 	bgt.w	8009432 <USBD_StdEPReq+0x2a6>
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d072      	beq.n	80092e6 <USBD_StdEPReq+0x15a>
 8009200:	2b01      	cmp	r3, #1
 8009202:	d03a      	beq.n	800927a <USBD_StdEPReq+0xee>
 8009204:	e115      	b.n	8009432 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920c:	2b02      	cmp	r3, #2
 800920e:	d002      	beq.n	8009216 <USBD_StdEPReq+0x8a>
 8009210:	2b03      	cmp	r3, #3
 8009212:	d015      	beq.n	8009240 <USBD_StdEPReq+0xb4>
 8009214:	e02b      	b.n	800926e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <USBD_StdEPReq+0xaa>
 800921c:	7bbb      	ldrb	r3, [r7, #14]
 800921e:	2b80      	cmp	r3, #128	; 0x80
 8009220:	d009      	beq.n	8009236 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009222:	7bbb      	ldrb	r3, [r7, #14]
 8009224:	4619      	mov	r1, r3
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 f884 	bl	800a334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 f880 	bl	800a334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009234:	e020      	b.n	8009278 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fc1e 	bl	8009a7a <USBD_CtlError>
              break;
 800923e:	e01b      	b.n	8009278 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	885b      	ldrh	r3, [r3, #2]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10e      	bne.n	8009266 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <USBD_StdEPReq+0xda>
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	2b80      	cmp	r3, #128	; 0x80
 8009252:	d008      	beq.n	8009266 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	88db      	ldrh	r3, [r3, #6]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 f867 	bl	800a334 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fccf 	bl	8009c0a <USBD_CtlSendStatus>

              break;
 800926c:	e004      	b.n	8009278 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fc02 	bl	8009a7a <USBD_CtlError>
              break;
 8009276:	bf00      	nop
          }
          break;
 8009278:	e0e0      	b.n	800943c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009280:	2b02      	cmp	r3, #2
 8009282:	d002      	beq.n	800928a <USBD_StdEPReq+0xfe>
 8009284:	2b03      	cmp	r3, #3
 8009286:	d015      	beq.n	80092b4 <USBD_StdEPReq+0x128>
 8009288:	e026      	b.n	80092d8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00c      	beq.n	80092aa <USBD_StdEPReq+0x11e>
 8009290:	7bbb      	ldrb	r3, [r7, #14]
 8009292:	2b80      	cmp	r3, #128	; 0x80
 8009294:	d009      	beq.n	80092aa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 f84a 	bl	800a334 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092a0:	2180      	movs	r1, #128	; 0x80
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 f846 	bl	800a334 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092a8:	e01c      	b.n	80092e4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fbe4 	bl	8009a7a <USBD_CtlError>
              break;
 80092b2:	e017      	b.n	80092e4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	885b      	ldrh	r3, [r3, #2]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d112      	bne.n	80092e2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f851 	bl	800a372 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fc9a 	bl	8009c0a <USBD_CtlSendStatus>
              }
              break;
 80092d6:	e004      	b.n	80092e2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fbcd 	bl	8009a7a <USBD_CtlError>
              break;
 80092e0:	e000      	b.n	80092e4 <USBD_StdEPReq+0x158>
              break;
 80092e2:	bf00      	nop
          }
          break;
 80092e4:	e0aa      	b.n	800943c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d002      	beq.n	80092f6 <USBD_StdEPReq+0x16a>
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d032      	beq.n	800935a <USBD_StdEPReq+0x1ce>
 80092f4:	e097      	b.n	8009426 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d007      	beq.n	800930c <USBD_StdEPReq+0x180>
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b80      	cmp	r3, #128	; 0x80
 8009300:	d004      	beq.n	800930c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009302:	6839      	ldr	r1, [r7, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fbb8 	bl	8009a7a <USBD_CtlError>
                break;
 800930a:	e091      	b.n	8009430 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800930c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009310:	2b00      	cmp	r3, #0
 8009312:	da0b      	bge.n	800932c <USBD_StdEPReq+0x1a0>
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	3310      	adds	r3, #16
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	4413      	add	r3, r2
 8009328:	3304      	adds	r3, #4
 800932a:	e00b      	b.n	8009344 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009332:	4613      	mov	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	4413      	add	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2202      	movs	r2, #2
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fbfb 	bl	8009b4e <USBD_CtlSendData>
              break;
 8009358:	e06a      	b.n	8009430 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800935a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800935e:	2b00      	cmp	r3, #0
 8009360:	da11      	bge.n	8009386 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	f003 020f 	and.w	r2, r3, #15
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	3318      	adds	r3, #24
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d117      	bne.n	80093ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fb7b 	bl	8009a7a <USBD_CtlError>
                  break;
 8009384:	e054      	b.n	8009430 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	f003 020f 	and.w	r2, r3, #15
 800938c:	6879      	ldr	r1, [r7, #4]
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	440b      	add	r3, r1
 8009398:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fb68 	bl	8009a7a <USBD_CtlError>
                  break;
 80093aa:	e041      	b.n	8009430 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	da0b      	bge.n	80093cc <USBD_StdEPReq+0x240>
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ba:	4613      	mov	r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	3310      	adds	r3, #16
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	e00b      	b.n	80093e4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d2:	4613      	mov	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4413      	add	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	4413      	add	r3, r2
 80093e2:	3304      	adds	r3, #4
 80093e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <USBD_StdEPReq+0x266>
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b80      	cmp	r3, #128	; 0x80
 80093f0:	d103      	bne.n	80093fa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	e00e      	b.n	8009418 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 ffd6 	bl	800a3b0 <USBD_LL_IsStallEP>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2201      	movs	r2, #1
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	e002      	b.n	8009418 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2202      	movs	r2, #2
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fb95 	bl	8009b4e <USBD_CtlSendData>
              break;
 8009424:	e004      	b.n	8009430 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fb26 	bl	8009a7a <USBD_CtlError>
              break;
 800942e:	bf00      	nop
          }
          break;
 8009430:	e004      	b.n	800943c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb20 	bl	8009a7a <USBD_CtlError>
          break;
 800943a:	bf00      	nop
      }
      break;
 800943c:	e004      	b.n	8009448 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fb1a 	bl	8009a7a <USBD_CtlError>
      break;
 8009446:	bf00      	nop
  }

  return ret;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	0a1b      	lsrs	r3, r3, #8
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	2b06      	cmp	r3, #6
 8009476:	f200 8128 	bhi.w	80096ca <USBD_GetDescriptor+0x276>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <USBD_GetDescriptor+0x2c>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	0800949d 	.word	0x0800949d
 8009484:	080094b5 	.word	0x080094b5
 8009488:	080094f5 	.word	0x080094f5
 800948c:	080096cb 	.word	0x080096cb
 8009490:	080096cb 	.word	0x080096cb
 8009494:	0800966b 	.word	0x0800966b
 8009498:	08009697 	.word	0x08009697
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
      break;
 80094b2:	e112      	b.n	80096da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	7c1b      	ldrb	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10d      	bne.n	80094d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	f107 0208 	add.w	r2, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	2202      	movs	r2, #2
 80094d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094d6:	e100      	b.n	80096da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	f107 0208 	add.w	r2, r7, #8
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
 80094e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	2202      	movs	r2, #2
 80094f0:	701a      	strb	r2, [r3, #0]
      break;
 80094f2:	e0f2      	b.n	80096da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	885b      	ldrh	r3, [r3, #2]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	f200 80ac 	bhi.w	8009658 <USBD_GetDescriptor+0x204>
 8009500:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <USBD_GetDescriptor+0xb4>)
 8009502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009506:	bf00      	nop
 8009508:	08009521 	.word	0x08009521
 800950c:	08009555 	.word	0x08009555
 8009510:	08009589 	.word	0x08009589
 8009514:	080095bd 	.word	0x080095bd
 8009518:	080095f1 	.word	0x080095f1
 800951c:	08009625 	.word	0x08009625
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009542:	e091      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa97 	bl	8009a7a <USBD_CtlError>
            err++;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	3301      	adds	r3, #1
 8009550:	72fb      	strb	r3, [r7, #11]
          break;
 8009552:	e089      	b.n	8009668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7c12      	ldrb	r2, [r2, #16]
 800956c:	f107 0108 	add.w	r1, r7, #8
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009576:	e077      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fa7d 	bl	8009a7a <USBD_CtlError>
            err++;
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	3301      	adds	r3, #1
 8009584:	72fb      	strb	r3, [r7, #11]
          break;
 8009586:	e06f      	b.n	8009668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7c12      	ldrb	r2, [r2, #16]
 80095a0:	f107 0108 	add.w	r1, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095aa:	e05d      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa63 	bl	8009a7a <USBD_CtlError>
            err++;
 80095b4:	7afb      	ldrb	r3, [r7, #11]
 80095b6:	3301      	adds	r3, #1
 80095b8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ba:	e055      	b.n	8009668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	7c12      	ldrb	r2, [r2, #16]
 80095d4:	f107 0108 	add.w	r1, r7, #8
 80095d8:	4610      	mov	r0, r2
 80095da:	4798      	blx	r3
 80095dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095de:	e043      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fa49 	bl	8009a7a <USBD_CtlError>
            err++;
 80095e8:	7afb      	ldrb	r3, [r7, #11]
 80095ea:	3301      	adds	r3, #1
 80095ec:	72fb      	strb	r3, [r7, #11]
          break;
 80095ee:	e03b      	b.n	8009668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	7c12      	ldrb	r2, [r2, #16]
 8009608:	f107 0108 	add.w	r1, r7, #8
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
 8009610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009612:	e029      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa2f 	bl	8009a7a <USBD_CtlError>
            err++;
 800961c:	7afb      	ldrb	r3, [r7, #11]
 800961e:	3301      	adds	r3, #1
 8009620:	72fb      	strb	r3, [r7, #11]
          break;
 8009622:	e021      	b.n	8009668 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00b      	beq.n	8009648 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	7c12      	ldrb	r2, [r2, #16]
 800963c:	f107 0108 	add.w	r1, r7, #8
 8009640:	4610      	mov	r0, r2
 8009642:	4798      	blx	r3
 8009644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009646:	e00f      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa15 	bl	8009a7a <USBD_CtlError>
            err++;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3301      	adds	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]
          break;
 8009656:	e007      	b.n	8009668 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009658:	6839      	ldr	r1, [r7, #0]
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa0d 	bl	8009a7a <USBD_CtlError>
          err++;
 8009660:	7afb      	ldrb	r3, [r7, #11]
 8009662:	3301      	adds	r3, #1
 8009664:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009666:	e038      	b.n	80096da <USBD_GetDescriptor+0x286>
 8009668:	e037      	b.n	80096da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7c1b      	ldrb	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d109      	bne.n	8009686 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967a:	f107 0208 	add.w	r2, r7, #8
 800967e:	4610      	mov	r0, r2
 8009680:	4798      	blx	r3
 8009682:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009684:	e029      	b.n	80096da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f9f6 	bl	8009a7a <USBD_CtlError>
        err++;
 800968e:	7afb      	ldrb	r3, [r7, #11]
 8009690:	3301      	adds	r3, #1
 8009692:	72fb      	strb	r3, [r7, #11]
      break;
 8009694:	e021      	b.n	80096da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7c1b      	ldrb	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	f107 0208 	add.w	r2, r7, #8
 80096aa:	4610      	mov	r0, r2
 80096ac:	4798      	blx	r3
 80096ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	2207      	movs	r2, #7
 80096b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096b8:	e00f      	b.n	80096da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f9dc 	bl	8009a7a <USBD_CtlError>
        err++;
 80096c2:	7afb      	ldrb	r3, [r7, #11]
 80096c4:	3301      	adds	r3, #1
 80096c6:	72fb      	strb	r3, [r7, #11]
      break;
 80096c8:	e007      	b.n	80096da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f9d4 	bl	8009a7a <USBD_CtlError>
      err++;
 80096d2:	7afb      	ldrb	r3, [r7, #11]
 80096d4:	3301      	adds	r3, #1
 80096d6:	72fb      	strb	r3, [r7, #11]
      break;
 80096d8:	bf00      	nop
  }

  if (err != 0U)
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d11c      	bne.n	800971a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80096e0:	893b      	ldrh	r3, [r7, #8]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d011      	beq.n	800970a <USBD_GetDescriptor+0x2b6>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	88da      	ldrh	r2, [r3, #6]
 80096f2:	893b      	ldrh	r3, [r7, #8]
 80096f4:	4293      	cmp	r3, r2
 80096f6:	bf28      	it	cs
 80096f8:	4613      	movcs	r3, r2
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096fe:	893b      	ldrh	r3, [r7, #8]
 8009700:	461a      	mov	r2, r3
 8009702:	68f9      	ldr	r1, [r7, #12]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fa22 	bl	8009b4e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	88db      	ldrh	r3, [r3, #6]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d104      	bne.n	800971c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa79 	bl	8009c0a <USBD_CtlSendStatus>
 8009718:	e000      	b.n	800971c <USBD_GetDescriptor+0x2c8>
    return;
 800971a:	bf00      	nop
    }
  }
}
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop

08009724 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d130      	bne.n	8009798 <USBD_SetAddress+0x74>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	88db      	ldrh	r3, [r3, #6]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d12c      	bne.n	8009798 <USBD_SetAddress+0x74>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	885b      	ldrh	r3, [r3, #2]
 8009742:	2b7f      	cmp	r3, #127	; 0x7f
 8009744:	d828      	bhi.n	8009798 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	2b03      	cmp	r3, #3
 800975a:	d104      	bne.n	8009766 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f98b 	bl	8009a7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009764:	e01d      	b.n	80097a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	7bfa      	ldrb	r2, [r7, #15]
 800976a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fe48 	bl	800a408 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa46 	bl	8009c0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978c:	e009      	b.n	80097a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009796:	e004      	b.n	80097a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f96d 	bl	8009a7a <USBD_CtlError>
  }
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	885b      	ldrh	r3, [r3, #2]
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	4b41      	ldr	r3, [pc, #260]	; (80098c4 <USBD_SetConfig+0x118>)
 80097be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097c0:	4b40      	ldr	r3, [pc, #256]	; (80098c4 <USBD_SetConfig+0x118>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d904      	bls.n	80097d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f955 	bl	8009a7a <USBD_CtlError>
 80097d0:	e075      	b.n	80098be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d002      	beq.n	80097e2 <USBD_SetConfig+0x36>
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d023      	beq.n	8009828 <USBD_SetConfig+0x7c>
 80097e0:	e062      	b.n	80098a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80097e2:	4b38      	ldr	r3, [pc, #224]	; (80098c4 <USBD_SetConfig+0x118>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01a      	beq.n	8009820 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80097ea:	4b36      	ldr	r3, [pc, #216]	; (80098c4 <USBD_SetConfig+0x118>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2203      	movs	r2, #3
 80097f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097fc:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <USBD_SetConfig+0x118>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	4619      	mov	r1, r3
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff f9e7 	bl	8008bd6 <USBD_SetClassConfig>
 8009808:	4603      	mov	r3, r0
 800980a:	2b02      	cmp	r3, #2
 800980c:	d104      	bne.n	8009818 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f932 	bl	8009a7a <USBD_CtlError>
            return;
 8009816:	e052      	b.n	80098be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f9f6 	bl	8009c0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800981e:	e04e      	b.n	80098be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f9f2 	bl	8009c0a <USBD_CtlSendStatus>
        break;
 8009826:	e04a      	b.n	80098be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009828:	4b26      	ldr	r3, [pc, #152]	; (80098c4 <USBD_SetConfig+0x118>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d112      	bne.n	8009856 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009838:	4b22      	ldr	r3, [pc, #136]	; (80098c4 <USBD_SetConfig+0x118>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	461a      	mov	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009842:	4b20      	ldr	r3, [pc, #128]	; (80098c4 <USBD_SetConfig+0x118>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff f9e3 	bl	8008c14 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f9db 	bl	8009c0a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009854:	e033      	b.n	80098be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009856:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <USBD_SetConfig+0x118>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	429a      	cmp	r2, r3
 8009862:	d01d      	beq.n	80098a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff f9d1 	bl	8008c14 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009872:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <USBD_SetConfig+0x118>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800987c:	4b11      	ldr	r3, [pc, #68]	; (80098c4 <USBD_SetConfig+0x118>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff f9a7 	bl	8008bd6 <USBD_SetClassConfig>
 8009888:	4603      	mov	r3, r0
 800988a:	2b02      	cmp	r3, #2
 800988c:	d104      	bne.n	8009898 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f8f2 	bl	8009a7a <USBD_CtlError>
            return;
 8009896:	e012      	b.n	80098be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f9b6 	bl	8009c0a <USBD_CtlSendStatus>
        break;
 800989e:	e00e      	b.n	80098be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9b2 	bl	8009c0a <USBD_CtlSendStatus>
        break;
 80098a6:	e00a      	b.n	80098be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f8e5 	bl	8009a7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80098b0:	4b04      	ldr	r3, [pc, #16]	; (80098c4 <USBD_SetConfig+0x118>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff f9ac 	bl	8008c14 <USBD_ClrClassConfig>
        break;
 80098bc:	bf00      	nop
    }
  }
}
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	200003e8 	.word	0x200003e8

080098c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	88db      	ldrh	r3, [r3, #6]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d004      	beq.n	80098e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f8cc 	bl	8009a7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098e2:	e022      	b.n	800992a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	dc02      	bgt.n	80098f4 <USBD_GetConfig+0x2c>
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc03      	bgt.n	80098fa <USBD_GetConfig+0x32>
 80098f2:	e015      	b.n	8009920 <USBD_GetConfig+0x58>
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d00b      	beq.n	8009910 <USBD_GetConfig+0x48>
 80098f8:	e012      	b.n	8009920 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3308      	adds	r3, #8
 8009904:	2201      	movs	r2, #1
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f920 	bl	8009b4e <USBD_CtlSendData>
        break;
 800990e:	e00c      	b.n	800992a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3304      	adds	r3, #4
 8009914:	2201      	movs	r2, #1
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f918 	bl	8009b4e <USBD_CtlSendData>
        break;
 800991e:	e004      	b.n	800992a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f8a9 	bl	8009a7a <USBD_CtlError>
        break;
 8009928:	bf00      	nop
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009942:	3b01      	subs	r3, #1
 8009944:	2b02      	cmp	r3, #2
 8009946:	d81e      	bhi.n	8009986 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	2b02      	cmp	r3, #2
 800994e:	d004      	beq.n	800995a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f891 	bl	8009a7a <USBD_CtlError>
        break;
 8009958:	e01a      	b.n	8009990 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f043 0202 	orr.w	r2, r3, #2
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	330c      	adds	r3, #12
 800997a:	2202      	movs	r2, #2
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f8e5 	bl	8009b4e <USBD_CtlSendData>
      break;
 8009984:	e004      	b.n	8009990 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f876 	bl	8009a7a <USBD_CtlError>
      break;
 800998e:	bf00      	nop
  }
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d106      	bne.n	80099b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f929 	bl	8009c0a <USBD_CtlSendStatus>
  }
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d0:	3b01      	subs	r3, #1
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d80b      	bhi.n	80099ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	885b      	ldrh	r3, [r3, #2]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d10c      	bne.n	80099f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f90f 	bl	8009c0a <USBD_CtlSendStatus>
      }
      break;
 80099ec:	e004      	b.n	80099f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f842 	bl	8009a7a <USBD_CtlError>
      break;
 80099f6:	e000      	b.n	80099fa <USBD_ClrFeature+0x3a>
      break;
 80099f8:	bf00      	nop
  }
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	785a      	ldrb	r2, [r3, #1]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	3302      	adds	r3, #2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	3303      	adds	r3, #3
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	3305      	adds	r3, #5
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	3306      	adds	r3, #6
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	3307      	adds	r3, #7
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	021b      	lsls	r3, r3, #8
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4413      	add	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	80da      	strh	r2, [r3, #6]

}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr

08009a7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009a84:	2180      	movs	r1, #128	; 0x80
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fc54 	bl	800a334 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc50 	bl	800a334 <USBD_LL_StallEP>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d032      	beq.n	8009b18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f834 	bl	8009b20 <USBD_GetLen>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	3301      	adds	r3, #1
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009ac6:	7dfb      	ldrb	r3, [r7, #23]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	75fa      	strb	r2, [r7, #23]
 8009acc:	461a      	mov	r2, r3
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	7812      	ldrb	r2, [r2, #0]
 8009ad6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	75fa      	strb	r2, [r7, #23]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	2203      	movs	r2, #3
 8009ae6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009ae8:	e012      	b.n	8009b10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	60fa      	str	r2, [r7, #12]
 8009af0:	7dfa      	ldrb	r2, [r7, #23]
 8009af2:	1c51      	adds	r1, r2, #1
 8009af4:	75f9      	strb	r1, [r7, #23]
 8009af6:	4611      	mov	r1, r2
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	440a      	add	r2, r1
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	75fa      	strb	r2, [r7, #23]
 8009b06:	461a      	mov	r2, r3
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1e8      	bne.n	8009aea <USBD_GetString+0x4e>
    }
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009b2c:	e005      	b.n	8009b3a <USBD_GetLen+0x1a>
  {
    len++;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	3301      	adds	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3301      	adds	r3, #1
 8009b38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d1f5      	bne.n	8009b2e <USBD_GetLen+0xe>
  }

  return len;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bc80      	pop	{r7}
 8009b4c:	4770      	bx	lr

08009b4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b64:	88fa      	ldrh	r2, [r7, #6]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b6a:	88fa      	ldrh	r2, [r7, #6]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	2100      	movs	r1, #0
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fc65 	bl	800a446 <USBD_LL_Transmit>

  return USBD_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	60b9      	str	r1, [r7, #8]
 8009b90:	4613      	mov	r3, r2
 8009b92:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b94:	88fb      	ldrh	r3, [r7, #6]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 fc53 	bl	800a446 <USBD_LL_Transmit>

  return USBD_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2203      	movs	r2, #3
 8009bbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009bc0:	88fa      	ldrh	r2, [r7, #6]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009bc8:	88fa      	ldrh	r2, [r7, #6]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 fc58 	bl	800a48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bf4:	88fb      	ldrh	r3, [r7, #6]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 fc46 	bl	800a48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2204      	movs	r2, #4
 8009c16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fc10 	bl	800a446 <USBD_LL_Transmit>

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2205      	movs	r2, #5
 8009c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c40:	2300      	movs	r3, #0
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fc20 	bl	800a48c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4912      	ldr	r1, [pc, #72]	; (8009ca8 <MX_USB_DEVICE_Init+0x50>)
 8009c60:	4812      	ldr	r0, [pc, #72]	; (8009cac <MX_USB_DEVICE_Init+0x54>)
 8009c62:	f7fe ff5e 	bl	8008b22 <USBD_Init>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c6c:	f7f6 fe24 	bl	80008b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c70:	490f      	ldr	r1, [pc, #60]	; (8009cb0 <MX_USB_DEVICE_Init+0x58>)
 8009c72:	480e      	ldr	r0, [pc, #56]	; (8009cac <MX_USB_DEVICE_Init+0x54>)
 8009c74:	f7fe ff80 	bl	8008b78 <USBD_RegisterClass>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c7e:	f7f6 fe1b 	bl	80008b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c82:	490c      	ldr	r1, [pc, #48]	; (8009cb4 <MX_USB_DEVICE_Init+0x5c>)
 8009c84:	4809      	ldr	r0, [pc, #36]	; (8009cac <MX_USB_DEVICE_Init+0x54>)
 8009c86:	f7fe feb1 	bl	80089ec <USBD_CDC_RegisterInterface>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c90:	f7f6 fe12 	bl	80008b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c94:	4805      	ldr	r0, [pc, #20]	; (8009cac <MX_USB_DEVICE_Init+0x54>)
 8009c96:	f7fe ff88 	bl	8008baa <USBD_Start>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ca0:	f7f6 fe0a 	bl	80008b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ca4:	bf00      	nop
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	2000014c 	.word	0x2000014c
 8009cac:	200003ec 	.word	0x200003ec
 8009cb0:	20000038 	.word	0x20000038
 8009cb4:	2000013c 	.word	0x2000013c

08009cb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4905      	ldr	r1, [pc, #20]	; (8009cd4 <CDC_Init_FS+0x1c>)
 8009cc0:	4805      	ldr	r0, [pc, #20]	; (8009cd8 <CDC_Init_FS+0x20>)
 8009cc2:	f7fe fea9 	bl	8008a18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009cc6:	4905      	ldr	r1, [pc, #20]	; (8009cdc <CDC_Init_FS+0x24>)
 8009cc8:	4803      	ldr	r0, [pc, #12]	; (8009cd8 <CDC_Init_FS+0x20>)
 8009cca:	f7fe febe 	bl	8008a4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009cce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	20000a98 	.word	0x20000a98
 8009cd8:	200003ec 	.word	0x200003ec
 8009cdc:	200006b0 	.word	0x200006b0

08009ce0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ce4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bc80      	pop	{r7}
 8009cec:	4770      	bx	lr
	...

08009cf0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d00:	79fb      	ldrb	r3, [r7, #7]
 8009d02:	2b23      	cmp	r3, #35	; 0x23
 8009d04:	d84a      	bhi.n	8009d9c <CDC_Control_FS+0xac>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <CDC_Control_FS+0x1c>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d9d 	.word	0x08009d9d
 8009d10:	08009d9d 	.word	0x08009d9d
 8009d14:	08009d9d 	.word	0x08009d9d
 8009d18:	08009d9d 	.word	0x08009d9d
 8009d1c:	08009d9d 	.word	0x08009d9d
 8009d20:	08009d9d 	.word	0x08009d9d
 8009d24:	08009d9d 	.word	0x08009d9d
 8009d28:	08009d9d 	.word	0x08009d9d
 8009d2c:	08009d9d 	.word	0x08009d9d
 8009d30:	08009d9d 	.word	0x08009d9d
 8009d34:	08009d9d 	.word	0x08009d9d
 8009d38:	08009d9d 	.word	0x08009d9d
 8009d3c:	08009d9d 	.word	0x08009d9d
 8009d40:	08009d9d 	.word	0x08009d9d
 8009d44:	08009d9d 	.word	0x08009d9d
 8009d48:	08009d9d 	.word	0x08009d9d
 8009d4c:	08009d9d 	.word	0x08009d9d
 8009d50:	08009d9d 	.word	0x08009d9d
 8009d54:	08009d9d 	.word	0x08009d9d
 8009d58:	08009d9d 	.word	0x08009d9d
 8009d5c:	08009d9d 	.word	0x08009d9d
 8009d60:	08009d9d 	.word	0x08009d9d
 8009d64:	08009d9d 	.word	0x08009d9d
 8009d68:	08009d9d 	.word	0x08009d9d
 8009d6c:	08009d9d 	.word	0x08009d9d
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009d9d 	.word	0x08009d9d
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009d9d 	.word	0x08009d9d
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009d9d 	.word	0x08009d9d
 8009d94:	08009d9d 	.word	0x08009d9d
 8009d98:	08009d9d 	.word	0x08009d9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009d9c:	bf00      	nop
  }

  return (USBD_OK);
 8009d9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop

08009dac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4805      	ldr	r0, [pc, #20]	; (8009dd0 <CDC_Receive_FS+0x24>)
 8009dba:	f7fe fe46 	bl	8008a4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009dbe:	4804      	ldr	r0, [pc, #16]	; (8009dd0 <CDC_Receive_FS+0x24>)
 8009dc0:	f7fe fe85 	bl	8008ace <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009dc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	200003ec 	.word	0x200003ec

08009dd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009de4:	4b0d      	ldr	r3, [pc, #52]	; (8009e1c <CDC_Transmit_FS+0x48>)
 8009de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e00b      	b.n	8009e12 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009dfa:	887b      	ldrh	r3, [r7, #2]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6879      	ldr	r1, [r7, #4]
 8009e00:	4806      	ldr	r0, [pc, #24]	; (8009e1c <CDC_Transmit_FS+0x48>)
 8009e02:	f7fe fe09 	bl	8008a18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <CDC_Transmit_FS+0x48>)
 8009e08:	f7fe fe32 	bl	8008a70 <USBD_CDC_TransmitPacket>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200003ec 	.word	0x200003ec

08009e20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	2212      	movs	r2, #18
 8009e30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e32:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bc80      	pop	{r7}
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20000168 	.word	0x20000168

08009e44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	2204      	movs	r2, #4
 8009e54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e56:	4b03      	ldr	r3, [pc, #12]	; (8009e64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	2000017c 	.word	0x2000017c

08009e68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	4603      	mov	r3, r0
 8009e70:	6039      	str	r1, [r7, #0]
 8009e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d105      	bne.n	8009e86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4907      	ldr	r1, [pc, #28]	; (8009e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009e7e:	4808      	ldr	r0, [pc, #32]	; (8009ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e80:	f7ff fe0c 	bl	8009a9c <USBD_GetString>
 8009e84:	e004      	b.n	8009e90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4904      	ldr	r1, [pc, #16]	; (8009e9c <USBD_FS_ProductStrDescriptor+0x34>)
 8009e8a:	4805      	ldr	r0, [pc, #20]	; (8009ea0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e8c:	f7ff fe06 	bl	8009a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e90:	4b02      	ldr	r3, [pc, #8]	; (8009e9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000e80 	.word	0x20000e80
 8009ea0:	0800af30 	.word	0x0800af30

08009ea4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	4904      	ldr	r1, [pc, #16]	; (8009ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009eb4:	4804      	ldr	r0, [pc, #16]	; (8009ec8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009eb6:	f7ff fdf1 	bl	8009a9c <USBD_GetString>
  return USBD_StrDesc;
 8009eba:	4b02      	ldr	r3, [pc, #8]	; (8009ec4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	20000e80 	.word	0x20000e80
 8009ec8:	0800af48 	.word	0x0800af48

08009ecc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	221a      	movs	r2, #26
 8009edc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ede:	f000 f843 	bl	8009f68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ee2:	4b02      	ldr	r3, [pc, #8]	; (8009eec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	20000180 	.word	0x20000180

08009ef0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d105      	bne.n	8009f0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	4907      	ldr	r1, [pc, #28]	; (8009f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f06:	4808      	ldr	r0, [pc, #32]	; (8009f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f08:	f7ff fdc8 	bl	8009a9c <USBD_GetString>
 8009f0c:	e004      	b.n	8009f18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4904      	ldr	r1, [pc, #16]	; (8009f24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f12:	4805      	ldr	r0, [pc, #20]	; (8009f28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f14:	f7ff fdc2 	bl	8009a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20000e80 	.word	0x20000e80
 8009f28:	0800af5c 	.word	0x0800af5c

08009f2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	6039      	str	r1, [r7, #0]
 8009f36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d105      	bne.n	8009f4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	4907      	ldr	r1, [pc, #28]	; (8009f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f42:	4808      	ldr	r0, [pc, #32]	; (8009f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f44:	f7ff fdaa 	bl	8009a9c <USBD_GetString>
 8009f48:	e004      	b.n	8009f54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f4a:	683a      	ldr	r2, [r7, #0]
 8009f4c:	4904      	ldr	r1, [pc, #16]	; (8009f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f4e:	4805      	ldr	r0, [pc, #20]	; (8009f64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f50:	f7ff fda4 	bl	8009a9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000e80 	.word	0x20000e80
 8009f64:	0800af68 	.word	0x0800af68

08009f68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	; (8009fac <Get_SerialNum+0x44>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f74:	4b0e      	ldr	r3, [pc, #56]	; (8009fb0 <Get_SerialNum+0x48>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <Get_SerialNum+0x4c>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4413      	add	r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f8e:	2208      	movs	r2, #8
 8009f90:	4909      	ldr	r1, [pc, #36]	; (8009fb8 <Get_SerialNum+0x50>)
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 f814 	bl	8009fc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f98:	2204      	movs	r2, #4
 8009f9a:	4908      	ldr	r1, [pc, #32]	; (8009fbc <Get_SerialNum+0x54>)
 8009f9c:	68b8      	ldr	r0, [r7, #8]
 8009f9e:	f000 f80f 	bl	8009fc0 <IntToUnicode>
  }
}
 8009fa2:	bf00      	nop
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	1ffff7e8 	.word	0x1ffff7e8
 8009fb0:	1ffff7ec 	.word	0x1ffff7ec
 8009fb4:	1ffff7f0 	.word	0x1ffff7f0
 8009fb8:	20000182 	.word	0x20000182
 8009fbc:	20000192 	.word	0x20000192

08009fc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]
 8009fd6:	e027      	b.n	800a028 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	0f1b      	lsrs	r3, r3, #28
 8009fdc:	2b09      	cmp	r3, #9
 8009fde:	d80b      	bhi.n	8009ff8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	0f1b      	lsrs	r3, r3, #28
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4619      	mov	r1, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	440b      	add	r3, r1
 8009ff0:	3230      	adds	r2, #48	; 0x30
 8009ff2:	b2d2      	uxtb	r2, r2
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e00a      	b.n	800a00e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	0f1b      	lsrs	r3, r3, #28
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	4619      	mov	r1, r3
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	440b      	add	r3, r1
 800a008:	3237      	adds	r2, #55	; 0x37
 800a00a:	b2d2      	uxtb	r2, r2
 800a00c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	011b      	lsls	r3, r3, #4
 800a012:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	3301      	adds	r3, #1
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	2200      	movs	r2, #0
 800a020:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	3301      	adds	r3, #1
 800a026:	75fb      	strb	r3, [r7, #23]
 800a028:	7dfa      	ldrb	r2, [r7, #23]
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d3d3      	bcc.n	8009fd8 <IntToUnicode+0x18>
  }
}
 800a030:	bf00      	nop
 800a032:	bf00      	nop
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	bc80      	pop	{r7}
 800a03a:	4770      	bx	lr

0800a03c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a0d      	ldr	r2, [pc, #52]	; (800a080 <HAL_PCD_MspInit+0x44>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d113      	bne.n	800a076 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a04e:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <HAL_PCD_MspInit+0x48>)
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	4a0c      	ldr	r2, [pc, #48]	; (800a084 <HAL_PCD_MspInit+0x48>)
 800a054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a058:	61d3      	str	r3, [r2, #28]
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <HAL_PCD_MspInit+0x48>)
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a066:	2200      	movs	r2, #0
 800a068:	2100      	movs	r1, #0
 800a06a:	2014      	movs	r0, #20
 800a06c:	f7f7 fb5d 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a070:	2014      	movs	r0, #20
 800a072:	f7f7 fb76 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	40005c00 	.word	0x40005c00
 800a084:	40021000 	.word	0x40021000

0800a088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fe fdcb 	bl	8008c3a <USBD_LL_SetupStage>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0be:	78fa      	ldrb	r2, [r7, #3]
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	440b      	add	r3, r1
 800a0cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	f7fe fdfd 	bl	8008cd4 <USBD_LL_DataOutStage>
}
 800a0da:	bf00      	nop
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b082      	sub	sp, #8
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0f4:	78fa      	ldrb	r2, [r7, #3]
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	440b      	add	r3, r1
 800a102:	333c      	adds	r3, #60	; 0x3c
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	4619      	mov	r1, r3
 800a10a:	f7fe fe54 	bl	8008db6 <USBD_LL_DataInStage>
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a124:	4618      	mov	r0, r3
 800a126:	f7fe ff64 	bl	8008ff2 <USBD_LL_SOF>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a13a:	2301      	movs	r3, #1
 800a13c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d001      	beq.n	800a14a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a146:	f7f6 fbb7 	bl	80008b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a150:	7bfa      	ldrb	r2, [r7, #15]
 800a152:	4611      	mov	r1, r2
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe ff14 	bl	8008f82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a160:	4618      	mov	r0, r3
 800a162:	f7fe fecd 	bl	8008f00 <USBD_LL_Reset>
}
 800a166:	bf00      	nop
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe ff0e 	bl	8008fa0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d005      	beq.n	800a198 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a18c:	4b04      	ldr	r3, [pc, #16]	; (800a1a0 <HAL_PCD_SuspendCallback+0x30>)
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	4a03      	ldr	r2, [pc, #12]	; (800a1a0 <HAL_PCD_SuspendCallback+0x30>)
 800a192:	f043 0306 	orr.w	r3, r3, #6
 800a196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a198:	bf00      	nop
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	e000ed00 	.word	0xe000ed00

0800a1a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe ff08 	bl	8008fc8 <USBD_LL_Resume>
}
 800a1b8:	bf00      	nop
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1c8:	4a28      	ldr	r2, [pc, #160]	; (800a26c <USBD_LL_Init+0xac>)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a26      	ldr	r2, [pc, #152]	; (800a26c <USBD_LL_Init+0xac>)
 800a1d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a1d8:	4b24      	ldr	r3, [pc, #144]	; (800a26c <USBD_LL_Init+0xac>)
 800a1da:	4a25      	ldr	r2, [pc, #148]	; (800a270 <USBD_LL_Init+0xb0>)
 800a1dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1de:	4b23      	ldr	r3, [pc, #140]	; (800a26c <USBD_LL_Init+0xac>)
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a1e4:	4b21      	ldr	r3, [pc, #132]	; (800a26c <USBD_LL_Init+0xac>)
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a1ea:	4b20      	ldr	r3, [pc, #128]	; (800a26c <USBD_LL_Init+0xac>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <USBD_LL_Init+0xac>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a1f6:	4b1d      	ldr	r3, [pc, #116]	; (800a26c <USBD_LL_Init+0xac>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a1fc:	481b      	ldr	r0, [pc, #108]	; (800a26c <USBD_LL_Init+0xac>)
 800a1fe:	f7f7 fc67 	bl	8001ad0 <HAL_PCD_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a208:	f7f6 fb56 	bl	80008b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a212:	2318      	movs	r3, #24
 800a214:	2200      	movs	r2, #0
 800a216:	2100      	movs	r1, #0
 800a218:	f7f9 f8db 	bl	80033d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a222:	2358      	movs	r3, #88	; 0x58
 800a224:	2200      	movs	r2, #0
 800a226:	2180      	movs	r1, #128	; 0x80
 800a228:	f7f9 f8d3 	bl	80033d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a232:	23c0      	movs	r3, #192	; 0xc0
 800a234:	2200      	movs	r2, #0
 800a236:	2181      	movs	r1, #129	; 0x81
 800a238:	f7f9 f8cb 	bl	80033d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a242:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a246:	2200      	movs	r2, #0
 800a248:	2101      	movs	r1, #1
 800a24a:	f7f9 f8c2 	bl	80033d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a258:	2200      	movs	r2, #0
 800a25a:	2182      	movs	r1, #130	; 0x82
 800a25c:	f7f9 f8b9 	bl	80033d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20001080 	.word	0x20001080
 800a270:	40005c00 	.word	0x40005c00

0800a274 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f7 fd2b 	bl	8001ce6 <HAL_PCD_Start>
 800a290:	4603      	mov	r3, r0
 800a292:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a294:	7bfb      	ldrb	r3, [r7, #15]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f94e 	bl	800a538 <USBD_Get_USB_Status>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	70fb      	strb	r3, [r7, #3]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70bb      	strb	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2d2:	78bb      	ldrb	r3, [r7, #2]
 800a2d4:	883a      	ldrh	r2, [r7, #0]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	f7f7 fea3 	bl	8002022 <HAL_PCD_EP_Open>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f000 f928 	bl	800a538 <USBD_Get_USB_Status>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	460b      	mov	r3, r1
 800a300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a310:	78fa      	ldrb	r2, [r7, #3]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7f7 feea 	bl	80020ee <HAL_PCD_EP_Close>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 f909 	bl	800a538 <USBD_Get_USB_Status>
 800a326:	4603      	mov	r3, r0
 800a328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7f7 ffaa 	bl	80022ac <HAL_PCD_EP_SetStall>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f8ea 	bl	800a538 <USBD_Get_USB_Status>
 800a364:	4603      	mov	r3, r0
 800a366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a368:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7f7 ffeb 	bl	800236c <HAL_PCD_EP_ClrStall>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 f8cb 	bl	800a538 <USBD_Get_USB_Status>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	da0c      	bge.n	800a3e6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	440b      	add	r3, r1
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	e00b      	b.n	800a3fe <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	4613      	mov	r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4413      	add	r3, r2
 800a3f4:	00db      	lsls	r3, r3, #3
 800a3f6:	440b      	add	r3, r1
 800a3f8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a3fc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	bc80      	pop	{r7}
 800a406:	4770      	bx	lr

0800a408 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a422:	78fa      	ldrb	r2, [r7, #3]
 800a424:	4611      	mov	r1, r2
 800a426:	4618      	mov	r0, r3
 800a428:	f7f7 fdd6 	bl	8001fd8 <HAL_PCD_SetAddress>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a430:	7bfb      	ldrb	r3, [r7, #15]
 800a432:	4618      	mov	r0, r3
 800a434:	f000 f880 	bl	800a538 <USBD_Get_USB_Status>
 800a438:	4603      	mov	r3, r0
 800a43a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b086      	sub	sp, #24
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	461a      	mov	r2, r3
 800a452:	460b      	mov	r3, r1
 800a454:	72fb      	strb	r3, [r7, #11]
 800a456:	4613      	mov	r3, r2
 800a458:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a45e:	2300      	movs	r3, #0
 800a460:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a468:	893b      	ldrh	r3, [r7, #8]
 800a46a:	7af9      	ldrb	r1, [r7, #11]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	f7f7 feda 	bl	8002226 <HAL_PCD_EP_Transmit>
 800a472:	4603      	mov	r3, r0
 800a474:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f85d 	bl	800a538 <USBD_Get_USB_Status>
 800a47e:	4603      	mov	r3, r0
 800a480:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a482:	7dbb      	ldrb	r3, [r7, #22]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	461a      	mov	r2, r3
 800a498:	460b      	mov	r3, r1
 800a49a:	72fb      	strb	r3, [r7, #11]
 800a49c:	4613      	mov	r3, r2
 800a49e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4ae:	893b      	ldrh	r3, [r7, #8]
 800a4b0:	7af9      	ldrb	r1, [r7, #11]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	f7f7 fe63 	bl	800217e <HAL_PCD_EP_Receive>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 f83a 	bl	800a538 <USBD_Get_USB_Status>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	460b      	mov	r3, r1
 800a4dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f7 fe85 	bl	80021f8 <HAL_PCD_EP_GetRxCount>
 800a4ee:	4603      	mov	r3, r0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a500:	4b02      	ldr	r3, [pc, #8]	; (800a50c <USBD_static_malloc+0x14>)
}
 800a502:	4618      	mov	r0, r3
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr
 800a50c:	2000136c 	.word	0x2000136c

0800a510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]

}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr

0800a522 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a52e:	bf00      	nop
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	bc80      	pop	{r7}
 800a536:	4770      	bx	lr

0800a538 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4603      	mov	r3, r0
 800a540:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a546:	79fb      	ldrb	r3, [r7, #7]
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d817      	bhi.n	800a57c <USBD_Get_USB_Status+0x44>
 800a54c:	a201      	add	r2, pc, #4	; (adr r2, 800a554 <USBD_Get_USB_Status+0x1c>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a565 	.word	0x0800a565
 800a558:	0800a56b 	.word	0x0800a56b
 800a55c:	0800a571 	.word	0x0800a571
 800a560:	0800a577 	.word	0x0800a577
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
    break;
 800a568:	e00b      	b.n	800a582 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a56a:	2302      	movs	r3, #2
 800a56c:	73fb      	strb	r3, [r7, #15]
    break;
 800a56e:	e008      	b.n	800a582 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a570:	2301      	movs	r3, #1
 800a572:	73fb      	strb	r3, [r7, #15]
    break;
 800a574:	e005      	b.n	800a582 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a576:	2302      	movs	r3, #2
 800a578:	73fb      	strb	r3, [r7, #15]
    break;
 800a57a:	e002      	b.n	800a582 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a57c:	2302      	movs	r3, #2
 800a57e:	73fb      	strb	r3, [r7, #15]
    break;
 800a580:	bf00      	nop
  }
  return usb_status;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bc80      	pop	{r7}
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop

0800a590 <__errno>:
 800a590:	4b01      	ldr	r3, [pc, #4]	; (800a598 <__errno+0x8>)
 800a592:	6818      	ldr	r0, [r3, #0]
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	2000019c 	.word	0x2000019c

0800a59c <__libc_init_array>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	2600      	movs	r6, #0
 800a5a0:	4d0c      	ldr	r5, [pc, #48]	; (800a5d4 <__libc_init_array+0x38>)
 800a5a2:	4c0d      	ldr	r4, [pc, #52]	; (800a5d8 <__libc_init_array+0x3c>)
 800a5a4:	1b64      	subs	r4, r4, r5
 800a5a6:	10a4      	asrs	r4, r4, #2
 800a5a8:	42a6      	cmp	r6, r4
 800a5aa:	d109      	bne.n	800a5c0 <__libc_init_array+0x24>
 800a5ac:	f000 fc9c 	bl	800aee8 <_init>
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	4d0a      	ldr	r5, [pc, #40]	; (800a5dc <__libc_init_array+0x40>)
 800a5b4:	4c0a      	ldr	r4, [pc, #40]	; (800a5e0 <__libc_init_array+0x44>)
 800a5b6:	1b64      	subs	r4, r4, r5
 800a5b8:	10a4      	asrs	r4, r4, #2
 800a5ba:	42a6      	cmp	r6, r4
 800a5bc:	d105      	bne.n	800a5ca <__libc_init_array+0x2e>
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c4:	4798      	blx	r3
 800a5c6:	3601      	adds	r6, #1
 800a5c8:	e7ee      	b.n	800a5a8 <__libc_init_array+0xc>
 800a5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ce:	4798      	blx	r3
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	e7f2      	b.n	800a5ba <__libc_init_array+0x1e>
 800a5d4:	0800afbc 	.word	0x0800afbc
 800a5d8:	0800afbc 	.word	0x0800afbc
 800a5dc:	0800afbc 	.word	0x0800afbc
 800a5e0:	0800afc0 	.word	0x0800afc0

0800a5e4 <memset>:
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4402      	add	r2, r0
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d100      	bne.n	800a5ee <memset+0xa>
 800a5ec:	4770      	bx	lr
 800a5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a5f2:	e7f9      	b.n	800a5e8 <memset+0x4>

0800a5f4 <siprintf>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5fa:	b500      	push	{lr}
 800a5fc:	b09c      	sub	sp, #112	; 0x70
 800a5fe:	ab1d      	add	r3, sp, #116	; 0x74
 800a600:	9002      	str	r0, [sp, #8]
 800a602:	9006      	str	r0, [sp, #24]
 800a604:	9107      	str	r1, [sp, #28]
 800a606:	9104      	str	r1, [sp, #16]
 800a608:	4808      	ldr	r0, [pc, #32]	; (800a62c <siprintf+0x38>)
 800a60a:	4909      	ldr	r1, [pc, #36]	; (800a630 <siprintf+0x3c>)
 800a60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a610:	9105      	str	r1, [sp, #20]
 800a612:	6800      	ldr	r0, [r0, #0]
 800a614:	a902      	add	r1, sp, #8
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	f000 f868 	bl	800a6ec <_svfiprintf_r>
 800a61c:	2200      	movs	r2, #0
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	701a      	strb	r2, [r3, #0]
 800a622:	b01c      	add	sp, #112	; 0x70
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b003      	add	sp, #12
 800a62a:	4770      	bx	lr
 800a62c:	2000019c 	.word	0x2000019c
 800a630:	ffff0208 	.word	0xffff0208

0800a634 <__ssputs_r>:
 800a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	688e      	ldr	r6, [r1, #8]
 800a63a:	4682      	mov	sl, r0
 800a63c:	429e      	cmp	r6, r3
 800a63e:	460c      	mov	r4, r1
 800a640:	4690      	mov	r8, r2
 800a642:	461f      	mov	r7, r3
 800a644:	d838      	bhi.n	800a6b8 <__ssputs_r+0x84>
 800a646:	898a      	ldrh	r2, [r1, #12]
 800a648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a64c:	d032      	beq.n	800a6b4 <__ssputs_r+0x80>
 800a64e:	6825      	ldr	r5, [r4, #0]
 800a650:	6909      	ldr	r1, [r1, #16]
 800a652:	3301      	adds	r3, #1
 800a654:	eba5 0901 	sub.w	r9, r5, r1
 800a658:	6965      	ldr	r5, [r4, #20]
 800a65a:	444b      	add	r3, r9
 800a65c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a664:	106d      	asrs	r5, r5, #1
 800a666:	429d      	cmp	r5, r3
 800a668:	bf38      	it	cc
 800a66a:	461d      	movcc	r5, r3
 800a66c:	0553      	lsls	r3, r2, #21
 800a66e:	d531      	bpl.n	800a6d4 <__ssputs_r+0xa0>
 800a670:	4629      	mov	r1, r5
 800a672:	f000 fb6f 	bl	800ad54 <_malloc_r>
 800a676:	4606      	mov	r6, r0
 800a678:	b950      	cbnz	r0, 800a690 <__ssputs_r+0x5c>
 800a67a:	230c      	movs	r3, #12
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	f8ca 3000 	str.w	r3, [sl]
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a690:	464a      	mov	r2, r9
 800a692:	6921      	ldr	r1, [r4, #16]
 800a694:	f000 face 	bl	800ac34 <memcpy>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a69e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	6126      	str	r6, [r4, #16]
 800a6a6:	444e      	add	r6, r9
 800a6a8:	6026      	str	r6, [r4, #0]
 800a6aa:	463e      	mov	r6, r7
 800a6ac:	6165      	str	r5, [r4, #20]
 800a6ae:	eba5 0509 	sub.w	r5, r5, r9
 800a6b2:	60a5      	str	r5, [r4, #8]
 800a6b4:	42be      	cmp	r6, r7
 800a6b6:	d900      	bls.n	800a6ba <__ssputs_r+0x86>
 800a6b8:	463e      	mov	r6, r7
 800a6ba:	4632      	mov	r2, r6
 800a6bc:	4641      	mov	r1, r8
 800a6be:	6820      	ldr	r0, [r4, #0]
 800a6c0:	f000 fac6 	bl	800ac50 <memmove>
 800a6c4:	68a3      	ldr	r3, [r4, #8]
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	1b9b      	subs	r3, r3, r6
 800a6ca:	60a3      	str	r3, [r4, #8]
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	4433      	add	r3, r6
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	e7db      	b.n	800a68c <__ssputs_r+0x58>
 800a6d4:	462a      	mov	r2, r5
 800a6d6:	f000 fbb1 	bl	800ae3c <_realloc_r>
 800a6da:	4606      	mov	r6, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d1e1      	bne.n	800a6a4 <__ssputs_r+0x70>
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	6921      	ldr	r1, [r4, #16]
 800a6e4:	f000 face 	bl	800ac84 <_free_r>
 800a6e8:	e7c7      	b.n	800a67a <__ssputs_r+0x46>
	...

0800a6ec <_svfiprintf_r>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	4698      	mov	r8, r3
 800a6f2:	898b      	ldrh	r3, [r1, #12]
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	061b      	lsls	r3, r3, #24
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	4614      	mov	r4, r2
 800a6fc:	b09d      	sub	sp, #116	; 0x74
 800a6fe:	d50e      	bpl.n	800a71e <_svfiprintf_r+0x32>
 800a700:	690b      	ldr	r3, [r1, #16]
 800a702:	b963      	cbnz	r3, 800a71e <_svfiprintf_r+0x32>
 800a704:	2140      	movs	r1, #64	; 0x40
 800a706:	f000 fb25 	bl	800ad54 <_malloc_r>
 800a70a:	6028      	str	r0, [r5, #0]
 800a70c:	6128      	str	r0, [r5, #16]
 800a70e:	b920      	cbnz	r0, 800a71a <_svfiprintf_r+0x2e>
 800a710:	230c      	movs	r3, #12
 800a712:	603b      	str	r3, [r7, #0]
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	e0d1      	b.n	800a8be <_svfiprintf_r+0x1d2>
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	616b      	str	r3, [r5, #20]
 800a71e:	2300      	movs	r3, #0
 800a720:	9309      	str	r3, [sp, #36]	; 0x24
 800a722:	2320      	movs	r3, #32
 800a724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a728:	2330      	movs	r3, #48	; 0x30
 800a72a:	f04f 0901 	mov.w	r9, #1
 800a72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8d8 <_svfiprintf_r+0x1ec>
 800a736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a73a:	4623      	mov	r3, r4
 800a73c:	469a      	mov	sl, r3
 800a73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a742:	b10a      	cbz	r2, 800a748 <_svfiprintf_r+0x5c>
 800a744:	2a25      	cmp	r2, #37	; 0x25
 800a746:	d1f9      	bne.n	800a73c <_svfiprintf_r+0x50>
 800a748:	ebba 0b04 	subs.w	fp, sl, r4
 800a74c:	d00b      	beq.n	800a766 <_svfiprintf_r+0x7a>
 800a74e:	465b      	mov	r3, fp
 800a750:	4622      	mov	r2, r4
 800a752:	4629      	mov	r1, r5
 800a754:	4638      	mov	r0, r7
 800a756:	f7ff ff6d 	bl	800a634 <__ssputs_r>
 800a75a:	3001      	adds	r0, #1
 800a75c:	f000 80aa 	beq.w	800a8b4 <_svfiprintf_r+0x1c8>
 800a760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a762:	445a      	add	r2, fp
 800a764:	9209      	str	r2, [sp, #36]	; 0x24
 800a766:	f89a 3000 	ldrb.w	r3, [sl]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 80a2 	beq.w	800a8b4 <_svfiprintf_r+0x1c8>
 800a770:	2300      	movs	r3, #0
 800a772:	f04f 32ff 	mov.w	r2, #4294967295
 800a776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a77a:	f10a 0a01 	add.w	sl, sl, #1
 800a77e:	9304      	str	r3, [sp, #16]
 800a780:	9307      	str	r3, [sp, #28]
 800a782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a786:	931a      	str	r3, [sp, #104]	; 0x68
 800a788:	4654      	mov	r4, sl
 800a78a:	2205      	movs	r2, #5
 800a78c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a790:	4851      	ldr	r0, [pc, #324]	; (800a8d8 <_svfiprintf_r+0x1ec>)
 800a792:	f000 fa41 	bl	800ac18 <memchr>
 800a796:	9a04      	ldr	r2, [sp, #16]
 800a798:	b9d8      	cbnz	r0, 800a7d2 <_svfiprintf_r+0xe6>
 800a79a:	06d0      	lsls	r0, r2, #27
 800a79c:	bf44      	itt	mi
 800a79e:	2320      	movmi	r3, #32
 800a7a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a4:	0711      	lsls	r1, r2, #28
 800a7a6:	bf44      	itt	mi
 800a7a8:	232b      	movmi	r3, #43	; 0x2b
 800a7aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ae:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7b4:	d015      	beq.n	800a7e2 <_svfiprintf_r+0xf6>
 800a7b6:	4654      	mov	r4, sl
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	f04f 0c0a 	mov.w	ip, #10
 800a7be:	9a07      	ldr	r2, [sp, #28]
 800a7c0:	4621      	mov	r1, r4
 800a7c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7c6:	3b30      	subs	r3, #48	; 0x30
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	d94e      	bls.n	800a86a <_svfiprintf_r+0x17e>
 800a7cc:	b1b0      	cbz	r0, 800a7fc <_svfiprintf_r+0x110>
 800a7ce:	9207      	str	r2, [sp, #28]
 800a7d0:	e014      	b.n	800a7fc <_svfiprintf_r+0x110>
 800a7d2:	eba0 0308 	sub.w	r3, r0, r8
 800a7d6:	fa09 f303 	lsl.w	r3, r9, r3
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	46a2      	mov	sl, r4
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	e7d2      	b.n	800a788 <_svfiprintf_r+0x9c>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	1d19      	adds	r1, r3, #4
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	9103      	str	r1, [sp, #12]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	bfbb      	ittet	lt
 800a7ee:	425b      	neglt	r3, r3
 800a7f0:	f042 0202 	orrlt.w	r2, r2, #2
 800a7f4:	9307      	strge	r3, [sp, #28]
 800a7f6:	9307      	strlt	r3, [sp, #28]
 800a7f8:	bfb8      	it	lt
 800a7fa:	9204      	strlt	r2, [sp, #16]
 800a7fc:	7823      	ldrb	r3, [r4, #0]
 800a7fe:	2b2e      	cmp	r3, #46	; 0x2e
 800a800:	d10c      	bne.n	800a81c <_svfiprintf_r+0x130>
 800a802:	7863      	ldrb	r3, [r4, #1]
 800a804:	2b2a      	cmp	r3, #42	; 0x2a
 800a806:	d135      	bne.n	800a874 <_svfiprintf_r+0x188>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	3402      	adds	r4, #2
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	9203      	str	r2, [sp, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	bfb8      	it	lt
 800a816:	f04f 33ff 	movlt.w	r3, #4294967295
 800a81a:	9305      	str	r3, [sp, #20]
 800a81c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8dc <_svfiprintf_r+0x1f0>
 800a820:	2203      	movs	r2, #3
 800a822:	4650      	mov	r0, sl
 800a824:	7821      	ldrb	r1, [r4, #0]
 800a826:	f000 f9f7 	bl	800ac18 <memchr>
 800a82a:	b140      	cbz	r0, 800a83e <_svfiprintf_r+0x152>
 800a82c:	2340      	movs	r3, #64	; 0x40
 800a82e:	eba0 000a 	sub.w	r0, r0, sl
 800a832:	fa03 f000 	lsl.w	r0, r3, r0
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	3401      	adds	r4, #1
 800a83a:	4303      	orrs	r3, r0
 800a83c:	9304      	str	r3, [sp, #16]
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	2206      	movs	r2, #6
 800a844:	4826      	ldr	r0, [pc, #152]	; (800a8e0 <_svfiprintf_r+0x1f4>)
 800a846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a84a:	f000 f9e5 	bl	800ac18 <memchr>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d038      	beq.n	800a8c4 <_svfiprintf_r+0x1d8>
 800a852:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <_svfiprintf_r+0x1f8>)
 800a854:	bb1b      	cbnz	r3, 800a89e <_svfiprintf_r+0x1b2>
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	3307      	adds	r3, #7
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	3308      	adds	r3, #8
 800a860:	9303      	str	r3, [sp, #12]
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	4433      	add	r3, r6
 800a866:	9309      	str	r3, [sp, #36]	; 0x24
 800a868:	e767      	b.n	800a73a <_svfiprintf_r+0x4e>
 800a86a:	460c      	mov	r4, r1
 800a86c:	2001      	movs	r0, #1
 800a86e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a872:	e7a5      	b.n	800a7c0 <_svfiprintf_r+0xd4>
 800a874:	2300      	movs	r3, #0
 800a876:	f04f 0c0a 	mov.w	ip, #10
 800a87a:	4619      	mov	r1, r3
 800a87c:	3401      	adds	r4, #1
 800a87e:	9305      	str	r3, [sp, #20]
 800a880:	4620      	mov	r0, r4
 800a882:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a886:	3a30      	subs	r2, #48	; 0x30
 800a888:	2a09      	cmp	r2, #9
 800a88a:	d903      	bls.n	800a894 <_svfiprintf_r+0x1a8>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0c5      	beq.n	800a81c <_svfiprintf_r+0x130>
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	e7c3      	b.n	800a81c <_svfiprintf_r+0x130>
 800a894:	4604      	mov	r4, r0
 800a896:	2301      	movs	r3, #1
 800a898:	fb0c 2101 	mla	r1, ip, r1, r2
 800a89c:	e7f0      	b.n	800a880 <_svfiprintf_r+0x194>
 800a89e:	ab03      	add	r3, sp, #12
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <_svfiprintf_r+0x1fc>)
 800a8a8:	a904      	add	r1, sp, #16
 800a8aa:	f3af 8000 	nop.w
 800a8ae:	1c42      	adds	r2, r0, #1
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	d1d6      	bne.n	800a862 <_svfiprintf_r+0x176>
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	065b      	lsls	r3, r3, #25
 800a8b8:	f53f af2c 	bmi.w	800a714 <_svfiprintf_r+0x28>
 800a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8be:	b01d      	add	sp, #116	; 0x74
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <_svfiprintf_r+0x1fc>)
 800a8ce:	a904      	add	r1, sp, #16
 800a8d0:	f000 f87c 	bl	800a9cc <_printf_i>
 800a8d4:	e7eb      	b.n	800a8ae <_svfiprintf_r+0x1c2>
 800a8d6:	bf00      	nop
 800a8d8:	0800af88 	.word	0x0800af88
 800a8dc:	0800af8e 	.word	0x0800af8e
 800a8e0:	0800af92 	.word	0x0800af92
 800a8e4:	00000000 	.word	0x00000000
 800a8e8:	0800a635 	.word	0x0800a635

0800a8ec <_printf_common>:
 800a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	4699      	mov	r9, r3
 800a8f4:	688a      	ldr	r2, [r1, #8]
 800a8f6:	690b      	ldr	r3, [r1, #16]
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	bfb8      	it	lt
 800a8fe:	4613      	movlt	r3, r2
 800a900:	6033      	str	r3, [r6, #0]
 800a902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a906:	460c      	mov	r4, r1
 800a908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a90c:	b10a      	cbz	r2, 800a912 <_printf_common+0x26>
 800a90e:	3301      	adds	r3, #1
 800a910:	6033      	str	r3, [r6, #0]
 800a912:	6823      	ldr	r3, [r4, #0]
 800a914:	0699      	lsls	r1, r3, #26
 800a916:	bf42      	ittt	mi
 800a918:	6833      	ldrmi	r3, [r6, #0]
 800a91a:	3302      	addmi	r3, #2
 800a91c:	6033      	strmi	r3, [r6, #0]
 800a91e:	6825      	ldr	r5, [r4, #0]
 800a920:	f015 0506 	ands.w	r5, r5, #6
 800a924:	d106      	bne.n	800a934 <_printf_common+0x48>
 800a926:	f104 0a19 	add.w	sl, r4, #25
 800a92a:	68e3      	ldr	r3, [r4, #12]
 800a92c:	6832      	ldr	r2, [r6, #0]
 800a92e:	1a9b      	subs	r3, r3, r2
 800a930:	42ab      	cmp	r3, r5
 800a932:	dc28      	bgt.n	800a986 <_printf_common+0x9a>
 800a934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a938:	1e13      	subs	r3, r2, #0
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	bf18      	it	ne
 800a93e:	2301      	movne	r3, #1
 800a940:	0692      	lsls	r2, r2, #26
 800a942:	d42d      	bmi.n	800a9a0 <_printf_common+0xb4>
 800a944:	4649      	mov	r1, r9
 800a946:	4638      	mov	r0, r7
 800a948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a94c:	47c0      	blx	r8
 800a94e:	3001      	adds	r0, #1
 800a950:	d020      	beq.n	800a994 <_printf_common+0xa8>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	68e5      	ldr	r5, [r4, #12]
 800a956:	f003 0306 	and.w	r3, r3, #6
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	bf18      	it	ne
 800a95e:	2500      	movne	r5, #0
 800a960:	6832      	ldr	r2, [r6, #0]
 800a962:	f04f 0600 	mov.w	r6, #0
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	bf08      	it	eq
 800a96a:	1aad      	subeq	r5, r5, r2
 800a96c:	6922      	ldr	r2, [r4, #16]
 800a96e:	bf08      	it	eq
 800a970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a974:	4293      	cmp	r3, r2
 800a976:	bfc4      	itt	gt
 800a978:	1a9b      	subgt	r3, r3, r2
 800a97a:	18ed      	addgt	r5, r5, r3
 800a97c:	341a      	adds	r4, #26
 800a97e:	42b5      	cmp	r5, r6
 800a980:	d11a      	bne.n	800a9b8 <_printf_common+0xcc>
 800a982:	2000      	movs	r0, #0
 800a984:	e008      	b.n	800a998 <_printf_common+0xac>
 800a986:	2301      	movs	r3, #1
 800a988:	4652      	mov	r2, sl
 800a98a:	4649      	mov	r1, r9
 800a98c:	4638      	mov	r0, r7
 800a98e:	47c0      	blx	r8
 800a990:	3001      	adds	r0, #1
 800a992:	d103      	bne.n	800a99c <_printf_common+0xb0>
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a99c:	3501      	adds	r5, #1
 800a99e:	e7c4      	b.n	800a92a <_printf_common+0x3e>
 800a9a0:	2030      	movs	r0, #48	; 0x30
 800a9a2:	18e1      	adds	r1, r4, r3
 800a9a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ae:	4422      	add	r2, r4
 800a9b0:	3302      	adds	r3, #2
 800a9b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9b6:	e7c5      	b.n	800a944 <_printf_common+0x58>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4649      	mov	r1, r9
 800a9be:	4638      	mov	r0, r7
 800a9c0:	47c0      	blx	r8
 800a9c2:	3001      	adds	r0, #1
 800a9c4:	d0e6      	beq.n	800a994 <_printf_common+0xa8>
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	e7d9      	b.n	800a97e <_printf_common+0x92>
	...

0800a9cc <_printf_i>:
 800a9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d0:	7e0f      	ldrb	r7, [r1, #24]
 800a9d2:	4691      	mov	r9, r2
 800a9d4:	2f78      	cmp	r7, #120	; 0x78
 800a9d6:	4680      	mov	r8, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	469a      	mov	sl, r3
 800a9dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9e2:	d807      	bhi.n	800a9f4 <_printf_i+0x28>
 800a9e4:	2f62      	cmp	r7, #98	; 0x62
 800a9e6:	d80a      	bhi.n	800a9fe <_printf_i+0x32>
 800a9e8:	2f00      	cmp	r7, #0
 800a9ea:	f000 80d9 	beq.w	800aba0 <_printf_i+0x1d4>
 800a9ee:	2f58      	cmp	r7, #88	; 0x58
 800a9f0:	f000 80a4 	beq.w	800ab3c <_printf_i+0x170>
 800a9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9fc:	e03a      	b.n	800aa74 <_printf_i+0xa8>
 800a9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa02:	2b15      	cmp	r3, #21
 800aa04:	d8f6      	bhi.n	800a9f4 <_printf_i+0x28>
 800aa06:	a101      	add	r1, pc, #4	; (adr r1, 800aa0c <_printf_i+0x40>)
 800aa08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa0c:	0800aa65 	.word	0x0800aa65
 800aa10:	0800aa79 	.word	0x0800aa79
 800aa14:	0800a9f5 	.word	0x0800a9f5
 800aa18:	0800a9f5 	.word	0x0800a9f5
 800aa1c:	0800a9f5 	.word	0x0800a9f5
 800aa20:	0800a9f5 	.word	0x0800a9f5
 800aa24:	0800aa79 	.word	0x0800aa79
 800aa28:	0800a9f5 	.word	0x0800a9f5
 800aa2c:	0800a9f5 	.word	0x0800a9f5
 800aa30:	0800a9f5 	.word	0x0800a9f5
 800aa34:	0800a9f5 	.word	0x0800a9f5
 800aa38:	0800ab87 	.word	0x0800ab87
 800aa3c:	0800aaa9 	.word	0x0800aaa9
 800aa40:	0800ab69 	.word	0x0800ab69
 800aa44:	0800a9f5 	.word	0x0800a9f5
 800aa48:	0800a9f5 	.word	0x0800a9f5
 800aa4c:	0800aba9 	.word	0x0800aba9
 800aa50:	0800a9f5 	.word	0x0800a9f5
 800aa54:	0800aaa9 	.word	0x0800aaa9
 800aa58:	0800a9f5 	.word	0x0800a9f5
 800aa5c:	0800a9f5 	.word	0x0800a9f5
 800aa60:	0800ab71 	.word	0x0800ab71
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	602a      	str	r2, [r5, #0]
 800aa6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa74:	2301      	movs	r3, #1
 800aa76:	e0a4      	b.n	800abc2 <_printf_i+0x1f6>
 800aa78:	6820      	ldr	r0, [r4, #0]
 800aa7a:	6829      	ldr	r1, [r5, #0]
 800aa7c:	0606      	lsls	r6, r0, #24
 800aa7e:	f101 0304 	add.w	r3, r1, #4
 800aa82:	d50a      	bpl.n	800aa9a <_printf_i+0xce>
 800aa84:	680e      	ldr	r6, [r1, #0]
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	2e00      	cmp	r6, #0
 800aa8a:	da03      	bge.n	800aa94 <_printf_i+0xc8>
 800aa8c:	232d      	movs	r3, #45	; 0x2d
 800aa8e:	4276      	negs	r6, r6
 800aa90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa94:	230a      	movs	r3, #10
 800aa96:	485e      	ldr	r0, [pc, #376]	; (800ac10 <_printf_i+0x244>)
 800aa98:	e019      	b.n	800aace <_printf_i+0x102>
 800aa9a:	680e      	ldr	r6, [r1, #0]
 800aa9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	bf18      	it	ne
 800aaa4:	b236      	sxthne	r6, r6
 800aaa6:	e7ef      	b.n	800aa88 <_printf_i+0xbc>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	6820      	ldr	r0, [r4, #0]
 800aaac:	1d19      	adds	r1, r3, #4
 800aaae:	6029      	str	r1, [r5, #0]
 800aab0:	0601      	lsls	r1, r0, #24
 800aab2:	d501      	bpl.n	800aab8 <_printf_i+0xec>
 800aab4:	681e      	ldr	r6, [r3, #0]
 800aab6:	e002      	b.n	800aabe <_printf_i+0xf2>
 800aab8:	0646      	lsls	r6, r0, #25
 800aaba:	d5fb      	bpl.n	800aab4 <_printf_i+0xe8>
 800aabc:	881e      	ldrh	r6, [r3, #0]
 800aabe:	2f6f      	cmp	r7, #111	; 0x6f
 800aac0:	bf0c      	ite	eq
 800aac2:	2308      	moveq	r3, #8
 800aac4:	230a      	movne	r3, #10
 800aac6:	4852      	ldr	r0, [pc, #328]	; (800ac10 <_printf_i+0x244>)
 800aac8:	2100      	movs	r1, #0
 800aaca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aace:	6865      	ldr	r5, [r4, #4]
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	bfa8      	it	ge
 800aad4:	6821      	ldrge	r1, [r4, #0]
 800aad6:	60a5      	str	r5, [r4, #8]
 800aad8:	bfa4      	itt	ge
 800aada:	f021 0104 	bicge.w	r1, r1, #4
 800aade:	6021      	strge	r1, [r4, #0]
 800aae0:	b90e      	cbnz	r6, 800aae6 <_printf_i+0x11a>
 800aae2:	2d00      	cmp	r5, #0
 800aae4:	d04d      	beq.n	800ab82 <_printf_i+0x1b6>
 800aae6:	4615      	mov	r5, r2
 800aae8:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaec:	fb03 6711 	mls	r7, r3, r1, r6
 800aaf0:	5dc7      	ldrb	r7, [r0, r7]
 800aaf2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaf6:	4637      	mov	r7, r6
 800aaf8:	42bb      	cmp	r3, r7
 800aafa:	460e      	mov	r6, r1
 800aafc:	d9f4      	bls.n	800aae8 <_printf_i+0x11c>
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d10b      	bne.n	800ab1a <_printf_i+0x14e>
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	07de      	lsls	r6, r3, #31
 800ab06:	d508      	bpl.n	800ab1a <_printf_i+0x14e>
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	6861      	ldr	r1, [r4, #4]
 800ab0c:	4299      	cmp	r1, r3
 800ab0e:	bfde      	ittt	le
 800ab10:	2330      	movle	r3, #48	; 0x30
 800ab12:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab16:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab1a:	1b52      	subs	r2, r2, r5
 800ab1c:	6122      	str	r2, [r4, #16]
 800ab1e:	464b      	mov	r3, r9
 800ab20:	4621      	mov	r1, r4
 800ab22:	4640      	mov	r0, r8
 800ab24:	f8cd a000 	str.w	sl, [sp]
 800ab28:	aa03      	add	r2, sp, #12
 800ab2a:	f7ff fedf 	bl	800a8ec <_printf_common>
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d14c      	bne.n	800abcc <_printf_i+0x200>
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	b004      	add	sp, #16
 800ab38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3c:	4834      	ldr	r0, [pc, #208]	; (800ac10 <_printf_i+0x244>)
 800ab3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab42:	6829      	ldr	r1, [r5, #0]
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab4a:	6029      	str	r1, [r5, #0]
 800ab4c:	061d      	lsls	r5, r3, #24
 800ab4e:	d514      	bpl.n	800ab7a <_printf_i+0x1ae>
 800ab50:	07df      	lsls	r7, r3, #31
 800ab52:	bf44      	itt	mi
 800ab54:	f043 0320 	orrmi.w	r3, r3, #32
 800ab58:	6023      	strmi	r3, [r4, #0]
 800ab5a:	b91e      	cbnz	r6, 800ab64 <_printf_i+0x198>
 800ab5c:	6823      	ldr	r3, [r4, #0]
 800ab5e:	f023 0320 	bic.w	r3, r3, #32
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	2310      	movs	r3, #16
 800ab66:	e7af      	b.n	800aac8 <_printf_i+0xfc>
 800ab68:	6823      	ldr	r3, [r4, #0]
 800ab6a:	f043 0320 	orr.w	r3, r3, #32
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	2378      	movs	r3, #120	; 0x78
 800ab72:	4828      	ldr	r0, [pc, #160]	; (800ac14 <_printf_i+0x248>)
 800ab74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab78:	e7e3      	b.n	800ab42 <_printf_i+0x176>
 800ab7a:	0659      	lsls	r1, r3, #25
 800ab7c:	bf48      	it	mi
 800ab7e:	b2b6      	uxthmi	r6, r6
 800ab80:	e7e6      	b.n	800ab50 <_printf_i+0x184>
 800ab82:	4615      	mov	r5, r2
 800ab84:	e7bb      	b.n	800aafe <_printf_i+0x132>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	6826      	ldr	r6, [r4, #0]
 800ab8a:	1d18      	adds	r0, r3, #4
 800ab8c:	6961      	ldr	r1, [r4, #20]
 800ab8e:	6028      	str	r0, [r5, #0]
 800ab90:	0635      	lsls	r5, r6, #24
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	d501      	bpl.n	800ab9a <_printf_i+0x1ce>
 800ab96:	6019      	str	r1, [r3, #0]
 800ab98:	e002      	b.n	800aba0 <_printf_i+0x1d4>
 800ab9a:	0670      	lsls	r0, r6, #25
 800ab9c:	d5fb      	bpl.n	800ab96 <_printf_i+0x1ca>
 800ab9e:	8019      	strh	r1, [r3, #0]
 800aba0:	2300      	movs	r3, #0
 800aba2:	4615      	mov	r5, r2
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	e7ba      	b.n	800ab1e <_printf_i+0x152>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	2100      	movs	r1, #0
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	602a      	str	r2, [r5, #0]
 800abb0:	681d      	ldr	r5, [r3, #0]
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 f82f 	bl	800ac18 <memchr>
 800abba:	b108      	cbz	r0, 800abc0 <_printf_i+0x1f4>
 800abbc:	1b40      	subs	r0, r0, r5
 800abbe:	6060      	str	r0, [r4, #4]
 800abc0:	6863      	ldr	r3, [r4, #4]
 800abc2:	6123      	str	r3, [r4, #16]
 800abc4:	2300      	movs	r3, #0
 800abc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abca:	e7a8      	b.n	800ab1e <_printf_i+0x152>
 800abcc:	462a      	mov	r2, r5
 800abce:	4649      	mov	r1, r9
 800abd0:	4640      	mov	r0, r8
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	47d0      	blx	sl
 800abd6:	3001      	adds	r0, #1
 800abd8:	d0ab      	beq.n	800ab32 <_printf_i+0x166>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	079b      	lsls	r3, r3, #30
 800abde:	d413      	bmi.n	800ac08 <_printf_i+0x23c>
 800abe0:	68e0      	ldr	r0, [r4, #12]
 800abe2:	9b03      	ldr	r3, [sp, #12]
 800abe4:	4298      	cmp	r0, r3
 800abe6:	bfb8      	it	lt
 800abe8:	4618      	movlt	r0, r3
 800abea:	e7a4      	b.n	800ab36 <_printf_i+0x16a>
 800abec:	2301      	movs	r3, #1
 800abee:	4632      	mov	r2, r6
 800abf0:	4649      	mov	r1, r9
 800abf2:	4640      	mov	r0, r8
 800abf4:	47d0      	blx	sl
 800abf6:	3001      	adds	r0, #1
 800abf8:	d09b      	beq.n	800ab32 <_printf_i+0x166>
 800abfa:	3501      	adds	r5, #1
 800abfc:	68e3      	ldr	r3, [r4, #12]
 800abfe:	9903      	ldr	r1, [sp, #12]
 800ac00:	1a5b      	subs	r3, r3, r1
 800ac02:	42ab      	cmp	r3, r5
 800ac04:	dcf2      	bgt.n	800abec <_printf_i+0x220>
 800ac06:	e7eb      	b.n	800abe0 <_printf_i+0x214>
 800ac08:	2500      	movs	r5, #0
 800ac0a:	f104 0619 	add.w	r6, r4, #25
 800ac0e:	e7f5      	b.n	800abfc <_printf_i+0x230>
 800ac10:	0800af99 	.word	0x0800af99
 800ac14:	0800afaa 	.word	0x0800afaa

0800ac18 <memchr>:
 800ac18:	4603      	mov	r3, r0
 800ac1a:	b510      	push	{r4, lr}
 800ac1c:	b2c9      	uxtb	r1, r1
 800ac1e:	4402      	add	r2, r0
 800ac20:	4293      	cmp	r3, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	d101      	bne.n	800ac2a <memchr+0x12>
 800ac26:	2000      	movs	r0, #0
 800ac28:	e003      	b.n	800ac32 <memchr+0x1a>
 800ac2a:	7804      	ldrb	r4, [r0, #0]
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	428c      	cmp	r4, r1
 800ac30:	d1f6      	bne.n	800ac20 <memchr+0x8>
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <memcpy>:
 800ac34:	440a      	add	r2, r1
 800ac36:	4291      	cmp	r1, r2
 800ac38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac3c:	d100      	bne.n	800ac40 <memcpy+0xc>
 800ac3e:	4770      	bx	lr
 800ac40:	b510      	push	{r4, lr}
 800ac42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac46:	4291      	cmp	r1, r2
 800ac48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac4c:	d1f9      	bne.n	800ac42 <memcpy+0xe>
 800ac4e:	bd10      	pop	{r4, pc}

0800ac50 <memmove>:
 800ac50:	4288      	cmp	r0, r1
 800ac52:	b510      	push	{r4, lr}
 800ac54:	eb01 0402 	add.w	r4, r1, r2
 800ac58:	d902      	bls.n	800ac60 <memmove+0x10>
 800ac5a:	4284      	cmp	r4, r0
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	d807      	bhi.n	800ac70 <memmove+0x20>
 800ac60:	1e43      	subs	r3, r0, #1
 800ac62:	42a1      	cmp	r1, r4
 800ac64:	d008      	beq.n	800ac78 <memmove+0x28>
 800ac66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac6e:	e7f8      	b.n	800ac62 <memmove+0x12>
 800ac70:	4601      	mov	r1, r0
 800ac72:	4402      	add	r2, r0
 800ac74:	428a      	cmp	r2, r1
 800ac76:	d100      	bne.n	800ac7a <memmove+0x2a>
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac82:	e7f7      	b.n	800ac74 <memmove+0x24>

0800ac84 <_free_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4605      	mov	r5, r0
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d040      	beq.n	800ad0e <_free_r+0x8a>
 800ac8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac90:	1f0c      	subs	r4, r1, #4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bfb8      	it	lt
 800ac96:	18e4      	addlt	r4, r4, r3
 800ac98:	f000 f910 	bl	800aebc <__malloc_lock>
 800ac9c:	4a1c      	ldr	r2, [pc, #112]	; (800ad10 <_free_r+0x8c>)
 800ac9e:	6813      	ldr	r3, [r2, #0]
 800aca0:	b933      	cbnz	r3, 800acb0 <_free_r+0x2c>
 800aca2:	6063      	str	r3, [r4, #4]
 800aca4:	6014      	str	r4, [r2, #0]
 800aca6:	4628      	mov	r0, r5
 800aca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acac:	f000 b90c 	b.w	800aec8 <__malloc_unlock>
 800acb0:	42a3      	cmp	r3, r4
 800acb2:	d908      	bls.n	800acc6 <_free_r+0x42>
 800acb4:	6820      	ldr	r0, [r4, #0]
 800acb6:	1821      	adds	r1, r4, r0
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf01      	itttt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	1809      	addeq	r1, r1, r0
 800acc2:	6021      	streq	r1, [r4, #0]
 800acc4:	e7ed      	b.n	800aca2 <_free_r+0x1e>
 800acc6:	461a      	mov	r2, r3
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	b10b      	cbz	r3, 800acd0 <_free_r+0x4c>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d9fa      	bls.n	800acc6 <_free_r+0x42>
 800acd0:	6811      	ldr	r1, [r2, #0]
 800acd2:	1850      	adds	r0, r2, r1
 800acd4:	42a0      	cmp	r0, r4
 800acd6:	d10b      	bne.n	800acf0 <_free_r+0x6c>
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	4401      	add	r1, r0
 800acdc:	1850      	adds	r0, r2, r1
 800acde:	4283      	cmp	r3, r0
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	d1e0      	bne.n	800aca6 <_free_r+0x22>
 800ace4:	6818      	ldr	r0, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	4401      	add	r1, r0
 800acea:	6011      	str	r1, [r2, #0]
 800acec:	6053      	str	r3, [r2, #4]
 800acee:	e7da      	b.n	800aca6 <_free_r+0x22>
 800acf0:	d902      	bls.n	800acf8 <_free_r+0x74>
 800acf2:	230c      	movs	r3, #12
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	e7d6      	b.n	800aca6 <_free_r+0x22>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	1821      	adds	r1, r4, r0
 800acfc:	428b      	cmp	r3, r1
 800acfe:	bf01      	itttt	eq
 800ad00:	6819      	ldreq	r1, [r3, #0]
 800ad02:	685b      	ldreq	r3, [r3, #4]
 800ad04:	1809      	addeq	r1, r1, r0
 800ad06:	6021      	streq	r1, [r4, #0]
 800ad08:	6063      	str	r3, [r4, #4]
 800ad0a:	6054      	str	r4, [r2, #4]
 800ad0c:	e7cb      	b.n	800aca6 <_free_r+0x22>
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	2000158c 	.word	0x2000158c

0800ad14 <sbrk_aligned>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	4e0e      	ldr	r6, [pc, #56]	; (800ad50 <sbrk_aligned+0x3c>)
 800ad18:	460c      	mov	r4, r1
 800ad1a:	6831      	ldr	r1, [r6, #0]
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	b911      	cbnz	r1, 800ad26 <sbrk_aligned+0x12>
 800ad20:	f000 f8bc 	bl	800ae9c <_sbrk_r>
 800ad24:	6030      	str	r0, [r6, #0]
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f8b7 	bl	800ae9c <_sbrk_r>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	d00a      	beq.n	800ad48 <sbrk_aligned+0x34>
 800ad32:	1cc4      	adds	r4, r0, #3
 800ad34:	f024 0403 	bic.w	r4, r4, #3
 800ad38:	42a0      	cmp	r0, r4
 800ad3a:	d007      	beq.n	800ad4c <sbrk_aligned+0x38>
 800ad3c:	1a21      	subs	r1, r4, r0
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 f8ac 	bl	800ae9c <_sbrk_r>
 800ad44:	3001      	adds	r0, #1
 800ad46:	d101      	bne.n	800ad4c <sbrk_aligned+0x38>
 800ad48:	f04f 34ff 	mov.w	r4, #4294967295
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}
 800ad50:	20001590 	.word	0x20001590

0800ad54 <_malloc_r>:
 800ad54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad58:	1ccd      	adds	r5, r1, #3
 800ad5a:	f025 0503 	bic.w	r5, r5, #3
 800ad5e:	3508      	adds	r5, #8
 800ad60:	2d0c      	cmp	r5, #12
 800ad62:	bf38      	it	cc
 800ad64:	250c      	movcc	r5, #12
 800ad66:	2d00      	cmp	r5, #0
 800ad68:	4607      	mov	r7, r0
 800ad6a:	db01      	blt.n	800ad70 <_malloc_r+0x1c>
 800ad6c:	42a9      	cmp	r1, r5
 800ad6e:	d905      	bls.n	800ad7c <_malloc_r+0x28>
 800ad70:	230c      	movs	r3, #12
 800ad72:	2600      	movs	r6, #0
 800ad74:	603b      	str	r3, [r7, #0]
 800ad76:	4630      	mov	r0, r6
 800ad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad7c:	4e2e      	ldr	r6, [pc, #184]	; (800ae38 <_malloc_r+0xe4>)
 800ad7e:	f000 f89d 	bl	800aebc <__malloc_lock>
 800ad82:	6833      	ldr	r3, [r6, #0]
 800ad84:	461c      	mov	r4, r3
 800ad86:	bb34      	cbnz	r4, 800add6 <_malloc_r+0x82>
 800ad88:	4629      	mov	r1, r5
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	f7ff ffc2 	bl	800ad14 <sbrk_aligned>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	4604      	mov	r4, r0
 800ad94:	d14d      	bne.n	800ae32 <_malloc_r+0xde>
 800ad96:	6834      	ldr	r4, [r6, #0]
 800ad98:	4626      	mov	r6, r4
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d140      	bne.n	800ae20 <_malloc_r+0xcc>
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	4631      	mov	r1, r6
 800ada2:	4638      	mov	r0, r7
 800ada4:	eb04 0803 	add.w	r8, r4, r3
 800ada8:	f000 f878 	bl	800ae9c <_sbrk_r>
 800adac:	4580      	cmp	r8, r0
 800adae:	d13a      	bne.n	800ae26 <_malloc_r+0xd2>
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	3503      	adds	r5, #3
 800adb4:	1a6d      	subs	r5, r5, r1
 800adb6:	f025 0503 	bic.w	r5, r5, #3
 800adba:	3508      	adds	r5, #8
 800adbc:	2d0c      	cmp	r5, #12
 800adbe:	bf38      	it	cc
 800adc0:	250c      	movcc	r5, #12
 800adc2:	4638      	mov	r0, r7
 800adc4:	4629      	mov	r1, r5
 800adc6:	f7ff ffa5 	bl	800ad14 <sbrk_aligned>
 800adca:	3001      	adds	r0, #1
 800adcc:	d02b      	beq.n	800ae26 <_malloc_r+0xd2>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	442b      	add	r3, r5
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	e00e      	b.n	800adf4 <_malloc_r+0xa0>
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	1b52      	subs	r2, r2, r5
 800adda:	d41e      	bmi.n	800ae1a <_malloc_r+0xc6>
 800addc:	2a0b      	cmp	r2, #11
 800adde:	d916      	bls.n	800ae0e <_malloc_r+0xba>
 800ade0:	1961      	adds	r1, r4, r5
 800ade2:	42a3      	cmp	r3, r4
 800ade4:	6025      	str	r5, [r4, #0]
 800ade6:	bf18      	it	ne
 800ade8:	6059      	strne	r1, [r3, #4]
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	bf08      	it	eq
 800adee:	6031      	streq	r1, [r6, #0]
 800adf0:	5162      	str	r2, [r4, r5]
 800adf2:	604b      	str	r3, [r1, #4]
 800adf4:	4638      	mov	r0, r7
 800adf6:	f104 060b 	add.w	r6, r4, #11
 800adfa:	f000 f865 	bl	800aec8 <__malloc_unlock>
 800adfe:	f026 0607 	bic.w	r6, r6, #7
 800ae02:	1d23      	adds	r3, r4, #4
 800ae04:	1af2      	subs	r2, r6, r3
 800ae06:	d0b6      	beq.n	800ad76 <_malloc_r+0x22>
 800ae08:	1b9b      	subs	r3, r3, r6
 800ae0a:	50a3      	str	r3, [r4, r2]
 800ae0c:	e7b3      	b.n	800ad76 <_malloc_r+0x22>
 800ae0e:	6862      	ldr	r2, [r4, #4]
 800ae10:	42a3      	cmp	r3, r4
 800ae12:	bf0c      	ite	eq
 800ae14:	6032      	streq	r2, [r6, #0]
 800ae16:	605a      	strne	r2, [r3, #4]
 800ae18:	e7ec      	b.n	800adf4 <_malloc_r+0xa0>
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	6864      	ldr	r4, [r4, #4]
 800ae1e:	e7b2      	b.n	800ad86 <_malloc_r+0x32>
 800ae20:	4634      	mov	r4, r6
 800ae22:	6876      	ldr	r6, [r6, #4]
 800ae24:	e7b9      	b.n	800ad9a <_malloc_r+0x46>
 800ae26:	230c      	movs	r3, #12
 800ae28:	4638      	mov	r0, r7
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	f000 f84c 	bl	800aec8 <__malloc_unlock>
 800ae30:	e7a1      	b.n	800ad76 <_malloc_r+0x22>
 800ae32:	6025      	str	r5, [r4, #0]
 800ae34:	e7de      	b.n	800adf4 <_malloc_r+0xa0>
 800ae36:	bf00      	nop
 800ae38:	2000158c 	.word	0x2000158c

0800ae3c <_realloc_r>:
 800ae3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae40:	4680      	mov	r8, r0
 800ae42:	4614      	mov	r4, r2
 800ae44:	460e      	mov	r6, r1
 800ae46:	b921      	cbnz	r1, 800ae52 <_realloc_r+0x16>
 800ae48:	4611      	mov	r1, r2
 800ae4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4e:	f7ff bf81 	b.w	800ad54 <_malloc_r>
 800ae52:	b92a      	cbnz	r2, 800ae60 <_realloc_r+0x24>
 800ae54:	f7ff ff16 	bl	800ac84 <_free_r>
 800ae58:	4625      	mov	r5, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae60:	f000 f838 	bl	800aed4 <_malloc_usable_size_r>
 800ae64:	4284      	cmp	r4, r0
 800ae66:	4607      	mov	r7, r0
 800ae68:	d802      	bhi.n	800ae70 <_realloc_r+0x34>
 800ae6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae6e:	d812      	bhi.n	800ae96 <_realloc_r+0x5a>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7ff ff6e 	bl	800ad54 <_malloc_r>
 800ae78:	4605      	mov	r5, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d0ed      	beq.n	800ae5a <_realloc_r+0x1e>
 800ae7e:	42bc      	cmp	r4, r7
 800ae80:	4622      	mov	r2, r4
 800ae82:	4631      	mov	r1, r6
 800ae84:	bf28      	it	cs
 800ae86:	463a      	movcs	r2, r7
 800ae88:	f7ff fed4 	bl	800ac34 <memcpy>
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7ff fef8 	bl	800ac84 <_free_r>
 800ae94:	e7e1      	b.n	800ae5a <_realloc_r+0x1e>
 800ae96:	4635      	mov	r5, r6
 800ae98:	e7df      	b.n	800ae5a <_realloc_r+0x1e>
	...

0800ae9c <_sbrk_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4d05      	ldr	r5, [pc, #20]	; (800aeb8 <_sbrk_r+0x1c>)
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	f7f6 faa4 	bl	80013f4 <_sbrk>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d102      	bne.n	800aeb6 <_sbrk_r+0x1a>
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	b103      	cbz	r3, 800aeb6 <_sbrk_r+0x1a>
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	20001594 	.word	0x20001594

0800aebc <__malloc_lock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__malloc_lock+0x8>)
 800aebe:	f000 b811 	b.w	800aee4 <__retarget_lock_acquire_recursive>
 800aec2:	bf00      	nop
 800aec4:	20001598 	.word	0x20001598

0800aec8 <__malloc_unlock>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__malloc_unlock+0x8>)
 800aeca:	f000 b80c 	b.w	800aee6 <__retarget_lock_release_recursive>
 800aece:	bf00      	nop
 800aed0:	20001598 	.word	0x20001598

0800aed4 <_malloc_usable_size_r>:
 800aed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed8:	1f18      	subs	r0, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	bfbc      	itt	lt
 800aede:	580b      	ldrlt	r3, [r1, r0]
 800aee0:	18c0      	addlt	r0, r0, r3
 800aee2:	4770      	bx	lr

0800aee4 <__retarget_lock_acquire_recursive>:
 800aee4:	4770      	bx	lr

0800aee6 <__retarget_lock_release_recursive>:
 800aee6:	4770      	bx	lr

0800aee8 <_init>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	bf00      	nop
 800aeec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeee:	bc08      	pop	{r3}
 800aef0:	469e      	mov	lr, r3
 800aef2:	4770      	bx	lr

0800aef4 <_fini>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr
