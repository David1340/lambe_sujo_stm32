
lambe_sujo_receptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd8  0800afd8  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800afd8  0800afd8  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afd8  0800afd8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd8  0800afd8  0001afd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800afe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20000200  0800b1e0  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015a4  0800b1e0  000215a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f21  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003584  00000000  00000000  0003514a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  000386d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b22c  00000000  00000000  0003aad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016380  00000000  00000000  00055d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f424  00000000  00000000  0006c084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb4a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  000fb4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000200 	.word	0x20000200
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af04 	.word	0x0800af04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000204 	.word	0x20000204
 8000148:	0800af04 	.word	0x0800af04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_IC_CaptureCallback>:
uint16_t count2 = 0;
uint16_t position2 = 0;
int16_t speed2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800016c:	d110      	bne.n	8000190 <HAL_TIM_IC_CaptureCallback+0x34>
	{
		counter = __HAL_TIM_GET_COUNTER(htim);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000174:	4a13      	ldr	r2, [pc, #76]	; (80001c4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8000176:	6013      	str	r3, [r2, #0]
		count = (int16_t)counter;
 8000178:	4b12      	ldr	r3, [pc, #72]	; (80001c4 <HAL_TIM_IC_CaptureCallback+0x68>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b12      	ldr	r3, [pc, #72]	; (80001c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000180:	801a      	strh	r2, [r3, #0]
		position = count/4;
 8000182:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	089b      	lsrs	r3, r3, #2
 8000188:	b29a      	uxth	r2, r3
 800018a:	4b10      	ldr	r3, [pc, #64]	; (80001cc <HAL_TIM_IC_CaptureCallback+0x70>)
 800018c:	801a      	strh	r2, [r3, #0]
		counter2 = __HAL_TIM_GET_COUNTER(htim);
		count2 = (int16_t)counter2;
		position2 = count2/4;
	}

}
 800018e:	e014      	b.n	80001ba <HAL_TIM_IC_CaptureCallback+0x5e>
	}else if(htim->Instance == TIM4){
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000196:	4293      	cmp	r3, r2
 8000198:	d10f      	bne.n	80001ba <HAL_TIM_IC_CaptureCallback+0x5e>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <HAL_TIM_IC_CaptureCallback+0x78>)
 80001a2:	6013      	str	r3, [r2, #0]
		count2 = (int16_t)counter2;
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <HAL_TIM_IC_CaptureCallback+0x78>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	b29a      	uxth	r2, r3
 80001aa:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80001ac:	801a      	strh	r2, [r3, #0]
		position2 = count2/4;
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <HAL_TIM_IC_CaptureCallback+0x80>)
 80001b8:	801a      	strh	r2, [r3, #0]
}
 80001ba:	bf00      	nop
 80001bc:	370c      	adds	r7, #12
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	200003b4 	.word	0x200003b4
 80001c8:	200003b8 	.word	0x200003b8
 80001cc:	200003ba 	.word	0x200003ba
 80001d0:	40000800 	.word	0x40000800
 80001d4:	200003c0 	.word	0x200003c0
 80001d8:	200003c4 	.word	0x200003c4
 80001dc:	200003c6 	.word	0x200003c6

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f001 f976 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f88c 	bl	8000304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 faee 	bl	80007cc <MX_GPIO_Init>
  MX_SPI1_Init();
 80001f0:	f000 f8e2 	bl	80003b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80001f4:	f000 f916 	bl	8000424 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001f8:	f000 f9c0 	bl	800057c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001fc:	f000 fa12 	bl	8000624 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000200:	f000 fa90 	bl	8000724 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000204:	f009 fd36 	bl	8009c74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Configuração do rádio */
  nrfRx.CE_port = CE_GPIO_Port;
 8000208:	4b30      	ldr	r3, [pc, #192]	; (80002cc <main+0xec>)
 800020a:	4a31      	ldr	r2, [pc, #196]	; (80002d0 <main+0xf0>)
 800020c:	609a      	str	r2, [r3, #8]
  nrfRx.CE_pin = CE_Pin;
 800020e:	4b2f      	ldr	r3, [pc, #188]	; (80002cc <main+0xec>)
 8000210:	2201      	movs	r2, #1
 8000212:	819a      	strh	r2, [r3, #12]
  nrfRx.CSN_port = CSN_GPIO_Port;
 8000214:	4b2d      	ldr	r3, [pc, #180]	; (80002cc <main+0xec>)
 8000216:	4a2f      	ldr	r2, [pc, #188]	; (80002d4 <main+0xf4>)
 8000218:	601a      	str	r2, [r3, #0]
  nrfRx.CSN_pin = CSN_Pin;
 800021a:	4b2c      	ldr	r3, [pc, #176]	; (80002cc <main+0xec>)
 800021c:	2208      	movs	r2, #8
 800021e:	809a      	strh	r2, [r3, #4]
  nrfRx.IRQ_port = IRQ_GPIO_Port;
 8000220:	4b2a      	ldr	r3, [pc, #168]	; (80002cc <main+0xec>)
 8000222:	4a2c      	ldr	r2, [pc, #176]	; (80002d4 <main+0xf4>)
 8000224:	611a      	str	r2, [r3, #16]
  nrfRx.IRQ_pin = IRQ_Pin;
 8000226:	4b29      	ldr	r3, [pc, #164]	; (80002cc <main+0xec>)
 8000228:	2210      	movs	r2, #16
 800022a:	829a      	strh	r2, [r3, #20]
  nrfRx.hSPIx = &hspi1;
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <main+0xec>)
 800022e:	4a2a      	ldr	r2, [pc, #168]	; (80002d8 <main+0xf8>)
 8000230:	619a      	str	r2, [r3, #24]

  nrf24_init(&nrfRx);
 8000232:	4826      	ldr	r0, [pc, #152]	; (80002cc <main+0xec>)
 8000234:	f000 fb53 	bl	80008de <nrf24_init>
  nrf24_setDataRate(&nrfRx, _250kbs);
 8000238:	2100      	movs	r1, #0
 800023a:	4824      	ldr	r0, [pc, #144]	; (80002cc <main+0xec>)
 800023c:	f000 fb89 	bl	8000952 <nrf24_setDataRate>
  nrf24_setPALevel(&nrfRx, high);
 8000240:	2103      	movs	r1, #3
 8000242:	4822      	ldr	r0, [pc, #136]	; (80002cc <main+0xec>)
 8000244:	f000 fbd0 	bl	80009e8 <nrf24_setPALevel>

  nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 8000248:	230b      	movs	r3, #11
 800024a:	2200      	movs	r2, #0
 800024c:	4923      	ldr	r1, [pc, #140]	; (80002dc <main+0xfc>)
 800024e:	481f      	ldr	r0, [pc, #124]	; (80002cc <main+0xec>)
 8000250:	f000 fc8a 	bl	8000b68 <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
 8000254:	230b      	movs	r3, #11
 8000256:	2201      	movs	r2, #1
 8000258:	4921      	ldr	r1, [pc, #132]	; (80002e0 <main+0x100>)
 800025a:	481c      	ldr	r0, [pc, #112]	; (80002cc <main+0xec>)
 800025c:	f000 fc84 	bl	8000b68 <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
 8000260:	230b      	movs	r3, #11
 8000262:	2202      	movs	r2, #2
 8000264:	491f      	ldr	r1, [pc, #124]	; (80002e4 <main+0x104>)
 8000266:	4819      	ldr	r0, [pc, #100]	; (80002cc <main+0xec>)
 8000268:	f000 fc7e 	bl	8000b68 <nrf24_setRxPipe>
  nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
 800026c:	230b      	movs	r3, #11
 800026e:	2203      	movs	r2, #3
 8000270:	491d      	ldr	r1, [pc, #116]	; (80002e8 <main+0x108>)
 8000272:	4816      	ldr	r0, [pc, #88]	; (80002cc <main+0xec>)
 8000274:	f000 fc78 	bl	8000b68 <nrf24_setRxPipe>
  nrf24_setMode(&nrfRx, rxMode);
 8000278:	2103      	movs	r1, #3
 800027a:	4814      	ldr	r0, [pc, #80]	; (80002cc <main+0xec>)
 800027c:	f000 fc22 	bl	8000ac4 <nrf24_setMode>
  /* Configuração dos timers referentes aos encoders */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000280:	213c      	movs	r1, #60	; 0x3c
 8000282:	481a      	ldr	r0, [pc, #104]	; (80002ec <main+0x10c>)
 8000284:	f004 fcf8 	bl	8004c78 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000288:	213c      	movs	r1, #60	; 0x3c
 800028a:	4819      	ldr	r0, [pc, #100]	; (80002f0 <main+0x110>)
 800028c:	f004 fcf4 	bl	8004c78 <HAL_TIM_Encoder_Start_IT>
  /* Configuração dos timers referentes ao PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000290:	2100      	movs	r1, #0
 8000292:	4818      	ldr	r0, [pc, #96]	; (80002f4 <main+0x114>)
 8000294:	f004 fbac 	bl	80049f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000298:	2104      	movs	r1, #4
 800029a:	4816      	ldr	r0, [pc, #88]	; (80002f4 <main+0x114>)
 800029c:	f004 fba8 	bl	80049f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002a0:	2100      	movs	r1, #0
 80002a2:	4815      	ldr	r0, [pc, #84]	; (80002f8 <main+0x118>)
 80002a4:	f004 fba4 	bl	80049f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002a8:	2104      	movs	r1, #4
 80002aa:	4813      	ldr	r0, [pc, #76]	; (80002f8 <main+0x118>)
 80002ac:	f004 fba0 	bl	80049f0 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 80;
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <main+0x11c>)
 80002b2:	2250      	movs	r2, #80	; 0x50
 80002b4:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 40;
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <main+0x11c>)
 80002b8:	2228      	movs	r2, #40	; 0x28
 80002ba:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR1 = 20;
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <main+0x120>)
 80002be:	2214      	movs	r2, #20
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 20;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <main+0x120>)
 80002c4:	2214      	movs	r2, #20
 80002c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <main+0xe8>
 80002ca:	bf00      	nop
 80002cc:	20000394 	.word	0x20000394
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40010800 	.word	0x40010800
 80002d8:	2000021c 	.word	0x2000021c
 80002dc:	20000000 	.word	0x20000000
 80002e0:	20000008 	.word	0x20000008
 80002e4:	20000018 	.word	0x20000018
 80002e8:	20000010 	.word	0x20000010
 80002ec:	200002bc 	.word	0x200002bc
 80002f0:	2000034c 	.word	0x2000034c
 80002f4:	20000274 	.word	0x20000274
 80002f8:	20000304 	.word	0x20000304
 80002fc:	40012c00 	.word	0x40012c00
 8000300:	40000400 	.word	0x40000400

08000304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b094      	sub	sp, #80	; 0x50
 8000308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800030e:	2228      	movs	r2, #40	; 0x28
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f00a f974 	bl	800a600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]
 8000324:	60da      	str	r2, [r3, #12]
 8000326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000334:	2301      	movs	r3, #1
 8000336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	2301      	movs	r3, #1
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035a:	4618      	mov	r0, r3
 800035c:	f003 f88a 	bl	8003474 <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000366:	f000 fab5 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f003 faf6 	bl	8003978 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000392:	f000 fa9f 	bl	80008d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000396:	2310      	movs	r3, #16
 8000398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 fc4f 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003ac:	f000 fa92 	bl	80008d4 <Error_Handler>
  }
}
 80003b0:	bf00      	nop
 80003b2:	3750      	adds	r7, #80	; 0x50
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003bc:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_SPI1_Init+0x64>)
 80003be:	4a18      	ldr	r2, [pc, #96]	; (8000420 <MX_SPI1_Init+0x68>)
 80003c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003c2:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x64>)
 80003c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ca:	4b14      	ldr	r3, [pc, #80]	; (800041c <MX_SPI1_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_SPI1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_SPI1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_SPI1_Init+0x64>)
 80003e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x64>)
 80003ec:	2208      	movs	r2, #8
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_SPI1_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x64>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_SPI1_Init+0x64>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x64>)
 8000404:	220a      	movs	r2, #10
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_SPI1_Init+0x64>)
 800040a:	f003 fcd1 	bl	8003db0 <HAL_SPI_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000414:	f000 fa5e 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000021c 	.word	0x2000021c
 8000420:	40013000 	.word	0x40013000

08000424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b096      	sub	sp, #88	; 0x58
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000438:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2220      	movs	r2, #32
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f00a f8cf 	bl	800a600 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000462:	4b44      	ldr	r3, [pc, #272]	; (8000574 <MX_TIM1_Init+0x150>)
 8000464:	4a44      	ldr	r2, [pc, #272]	; (8000578 <MX_TIM1_Init+0x154>)
 8000466:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 8000468:	4b42      	ldr	r3, [pc, #264]	; (8000574 <MX_TIM1_Init+0x150>)
 800046a:	2208      	movs	r2, #8
 800046c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046e:	4b41      	ldr	r3, [pc, #260]	; (8000574 <MX_TIM1_Init+0x150>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 160-1;
 8000474:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <MX_TIM1_Init+0x150>)
 8000476:	229f      	movs	r2, #159	; 0x9f
 8000478:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800047a:	4b3e      	ldr	r3, [pc, #248]	; (8000574 <MX_TIM1_Init+0x150>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000480:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <MX_TIM1_Init+0x150>)
 8000482:	2200      	movs	r2, #0
 8000484:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	4b3b      	ldr	r3, [pc, #236]	; (8000574 <MX_TIM1_Init+0x150>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800048c:	4839      	ldr	r0, [pc, #228]	; (8000574 <MX_TIM1_Init+0x150>)
 800048e:	f004 fa07 	bl	80048a0 <HAL_TIM_Base_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000498:	f000 fa1c 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004a6:	4619      	mov	r1, r3
 80004a8:	4832      	ldr	r0, [pc, #200]	; (8000574 <MX_TIM1_Init+0x150>)
 80004aa:	f004 fe59 	bl	8005160 <HAL_TIM_ConfigClockSource>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80004b4:	f000 fa0e 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004b8:	482e      	ldr	r0, [pc, #184]	; (8000574 <MX_TIM1_Init+0x150>)
 80004ba:	f004 fa40 	bl	800493e <HAL_TIM_PWM_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80004c4:	f000 fa06 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c8:	2300      	movs	r3, #0
 80004ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d4:	4619      	mov	r1, r3
 80004d6:	4827      	ldr	r0, [pc, #156]	; (8000574 <MX_TIM1_Init+0x150>)
 80004d8:	f005 f9ce 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80004e2:	f000 f9f7 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e6:	2360      	movs	r3, #96	; 0x60
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ee:	2300      	movs	r3, #0
 80004f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f2:	2300      	movs	r3, #0
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004fa:	2300      	movs	r3, #0
 80004fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fe:	2300      	movs	r3, #0
 8000500:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000506:	2200      	movs	r2, #0
 8000508:	4619      	mov	r1, r3
 800050a:	481a      	ldr	r0, [pc, #104]	; (8000574 <MX_TIM1_Init+0x150>)
 800050c:	f004 fd6a 	bl	8004fe4 <HAL_TIM_PWM_ConfigChannel>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000516:	f000 f9dd 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800051a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800051e:	2204      	movs	r2, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <MX_TIM1_Init+0x150>)
 8000524:	f004 fd5e 	bl	8004fe4 <HAL_TIM_PWM_ConfigChannel>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800052e:	f000 f9d1 	bl	80008d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4619      	mov	r1, r3
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <MX_TIM1_Init+0x150>)
 8000556:	f005 f9ed 	bl	8005934 <HAL_TIMEx_ConfigBreakDeadTime>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000560:	f000 f9b8 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <MX_TIM1_Init+0x150>)
 8000566:	f000 fe3f 	bl	80011e8 <HAL_TIM_MspPostInit>

}
 800056a:	bf00      	nop
 800056c:	3758      	adds	r7, #88	; 0x58
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000274 	.word	0x20000274
 8000578:	40012c00 	.word	0x40012c00

0800057c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2224      	movs	r2, #36	; 0x24
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a f838 	bl	800a600 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <MX_TIM2_Init+0xa4>)
 800059a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800059e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ba:	4b19      	ldr	r3, [pc, #100]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80005c0:	2303      	movs	r3, #3
 80005c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005d8:	2301      	movs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_TIM2_Init+0xa4>)
 80005ec:	f004 faa2 	bl	8004b34 <HAL_TIM_Encoder_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005f6:	f000 f96d 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4619      	mov	r1, r3
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <MX_TIM2_Init+0xa4>)
 8000608:	f005 f936 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000612:	f000 f95f 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	3730      	adds	r7, #48	; 0x30
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	200002bc 	.word	0x200002bc

08000624 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	; 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000654:	4b31      	ldr	r3, [pc, #196]	; (800071c <MX_TIM3_Init+0xf8>)
 8000656:	4a32      	ldr	r2, [pc, #200]	; (8000720 <MX_TIM3_Init+0xfc>)
 8000658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <MX_TIM3_Init+0xf8>)
 800065c:	2208      	movs	r2, #8
 800065e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MX_TIM3_Init+0xf8>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 160-1;
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_TIM3_Init+0xf8>)
 8000668:	229f      	movs	r2, #159	; 0x9f
 800066a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <MX_TIM3_Init+0xf8>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <MX_TIM3_Init+0xf8>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000678:	4828      	ldr	r0, [pc, #160]	; (800071c <MX_TIM3_Init+0xf8>)
 800067a:	f004 f911 	bl	80048a0 <HAL_TIM_Base_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000684:	f000 f926 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800068e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000692:	4619      	mov	r1, r3
 8000694:	4821      	ldr	r0, [pc, #132]	; (800071c <MX_TIM3_Init+0xf8>)
 8000696:	f004 fd63 	bl	8005160 <HAL_TIM_ConfigClockSource>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80006a0:	f000 f918 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a4:	481d      	ldr	r0, [pc, #116]	; (800071c <MX_TIM3_Init+0xf8>)
 80006a6:	f004 f94a 	bl	800493e <HAL_TIM_PWM_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 f910 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4619      	mov	r1, r3
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <MX_TIM3_Init+0xf8>)
 80006c4:	f005 f8d8 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80006ce:	f000 f901 	bl	80008d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_TIM3_Init+0xf8>)
 80006ea:	f004 fc7b 	bl	8004fe4 <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80006f4:	f000 f8ee 	bl	80008d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2204      	movs	r2, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <MX_TIM3_Init+0xf8>)
 8000700:	f004 fc70 	bl	8004fe4 <HAL_TIM_PWM_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800070a:	f000 f8e3 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <MX_TIM3_Init+0xf8>)
 8000710:	f000 fd6a 	bl	80011e8 <HAL_TIM_MspPostInit>

}
 8000714:	bf00      	nop
 8000716:	3738      	adds	r7, #56	; 0x38
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000304 	.word	0x20000304
 8000720:	40000400 	.word	0x40000400

08000724 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2224      	movs	r2, #36	; 0x24
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f009 ff64 	bl	800a600 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_TIM4_Init+0xa0>)
 8000742:	4a21      	ldr	r2, [pc, #132]	; (80007c8 <MX_TIM4_Init+0xa4>)
 8000744:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_TIM4_Init+0xa0>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_TIM4_Init+0xa0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000752:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_TIM4_Init+0xa0>)
 8000754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000758:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_TIM4_Init+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_TIM4_Init+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000766:	2303      	movs	r3, #3
 8000768:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800076a:	2302      	movs	r3, #2
 800076c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800076e:	2301      	movs	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800077a:	2302      	movs	r3, #2
 800077c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800077e:	2301      	movs	r3, #1
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_TIM4_Init+0xa0>)
 8000792:	f004 f9cf 	bl	8004b34 <HAL_TIM_Encoder_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800079c:	f000 f89a 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_TIM4_Init+0xa0>)
 80007ae:	f005 f863 	bl	8005878 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80007b8:	f000 f88c 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3730      	adds	r7, #48	; 0x30
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000034c 	.word	0x2000034c
 80007c8:	40000800 	.word	0x40000800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_GPIO_Init+0xf8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <MX_GPIO_Init+0xf8>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0xf8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <MX_GPIO_Init+0xf8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <MX_GPIO_Init+0xf8>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b2f      	ldr	r3, [pc, #188]	; (80008c4 <MX_GPIO_Init+0xf8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <MX_GPIO_Init+0xf8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xf8>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MX_GPIO_Init+0xf8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xf8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xf8>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xf8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000846:	4820      	ldr	r0, [pc, #128]	; (80008c8 <MX_GPIO_Init+0xfc>)
 8000848:	f001 f938 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|IRQ_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2118      	movs	r1, #24
 8000850:	481e      	ldr	r0, [pc, #120]	; (80008cc <MX_GPIO_Init+0x100>)
 8000852:	f001 f933 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|DIP1_Pin|DIP2_Pin|DIP3_Pin
 8000856:	2200      	movs	r2, #0
 8000858:	f24f 0101 	movw	r1, #61441	; 0xf001
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_GPIO_Init+0x104>)
 800085e:	f001 f92d 	bl	8001abc <HAL_GPIO_WritePin>
                          |DIP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2302      	movs	r3, #2
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0310 	add.w	r3, r7, #16
 8000878:	4619      	mov	r1, r3
 800087a:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_GPIO_Init+0xfc>)
 800087c:	f000 ff9a 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|IRQ_Pin;
 8000880:	2318      	movs	r3, #24
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_GPIO_Init+0x100>)
 8000898:	f000 ff8c 	bl	80017b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin DIP1_Pin DIP2_Pin DIP3_Pin
                           DIP4_Pin */
  GPIO_InitStruct.Pin = CE_Pin|DIP1_Pin|DIP2_Pin|DIP3_Pin
 800089c:	f24f 0301 	movw	r3, #61441	; 0xf001
 80008a0:	613b      	str	r3, [r7, #16]
                          |DIP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_GPIO_Init+0x104>)
 80008b6:	f000 ff7d 	bl	80017b4 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40011000 	.word	0x40011000
 80008cc:	40010800 	.word	0x40010800
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>

080008de <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f9e2 	bl	8000cb0 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fa0d 	bl	8000d10 <nrf24_writeReg>
	node->crc = no_CRC;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 80008fc:	2200      	movs	r2, #0
 80008fe:	2101      	movs	r1, #1
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 fa05 	bl	8000d10 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 8000906:	2200      	movs	r2, #0
 8000908:	2102      	movs	r1, #2
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 fa00 	bl	8000d10 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000910:	2203      	movs	r2, #3
 8000912:	2103      	movs	r1, #3
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f9fb 	bl	8000d10 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 800091a:	2200      	movs	r2, #0
 800091c:	2104      	movs	r1, #4
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f000 f9f6 	bl	8000d10 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000924:	2100      	movs	r1, #0
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f813 	bl	8000952 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 800092c:	2103      	movs	r1, #3
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f000 f85a 	bl	80009e8 <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f8ae 	bl	8000a98 <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 800093c:	2101      	movs	r1, #1
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f8c0 	bl	8000ac4 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f9a3 	bl	8000c90 <nrf24_CE_enable>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 f9a6 	bl	8000cb0 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000964:	2106      	movs	r1, #6
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fa39 	bl	8000dde <nrf24_readReg>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d01e      	beq.n	80009b4 <nrf24_setDataRate+0x62>
 8000976:	2b02      	cmp	r3, #2
 8000978:	dc28      	bgt.n	80009cc <nrf24_setDataRate+0x7a>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <nrf24_setDataRate+0x32>
 800097e:	2b01      	cmp	r3, #1
 8000980:	d00c      	beq.n	800099c <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000982:	e023      	b.n	80009cc <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	f023 0308 	bic.w	r3, r3, #8
 8000992:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	775a      	strb	r2, [r3, #29]
			break;
 800099a:	e018      	b.n	80009ce <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	f023 0320 	bic.w	r3, r3, #32
 80009a2:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	f023 0308 	bic.w	r3, r3, #8
 80009aa:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	775a      	strb	r2, [r3, #29]
			break;
 80009b2:	e00c      	b.n	80009ce <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	f023 0320 	bic.w	r3, r3, #32
 80009ba:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2202      	movs	r2, #2
 80009c8:	775a      	strb	r2, [r3, #29]
			break;
 80009ca:	e000      	b.n	80009ce <nrf24_setDataRate+0x7c>
			break;
 80009cc:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 80009ce:	7bfb      	ldrb	r3, [r7, #15]
 80009d0:	461a      	mov	r2, r3
 80009d2:	2106      	movs	r1, #6
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f99b 	bl	8000d10 <nrf24_writeReg>
	nrf24_CE_enable(node);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f958 	bl	8000c90 <nrf24_CE_enable>
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 f95b 	bl	8000cb0 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 80009fa:	2106      	movs	r1, #6
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f9ee 	bl	8000dde <nrf24_readReg>
 8000a02:	4603      	mov	r3, r0
 8000a04:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d837      	bhi.n	8000a7c <nrf24_setPALevel+0x94>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <nrf24_setPALevel+0x2c>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a3d 	.word	0x08000a3d
 8000a1c:	08000a55 	.word	0x08000a55
 8000a20:	08000a6d 	.word	0x08000a6d
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f023 0304 	bic.w	r3, r3, #4
 8000a2a:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	f023 0302 	bic.w	r3, r3, #2
 8000a32:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
			break;
 8000a3a:	e020      	b.n	8000a7e <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
 8000a42:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	771a      	strb	r2, [r3, #28]
			break;
 8000a52:	e014      	b.n	8000a7e <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	f023 0302 	bic.w	r3, r3, #2
 8000a62:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2202      	movs	r2, #2
 8000a68:	771a      	strb	r2, [r3, #28]
			break;
 8000a6a:	e008      	b.n	8000a7e <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	f043 0306 	orr.w	r3, r3, #6
 8000a72:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2203      	movs	r2, #3
 8000a78:	771a      	strb	r2, [r3, #28]
			break;
 8000a7a:	e000      	b.n	8000a7e <nrf24_setPALevel+0x96>

		default:
			break;
 8000a7c:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	461a      	mov	r2, r3
 8000a82:	2106      	movs	r1, #6
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f943 	bl	8000d10 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f900 	bl	8000c90 <nrf24_CE_enable>
}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f903 	bl	8000cb0 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	461a      	mov	r2, r3
 8000aae:	2105      	movs	r1, #5
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f92d 	bl	8000d10 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 f8ea 	bl	8000c90 <nrf24_CE_enable>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f983 	bl	8000dde <nrf24_readReg>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d837      	bhi.n	8000b52 <nrf24_setMode+0x8e>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <nrf24_setMode+0x24>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000af9 	.word	0x08000af9
 8000aec:	08000b09 	.word	0x08000b09
 8000af0:	08000b1f 	.word	0x08000b1f
 8000af4:	08000b3d 	.word	0x08000b3d
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f023 0302 	bic.w	r3, r3, #2
 8000afe:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	779a      	strb	r2, [r3, #30]
			break;
 8000b06:	e025      	b.n	8000b54 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f000 f8d1 	bl	8000cb0 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	779a      	strb	r2, [r3, #30]
			break;
 8000b1c:	e01a      	b.n	8000b54 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f8b6 	bl	8000c90 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	f023 0301 	bic.w	r3, r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2202      	movs	r2, #2
 8000b38:	779a      	strb	r2, [r3, #30]
			break;
 8000b3a:	e00b      	b.n	8000b54 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f8a7 	bl	8000c90 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	f043 0303 	orr.w	r3, r3, #3
 8000b48:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	779a      	strb	r2, [r3, #30]
			break;
 8000b50:	e000      	b.n	8000b54 <nrf24_setMode+0x90>

		default:
			break;
 8000b52:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	461a      	mov	r2, r3
 8000b58:	2100      	movs	r1, #0
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f8d8 	bl	8000d10 <nrf24_writeReg>
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4611      	mov	r1, r2
 8000b74:	461a      	mov	r2, r3
 8000b76:	460b      	mov	r3, r1
 8000b78:	71fb      	strb	r3, [r7, #7]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	71bb      	strb	r3, [r7, #6]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f000 f896 	bl	8000cb0 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 8000b84:	2107      	movs	r1, #7
 8000b86:	68f8      	ldr	r0, [r7, #12]
 8000b88:	f000 f956 	bl	8000e38 <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f925 	bl	8000dde <nrf24_readReg>
 8000b94:	4603      	mov	r3, r0
 8000b96:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	b25a      	sxtb	r2, r3
 8000ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	75fb      	strb	r3, [r7, #23]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 f8ac 	bl	8000d10 <nrf24_writeReg>
	/* We must write the address for Data Pipe 1, if we want to use any pipe from 2 to 5
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1
	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b05      	cmp	r3, #5
 8000bbc:	d860      	bhi.n	8000c80 <nrf24_setRxPipe+0x118>
 8000bbe:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <nrf24_setRxPipe+0x5c>)
 8000bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc4:	08000bdd 	.word	0x08000bdd
 8000bc8:	08000bf7 	.word	0x08000bf7
 8000bcc:	08000c11 	.word	0x08000c11
 8000bd0:	08000c2d 	.word	0x08000c2d
 8000bd4:	08000c49 	.word	0x08000c49
 8000bd8:	08000c65 	.word	0x08000c65
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 8000bdc:	2305      	movs	r3, #5
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	210a      	movs	r1, #10
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f000 f8bf 	bl	8000d66 <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 8000be8:	79bb      	ldrb	r3, [r7, #6]
 8000bea:	461a      	mov	r2, r3
 8000bec:	2111      	movs	r1, #17
 8000bee:	68f8      	ldr	r0, [r7, #12]
 8000bf0:	f000 f88e 	bl	8000d10 <nrf24_writeReg>
			break;
 8000bf4:	e045      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	210b      	movs	r1, #11
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f000 f8b2 	bl	8000d66 <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 8000c02:	79bb      	ldrb	r3, [r7, #6]
 8000c04:	461a      	mov	r2, r3
 8000c06:	2112      	movs	r1, #18
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f000 f881 	bl	8000d10 <nrf24_writeReg>
			break;
 8000c0e:	e038      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	210c      	movs	r1, #12
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 f879 	bl	8000d10 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2113      	movs	r1, #19
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f000 f873 	bl	8000d10 <nrf24_writeReg>
			break;
 8000c2a:	e02a      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	210d      	movs	r1, #13
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f86b 	bl	8000d10 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	2114      	movs	r1, #20
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f000 f865 	bl	8000d10 <nrf24_writeReg>
			break;
 8000c46:	e01c      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	210e      	movs	r1, #14
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f000 f85d 	bl	8000d10 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2115      	movs	r1, #21
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f857 	bl	8000d10 <nrf24_writeReg>
			break;
 8000c62:	e00e      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f000 f84f 	bl	8000d10 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	461a      	mov	r2, r3
 8000c76:	2116      	movs	r1, #22
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f000 f849 	bl	8000d10 <nrf24_writeReg>
			break;
 8000c7e:	e000      	b.n	8000c82 <nrf24_setRxPipe+0x11a>

		default:
			break;
 8000c80:	bf00      	nop
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f000 f804 	bl	8000c90 <nrf24_CE_enable>
}
 8000c88:	bf00      	nop
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6898      	ldr	r0, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	899b      	ldrh	r3, [r3, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f000 ff0a 	bl	8001abc <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6898      	ldr	r0, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	899b      	ldrh	r3, [r3, #12]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f000 fefa 	bl	8001abc <HAL_GPIO_WritePin>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f000 feea 	bl	8001abc <HAL_GPIO_WritePin>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6818      	ldr	r0, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	889b      	ldrh	r3, [r3, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	4619      	mov	r1, r3
 8000d04:	f000 feda 	bl	8001abc <HAL_GPIO_WritePin>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	f043 0320 	orr.w	r3, r3, #32
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000d2a:	78bb      	ldrb	r3, [r7, #2]
 8000d2c:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ffce 	bl	8000cd0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6998      	ldr	r0, [r3, #24]
 8000d38:	f107 010c 	add.w	r1, r7, #12
 8000d3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d40:	2202      	movs	r2, #2
 8000d42:	f003 f8b9 	bl	8003eb8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d46:	bf00      	nop
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fca2 	bl	8004696 <HAL_SPI_GetState>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d1f7      	bne.n	8000d48 <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ffc9 	bl	8000cf0 <nrf24_CSN_disable>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	461a      	mov	r2, r3
 8000d72:	460b      	mov	r3, r1
 8000d74:	72fb      	strb	r3, [r7, #11]
 8000d76:	4613      	mov	r3, r2
 8000d78:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000d7a:	7afb      	ldrb	r3, [r7, #11]
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f7ff ffa3 	bl	8000cd0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6998      	ldr	r0, [r3, #24]
 8000d8e:	f107 0114 	add.w	r1, r7, #20
 8000d92:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d96:	2201      	movs	r2, #1
 8000d98:	f003 f88e 	bl	8003eb8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000d9c:	bf00      	nop
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fc77 	bl	8004696 <HAL_SPI_GetState>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d1f7      	bne.n	8000d9e <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6998      	ldr	r0, [r3, #24]
 8000db2:	893a      	ldrh	r2, [r7, #8]
 8000db4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	f003 f87d 	bl	8003eb8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000dbe:	bf00      	nop
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 fc66 	bl	8004696 <HAL_SPI_GetState>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d1f7      	bne.n	8000dc0 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f7ff ff8d 	bl	8000cf0 <nrf24_CSN_disable>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff6e 	bl	8000cd0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6998      	ldr	r0, [r3, #24]
 8000df8:	1cf9      	adds	r1, r7, #3
 8000dfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f003 f85a 	bl	8003eb8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000e04:	bf00      	nop
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 fc43 	bl	8004696 <HAL_SPI_GetState>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d1f7      	bne.n	8000e06 <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6998      	ldr	r0, [r3, #24]
 8000e1a:	f107 010f 	add.w	r1, r7, #15
 8000e1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e22:	2201      	movs	r2, #1
 8000e24:	f003 f984 	bl	8004130 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff61 	bl	8000cf0 <nrf24_CSN_disable>
	return data;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <nrf24_reset>:
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b07      	cmp	r3, #7
 8000e48:	d105      	bne.n	8000e56 <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff5e 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000e54:	e0a8      	b.n	8000fa8 <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	2b17      	cmp	r3, #23
 8000e5a:	d105      	bne.n	8000e68 <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000e5c:	2211      	movs	r2, #17
 8000e5e:	2117      	movs	r1, #23
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff55 	bl	8000d10 <nrf24_writeReg>
}
 8000e66:	e09f      	b.n	8000fa8 <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 8000e68:	2208      	movs	r2, #8
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff4f 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8000e72:	223f      	movs	r2, #63	; 0x3f
 8000e74:	2101      	movs	r1, #1
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff4a 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	2102      	movs	r1, #2
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff45 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8000e86:	2203      	movs	r2, #3
 8000e88:	2103      	movs	r1, #3
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ff40 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8000e90:	2203      	movs	r2, #3
 8000e92:	2104      	movs	r1, #4
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff3b 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	2105      	movs	r1, #5
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff36 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8000ea4:	220e      	movs	r2, #14
 8000ea6:	2106      	movs	r1, #6
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff31 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2107      	movs	r1, #7
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff2c 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2108      	movs	r1, #8
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff27 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2109      	movs	r1, #9
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff22 	bl	8000d10 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000ecc:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <nrf24_reset+0x178>)
 8000ece:	f107 0318 	add.w	r3, r7, #24
 8000ed2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed6:	6018      	str	r0, [r3, #0]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000edc:	f107 0218 	add.w	r2, r7, #24
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	210a      	movs	r1, #10
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff3e 	bl	8000d66 <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000eea:	4a32      	ldr	r2, [pc, #200]	; (8000fb4 <nrf24_reset+0x17c>)
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	6018      	str	r0, [r3, #0]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000efa:	f107 0210 	add.w	r2, r7, #16
 8000efe:	2305      	movs	r3, #5
 8000f00:	210b      	movs	r1, #11
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff2f 	bl	8000d66 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000f08:	22c3      	movs	r2, #195	; 0xc3
 8000f0a:	210c      	movs	r1, #12
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff feff 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000f12:	22c4      	movs	r2, #196	; 0xc4
 8000f14:	210d      	movs	r1, #13
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fefa 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000f1c:	22c5      	movs	r2, #197	; 0xc5
 8000f1e:	210e      	movs	r1, #14
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fef5 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000f26:	22c6      	movs	r2, #198	; 0xc6
 8000f28:	210f      	movs	r1, #15
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fef0 	bl	8000d10 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000f30:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <nrf24_reset+0x178>)
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f3a:	6018      	str	r0, [r3, #0]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	2305      	movs	r3, #5
 8000f46:	2110      	movs	r1, #16
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff0c 	bl	8000d66 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2111      	movs	r1, #17
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff fedc 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2112      	movs	r1, #18
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fed7 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2113      	movs	r1, #19
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff fed2 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2114      	movs	r1, #20
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fecd 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2115      	movs	r1, #21
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fec8 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2116      	movs	r1, #22
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fec3 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000f8a:	2211      	movs	r2, #17
 8000f8c:	2117      	movs	r1, #23
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff febe 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	211c      	movs	r1, #28
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff feb9 	bl	8000d10 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	211d      	movs	r1, #29
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff feb4 	bl	8000d10 <nrf24_writeReg>
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800af1c 	.word	0x0800af1c
 8000fb4:	0800af24 	.word	0x0800af24

08000fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6193      	str	r3, [r2, #24]
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_MspInit+0x40>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1b      	ldr	r2, [pc, #108]	; (8001084 <HAL_SPI_MspInit+0x88>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d12f      	bne.n	800107c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_SPI_MspInit+0x8c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0304 	and.w	r3, r3, #4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4619      	mov	r1, r3
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <HAL_SPI_MspInit+0x90>)
 8001060:	f000 fba8 	bl	80017b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	4619      	mov	r1, r3
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <HAL_SPI_MspInit+0x90>)
 8001078:	f000 fb9c 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40013000 	.word	0x40013000
 8001088:	40021000 	.word	0x40021000
 800108c:	40010800 	.word	0x40010800

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <HAL_TIM_Base_MspInit+0x58>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d10c      	bne.n	80010bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ba:	e010      	b.n	80010de <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_TIM_Base_MspInit+0x60>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_TIM_Base_MspInit+0x5c>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40000400 	.word	0x40000400

080010f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001112:	d12c      	bne.n	800116e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	61d3      	str	r3, [r2, #28]
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a29      	ldr	r2, [pc, #164]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001144:	2303      	movs	r3, #3
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4619      	mov	r1, r3
 8001156:	4821      	ldr	r0, [pc, #132]	; (80011dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8001158:	f000 fb2c 	bl	80017b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	201c      	movs	r0, #28
 8001162:	f000 faf0 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001166:	201c      	movs	r0, #28
 8001168:	f000 fb09 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800116c:	e030      	b.n	80011d0 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d12b      	bne.n	80011d0 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_TIM_Encoder_MspInit+0xe4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a8:	23c0      	movs	r3, #192	; 0xc0
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4619      	mov	r1, r3
 80011ba:	480a      	ldr	r0, [pc, #40]	; (80011e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80011bc:	f000 fafa 	bl	80017b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	201e      	movs	r0, #30
 80011c6:	f000 fabe 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011ca:	201e      	movs	r0, #30
 80011cc:	f000 fad7 	bl	800177e <HAL_NVIC_EnableIRQ>
}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40000800 	.word	0x40000800
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	; 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <HAL_TIM_MspPostInit+0xbc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d119      	bne.n	800123c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2302      	movs	r3, #2
 800122c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <HAL_TIM_MspPostInit+0xc4>)
 8001236:	f000 fabd 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800123a:	e02e      	b.n	800129a <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <HAL_TIM_MspPostInit+0xc8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d129      	bne.n	800129a <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6193      	str	r3, [r2, #24]
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_TIM_MspPostInit+0xc0>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800125e:	2330      	movs	r3, #48	; 0x30
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <HAL_TIM_MspPostInit+0xcc>)
 8001272:	f000 fa9f 	bl	80017b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_TIM_MspPostInit+0xd0>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_TIM_MspPostInit+0xd0>)
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	6053      	str	r3, [r2, #4]
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40010800 	.word	0x40010800
 80012b0:	40000400 	.word	0x40000400
 80012b4:	40010c00 	.word	0x40010c00
 80012b8:	40010000 	.word	0x40010000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8001304:	4b29      	ldr	r3, [pc, #164]	; (80013ac <SysTick_Handler+0xac>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <SysTick_Handler+0xac>)
 800130c:	6013      	str	r3, [r2, #0]
		if (indx == 500)
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <SysTick_Handler+0xac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001316:	d144      	bne.n	80013a2 <SysTick_Handler+0xa2>
		{
			speed = ((position - oldpos)*2);  // speed in clicks/sec
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SysTick_Handler+0xb0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <SysTick_Handler+0xb4>)
 800131e:	8812      	ldrh	r2, [r2, #0]
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	b29b      	uxth	r3, r3
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <SysTick_Handler+0xb8>)
 800132c:	801a      	strh	r2, [r3, #0]
			oldpos = position;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <SysTick_Handler+0xb0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <SysTick_Handler+0xb4>)
 8001336:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e1: %d\n",speed);
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <SysTick_Handler+0xb8>)
 800133a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133e:	461a      	mov	r2, r3
 8001340:	491e      	ldr	r1, [pc, #120]	; (80013bc <SysTick_Handler+0xbc>)
 8001342:	481f      	ldr	r0, [pc, #124]	; (80013c0 <SysTick_Handler+0xc0>)
 8001344:	f009 f964 	bl	800a610 <siprintf>
			CDC_Transmit_FS(buffer, strlen(buffer));
 8001348:	481d      	ldr	r0, [pc, #116]	; (80013c0 <SysTick_Handler+0xc0>)
 800134a:	f7fe feff 	bl	800014c <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29b      	uxth	r3, r3
 8001352:	4619      	mov	r1, r3
 8001354:	481a      	ldr	r0, [pc, #104]	; (80013c0 <SysTick_Handler+0xc0>)
 8001356:	f008 fd4b 	bl	8009df0 <CDC_Transmit_FS>

			speed2 = ((position2 - oldpos2)*2);  // speed in clicks/sec
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <SysTick_Handler+0xc4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <SysTick_Handler+0xc8>)
 8001360:	8812      	ldrh	r2, [r2, #0]
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	b29b      	uxth	r3, r3
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <SysTick_Handler+0xcc>)
 800136e:	801a      	strh	r2, [r3, #0]
			oldpos2 = position2;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <SysTick_Handler+0xc4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <SysTick_Handler+0xc8>)
 8001378:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e2: %d\n",speed2);
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <SysTick_Handler+0xcc>)
 800137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001380:	461a      	mov	r2, r3
 8001382:	4913      	ldr	r1, [pc, #76]	; (80013d0 <SysTick_Handler+0xd0>)
 8001384:	480e      	ldr	r0, [pc, #56]	; (80013c0 <SysTick_Handler+0xc0>)
 8001386:	f009 f943 	bl	800a610 <siprintf>
			CDC_Transmit_FS(buffer, strlen(buffer));
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <SysTick_Handler+0xc0>)
 800138c:	f7fe fede 	bl	800014c <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29b      	uxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	480a      	ldr	r0, [pc, #40]	; (80013c0 <SysTick_Handler+0xc0>)
 8001398:	f008 fd2a 	bl	8009df0 <CDC_Transmit_FS>

			indx = 0;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <SysTick_Handler+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		}



  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a2:	f000 f8dd 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200003cc 	.word	0x200003cc
 80013b0:	200003ba 	.word	0x200003ba
 80013b4:	200003d0 	.word	0x200003d0
 80013b8:	200003bc 	.word	0x200003bc
 80013bc:	0800af2c 	.word	0x0800af2c
 80013c0:	200003d4 	.word	0x200003d4
 80013c4:	200003c6 	.word	0x200003c6
 80013c8:	200003d2 	.word	0x200003d2
 80013cc:	200003c8 	.word	0x200003c8
 80013d0:	0800af34 	.word	0x0800af34

080013d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80013da:	f000 fcb8 	bl	8001d4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20001088 	.word	0x20001088

080013e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <TIM2_IRQHandler+0x10>)
 80013ee:	f003 fcf1 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002bc 	.word	0x200002bc

080013fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM4_IRQHandler+0x10>)
 8001402:	f003 fce7 	bl	8004dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000034c 	.word	0x2000034c

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f009 f8b4 	bl	800a5ac <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20005000 	.word	0x20005000
 8001470:	00000400 	.word	0x00000400
 8001474:	200003e8 	.word	0x200003e8
 8001478:	200015a8 	.word	0x200015a8

0800147c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	; (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffe5 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f009 f881 	bl	800a5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7fe fe93 	bl	80001e0 <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80014c4:	0800afe0 	.word	0x0800afe0
  ldr r2, =_sbss
 80014c8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80014cc:	200015a4 	.word	0x200015a4

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f923 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	200f      	movs	r0, #15
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fd62 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f93b 	bl	800179a <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f903 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000020 	.word	0x20000020
 8001558:	20000028 	.word	0x20000028
 800155c:	20000024 	.word	0x20000024

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000028 	.word	0x20000028
 8001580:	200003ec 	.word	0x200003ec

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200003ec 	.word	0x200003ec

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4906      	ldr	r1, [pc, #24]	; (8001630 <__NVIC_EnableIRQ+0x34>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff90 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2d 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff42 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff35 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b08b      	sub	sp, #44	; 0x2c
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e169      	b.n	8001a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c8:	2201      	movs	r2, #1
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 8158 	bne.w	8001a96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a9a      	ldr	r2, [pc, #616]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d05e      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017f0:	4a98      	ldr	r2, [pc, #608]	; (8001a54 <HAL_GPIO_Init+0x2a0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d875      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 80017f6:	4a98      	ldr	r2, [pc, #608]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d058      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 80017fc:	4a96      	ldr	r2, [pc, #600]	; (8001a58 <HAL_GPIO_Init+0x2a4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d86f      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001802:	4a96      	ldr	r2, [pc, #600]	; (8001a5c <HAL_GPIO_Init+0x2a8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d052      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001808:	4a94      	ldr	r2, [pc, #592]	; (8001a5c <HAL_GPIO_Init+0x2a8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d869      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800180e:	4a94      	ldr	r2, [pc, #592]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04c      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001814:	4a92      	ldr	r2, [pc, #584]	; (8001a60 <HAL_GPIO_Init+0x2ac>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d863      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800181a:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d046      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
 8001820:	4a90      	ldr	r2, [pc, #576]	; (8001a64 <HAL_GPIO_Init+0x2b0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d85d      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d82a      	bhi.n	8001880 <HAL_GPIO_Init+0xcc>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d859      	bhi.n	80018e2 <HAL_GPIO_Init+0x12e>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <HAL_GPIO_Init+0x80>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	080018af 	.word	0x080018af
 8001838:	08001889 	.word	0x08001889
 800183c:	0800189b 	.word	0x0800189b
 8001840:	080018dd 	.word	0x080018dd
 8001844:	080018e3 	.word	0x080018e3
 8001848:	080018e3 	.word	0x080018e3
 800184c:	080018e3 	.word	0x080018e3
 8001850:	080018e3 	.word	0x080018e3
 8001854:	080018e3 	.word	0x080018e3
 8001858:	080018e3 	.word	0x080018e3
 800185c:	080018e3 	.word	0x080018e3
 8001860:	080018e3 	.word	0x080018e3
 8001864:	080018e3 	.word	0x080018e3
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018e3 	.word	0x080018e3
 8001870:	080018e3 	.word	0x080018e3
 8001874:	080018e3 	.word	0x080018e3
 8001878:	08001891 	.word	0x08001891
 800187c:	080018a5 	.word	0x080018a5
 8001880:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_GPIO_Init+0x2b4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001886:	e02c      	b.n	80018e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	623b      	str	r3, [r7, #32]
          break;
 800188e:	e029      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	3304      	adds	r3, #4
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e024      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	3308      	adds	r3, #8
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e01f      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	330c      	adds	r3, #12
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e01a      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b6:	2304      	movs	r3, #4
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e013      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	611a      	str	r2, [r3, #16]
          break;
 80018ce:	e009      	b.n	80018e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	615a      	str	r2, [r3, #20]
          break;
 80018da:	e003      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x130>
          break;
 80018e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2bff      	cmp	r3, #255	; 0xff
 80018e8:	d801      	bhi.n	80018ee <HAL_GPIO_Init+0x13a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_Init+0x13e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3304      	adds	r3, #4
 80018f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d802      	bhi.n	8001900 <HAL_GPIO_Init+0x14c>
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	e002      	b.n	8001906 <HAL_GPIO_Init+0x152>
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	3b08      	subs	r3, #8
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	210f      	movs	r1, #15
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	401a      	ands	r2, r3
 8001918:	6a39      	ldr	r1, [r7, #32]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	431a      	orrs	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80b1 	beq.w	8001a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b4d      	ldr	r3, [pc, #308]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_GPIO_Init+0x2b8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800194c:	4a48      	ldr	r2, [pc, #288]	; (8001a70 <HAL_GPIO_Init+0x2bc>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <HAL_GPIO_Init+0x2c0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d013      	beq.n	80019a0 <HAL_GPIO_Init+0x1ec>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <HAL_GPIO_Init+0x2c4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00d      	beq.n	800199c <HAL_GPIO_Init+0x1e8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <HAL_GPIO_Init+0x2c8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d007      	beq.n	8001998 <HAL_GPIO_Init+0x1e4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d101      	bne.n	8001994 <HAL_GPIO_Init+0x1e0>
 8001990:	2303      	movs	r3, #3
 8001992:	e006      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 8001994:	2304      	movs	r3, #4
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 8001998:	2302      	movs	r3, #2
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1ee>
 80019a0:	2300      	movs	r3, #0
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b2:	492f      	ldr	r1, [pc, #188]	; (8001a70 <HAL_GPIO_Init+0x2bc>)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	492c      	ldr	r1, [pc, #176]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019da:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4928      	ldr	r1, [pc, #160]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	491e      	ldr	r1, [pc, #120]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4918      	ldr	r1, [pc, #96]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4914      	ldr	r1, [pc, #80]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d021      	beq.n	8001a88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	490e      	ldr	r1, [pc, #56]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e021      	b.n	8001a96 <HAL_GPIO_Init+0x2e2>
 8001a52:	bf00      	nop
 8001a54:	10320000 	.word	0x10320000
 8001a58:	10310000 	.word	0x10310000
 8001a5c:	10220000 	.word	0x10220000
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40011400 	.word	0x40011400
 8001a84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4909      	ldr	r1, [pc, #36]	; (8001ab8 <HAL_GPIO_Init+0x304>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f47f ae8e 	bne.w	80017c8 <HAL_GPIO_Init+0x14>
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	372c      	adds	r7, #44	; 0x2c
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	611a      	str	r2, [r3, #16]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af06      	add	r7, sp, #24
 8001af2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0fd      	b.n	8001cfa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f008 faa0 	bl	800a058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 ff8e 	bl	8005a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	687e      	ldr	r6, [r7, #4]
 8001b32:	466d      	mov	r5, sp
 8001b34:	f106 0410 	add.w	r4, r6, #16
 8001b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	602b      	str	r3, [r5, #0]
 8001b40:	1d33      	adds	r3, r6, #4
 8001b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f003 ff58 	bl	80059fa <USB_CoreInit>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0ce      	b.n	8001cfa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f003 ff89 	bl	8005a7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
 8001b6c:	e04c      	b.n	8001c08 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3301      	adds	r3, #1
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	b298      	uxth	r0, r3
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3336      	adds	r3, #54	; 0x36
 8001bac:	4602      	mov	r2, r0
 8001bae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3338      	adds	r3, #56	; 0x38
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	333c      	adds	r3, #60	; 0x3c
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3340      	adds	r3, #64	; 0x40
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d3ad      	bcc.n	8001b6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e044      	b.n	8001ca2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	440b      	add	r3, r1
 8001c26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3b5      	bcc.n	8001c18 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	687e      	ldr	r6, [r7, #4]
 8001cb4:	466d      	mov	r5, sp
 8001cb6:	f106 0410 	add.w	r4, r6, #16
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	602b      	str	r3, [r5, #0]
 8001cc2:	1d33      	adds	r3, r6, #4
 8001cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	f003 fee3 	bl	8005a92 <USB_DevInit>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00d      	b.n	8001cfa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 fb96 	bl	8008424 <USB_DevDisconnect>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_PCD_Start+0x16>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e016      	b.n	8001d46 <HAL_PCD_Start+0x44>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fe78 	bl	8005a1a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f008 fc06 	bl	800a53e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f006 fb6a 	bl	8008410 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b088      	sub	sp, #32
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 fb6c 	bl	8008438 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fb5f 	bl	8002430 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 fb5e 	bl	8008438 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d112      	bne.n	8001dae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f008 f9d4 	bl	800a14e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001da6:	2100      	movs	r1, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f923 	bl	8001ff4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 fb40 	bl	8008438 <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f006 fb29 	bl	8008438 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df0:	d10b      	bne.n	8001e0a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 fb12 	bl	8008438 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1e:	d126      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f008 f9b5 	bl	800a1c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f006 fae0 	bl	8008438 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e82:	f040 8082 	bne.w	8001f8a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	77fb      	strb	r3, [r7, #31]
 8001e8a:	e010      	b.n	8001eae <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	7ffb      	ldrb	r3, [r7, #31]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	441a      	add	r2, r3
 8001e98:	7ffb      	ldrb	r3, [r7, #31]
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	3320      	adds	r3, #32
 8001ea2:	443b      	add	r3, r7
 8001ea4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ea8:	7ffb      	ldrb	r3, [r7, #31]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	77fb      	strb	r3, [r7, #31]
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b07      	cmp	r3, #7
 8001eb2:	d9eb      	bls.n	8001e8c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001ee4:	bf00      	nop
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f6      	beq.n	8001ee6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
 8001f14:	e00f      	b.n	8001f36 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	7ffa      	ldrb	r2, [r7, #31]
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	440a      	add	r2, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	3320      	adds	r3, #32
 8001f28:	443b      	add	r3, r7
 8001f2a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f2e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	3301      	adds	r3, #1
 8001f34:	77fb      	strb	r3, [r7, #31]
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d9ec      	bls.n	8001f16 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	b292      	uxth	r2, r2
 8001f50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f66:	b292      	uxth	r2, r2
 8001f68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0204 	orr.w	r2, r2, #4
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f008 f901 	bl	800a18c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f006 fa52 	bl	8008438 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9e:	d10e      	bne.n	8001fbe <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb2:	b292      	uxth	r2, r2
 8001fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f008 f8ba 	bl	800a132 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f006 fa38 	bl	8008438 <USB_ReadInterrupts>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fd2:	d10b      	bne.n	8001fec <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe6:	b292      	uxth	r2, r2
 8001fe8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_PCD_SetAddress+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e013      	b.n	8002036 <HAL_PCD_SetAddress+0x42>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f006 f9df 	bl	80083ea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	4608      	mov	r0, r1
 8002048:	4611      	mov	r1, r2
 800204a:	461a      	mov	r2, r3
 800204c:	4603      	mov	r3, r0
 800204e:	70fb      	strb	r3, [r7, #3]
 8002050:	460b      	mov	r3, r1
 8002052:	803b      	strh	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800205c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da0e      	bge.n	8002082 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	705a      	strb	r2, [r3, #1]
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0207 	and.w	r2, r3, #7
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020ac:	883a      	ldrh	r2, [r7, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	78ba      	ldrb	r2, [r7, #2]
 80020b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020ca:	78bb      	ldrb	r3, [r7, #2]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d102      	bne.n	80020d6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_PCD_EP_Open+0xa6>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e00e      	b.n	8002102 <HAL_PCD_EP_Open+0xc4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68f9      	ldr	r1, [r7, #12]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f003 fcee 	bl	8005ad4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002100:	7afb      	ldrb	r3, [r7, #11]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	460b      	mov	r3, r1
 8002114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800211a:	2b00      	cmp	r3, #0
 800211c:	da0e      	bge.n	800213c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	705a      	strb	r2, [r3, #1]
 800213a:	e00e      	b.n	800215a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_PCD_EP_Close+0x6a>
 8002170:	2302      	movs	r3, #2
 8002172:	e00e      	b.n	8002192 <HAL_PCD_EP_Close+0x88>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68f9      	ldr	r1, [r7, #12]
 8002182:	4618      	mov	r0, r3
 8002184:	f004 f810 	bl	80061a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	f003 0207 	and.w	r2, r3, #7
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2200      	movs	r2, #0
 80021d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6979      	ldr	r1, [r7, #20]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 f9c2 	bl	8006580 <USB_EPStartXfer>
 80021fc:	e005      	b.n	800220a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6979      	ldr	r1, [r7, #20]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f9bb 	bl	8006580 <USB_EPStartXfer>
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	460b      	mov	r3, r1
 8002250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002252:	7afb      	ldrb	r3, [r7, #11]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	2201      	movs	r2, #1
 800228c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	b2da      	uxtb	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6979      	ldr	r1, [r7, #20]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 f968 	bl	8006580 <USB_EPStartXfer>
 80022b0:	e005      	b.n	80022be <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f004 f961 	bl	8006580 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f003 0207 	and.w	r2, r3, #7
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d901      	bls.n	80022e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e04c      	b.n	8002380 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0e      	bge.n	800230c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
 800230a:	e00c      	b.n	8002326 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_EP_SetStall+0x7e>
 8002342:	2302      	movs	r3, #2
 8002344:	e01c      	b.n	8002380 <HAL_PCD_EP_SetStall+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f005 ff4b 	bl	80081f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800236e:	4619      	mov	r1, r3
 8002370:	4610      	mov	r0, r2
 8002372:	f006 f870 	bl	8008456 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d901      	bls.n	80023a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e040      	b.n	8002428 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da0e      	bge.n	80023cc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	705a      	strb	r2, [r3, #1]
 80023ca:	e00e      	b.n	80023ea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0207 	and.w	r2, r3, #7
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_PCD_EP_ClrStall+0x82>
 8002406:	2302      	movs	r3, #2
 8002408:	e00e      	b.n	8002428 <HAL_PCD_EP_ClrStall+0xa0>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68f9      	ldr	r1, [r7, #12]
 8002418:	4618      	mov	r0, r3
 800241a:	f005 ff39 	bl	8008290 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08e      	sub	sp, #56	; 0x38
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002438:	e2ec      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002442:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002450:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 8161 	bne.w	800271c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800245a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d152      	bne.n	800250a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	b29b      	uxth	r3, r3
 800246c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002474:	81fb      	strh	r3, [r7, #14]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002484:	b29b      	uxth	r3, r3
 8002486:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3328      	adds	r3, #40	; 0x28
 800248c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002496:	b29b      	uxth	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	3302      	adds	r3, #2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	441a      	add	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024c8:	2100      	movs	r1, #0
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f007 fe17 	bl	800a0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 829b 	beq.w	8002a14 <PCD_EP_ISR_Handler+0x5e4>
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 8296 	bne.w	8002a14 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	b292      	uxth	r2, r2
 80024fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002508:	e284      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800251a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800251c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002520:	2b00      	cmp	r3, #0
 8002522:	d034      	beq.n	800258e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800252c:	b29b      	uxth	r3, r3
 800252e:	461a      	mov	r2, r3
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	3306      	adds	r3, #6
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002562:	b29b      	uxth	r3, r3
 8002564:	f005 ffc7 	bl	80084f6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29a      	uxth	r2, r3
 8002570:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002574:	4013      	ands	r3, r2
 8002576:	823b      	strh	r3, [r7, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	8a3a      	ldrh	r2, [r7, #16]
 800257e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002582:	b292      	uxth	r2, r2
 8002584:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f007 fd8c 	bl	800a0a4 <HAL_PCD_SetupStageCallback>
 800258c:	e242      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800258e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002592:	2b00      	cmp	r3, #0
 8002594:	f280 823e 	bge.w	8002a14 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a4:	4013      	ands	r3, r2
 80025a6:	83bb      	strh	r3, [r7, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	8bba      	ldrh	r2, [r7, #28]
 80025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025be:	b29b      	uxth	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	3306      	adds	r3, #6
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <PCD_EP_ISR_Handler+0x1ee>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	6959      	ldr	r1, [r3, #20]
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002602:	b29b      	uxth	r3, r3
 8002604:	f005 ff77 	bl	80084f6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	441a      	add	r2, r3
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f007 fd55 	bl	800a0c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 81f2 	bne.w	8002a14 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4413      	add	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d112      	bne.n	800267e <PCD_EP_ISR_Handler+0x24e>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002662:	b29a      	uxth	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	801a      	strh	r2, [r3, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002676:	b29a      	uxth	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e02f      	b.n	80026de <PCD_EP_ISR_Handler+0x2ae>
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b3e      	cmp	r3, #62	; 0x3e
 8002684:	d813      	bhi.n	80026ae <PCD_EP_ISR_Handler+0x27e>
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	633b      	str	r3, [r7, #48]	; 0x30
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <PCD_EP_ISR_Handler+0x270>
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	3301      	adds	r3, #1
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	801a      	strh	r2, [r3, #0]
 80026ac:	e017      	b.n	80026de <PCD_EP_ISR_Handler+0x2ae>
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <PCD_EP_ISR_Handler+0x298>
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	3b01      	subs	r3, #1
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	029b      	lsls	r3, r3, #10
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d8:	b29a      	uxth	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	827b      	strh	r3, [r7, #18]
 80026f0:	8a7b      	ldrh	r3, [r7, #18]
 80026f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026f6:	827b      	strh	r3, [r7, #18]
 80026f8:	8a7b      	ldrh	r3, [r7, #18]
 80026fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026fe:	827b      	strh	r3, [r7, #18]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	8a7b      	ldrh	r3, [r7, #18]
 8002706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800270e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	b29b      	uxth	r3, r3
 8002718:	8013      	strh	r3, [r2, #0]
 800271a:	e17b      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800272e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002732:	2b00      	cmp	r3, #0
 8002734:	f280 80ea 	bge.w	800290c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	b29a      	uxth	r2, r3
 800274a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800274e:	4013      	ands	r3, r2
 8002750:	853b      	strh	r3, [r7, #40]	; 0x28
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002766:	b292      	uxth	r2, r2
 8002768:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800276a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	7b1b      	ldrb	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d122      	bne.n	80027ce <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	3306      	adds	r3, #6
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80027b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8087 	beq.w	80028c8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	88da      	ldrh	r2, [r3, #6]
 80027c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027c8:	f005 fe95 	bl	80084f6 <USB_ReadPMA>
 80027cc:	e07c      	b.n	80028c8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	78db      	ldrb	r3, [r3, #3]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d108      	bne.n	80027e8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027d8:	461a      	mov	r2, r3
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f927 	bl	8002a30 <HAL_PCD_EP_DB_Receive>
 80027e2:	4603      	mov	r3, r0
 80027e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027e6:	e06f      	b.n	80028c8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002802:	847b      	strh	r3, [r7, #34]	; 0x22
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	441a      	add	r2, r3
 8002812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002820:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002824:	b29b      	uxth	r3, r3
 8002826:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d021      	beq.n	8002886 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	3302      	adds	r3, #2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800286a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800286c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800286e:	2b00      	cmp	r3, #0
 8002870:	d02a      	beq.n	80028c8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	6959      	ldr	r1, [r3, #20]
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	891a      	ldrh	r2, [r3, #8]
 800287e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002880:	f005 fe39 	bl	80084f6 <USB_ReadPMA>
 8002884:	e020      	b.n	80028c8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	3306      	adds	r3, #6
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	6959      	ldr	r1, [r3, #20]
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	895a      	ldrh	r2, [r3, #10]
 80028c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c4:	f005 fe17 	bl	80084f6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ce:	441a      	add	r2, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028da:	441a      	add	r2, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <PCD_EP_ISR_Handler+0x4c2>
 80028e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d206      	bcs.n	8002900 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f007 fbe5 	bl	800a0c8 <HAL_PCD_DataOutStageCallback>
 80028fe:	e005      	b.n	800290c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f003 fe3a 	bl	8006580 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800290c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07e      	beq.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002944:	843b      	strh	r3, [r7, #32]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	441a      	add	r2, r3
 8002954:	8c3b      	ldrh	r3, [r7, #32]
 8002956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	78db      	ldrb	r3, [r3, #3]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d00c      	beq.n	8002984 <PCD_EP_ISR_Handler+0x554>
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002976:	2b02      	cmp	r3, #2
 8002978:	d146      	bne.n	8002a08 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800297a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d141      	bne.n	8002a08 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	3302      	adds	r3, #2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ac:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	8bfb      	ldrh	r3, [r7, #30]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d906      	bls.n	80029c6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	8bfb      	ldrh	r3, [r7, #30]
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	619a      	str	r2, [r3, #24]
 80029c4:	e002      	b.n	80029cc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d106      	bne.n	80029e2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f007 fb8f 	bl	800a0fe <HAL_PCD_DataInStageCallback>
 80029e0:	e018      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	8bfb      	ldrh	r3, [r7, #30]
 80029e8:	441a      	add	r2, r3
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	8bfb      	ldrh	r3, [r7, #30]
 80029f4:	441a      	add	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 fdbd 	bl	8006580 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a06:	e005      	b.n	8002a14 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f91b 	bl	8002c4a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f6ff ad0a 	blt.w	800243a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d07e      	beq.n	8002b46 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	8b7b      	ldrh	r3, [r7, #26]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d306      	bcc.n	8002a8a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	8b7b      	ldrh	r3, [r7, #26]
 8002a82:	1ad2      	subs	r2, r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	619a      	str	r2, [r3, #24]
 8002a88:	e002      	b.n	8002a90 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d123      	bne.n	8002ae0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	833b      	strh	r3, [r7, #24]
 8002ab4:	8b3b      	ldrh	r3, [r7, #24]
 8002ab6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002aba:	833b      	strh	r3, [r7, #24]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	441a      	add	r2, r3
 8002aca:	8b3b      	ldrh	r3, [r7, #24]
 8002acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01f      	beq.n	8002b2a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	82fb      	strh	r3, [r7, #22]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	8afb      	ldrh	r3, [r7, #22]
 8002b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b2a:	8b7b      	ldrh	r3, [r7, #26]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8087 	beq.w	8002c40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	6959      	ldr	r1, [r3, #20]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	891a      	ldrh	r2, [r3, #8]
 8002b3e:	8b7b      	ldrh	r3, [r7, #26]
 8002b40:	f005 fcd9 	bl	80084f6 <USB_ReadPMA>
 8002b44:	e07c      	b.n	8002c40 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	3306      	adds	r3, #6
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	8b7b      	ldrh	r3, [r7, #26]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d306      	bcc.n	8002b88 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	8b7b      	ldrh	r3, [r7, #26]
 8002b80:	1ad2      	subs	r2, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	619a      	str	r2, [r3, #24]
 8002b86:	e002      	b.n	8002b8e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d123      	bne.n	8002bde <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb0:	83fb      	strh	r3, [r7, #30]
 8002bb2:	8bfb      	ldrh	r3, [r7, #30]
 8002bb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002bb8:	83fb      	strh	r3, [r7, #30]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	441a      	add	r2, r3
 8002bc8:	8bfb      	ldrh	r3, [r7, #30]
 8002bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11f      	bne.n	8002c28 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c02:	83bb      	strh	r3, [r7, #28]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	441a      	add	r2, r3
 8002c12:	8bbb      	ldrh	r3, [r7, #28]
 8002c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	6959      	ldr	r1, [r3, #20]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	895a      	ldrh	r2, [r3, #10]
 8002c3a:	8b7b      	ldrh	r3, [r7, #26]
 8002c3c:	f005 fc5b 	bl	80084f6 <USB_ReadPMA>
    }
  }

  return count;
 8002c40:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b0a2      	sub	sp, #136	; 0x88
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 81c7 	beq.w	8002ff2 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d907      	bls.n	8002cac <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca4:	1ad2      	subs	r2, r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	619a      	str	r2, [r3, #24]
 8002caa:	e002      	b.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 80b9 	bne.w	8002e2e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d126      	bne.n	8002d12 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	4413      	add	r3, r2
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	011a      	lsls	r2, r3, #4
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	e01a      	b.n	8002d48 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d116      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	4413      	add	r3, r2
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	011a      	lsls	r2, r3, #4
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	2200      	movs	r2, #0
 8002d46:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	623b      	str	r3, [r7, #32]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d126      	bne.n	8002da4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	011a      	lsls	r2, r3, #4
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	e017      	b.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	785b      	ldrb	r3, [r3, #1]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d113      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	4413      	add	r3, r2
 8002dbc:	623b      	str	r3, [r7, #32]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	011a      	lsls	r2, r3, #4
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f007 f98f 	bl	800a0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 82d4 	beq.w	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	827b      	strh	r3, [r7, #18]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	8a7b      	ldrh	r3, [r7, #18]
 8002e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8013      	strh	r3, [r2, #0]
 8002e2c:	e2b2      	b.n	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d021      	beq.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	f040 8286 	bne.w	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e90:	441a      	add	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e9e:	441a      	add	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d309      	bcc.n	8002ec4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ebc:	1ad2      	subs	r2, r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	621a      	str	r2, [r3, #32]
 8002ec2:	e015      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002eda:	e009      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2200      	movs	r2, #0
 8002eee:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	785b      	ldrb	r3, [r3, #1]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d155      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	461a      	mov	r2, r3
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	4413      	add	r3, r2
 8002f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	011a      	lsls	r2, r3, #4
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	4413      	add	r3, r2
 8002f1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d112      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x302>
 8002f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	e047      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x392>
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f50:	d811      	bhi.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	085b      	lsrs	r3, r3, #1
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	3301      	adds	r3, #1
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	029b      	lsls	r3, r3, #10
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	e032      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x392>
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x342>
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e01b      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x392>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d117      	bne.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x392>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc0:	4413      	add	r3, r2
 8002fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	011a      	lsls	r2, r3, #4
 8002fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fcc:	4413      	add	r3, r2
 8002fce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fda:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6959      	ldr	r1, [r3, #20]
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	891a      	ldrh	r2, [r3, #8]
 8002fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f005 fa3e 	bl	800846c <USB_WritePMA>
 8002ff0:	e1d0      	b.n	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	3306      	adds	r3, #6
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800301a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003026:	429a      	cmp	r2, r3
 8003028:	d307      	bcc.n	800303a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	619a      	str	r2, [r3, #24]
 8003038:	e002      	b.n	8003040 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 80c4 	bne.w	80031d2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	785b      	ldrb	r3, [r3, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d126      	bne.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x456>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003060:	b29b      	uxth	r3, r3
 8003062:	461a      	mov	r2, r3
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	4413      	add	r3, r2
 8003068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	011a      	lsls	r2, r3, #4
 8003070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003072:	4413      	add	r3, r2
 8003074:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003078:	66bb      	str	r3, [r7, #104]	; 0x68
 800307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003084:	b29a      	uxth	r2, r3
 8003086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29b      	uxth	r3, r3
 8003090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003098:	b29a      	uxth	r2, r3
 800309a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e01a      	b.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	785b      	ldrb	r3, [r3, #1]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d116      	bne.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	677b      	str	r3, [r7, #116]	; 0x74
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030bc:	4413      	add	r3, r2
 80030be:	677b      	str	r3, [r7, #116]	; 0x74
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	011a      	lsls	r2, r3, #4
 80030c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c8:	4413      	add	r3, r2
 80030ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ce:	673b      	str	r3, [r7, #112]	; 0x70
 80030d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d2:	2200      	movs	r2, #0
 80030d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	67bb      	str	r3, [r7, #120]	; 0x78
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d12f      	bne.n	8003144 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030fc:	4413      	add	r3, r2
 80030fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	011a      	lsls	r2, r3, #4
 8003108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800310c:	4413      	add	r3, r2
 800310e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003122:	b29a      	uxth	r2, r3
 8003124:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800313a:	b29a      	uxth	r2, r3
 800313c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003140:	801a      	strh	r2, [r3, #0]
 8003142:	e017      	b.n	8003174 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d113      	bne.n	8003174 <HAL_PCD_EP_DB_Transmit+0x52a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	4413      	add	r3, r2
 800315c:	67bb      	str	r3, [r7, #120]	; 0x78
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003166:	4413      	add	r3, r2
 8003168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800316c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800316e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003170:	2200      	movs	r2, #0
 8003172:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f006 ffbf 	bl	800a0fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003180:	88fb      	ldrh	r3, [r7, #6]
 8003182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003186:	2b00      	cmp	r3, #0
 8003188:	f040 8104 	bne.w	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	441a      	add	r2, r3
 80031b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80031bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	8013      	strh	r3, [r2, #0]
 80031d0:	e0e0      	b.n	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d121      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	441a      	add	r2, r3
 8003208:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800320c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	b29b      	uxth	r3, r3
 800321e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 80b4 	bne.w	8003394 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003234:	441a      	add	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003242:	441a      	add	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6a1a      	ldr	r2, [r3, #32]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d309      	bcc.n	8003268 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003260:	1ad2      	subs	r2, r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	621a      	str	r2, [r3, #32]
 8003266:	e015      	b.n	8003294 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003274:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800327e:	e009      	b.n	8003294 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	667b      	str	r3, [r7, #100]	; 0x64
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d155      	bne.n	800334e <HAL_PCD_EP_DB_Transmit+0x704>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032b6:	4413      	add	r3, r2
 80032b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	011a      	lsls	r2, r3, #4
 80032c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c2:	4413      	add	r3, r2
 80032c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80032ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d112      	bne.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80032d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	e044      	b.n	8003380 <HAL_PCD_EP_DB_Transmit+0x736>
 80032f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f8:	2b3e      	cmp	r3, #62	; 0x3e
 80032fa:	d811      	bhi.n	8003320 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80032fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	657b      	str	r3, [r7, #84]	; 0x54
 8003302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800330c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330e:	3301      	adds	r3, #1
 8003310:	657b      	str	r3, [r7, #84]	; 0x54
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	b29b      	uxth	r3, r3
 8003316:	029b      	lsls	r3, r3, #10
 8003318:	b29a      	uxth	r2, r3
 800331a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800331c:	801a      	strh	r2, [r3, #0]
 800331e:	e02f      	b.n	8003380 <HAL_PCD_EP_DB_Transmit+0x736>
 8003320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	657b      	str	r3, [r7, #84]	; 0x54
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003332:	3b01      	subs	r3, #1
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	b29b      	uxth	r3, r3
 800333a:	029b      	lsls	r3, r3, #10
 800333c:	b29b      	uxth	r3, r3
 800333e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003346:	b29a      	uxth	r2, r3
 8003348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	e018      	b.n	8003380 <HAL_PCD_EP_DB_Transmit+0x736>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d114      	bne.n	8003380 <HAL_PCD_EP_DB_Transmit+0x736>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800335e:	b29b      	uxth	r3, r3
 8003360:	461a      	mov	r2, r3
 8003362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003364:	4413      	add	r3, r2
 8003366:	667b      	str	r3, [r7, #100]	; 0x64
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	011a      	lsls	r2, r3, #4
 800336e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003370:	4413      	add	r3, r2
 8003372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003376:	663b      	str	r3, [r7, #96]	; 0x60
 8003378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800337a:	b29a      	uxth	r2, r3
 800337c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800337e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	6959      	ldr	r1, [r3, #20]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	895a      	ldrh	r2, [r3, #10]
 800338c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	f005 f86c 	bl	800846c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ae:	823b      	strh	r3, [r7, #16]
 80033b0:	8a3b      	ldrh	r3, [r7, #16]
 80033b2:	f083 0310 	eor.w	r3, r3, #16
 80033b6:	823b      	strh	r3, [r7, #16]
 80033b8:	8a3b      	ldrh	r3, [r7, #16]
 80033ba:	f083 0320 	eor.w	r3, r3, #32
 80033be:	823b      	strh	r3, [r7, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	441a      	add	r2, r3
 80033ce:	8a3b      	ldrh	r3, [r7, #16]
 80033d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3788      	adds	r7, #136	; 0x88
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340c:	897b      	ldrh	r3, [r7, #10]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e009      	b.n	8003438 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003424:	897a      	ldrh	r2, [r7, #10]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d107      	bne.n	800344e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	b29a      	uxth	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	80da      	strh	r2, [r3, #6]
 800344c:	e00b      	b.n	8003466 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2201      	movs	r2, #1
 8003452:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	b29a      	uxth	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0c1b      	lsrs	r3, r3, #16
 8003460:	b29a      	uxth	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
	...

08003474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e272      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8087 	beq.w	80035a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003494:	4b92      	ldr	r3, [pc, #584]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b04      	cmp	r3, #4
 800349e:	d00c      	beq.n	80034ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a0:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d112      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
 80034ac:	4b8c      	ldr	r3, [pc, #560]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d06c      	beq.n	80035a0 <HAL_RCC_OscConfig+0x12c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d168      	bne.n	80035a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e24c      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x76>
 80034dc:	4b80      	ldr	r3, [pc, #512]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a7f      	ldr	r2, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e02e      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0x98>
 80034f2:	4b7b      	ldr	r3, [pc, #492]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a7a      	ldr	r2, [pc, #488]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e01d      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003514:	d10c      	bne.n	8003530 <HAL_RCC_OscConfig+0xbc>
 8003516:	4b72      	ldr	r3, [pc, #456]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a71      	ldr	r2, [pc, #452]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	e00b      	b.n	8003548 <HAL_RCC_OscConfig+0xd4>
 8003530:	4b6b      	ldr	r3, [pc, #428]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003546:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fe f818 	bl	8001584 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fe f814 	bl	8001584 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e200      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0xe4>
 8003576:	e014      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe f804 	bl	8001584 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f800 	bl	8001584 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1ec      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x10c>
 800359e:	e000      	b.n	80035a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d063      	beq.n	8003676 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ae:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d11c      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d116      	bne.n	8003600 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d001      	beq.n	80035ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e1c0      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4939      	ldr	r1, [pc, #228]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	e03a      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d020      	beq.n	800364a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003608:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fd ffb9 	bl	8001584 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd ffb5 	bl	8001584 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e1a1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4927      	ldr	r1, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	e015      	b.n	8003676 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_RCC_OscConfig+0x270>)
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fd ff98 	bl	8001584 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd ff94 	bl	8001584 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e180      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d03a      	beq.n	80036f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d019      	beq.n	80036be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x274>)
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7fd ff78 	bl	8001584 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003698:	f7fd ff74 	bl	8001584 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e160      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036b6:	2001      	movs	r0, #1
 80036b8:	f000 faa6 	bl	8003c08 <RCC_Delay>
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x274>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c4:	f7fd ff5e 	bl	8001584 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fd ff5a 	bl	8001584 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d908      	bls.n	80036ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e146      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	42420000 	.word	0x42420000
 80036e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	4b92      	ldr	r3, [pc, #584]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e9      	bne.n	80036cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80a6 	beq.w	8003852 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4a87      	ldr	r2, [pc, #540]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	61d3      	str	r3, [r2, #28]
 8003722:	4b85      	ldr	r3, [pc, #532]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	4b82      	ldr	r3, [pc, #520]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373e:	4b7f      	ldr	r3, [pc, #508]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7e      	ldr	r2, [pc, #504]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fd ff1b 	bl	8001584 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd ff17 	bl	8001584 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e103      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b75      	ldr	r3, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x4c8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x312>
 8003778:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a6e      	ldr	r2, [pc, #440]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6213      	str	r3, [r2, #32]
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x334>
 800378e:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a69      	ldr	r2, [pc, #420]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	4b67      	ldr	r3, [pc, #412]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a66      	ldr	r2, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6213      	str	r3, [r2, #32]
 80037a6:	e01c      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x356>
 80037b0:	4b61      	ldr	r3, [pc, #388]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x36e>
 80037ca:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fd fecb 	bl	8001584 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fd fec7 	bl	8001584 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0b1      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <HAL_RCC_OscConfig+0x37e>
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003816:	f7fd feb5 	bl	8001584 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd feb1 	bl	8001584 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e09b      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	4b40      	ldr	r3, [pc, #256]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	4a3b      	ldr	r2, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800384c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003850:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8087 	beq.w	800396a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d061      	beq.n	800392c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d146      	bne.n	80038fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b33      	ldr	r3, [pc, #204]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd fe85 	bl	8001584 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd fe81 	bl	8001584 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e06d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003890:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d108      	bne.n	80038b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038a6:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4921      	ldr	r1, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a19      	ldr	r1, [r3, #32]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	430b      	orrs	r3, r1
 80038ca:	491b      	ldr	r1, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fd fe55 	bl	8001584 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7fd fe51 	bl	8001584 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x46a>
 80038fc:	e035      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x4cc>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd fe3e 	bl	8001584 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390c:	f7fd fe3a 	bl	8001584 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e026      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x498>
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e019      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_OscConfig+0x500>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d001      	beq.n	800396a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0d0      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d910      	bls.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0207 	bic.w	r2, r3, #7
 80039a2:	4965      	ldr	r1, [pc, #404]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b63      	ldr	r3, [pc, #396]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0b8      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d020      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f8:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	494d      	ldr	r1, [pc, #308]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d040      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d107      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d115      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e07f      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e073      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06b      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b39      	ldr	r3, [pc, #228]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4936      	ldr	r1, [pc, #216]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fd8c 	bl	8001584 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd fd88 	bl	8001584 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e053      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d210      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e032      	b.n	8003b2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4916      	ldr	r1, [pc, #88]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	490e      	ldr	r1, [pc, #56]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b06:	f000 f821 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	490a      	ldr	r1, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	5ccb      	ldrb	r3, [r1, r3]
 8003b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1e:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1cc>)
 8003b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_RCC_ClockConfig+0x1d0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd fcea 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	0800af94 	.word	0x0800af94
 8003b44:	20000020 	.word	0x20000020
 8003b48:	20000024 	.word	0x20000024

08003b4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b490      	push	{r4, r7}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b52:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b54:	1d3c      	adds	r4, r7, #4
 8003b56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b5c:	f240 2301 	movw	r3, #513	; 0x201
 8003b60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d002      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x40>
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x46>
 8003b8a:	e02b      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b8c:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b8e:	623b      	str	r3, [r7, #32]
      break;
 8003b90:	e02b      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	0c9b      	lsrs	r3, r3, #18
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	3328      	adds	r3, #40	; 0x28
 8003b9c:	443b      	add	r3, r7
 8003b9e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ba2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	0c5b      	lsrs	r3, r3, #17
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	3328      	adds	r3, #40	; 0x28
 8003bba:	443b      	add	r3, r7
 8003bbc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bc6:	fb03 f202 	mul.w	r2, r3, r2
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	e004      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	623b      	str	r3, [r7, #32]
      break;
 8003be2:	e002      	b.n	8003bea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003be6:	623b      	str	r3, [r7, #32]
      break;
 8003be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3728      	adds	r7, #40	; 0x28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc90      	pop	{r4, r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	0800af3c 	.word	0x0800af3c
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	007a1200 	.word	0x007a1200
 8003c04:	003d0900 	.word	0x003d0900

08003c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <RCC_Delay+0x34>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0a      	ldr	r2, [pc, #40]	; (8003c40 <RCC_Delay+0x38>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a5b      	lsrs	r3, r3, #9
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c24:	bf00      	nop
  }
  while (Delay --);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f9      	bne.n	8003c24 <RCC_Delay+0x1c>
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	20000020 	.word	0x20000020
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d07d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c64:	4b4f      	ldr	r3, [pc, #316]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4b4c      	ldr	r3, [pc, #304]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4a4b      	ldr	r2, [pc, #300]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	61d3      	str	r3, [r2, #28]
 8003c7c:	4b49      	ldr	r3, [pc, #292]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d118      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c98:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a42      	ldr	r2, [pc, #264]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca4:	f7fd fc6e 	bl	8001584 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	e008      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fd fc6a 	bl	8001584 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e06d      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cca:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02e      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d027      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ce8:	4b2e      	ldr	r3, [pc, #184]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf8:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cfe:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0e:	f7fd fc39 	bl	8001584 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f7fd fc35 	bl	8001584 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e036      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ee      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d38:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4917      	ldr	r1, [pc, #92]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	490b      	ldr	r1, [pc, #44]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4904      	ldr	r1, [pc, #16]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40007000 	.word	0x40007000
 8003dac:	42420440 	.word	0x42420440

08003db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e076      	b.n	8003eb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d108      	bne.n	8003ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd2:	d009      	beq.n	8003de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
 8003dda:	e005      	b.n	8003de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd f8fa 	bl	8000ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6c:	ea42 0103 	orr.w	r1, r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	0c1a      	lsrs	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f002 0204 	and.w	r2, r2, #4
 8003e8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Transmit+0x22>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e126      	b.n	8004128 <HAL_SPI_Transmit+0x270>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ee2:	f7fd fb4f 	bl	8001584 <HAL_GetTick>
 8003ee6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ee8:	88fb      	ldrh	r3, [r7, #6]
 8003eea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d002      	beq.n	8003efe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003efc:	e10b      	b.n	8004116 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_SPI_Transmit+0x52>
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f0e:	e102      	b.n	8004116 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2203      	movs	r2, #3
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	88fa      	ldrh	r2, [r7, #6]
 8003f2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f56:	d10f      	bne.n	8003f78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d007      	beq.n	8003f96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9e:	d14b      	bne.n	8004038 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SPI_Transmit+0xf6>
 8003fa8:	8afb      	ldrh	r3, [r7, #22]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d13e      	bne.n	800402c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	881a      	ldrh	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	1c9a      	adds	r2, r3, #2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fd2:	e02b      	b.n	800402c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d112      	bne.n	8004008 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	881a      	ldrh	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c9a      	adds	r2, r3, #2
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
 8004006:	e011      	b.n	800402c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004008:	f7fd fabc 	bl	8001584 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d803      	bhi.n	8004020 <HAL_SPI_Transmit+0x168>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d102      	bne.n	8004026 <HAL_SPI_Transmit+0x16e>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	77fb      	strb	r3, [r7, #31]
          goto error;
 800402a:	e074      	b.n	8004116 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ce      	bne.n	8003fd4 <HAL_SPI_Transmit+0x11c>
 8004036:	e04c      	b.n	80040d2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_SPI_Transmit+0x18e>
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d140      	bne.n	80040c8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800406c:	e02c      	b.n	80040c8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d113      	bne.n	80040a4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	330c      	adds	r3, #12
 8004086:	7812      	ldrb	r2, [r2, #0]
 8004088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a2:	e011      	b.n	80040c8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040a4:	f7fd fa6e 	bl	8001584 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d803      	bhi.n	80040bc <HAL_SPI_Transmit+0x204>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d102      	bne.n	80040c2 <HAL_SPI_Transmit+0x20a>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040c6:	e026      	b.n	8004116 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cd      	bne.n	800406e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fbc4 	bl	8004864 <SPI_EndRxTxTransaction>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e000      	b.n	8004116 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004114:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004126:	7ffb      	ldrb	r3, [r7, #31]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3720      	adds	r7, #32
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800414c:	d112      	bne.n	8004174 <HAL_SPI_Receive+0x44>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10e      	bne.n	8004174 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2204      	movs	r2, #4
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800415e:	88fa      	ldrh	r2, [r7, #6]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8f1 	bl	8004352 <HAL_SPI_TransmitReceive>
 8004170:	4603      	mov	r3, r0
 8004172:	e0ea      	b.n	800434a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_SPI_Receive+0x52>
 800417e:	2302      	movs	r3, #2
 8004180:	e0e3      	b.n	800434a <HAL_SPI_Receive+0x21a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418a:	f7fd f9fb 	bl	8001584 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d002      	beq.n	80041a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800419c:	2302      	movs	r3, #2
 800419e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041a0:	e0ca      	b.n	8004338 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_SPI_Receive+0x7e>
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d102      	bne.n	80041b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041b2:	e0c1      	b.n	8004338 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2204      	movs	r2, #4
 80041b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	88fa      	ldrh	r2, [r7, #6]
 80041d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d10f      	bne.n	800421c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800421a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b40      	cmp	r3, #64	; 0x40
 8004228:	d007      	beq.n	800423a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d162      	bne.n	8004308 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004242:	e02e      	b.n	80042a2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d115      	bne.n	800427e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f103 020c 	add.w	r2, r3, #12
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	7812      	ldrb	r2, [r2, #0]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800427c:	e011      	b.n	80042a2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800427e:	f7fd f981 	bl	8001584 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d803      	bhi.n	8004296 <HAL_SPI_Receive+0x166>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d102      	bne.n	800429c <HAL_SPI_Receive+0x16c>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a0:	e04a      	b.n	8004338 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1cb      	bne.n	8004244 <HAL_SPI_Receive+0x114>
 80042ac:	e031      	b.n	8004312 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d113      	bne.n	80042e4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	b292      	uxth	r2, r2
 80042c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	1c9a      	adds	r2, r3, #2
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042e2:	e011      	b.n	8004308 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042e4:	f7fd f94e 	bl	8001584 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d803      	bhi.n	80042fc <HAL_SPI_Receive+0x1cc>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d102      	bne.n	8004302 <HAL_SPI_Receive+0x1d2>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004306:	e017      	b.n	8004338 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1cd      	bne.n	80042ae <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	6839      	ldr	r1, [r7, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 fa52 	bl	80047c0 <SPI_EndRxTransaction>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
 8004334:	e000      	b.n	8004338 <HAL_SPI_Receive+0x208>
  }

error :
 8004336:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08c      	sub	sp, #48	; 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004360:	2301      	movs	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_SPI_TransmitReceive+0x26>
 8004374:	2302      	movs	r3, #2
 8004376:	e18a      	b.n	800468e <HAL_SPI_TransmitReceive+0x33c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004380:	f7fd f900 	bl	8001584 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800438c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004396:	887b      	ldrh	r3, [r7, #2]
 8004398:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800439a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d00f      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x70>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a8:	d107      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_SPI_TransmitReceive+0x68>
 80043b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d003      	beq.n	80043c2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80043ba:	2302      	movs	r3, #2
 80043bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043c0:	e15b      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x82>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_TransmitReceive+0x82>
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043da:	e14e      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d003      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2205      	movs	r2, #5
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	887a      	ldrh	r2, [r7, #2]
 8004400:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	887a      	ldrh	r2, [r7, #2]
 8004406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	887a      	ldrh	r2, [r7, #2]
 8004412:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d007      	beq.n	8004444 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444c:	d178      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_TransmitReceive+0x10a>
 8004456:	8b7b      	ldrh	r3, [r7, #26]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d166      	bne.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004480:	e053      	b.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11b      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d113      	bne.n	80044c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	881a      	ldrh	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	1c9a      	adds	r2, r3, #2
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d119      	bne.n	800450a <HAL_SPI_TransmitReceive+0x1b8>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d014      	beq.n	800450a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	b292      	uxth	r2, r2
 80044ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	1c9a      	adds	r2, r3, #2
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004506:	2301      	movs	r3, #1
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800450a:	f7fd f83b 	bl	8001584 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004516:	429a      	cmp	r2, r3
 8004518:	d807      	bhi.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d003      	beq.n	800452a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004528:	e0a7      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1a6      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x130>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1a1      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x130>
 800453e:	e07c      	b.n	800463a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SPI_TransmitReceive+0x1fc>
 8004548:	8b7b      	ldrh	r3, [r7, #26]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d16b      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004574:	e057      	b.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d11c      	bne.n	80045be <HAL_SPI_TransmitReceive+0x26c>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d017      	beq.n	80045be <HAL_SPI_TransmitReceive+0x26c>
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d114      	bne.n	80045be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d119      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x2ae>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d014      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004600:	f7fc ffc0 	bl	8001584 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_TransmitReceive+0x2c6>
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d102      	bne.n	800461e <HAL_SPI_TransmitReceive+0x2cc>
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004624:	e029      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1a2      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x224>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d19d      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f910 	bl	8004864 <SPI_EndRxTxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004656:	e010      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	e000      	b.n	800467a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004678:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800468a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800468e:	4618      	mov	r0, r3
 8004690:	3730      	adds	r7, #48	; 0x30
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a4:	b2db      	uxtb	r3, r3
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c0:	f7fc ff60 	bl	8001584 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d0:	f7fc ff58 	bl	8001584 <HAL_GetTick>
 80046d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	015b      	lsls	r3, r3, #5
 80046dc:	0d1b      	lsrs	r3, r3, #20
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046e6:	e054      	b.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d050      	beq.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f0:	f7fc ff48 	bl	8001584 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d902      	bls.n	8004706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d13d      	bne.n	8004782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800471e:	d111      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004728:	d004      	beq.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004732:	d107      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474c:	d10f      	bne.n	800476e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800476c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e017      	b.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3b01      	subs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d19b      	bne.n	80046e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000020 	.word	0x20000020

080047c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047d4:	d111      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d004      	beq.n	80047ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d107      	bne.n	80047fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004802:	d117      	bne.n	8004834 <SPI_EndRxTransaction+0x74>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800480c:	d112      	bne.n	8004834 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	2101      	movs	r1, #1
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff ff49 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e013      	b.n	800485c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2200      	movs	r2, #0
 800483c:	2180      	movs	r1, #128	; 0x80
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f7ff ff36 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	f043 0220 	orr.w	r2, r3, #32
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e000      	b.n	800485c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff ff18 	bl	80046b0 <SPI_WaitFlagStateUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e000      	b.n	8004898 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc fbe2 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 fd26 	bl	8005330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b082      	sub	sp, #8
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e041      	b.n	80049d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f839 	bl	80049dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4610      	mov	r0, r2
 800497e:	f000 fcd7 	bl	8005330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_TIM_PWM_Start+0x24>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	e022      	b.n	8004a5a <HAL_TIM_PWM_Start+0x6a>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d109      	bne.n	8004a2e <HAL_TIM_PWM_Start+0x3e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	bf14      	ite	ne
 8004a26:	2301      	movne	r3, #1
 8004a28:	2300      	moveq	r3, #0
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e015      	b.n	8004a5a <HAL_TIM_PWM_Start+0x6a>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d109      	bne.n	8004a48 <HAL_TIM_PWM_Start+0x58>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	e008      	b.n	8004a5a <HAL_TIM_PWM_Start+0x6a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e05e      	b.n	8004b20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x82>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_PWM_Start+0xaa>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_PWM_Start+0x92>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_PWM_Start+0xaa>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xa2>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_PWM_Start+0xaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fec4 	bl	8005830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <HAL_TIM_PWM_Start+0x138>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_PWM_Start+0x138>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_TIM_PWM_Start+0xfa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d009      	beq.n	8004aea <HAL_TIM_PWM_Start+0xfa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <HAL_TIM_PWM_Start+0x13c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIM_PWM_Start+0xfa>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_TIM_PWM_Start+0x140>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d111      	bne.n	8004b0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d010      	beq.n	8004b1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	e007      	b.n	8004b1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800

08004b34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e093      	b.n	8004c70 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fc fac9 	bl	80010f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b78:	f023 0307 	bic.w	r3, r3, #7
 8004b7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f000 fbd1 	bl	8005330 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bd4:	f023 030c 	bic.w	r3, r3, #12
 8004bd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004be0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	031b      	lsls	r3, r3, #12
 8004c04:	4313      	orrs	r3, r2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c88:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c90:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c98:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ca0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cae:	7b7b      	ldrb	r3, [r7, #13]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d001      	beq.n	8004cb8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e089      	b.n	8004dcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc8:	e031      	b.n	8004d2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d110      	bne.n	8004cf2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d102      	bne.n	8004cdc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cd6:	7b3b      	ldrb	r3, [r7, #12]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d001      	beq.n	8004ce0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e075      	b.n	8004dcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	e01d      	b.n	8004d2e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cf8:	7bbb      	ldrb	r3, [r7, #14]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d105      	bne.n	8004d0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cfe:	7b7b      	ldrb	r3, [r7, #13]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d102      	bne.n	8004d0a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d04:	7b3b      	ldrb	r3, [r7, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e05e      	b.n	8004dcc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d010      	beq.n	8004d5c <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d3a:	e01f      	b.n	8004d7c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fd73 	bl	8005830 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0202 	orr.w	r2, r2, #2
 8004d58:	60da      	str	r2, [r3, #12]
      break;
 8004d5a:	e02e      	b.n	8004dba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2201      	movs	r2, #1
 8004d62:	2104      	movs	r1, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fd63 	bl	8005830 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0204 	orr.w	r2, r2, #4
 8004d78:	60da      	str	r2, [r3, #12]
      break;
 8004d7a:	e01e      	b.n	8004dba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fd53 	bl	8005830 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	2104      	movs	r1, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fd4c 	bl	8005830 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0202 	orr.w	r2, r2, #2
 8004da6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0204 	orr.w	r2, r2, #4
 8004db6:	60da      	str	r2, [r3, #12]
      break;
 8004db8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d122      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d11b      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f06f 0202 	mvn.w	r2, #2
 8004e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fb f9a0 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004e1c:	e005      	b.n	8004e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 fa6b 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fa71 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d122      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d11b      	bne.n	8004e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0204 	mvn.w	r2, #4
 8004e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fb f976 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004e70:	e005      	b.n	8004e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa41 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fa47 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0208 	mvn.w	r2, #8
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2204      	movs	r2, #4
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb f94c 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa17 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa1d 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b10      	cmp	r3, #16
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fb f922 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9ed 	bl	80052fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9f3 	bl	800530c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0201 	mvn.w	r2, #1
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f9c8 	bl	80052e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f62:	2b80      	cmp	r3, #128	; 0x80
 8004f64:	d10e      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fd32 	bl	80059e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d10e      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d107      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9b7 	bl	800531e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0220 	mvn.w	r2, #32
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fcfd 	bl	80059d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0ac      	b.n	8005158 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b0c      	cmp	r3, #12
 800500a:	f200 809f 	bhi.w	800514c <HAL_TIM_PWM_ConfigChannel+0x168>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005049 	.word	0x08005049
 8005018:	0800514d 	.word	0x0800514d
 800501c:	0800514d 	.word	0x0800514d
 8005020:	0800514d 	.word	0x0800514d
 8005024:	08005089 	.word	0x08005089
 8005028:	0800514d 	.word	0x0800514d
 800502c:	0800514d 	.word	0x0800514d
 8005030:	0800514d 	.word	0x0800514d
 8005034:	080050cb 	.word	0x080050cb
 8005038:	0800514d 	.word	0x0800514d
 800503c:	0800514d 	.word	0x0800514d
 8005040:	0800514d 	.word	0x0800514d
 8005044:	0800510b 	.word	0x0800510b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f9d0 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0208 	orr.w	r2, r2, #8
 8005062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0204 	bic.w	r2, r2, #4
 8005072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6999      	ldr	r1, [r3, #24]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	619a      	str	r2, [r3, #24]
      break;
 8005086:	e062      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fa16 	bl	80054c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6999      	ldr	r1, [r3, #24]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	021a      	lsls	r2, r3, #8
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	619a      	str	r2, [r3, #24]
      break;
 80050c8:	e041      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fa5f 	bl	8005594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0208 	orr.w	r2, r2, #8
 80050e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0204 	bic.w	r2, r2, #4
 80050f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69d9      	ldr	r1, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	61da      	str	r2, [r3, #28]
      break;
 8005108:	e021      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 faa9 	bl	8005668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69d9      	ldr	r1, [r3, #28]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	021a      	lsls	r2, r3, #8
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	61da      	str	r2, [r3, #28]
      break;
 800514a:	e000      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800514c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_TIM_ConfigClockSource+0x18>
 8005174:	2302      	movs	r3, #2
 8005176:	e0b3      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x180>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b0:	d03e      	beq.n	8005230 <HAL_TIM_ConfigClockSource+0xd0>
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b6:	f200 8087 	bhi.w	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	f000 8085 	beq.w	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d87f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051c8:	2b70      	cmp	r3, #112	; 0x70
 80051ca:	d01a      	beq.n	8005202 <HAL_TIM_ConfigClockSource+0xa2>
 80051cc:	2b70      	cmp	r3, #112	; 0x70
 80051ce:	d87b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051d0:	2b60      	cmp	r3, #96	; 0x60
 80051d2:	d050      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x116>
 80051d4:	2b60      	cmp	r3, #96	; 0x60
 80051d6:	d877      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051d8:	2b50      	cmp	r3, #80	; 0x50
 80051da:	d03c      	beq.n	8005256 <HAL_TIM_ConfigClockSource+0xf6>
 80051dc:	2b50      	cmp	r3, #80	; 0x50
 80051de:	d873      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d058      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x136>
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d86f      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d064      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x156>
 80051ec:	2b30      	cmp	r3, #48	; 0x30
 80051ee:	d86b      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d060      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x156>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d867      	bhi.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05c      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x156>
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d05a      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005200:	e062      	b.n	80052c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f000 faee 	bl	80057f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005224:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	609a      	str	r2, [r3, #8]
      break;
 800522e:	e04e      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	6899      	ldr	r1, [r3, #8]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f000 fad7 	bl	80057f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005252:	609a      	str	r2, [r3, #8]
      break;
 8005254:	e03b      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6859      	ldr	r1, [r3, #4]
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	461a      	mov	r2, r3
 8005264:	f000 fa4e 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2150      	movs	r1, #80	; 0x50
 800526e:	4618      	mov	r0, r3
 8005270:	f000 faa5 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005274:	e02b      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	461a      	mov	r2, r3
 8005284:	f000 fa6c 	bl	8005760 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2160      	movs	r1, #96	; 0x60
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fa95 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005294:	e01b      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 fa2e 	bl	8005704 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2140      	movs	r1, #64	; 0x40
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fa85 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 80052b4:	e00b      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f000 fa7c 	bl	80057be <TIM_ITRx_SetConfig>
        break;
 80052c6:	e002      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80052cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <TIM_Base_SetConfig+0xb8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x30>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x30>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a26      	ldr	r2, [pc, #152]	; (80053ec <TIM_Base_SetConfig+0xbc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x30>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <TIM_Base_SetConfig+0xc0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1c      	ldr	r2, [pc, #112]	; (80053e8 <TIM_Base_SetConfig+0xb8>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0x62>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <TIM_Base_SetConfig+0xbc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0x62>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <TIM_Base_SetConfig+0xc0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d108      	bne.n	80053a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a07      	ldr	r2, [pc, #28]	; (80053e8 <TIM_Base_SetConfig+0xb8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d103      	bne.n	80053d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	615a      	str	r2, [r3, #20]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10c      	bne.n	800546a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f023 0308 	bic.w	r3, r3, #8
 8005456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0304 	bic.w	r3, r3, #4
 8005468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a13      	ldr	r2, [pc, #76]	; (80054bc <TIM_OC1_SetConfig+0xc8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40012c00 	.word	0x40012c00

080054c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0210 	bic.w	r2, r3, #16
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0320 	bic.w	r3, r3, #32
 800550a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <TIM_OC2_SetConfig+0xd0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d10d      	bne.n	800553c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a14      	ldr	r2, [pc, #80]	; (8005590 <TIM_OC2_SetConfig+0xd0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d113      	bne.n	800556c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800554a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	40012c00 	.word	0x40012c00

08005594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <TIM_OC3_SetConfig+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10d      	bne.n	800560e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <TIM_OC3_SetConfig+0xd0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d113      	bne.n	800563e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00

08005668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	031b      	lsls	r3, r3, #12
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a0f      	ldr	r2, [pc, #60]	; (8005700 <TIM_OC4_SetConfig+0x98>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d109      	bne.n	80056dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	019b      	lsls	r3, r3, #6
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	40012c00 	.word	0x40012c00

08005704 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	f023 0201 	bic.w	r2, r3, #1
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 030a 	bic.w	r3, r3, #10
 8005740:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0210 	bic.w	r2, r3, #16
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800578a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	031b      	lsls	r3, r3, #12
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	621a      	str	r2, [r3, #32]
}
 80057b4:	bf00      	nop
 80057b6:	371c      	adds	r7, #28
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f043 0307 	orr.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	021a      	lsls	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	431a      	orrs	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4313      	orrs	r3, r2
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	609a      	str	r2, [r3, #8]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800588c:	2302      	movs	r3, #2
 800588e:	e046      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a16      	ldr	r2, [pc, #88]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058dc:	d009      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a12      	ldr	r2, [pc, #72]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a10      	ldr	r2, [pc, #64]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10c      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800

08005934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e03d      	b.n	80059cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059fa:	b084      	sub	sp, #16
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	f107 0014 	add.w	r0, r7, #20
 8005a08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	b004      	add	sp, #16
 8005a18:	4770      	bx	lr

08005a1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a2a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a2e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a4e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	4013      	ands	r3, r2
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a92:	b084      	sub	sp, #16
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	f107 0014 	add.w	r0, r7, #20
 8005aa0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bc80      	pop	{r7}
 8005ace:	b004      	add	sp, #16
 8005ad0:	4770      	bx	lr
	...

08005ad4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b09b      	sub	sp, #108	; 0x6c
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	78db      	ldrb	r3, [r3, #3]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d81f      	bhi.n	8005b46 <USB_ActivateEndpoint+0x72>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <USB_ActivateEndpoint+0x38>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b4f 	.word	0x08005b4f
 8005b18:	08005b2b 	.word	0x08005b2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b28:	e012      	b.n	8005b50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b36:	e00b      	b.n	8005b50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005b44:	e004      	b.n	8005b50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005b4c:	e000      	b.n	8005b50 <USB_ActivateEndpoint+0x7c>
      break;
 8005b4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	441a      	add	r2, r3
 8005b5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	441a      	add	r2, r3
 8005ba0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	7b1b      	ldrb	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f040 8149 	bne.w	8005e54 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 8084 	beq.w	8005cd4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	81fb      	strh	r3, [r7, #14]
 8005c0e:	89fb      	ldrh	r3, [r7, #14]
 8005c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01b      	beq.n	8005c50 <USB_ActivateEndpoint+0x17c>
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4413      	add	r3, r2
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2e:	81bb      	strh	r3, [r7, #12]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	441a      	add	r2, r3
 8005c3a:	89bb      	ldrh	r3, [r7, #12]
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d020      	beq.n	8005c9a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c6e:	813b      	strh	r3, [r7, #8]
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	f083 0320 	eor.w	r3, r3, #32
 8005c76:	813b      	strh	r3, [r7, #8]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	893b      	ldrh	r3, [r7, #8]
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
 8005c98:	e27f      	b.n	800619a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb0:	817b      	strh	r3, [r7, #10]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	441a      	add	r2, r3
 8005cbc:	897b      	ldrh	r3, [r7, #10]
 8005cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	8013      	strh	r3, [r2, #0]
 8005cd2:	e262      	b.n	800619a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	4413      	add	r3, r2
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	011a      	lsls	r2, r3, #4
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	88db      	ldrh	r3, [r3, #6]
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d06:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	4413      	add	r3, r2
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	4413      	add	r3, r2
 8005d26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d112      	bne.n	8005d5a <USB_ActivateEndpoint+0x286>
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e02f      	b.n	8005dba <USB_ActivateEndpoint+0x2e6>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d60:	d813      	bhi.n	8005d8a <USB_ActivateEndpoint+0x2b6>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	663b      	str	r3, [r7, #96]	; 0x60
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <USB_ActivateEndpoint+0x2a8>
 8005d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d78:	3301      	adds	r3, #1
 8005d7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005d7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e017      	b.n	8005dba <USB_ActivateEndpoint+0x2e6>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	663b      	str	r3, [r7, #96]	; 0x60
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <USB_ActivateEndpoint+0x2d0>
 8005d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da0:	3b01      	subs	r3, #1
 8005da2:	663b      	str	r3, [r7, #96]	; 0x60
 8005da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	83fb      	strh	r3, [r7, #30]
 8005dc8:	8bfb      	ldrh	r3, [r7, #30]
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01b      	beq.n	8005e0a <USB_ActivateEndpoint+0x336>
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de8:	83bb      	strh	r3, [r7, #28]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	8bbb      	ldrh	r3, [r7, #28]
 8005df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e20:	837b      	strh	r3, [r7, #26]
 8005e22:	8b7b      	ldrh	r3, [r7, #26]
 8005e24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e28:	837b      	strh	r3, [r7, #26]
 8005e2a:	8b7b      	ldrh	r3, [r7, #26]
 8005e2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e30:	837b      	strh	r3, [r7, #26]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	441a      	add	r2, r3
 8005e3c:	8b7b      	ldrh	r3, [r7, #26]
 8005e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	8013      	strh	r3, [r2, #0]
 8005e52:	e1a2      	b.n	800619a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ea0:	4413      	add	r3, r2
 8005ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	891b      	ldrh	r3, [r3, #8]
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed4:	4413      	add	r3, r2
 8005ed6:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	011a      	lsls	r2, r3, #4
 8005ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	895b      	ldrh	r3, [r3, #10]
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8091 	bne.w	8006024 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01b      	beq.n	8005f52 <USB_ActivateEndpoint+0x47e>
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	441a      	add	r2, r3
 8005f3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01b      	beq.n	8005fa2 <USB_ActivateEndpoint+0x4ce>
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f80:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	441a      	add	r2, r3
 8005f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fc8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006000:	867b      	strh	r3, [r7, #50]	; 0x32
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800600e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800601e:	b29b      	uxth	r3, r3
 8006020:	8013      	strh	r3, [r2, #0]
 8006022:	e0ba      	b.n	800619a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006034:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01d      	beq.n	800607c <USB_ActivateEndpoint+0x5a8>
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800606c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	b29b      	uxth	r3, r3
 800607a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800608c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <USB_ActivateEndpoint+0x600>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	78db      	ldrb	r3, [r3, #3]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d024      	beq.n	8006126 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060fa:	f083 0320 	eor.w	r3, r3, #32
 80060fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006120:	b29b      	uxth	r3, r3
 8006122:	8013      	strh	r3, [r2, #0]
 8006124:	e01d      	b.n	8006162 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800613c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006178:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800619a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800619e:	4618      	mov	r0, r3
 80061a0:	376c      	adds	r7, #108	; 0x6c
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr

080061a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b08d      	sub	sp, #52	; 0x34
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	7b1b      	ldrb	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 808e 	bne.w	80062d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	785b      	ldrb	r3, [r3, #1]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d044      	beq.n	800624e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	81bb      	strh	r3, [r7, #12]
 80061d2:	89bb      	ldrh	r3, [r7, #12]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01b      	beq.n	8006214 <USB_DeactivateEndpoint+0x6c>
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	817b      	strh	r3, [r7, #10]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	441a      	add	r2, r3
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622a:	813b      	strh	r3, [r7, #8]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	893b      	ldrh	r3, [r7, #8]
 8006238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800623c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006248:	b29b      	uxth	r3, r3
 800624a:	8013      	strh	r3, [r2, #0]
 800624c:	e192      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	827b      	strh	r3, [r7, #18]
 800625c:	8a7b      	ldrh	r3, [r7, #18]
 800625e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01b      	beq.n	800629e <USB_DeactivateEndpoint+0xf6>
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	823b      	strh	r3, [r7, #16]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	8a3b      	ldrh	r3, [r7, #16]
 800628a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	b29b      	uxth	r3, r3
 800629c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b4:	81fb      	strh	r3, [r7, #14]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	89fb      	ldrh	r3, [r7, #14]
 80062c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	e14d      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 80a5 	bne.w	800642c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	843b      	strh	r3, [r7, #32]
 80062f0:	8c3b      	ldrh	r3, [r7, #32]
 80062f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d01b      	beq.n	8006332 <USB_DeactivateEndpoint+0x18a>
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006310:	83fb      	strh	r3, [r7, #30]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8bfb      	ldrh	r3, [r7, #30]
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	83bb      	strh	r3, [r7, #28]
 8006340:	8bbb      	ldrh	r3, [r7, #28]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01b      	beq.n	8006382 <USB_DeactivateEndpoint+0x1da>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006360:	837b      	strh	r3, [r7, #26]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	8b7b      	ldrh	r3, [r7, #26]
 800636e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800637e:	b29b      	uxth	r3, r3
 8006380:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006398:	833b      	strh	r3, [r7, #24]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	441a      	add	r2, r3
 80063a4:	8b3b      	ldrh	r3, [r7, #24]
 80063a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	82fb      	strh	r3, [r7, #22]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	8afb      	ldrh	r3, [r7, #22]
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006408:	82bb      	strh	r3, [r7, #20]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	8abb      	ldrh	r3, [r7, #20]
 8006416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800641a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800641e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006426:	b29b      	uxth	r3, r3
 8006428:	8013      	strh	r3, [r2, #0]
 800642a:	e0a3      	b.n	8006574 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800643a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800643c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <USB_DeactivateEndpoint+0x2d4>
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	441a      	add	r2, r3
 8006466:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006478:	b29b      	uxth	r3, r3
 800647a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	857b      	strh	r3, [r7, #42]	; 0x2a
 800648a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800648c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <USB_DeactivateEndpoint+0x324>
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	847b      	strh	r3, [r7, #34]	; 0x22
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3734      	adds	r7, #52	; 0x34
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr

08006580 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b0cc      	sub	sp, #304	; 0x130
 8006584:	af00      	add	r7, sp, #0
 8006586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658e:	6018      	str	r0, [r3, #0]
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800659a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	785b      	ldrb	r3, [r3, #1]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	f041 817d 	bne.w	80078a6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699a      	ldr	r2, [r3, #24]
 80065b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d908      	bls.n	80065da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80065d8:	e007      	b.n	80065ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	7b1b      	ldrb	r3, [r3, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d152      	bne.n	80066a0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6959      	ldr	r1, [r3, #20]
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	88da      	ldrh	r2, [r3, #6]
 8006612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006616:	b29b      	uxth	r3, r3
 8006618:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800661c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006620:	6800      	ldr	r0, [r0, #0]
 8006622:	f001 ff23 	bl	800846c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800662e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006632:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800663e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006648:	b29b      	uxth	r3, r3
 800664a:	4619      	mov	r1, r3
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006654:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006658:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	440a      	add	r2, r1
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	011a      	lsls	r2, r3, #4
 8006670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006674:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4413      	add	r3, r2
 800667c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668e:	b29a      	uxth	r2, r3
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	f001 b8b5 	b.w	800780a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	78db      	ldrb	r3, [r3, #3]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	f040 84c6 	bne.w	800703e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	f240 8443 	bls.w	8006f56 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80066d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80066fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006720:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 823e 	beq.w	8006bee <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006776:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800677a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800677e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 809a 	bne.w	80068cc <USB_EPStartXfer+0x34c>
 8006798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067ca:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	440a      	add	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	011a      	lsls	r2, r3, #4
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4413      	add	r3, r2
 80067ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d122      	bne.n	800684a <USB_EPStartXfer+0x2ca>
 8006804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006808:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006816:	b29a      	uxth	r2, r3
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006828:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683a:	b29a      	uxth	r2, r3
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	801a      	strh	r2, [r3, #0]
 8006848:	e079      	b.n	800693e <USB_EPStartXfer+0x3be>
 800684a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684e:	2b3e      	cmp	r3, #62	; 0x3e
 8006850:	d81b      	bhi.n	800688a <USB_EPStartXfer+0x30a>
 8006852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800685c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <USB_EPStartXfer+0x2f2>
 8006868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800686c:	3301      	adds	r3, #1
 800686e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006876:	b29b      	uxth	r3, r3
 8006878:	029b      	lsls	r3, r3, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	801a      	strh	r2, [r3, #0]
 8006888:	e059      	b.n	800693e <USB_EPStartXfer+0x3be>
 800688a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <USB_EPStartXfer+0x32a>
 80068a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068a4:	3b01      	subs	r3, #1
 80068a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068bc:	b29a      	uxth	r2, r3
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	e038      	b.n	800693e <USB_EPStartXfer+0x3be>
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	785b      	ldrb	r3, [r3, #1]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d130      	bne.n	800693e <USB_EPStartXfer+0x3be>
 80068dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80068f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068fa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	440a      	add	r2, r1
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4413      	add	r3, r2
 800691e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006930:	b29a      	uxth	r2, r3
 8006932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	895b      	ldrh	r3, [r3, #10]
 800694a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6959      	ldr	r1, [r3, #20]
 800695a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695e:	b29b      	uxth	r3, r3
 8006960:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006964:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006968:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f001 fd7d 	bl	800846c <USB_WritePMA>
            ep->xfer_buff += len;
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006982:	441a      	add	r2, r3
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d90f      	bls.n	80069cc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a1a      	ldr	r2, [r3, #32]
 80069b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	621a      	str	r2, [r3, #32]
 80069ca:	e00e      	b.n	80069ea <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80069cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2200      	movs	r2, #0
 80069e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 809a 	bne.w	8006b30 <USB_EPStartXfer+0x5b0>
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a08:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a2e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	440a      	add	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	011a      	lsls	r2, r3, #4
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4413      	add	r3, r2
 8006a52:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d122      	bne.n	8006aae <USB_EPStartXfer+0x52e>
 8006a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	801a      	strh	r2, [r3, #0]
 8006a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e083      	b.n	8006bb6 <USB_EPStartXfer+0x636>
 8006aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab4:	d81b      	bhi.n	8006aee <USB_EPStartXfer+0x56e>
 8006ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <USB_EPStartXfer+0x556>
 8006acc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ad6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	029b      	lsls	r3, r3, #10
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e063      	b.n	8006bb6 <USB_EPStartXfer+0x636>
 8006aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <USB_EPStartXfer+0x58e>
 8006b04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	e042      	b.n	8006bb6 <USB_EPStartXfer+0x636>
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d13a      	bne.n	8006bb6 <USB_EPStartXfer+0x636>
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b72:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	440a      	add	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	011a      	lsls	r2, r3, #4
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	891b      	ldrh	r3, [r3, #8]
 8006bc2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6959      	ldr	r1, [r3, #20]
 8006bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bdc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006be0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006be4:	6800      	ldr	r0, [r0, #0]
 8006be6:	f001 fc41 	bl	800846c <USB_WritePMA>
 8006bea:	f000 be0e 	b.w	800780a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d16d      	bne.n	8006cda <USB_EPStartXfer+0x75a>
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1e:	4413      	add	r3, r2
 8006c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	011a      	lsls	r2, r3, #4
 8006c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c32:	4413      	add	r3, r2
 8006c34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c38:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d112      	bne.n	8006c68 <USB_EPStartXfer+0x6e8>
 8006c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c64:	801a      	strh	r2, [r3, #0]
 8006c66:	e063      	b.n	8006d30 <USB_EPStartXfer+0x7b0>
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6c:	2b3e      	cmp	r3, #62	; 0x3e
 8006c6e:	d817      	bhi.n	8006ca0 <USB_EPStartXfer+0x720>
 8006c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c74:	085b      	lsrs	r3, r3, #1
 8006c76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <USB_EPStartXfer+0x710>
 8006c86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	029b      	lsls	r3, r3, #10
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	e047      	b.n	8006d30 <USB_EPStartXfer+0x7b0>
 8006ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <USB_EPStartXfer+0x740>
 8006cb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	029b      	lsls	r3, r3, #10
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e02a      	b.n	8006d30 <USB_EPStartXfer+0x7b0>
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	785b      	ldrb	r3, [r3, #1]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d122      	bne.n	8006d30 <USB_EPStartXfer+0x7b0>
 8006cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8006cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d0a:	4413      	add	r3, r2
 8006d0c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	011a      	lsls	r2, r3, #4
 8006d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1e:	4413      	add	r3, r2
 8006d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	891b      	ldrh	r3, [r3, #8]
 8006d3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6959      	ldr	r1, [r3, #20]
 8006d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d56:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d5a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d5e:	6800      	ldr	r0, [r0, #0]
 8006d60:	f001 fb84 	bl	800846c <USB_WritePMA>
            ep->xfer_buff += len;
 8006d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	441a      	add	r2, r3
 8006d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6a1a      	ldr	r2, [r3, #32]
 8006d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d90f      	bls.n	8006dbe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a1a      	ldr	r2, [r3, #32]
 8006daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	621a      	str	r2, [r3, #32]
 8006dbc:	e00e      	b.n	8006ddc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	643b      	str	r3, [r7, #64]	; 0x40
 8006de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d16d      	bne.n	8006ed4 <USB_EPStartXfer+0x954>
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	4413      	add	r3, r2
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	011a      	lsls	r2, r3, #4
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e32:	637b      	str	r3, [r7, #52]	; 0x34
 8006e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d112      	bne.n	8006e62 <USB_EPStartXfer+0x8e2>
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	e05d      	b.n	8006f1e <USB_EPStartXfer+0x99e>
 8006e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e66:	2b3e      	cmp	r3, #62	; 0x3e
 8006e68:	d817      	bhi.n	8006e9a <USB_EPStartXfer+0x91a>
 8006e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e6e:	085b      	lsrs	r3, r3, #1
 8006e70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d004      	beq.n	8006e8a <USB_EPStartXfer+0x90a>
 8006e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e84:	3301      	adds	r3, #1
 8006e86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	029b      	lsls	r3, r3, #10
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e041      	b.n	8006f1e <USB_EPStartXfer+0x99e>
 8006e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9e:	095b      	lsrs	r3, r3, #5
 8006ea0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <USB_EPStartXfer+0x93a>
 8006eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	801a      	strh	r2, [r3, #0]
 8006ed2:	e024      	b.n	8006f1e <USB_EPStartXfer+0x99e>
 8006ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d11c      	bne.n	8006f1e <USB_EPStartXfer+0x99e>
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef8:	4413      	add	r3, r2
 8006efa:	643b      	str	r3, [r7, #64]	; 0x40
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	895b      	ldrh	r3, [r3, #10]
 8006f2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6959      	ldr	r1, [r3, #20]
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f4c:	6800      	ldr	r0, [r0, #0]
 8006f4e:	f001 fa8d 	bl	800846c <USB_WritePMA>
 8006f52:	f000 bc5a 	b.w	800780a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe2:	4413      	add	r3, r2
 8006fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	011a      	lsls	r2, r3, #4
 8006ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	b29a      	uxth	r2, r3
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	891b      	ldrh	r3, [r3, #8]
 8007014:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6959      	ldr	r1, [r3, #20]
 8007024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007028:	b29b      	uxth	r3, r3
 800702a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800702e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007032:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007036:	6800      	ldr	r0, [r0, #0]
 8007038:	f001 fa18 	bl	800846c <USB_WritePMA>
 800703c:	e3e5      	b.n	800780a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007064:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	441a      	add	r2, r3
 8007082:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800708a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800708e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007096:	b29b      	uxth	r3, r3
 8007098:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6a1a      	ldr	r2, [r3, #32]
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	4413      	add	r3, r2
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 81bc 	beq.w	8007458 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d16d      	bne.n	80071da <USB_EPStartXfer+0xc5a>
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	67bb      	str	r3, [r7, #120]	; 0x78
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800711e:	4413      	add	r3, r2
 8007120:	67bb      	str	r3, [r7, #120]	; 0x78
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	011a      	lsls	r2, r3, #4
 8007130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007132:	4413      	add	r3, r2
 8007134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007138:	677b      	str	r3, [r7, #116]	; 0x74
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d112      	bne.n	8007168 <USB_EPStartXfer+0xbe8>
 8007142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800714c:	b29a      	uxth	r2, r3
 800714e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007160:	b29a      	uxth	r2, r3
 8007162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	e060      	b.n	800722a <USB_EPStartXfer+0xcaa>
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	2b3e      	cmp	r3, #62	; 0x3e
 800716e:	d817      	bhi.n	80071a0 <USB_EPStartXfer+0xc20>
 8007170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800717a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <USB_EPStartXfer+0xc10>
 8007186:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800718a:	3301      	adds	r3, #1
 800718c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007190:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007194:	b29b      	uxth	r3, r3
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	b29a      	uxth	r2, r3
 800719a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e044      	b.n	800722a <USB_EPStartXfer+0xcaa>
 80071a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_EPStartXfer+0xc40>
 80071b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	029b      	lsls	r3, r3, #10
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d6:	801a      	strh	r2, [r3, #0]
 80071d8:	e027      	b.n	800722a <USB_EPStartXfer+0xcaa>
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11f      	bne.n	800722a <USB_EPStartXfer+0xcaa>
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	461a      	mov	r2, r3
 80071fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007200:	4413      	add	r3, r2
 8007202:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007218:	4413      	add	r3, r2
 800721a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800721e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007224:	b29a      	uxth	r2, r3
 8007226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007228:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800722a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	895b      	ldrh	r3, [r3, #10]
 8007236:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6959      	ldr	r1, [r3, #20]
 8007246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724a:	b29b      	uxth	r3, r3
 800724c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007250:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007254:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007258:	6800      	ldr	r0, [r0, #0]
 800725a:	f001 f907 	bl	800846c <USB_WritePMA>
          ep->xfer_buff += len;
 800725e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726e:	441a      	add	r2, r3
 8007270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a1a      	ldr	r2, [r3, #32]
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d90f      	bls.n	80072b8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	621a      	str	r2, [r3, #32]
 80072b6:	e00e      	b.n	80072d6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2200      	movs	r2, #0
 80072d4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80072d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8295 	beq.w	800780a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	785b      	ldrb	r3, [r3, #1]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d16d      	bne.n	80073cc <USB_EPStartXfer+0xe4c>
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800730a:	b29b      	uxth	r3, r3
 800730c:	461a      	mov	r2, r3
 800730e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007310:	4413      	add	r3, r2
 8007312:	66bb      	str	r3, [r7, #104]	; 0x68
 8007314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007318:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	011a      	lsls	r2, r3, #4
 8007322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007324:	4413      	add	r3, r2
 8007326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800732a:	667b      	str	r3, [r7, #100]	; 0x64
 800732c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d112      	bne.n	800735a <USB_EPStartXfer+0xdda>
 8007334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800733e:	b29a      	uxth	r2, r3
 8007340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007352:	b29a      	uxth	r2, r3
 8007354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e063      	b.n	8007422 <USB_EPStartXfer+0xea2>
 800735a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735e:	2b3e      	cmp	r3, #62	; 0x3e
 8007360:	d817      	bhi.n	8007392 <USB_EPStartXfer+0xe12>
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800736c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <USB_EPStartXfer+0xe02>
 8007378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737c:	3301      	adds	r3, #1
 800737e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007386:	b29b      	uxth	r3, r3
 8007388:	029b      	lsls	r3, r3, #10
 800738a:	b29a      	uxth	r2, r3
 800738c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e047      	b.n	8007422 <USB_EPStartXfer+0xea2>
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800739c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <USB_EPStartXfer+0xe32>
 80073a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80073b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	029b      	lsls	r3, r3, #10
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	e02a      	b.n	8007422 <USB_EPStartXfer+0xea2>
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d122      	bne.n	8007422 <USB_EPStartXfer+0xea2>
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	673b      	str	r3, [r7, #112]	; 0x70
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073fc:	4413      	add	r3, r2
 80073fe:	673b      	str	r3, [r7, #112]	; 0x70
 8007400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	011a      	lsls	r2, r3, #4
 800740e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007410:	4413      	add	r3, r2
 8007412:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741c:	b29a      	uxth	r2, r3
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	891b      	ldrh	r3, [r3, #8]
 800742e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6959      	ldr	r1, [r3, #20]
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	b29b      	uxth	r3, r3
 8007444:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007448:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800744c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007450:	6800      	ldr	r0, [r0, #0]
 8007452:	f001 f80b 	bl	800846c <USB_WritePMA>
 8007456:	e1d8      	b.n	800780a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d178      	bne.n	800755a <USB_EPStartXfer+0xfda>
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007484:	b29b      	uxth	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800748c:	4413      	add	r3, r2
 800748e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	011a      	lsls	r2, r3, #4
 80074a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074a4:	4413      	add	r3, r2
 80074a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d116      	bne.n	80074e4 <USB_EPStartXfer+0xf64>
 80074b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ce:	881b      	ldrh	r3, [r3, #0]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e06b      	b.n	80075bc <USB_EPStartXfer+0x103c>
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	2b3e      	cmp	r3, #62	; 0x3e
 80074ea:	d818      	bhi.n	800751e <USB_EPStartXfer+0xf9e>
 80074ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <USB_EPStartXfer+0xf8c>
 8007502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007506:	3301      	adds	r3, #1
 8007508:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800750c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007510:	b29b      	uxth	r3, r3
 8007512:	029b      	lsls	r3, r3, #10
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e04e      	b.n	80075bc <USB_EPStartXfer+0x103c>
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	f003 031f 	and.w	r3, r3, #31
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <USB_EPStartXfer+0xfbe>
 8007534:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007538:	3b01      	subs	r3, #1
 800753a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800753e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29b      	uxth	r3, r3
 8007548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800754c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007550:	b29a      	uxth	r2, r3
 8007552:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e030      	b.n	80075bc <USB_EPStartXfer+0x103c>
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d128      	bne.n	80075bc <USB_EPStartXfer+0x103c>
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007586:	b29b      	uxth	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800758e:	4413      	add	r3, r2
 8007590:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	011a      	lsls	r2, r3, #4
 80075a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075a6:	4413      	add	r3, r2
 80075a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	891b      	ldrh	r3, [r3, #8]
 80075c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6959      	ldr	r1, [r3, #20]
 80075d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075e2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075e6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075ea:	6800      	ldr	r0, [r0, #0]
 80075ec:	f000 ff3e 	bl	800846c <USB_WritePMA>
          ep->xfer_buff += len;
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	695a      	ldr	r2, [r3, #20]
 80075fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007600:	441a      	add	r2, r3
 8007602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800760e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007612:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d90f      	bls.n	800764a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	621a      	str	r2, [r3, #32]
 8007648:	e00e      	b.n	8007668 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800765a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2200      	movs	r2, #0
 8007666:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80cc 	beq.w	800780a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d178      	bne.n	8007782 <USB_EPStartXfer+0x1202>
 8007690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	461a      	mov	r2, r3
 80076b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076b4:	4413      	add	r3, r2
 80076b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	011a      	lsls	r2, r3, #4
 80076c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d116      	bne.n	800770c <USB_EPStartXfer+0x118c>
 80076de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007702:	b29a      	uxth	r2, r3
 8007704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007708:	801a      	strh	r2, [r3, #0]
 800770a:	e064      	b.n	80077d6 <USB_EPStartXfer+0x1256>
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	2b3e      	cmp	r3, #62	; 0x3e
 8007712:	d818      	bhi.n	8007746 <USB_EPStartXfer+0x11c6>
 8007714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007718:	085b      	lsrs	r3, r3, #1
 800771a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800771e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USB_EPStartXfer+0x11b4>
 800772a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772e:	3301      	adds	r3, #1
 8007730:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007738:	b29b      	uxth	r3, r3
 800773a:	029b      	lsls	r3, r3, #10
 800773c:	b29a      	uxth	r2, r3
 800773e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e047      	b.n	80077d6 <USB_EPStartXfer+0x1256>
 8007746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774a:	095b      	lsrs	r3, r3, #5
 800774c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <USB_EPStartXfer+0x11e6>
 800775c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007760:	3b01      	subs	r3, #1
 8007762:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776a:	b29b      	uxth	r3, r3
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	b29b      	uxth	r3, r3
 8007770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007778:	b29a      	uxth	r2, r3
 800777a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	e029      	b.n	80077d6 <USB_EPStartXfer+0x1256>
 8007782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	785b      	ldrb	r3, [r3, #1]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d121      	bne.n	80077d6 <USB_EPStartXfer+0x1256>
 8007792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	461a      	mov	r2, r3
 80077a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077a8:	4413      	add	r3, r2
 80077aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	011a      	lsls	r2, r3, #4
 80077bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c0:	4413      	add	r3, r2
 80077c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	895b      	ldrh	r3, [r3, #10]
 80077e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6959      	ldr	r1, [r3, #20]
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007800:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007804:	6800      	ldr	r0, [r0, #0]
 8007806:	f000 fe31 	bl	800846c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800780a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	b29b      	uxth	r3, r3
 8007828:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800782c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007838:	8013      	strh	r3, [r2, #0]
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007846:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800784a:	8812      	ldrh	r2, [r2, #0]
 800784c:	f082 0210 	eor.w	r2, r2, #16
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800785a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800785e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007862:	8812      	ldrh	r2, [r2, #0]
 8007864:	f082 0220 	eor.w	r2, r2, #32
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	441a      	add	r2, r3
 8007884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007888:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800789e:	b29b      	uxth	r3, r3
 80078a0:	8013      	strh	r3, [r2, #0]
 80078a2:	f000 bc9f 	b.w	80081e4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80078a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	7b1b      	ldrb	r3, [r3, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f040 80ae 	bne.w	8007a14 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	699a      	ldr	r2, [r3, #24]
 80078c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d917      	bls.n	8007904 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	619a      	str	r2, [r3, #24]
 8007902:	e00e      	b.n	8007922 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007946:	4413      	add	r3, r2
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	011a      	lsls	r2, r3, #4
 800795a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800795e:	4413      	add	r3, r2
 8007960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d116      	bne.n	800799e <USB_EPStartXfer+0x141e>
 8007970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800797c:	b29a      	uxth	r2, r3
 800797e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007982:	801a      	strh	r2, [r3, #0]
 8007984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007988:	881b      	ldrh	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800799a:	801a      	strh	r2, [r3, #0]
 800799c:	e3e8      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
 800799e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a2:	2b3e      	cmp	r3, #62	; 0x3e
 80079a4:	d818      	bhi.n	80079d8 <USB_EPStartXfer+0x1458>
 80079a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <USB_EPStartXfer+0x1446>
 80079bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	029b      	lsls	r3, r3, #10
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079d4:	801a      	strh	r2, [r3, #0]
 80079d6:	e3cb      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
 80079d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d104      	bne.n	80079f8 <USB_EPStartXfer+0x1478>
 80079ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079f2:	3b01      	subs	r3, #1
 80079f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80079f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	029b      	lsls	r3, r3, #10
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	e3ad      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	78db      	ldrb	r3, [r3, #3]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	f040 8200 	bne.w	8007e26 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 8091 	bne.w	8007b5a <USB_EPStartXfer+0x15da>
 8007a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	461a      	mov	r2, r3
 8007a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a74:	4413      	add	r3, r2
 8007a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d116      	bne.n	8007abc <USB_EPStartXfer+0x153c>
 8007a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e083      	b.n	8007bc4 <USB_EPStartXfer+0x1644>
 8007abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8007aca:	d820      	bhi.n	8007b0e <USB_EPStartXfer+0x158e>
 8007acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	085b      	lsrs	r3, r3, #1
 8007ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <USB_EPStartXfer+0x157c>
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af6:	3301      	adds	r3, #1
 8007af8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	029b      	lsls	r3, r3, #10
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	e05a      	b.n	8007bc4 <USB_EPStartXfer+0x1644>
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <USB_EPStartXfer+0x15be>
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	029b      	lsls	r3, r3, #10
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e034      	b.n	8007bc4 <USB_EPStartXfer+0x1644>
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d12c      	bne.n	8007bc4 <USB_EPStartXfer+0x1644>
 8007b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b8e:	4413      	add	r3, r2
 8007b90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	011a      	lsls	r2, r3, #4
 8007ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 8091 	bne.w	8007d06 <USB_EPStartXfer+0x1786>
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	461a      	mov	r2, r3
 8007c04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c08:	4413      	add	r3, r2
 8007c0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	011a      	lsls	r2, r3, #4
 8007c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c20:	4413      	add	r3, r2
 8007c22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d116      	bne.n	8007c68 <USB_EPStartXfer+0x16e8>
 8007c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c4c:	801a      	strh	r2, [r3, #0]
 8007c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c64:	801a      	strh	r2, [r3, #0]
 8007c66:	e07c      	b.n	8007d62 <USB_EPStartXfer+0x17e2>
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b3e      	cmp	r3, #62	; 0x3e
 8007c76:	d820      	bhi.n	8007cba <USB_EPStartXfer+0x173a>
 8007c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <USB_EPStartXfer+0x1728>
 8007c9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ca8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	029b      	lsls	r3, r3, #10
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cb6:	801a      	strh	r2, [r3, #0]
 8007cb8:	e053      	b.n	8007d62 <USB_EPStartXfer+0x17e2>
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f003 031f 	and.w	r3, r3, #31
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <USB_EPStartXfer+0x176a>
 8007ce0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007cea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	029b      	lsls	r3, r3, #10
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d02:	801a      	strh	r2, [r3, #0]
 8007d04:	e02d      	b.n	8007d62 <USB_EPStartXfer+0x17e2>
 8007d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d125      	bne.n	8007d62 <USB_EPStartXfer+0x17e2>
 8007d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	011a      	lsls	r2, r3, #4
 8007d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007d44:	4413      	add	r3, r2
 8007d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007d60:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 81fe 	beq.w	8008170 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007d94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <USB_EPStartXfer+0x182c>
 8007da0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10d      	bne.n	8007dc8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007dac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f040 81db 	bne.w	8008170 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007dba:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f040 81d4 	bne.w	8008170 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	441a      	add	r2, r3
 8007e0c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	8013      	strh	r3, [r2, #0]
 8007e24:	e1a4      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	78db      	ldrb	r3, [r3, #3]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f040 819a 	bne.w	800816c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699a      	ldr	r2, [r3, #24]
 8007e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d917      	bls.n	8007e84 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e74:	1ad2      	subs	r2, r2, r3
 8007e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	619a      	str	r2, [r3, #24]
 8007e82:	e00e      	b.n	8007ea2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d178      	bne.n	8007fa4 <USB_EPStartXfer+0x1a24>
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	011a      	lsls	r2, r3, #4
 8007eea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007eee:	4413      	add	r3, r2
 8007ef0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d116      	bne.n	8007f2e <USB_EPStartXfer+0x19ae>
 8007f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e06b      	b.n	8008006 <USB_EPStartXfer+0x1a86>
 8007f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f32:	2b3e      	cmp	r3, #62	; 0x3e
 8007f34:	d818      	bhi.n	8007f68 <USB_EPStartXfer+0x19e8>
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	085b      	lsrs	r3, r3, #1
 8007f3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <USB_EPStartXfer+0x19d6>
 8007f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f50:	3301      	adds	r3, #1
 8007f52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	e04e      	b.n	8008006 <USB_EPStartXfer+0x1a86>
 8007f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6c:	095b      	lsrs	r3, r3, #5
 8007f6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <USB_EPStartXfer+0x1a08>
 8007f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f82:	3b01      	subs	r3, #1
 8007f84:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	029b      	lsls	r3, r3, #10
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fa0:	801a      	strh	r2, [r3, #0]
 8007fa2:	e030      	b.n	8008006 <USB_EPStartXfer+0x1a86>
 8007fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	785b      	ldrb	r3, [r3, #1]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d128      	bne.n	8008006 <USB_EPStartXfer+0x1a86>
 8007fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	4413      	add	r3, r2
 8007fda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	011a      	lsls	r2, r3, #4
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ff6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d178      	bne.n	8008116 <USB_EPStartXfer+0x1b96>
 8008024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008036:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008040:	b29b      	uxth	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008048:	4413      	add	r3, r2
 800804a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800804e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	011a      	lsls	r2, r3, #4
 800805c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008060:	4413      	add	r3, r2
 8008062:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800806a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d116      	bne.n	80080a0 <USB_EPStartXfer+0x1b20>
 8008072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	b29b      	uxth	r3, r3
 800807a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800807e:	b29a      	uxth	r2, r3
 8008080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008084:	801a      	strh	r2, [r3, #0]
 8008086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29b      	uxth	r3, r3
 800808e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008096:	b29a      	uxth	r2, r3
 8008098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	e067      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
 80080a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a4:	2b3e      	cmp	r3, #62	; 0x3e
 80080a6:	d818      	bhi.n	80080da <USB_EPStartXfer+0x1b5a>
 80080a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ac:	085b      	lsrs	r3, r3, #1
 80080ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <USB_EPStartXfer+0x1b48>
 80080be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080c2:	3301      	adds	r3, #1
 80080c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	029b      	lsls	r3, r3, #10
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080d6:	801a      	strh	r2, [r3, #0]
 80080d8:	e04a      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
 80080da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080de:	095b      	lsrs	r3, r3, #5
 80080e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d104      	bne.n	80080fa <USB_EPStartXfer+0x1b7a>
 80080f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080f4:	3b01      	subs	r3, #1
 80080f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80080fe:	b29b      	uxth	r3, r3
 8008100:	029b      	lsls	r3, r3, #10
 8008102:	b29b      	uxth	r3, r3
 8008104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800810c:	b29a      	uxth	r2, r3
 800810e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e02c      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
 8008116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d124      	bne.n	8008170 <USB_EPStartXfer+0x1bf0>
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800813c:	4413      	add	r3, r2
 800813e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	011a      	lsls	r2, r3, #4
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008154:	4413      	add	r3, r2
 8008156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800815a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	b29a      	uxth	r2, r3
 8008164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008168:	801a      	strh	r2, [r3, #0]
 800816a:	e001      	b.n	8008170 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e03a      	b.n	80081e6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800819a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800819e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80081b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	441a      	add	r2, r3
 80081cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80081d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785b      	ldrb	r3, [r3, #1]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008218:	81bb      	strh	r3, [r7, #12]
 800821a:	89bb      	ldrh	r3, [r7, #12]
 800821c:	f083 0310 	eor.w	r3, r3, #16
 8008220:	81bb      	strh	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	441a      	add	r2, r3
 800822c:	89bb      	ldrh	r3, [r7, #12]
 800822e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800823a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823e:	b29b      	uxth	r3, r3
 8008240:	8013      	strh	r3, [r2, #0]
 8008242:	e01f      	b.n	8008284 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825a:	81fb      	strh	r3, [r7, #14]
 800825c:	89fb      	ldrh	r3, [r7, #14]
 800825e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008262:	81fb      	strh	r3, [r7, #14]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	441a      	add	r2, r3
 800826e:	89fb      	ldrh	r3, [r7, #14]
 8008270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	b29b      	uxth	r3, r3
 8008282:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	bc80      	pop	{r7}
 800828e:	4770      	bx	lr

08008290 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	7b1b      	ldrb	r3, [r3, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f040 809d 	bne.w	80083de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d04c      	beq.n	8008346 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	823b      	strh	r3, [r7, #16]
 80082ba:	8a3b      	ldrh	r3, [r7, #16]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01b      	beq.n	80082fc <USB_EPClearStall+0x6c>
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082da:	81fb      	strh	r3, [r7, #14]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	441a      	add	r2, r3
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d06c      	beq.n	80083de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800831a:	81bb      	strh	r3, [r7, #12]
 800831c:	89bb      	ldrh	r3, [r7, #12]
 800831e:	f083 0320 	eor.w	r3, r3, #32
 8008322:	81bb      	strh	r3, [r7, #12]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	441a      	add	r2, r3
 800832e:	89bb      	ldrh	r3, [r7, #12]
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]
 8008344:	e04b      	b.n	80083de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	82fb      	strh	r3, [r7, #22]
 8008354:	8afb      	ldrh	r3, [r7, #22]
 8008356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01b      	beq.n	8008396 <USB_EPClearStall+0x106>
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008374:	82bb      	strh	r3, [r7, #20]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	441a      	add	r2, r3
 8008380:	8abb      	ldrh	r3, [r7, #20]
 8008382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800838a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800838e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008392:	b29b      	uxth	r3, r3
 8008394:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ac:	827b      	strh	r3, [r7, #18]
 80083ae:	8a7b      	ldrh	r3, [r7, #18]
 80083b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083b4:	827b      	strh	r3, [r7, #18]
 80083b6:	8a7b      	ldrh	r3, [r7, #18]
 80083b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083bc:	827b      	strh	r3, [r7, #18]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	8a7b      	ldrh	r3, [r7, #18]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	371c      	adds	r7, #28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d103      	bne.n	8008404 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2280      	movs	r2, #128	; 0x80
 8008400:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008446:	b29b      	uxth	r3, r3
 8008448:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800844a:	68fb      	ldr	r3, [r7, #12]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr

0800846c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800846c:	b480      	push	{r7}
 800846e:	b08d      	sub	sp, #52	; 0x34
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	460b      	mov	r3, r1
 800847c:	80fb      	strh	r3, [r7, #6]
 800847e:	4613      	mov	r3, r2
 8008480:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008482:	88bb      	ldrh	r3, [r7, #4]
 8008484:	3301      	adds	r3, #1
 8008486:	085b      	lsrs	r3, r3, #1
 8008488:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	005a      	lsls	r2, r3, #1
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084a4:	e01e      	b.n	80084e4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	3301      	adds	r3, #1
 80084b0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80084b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	3302      	adds	r3, #2
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	3302      	adds	r3, #2
 80084d6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	3301      	adds	r3, #1
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	3b01      	subs	r3, #1
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1dd      	bne.n	80084a6 <USB_WritePMA+0x3a>
  }
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	3734      	adds	r7, #52	; 0x34
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bc80      	pop	{r7}
 80084f4:	4770      	bx	lr

080084f6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b08b      	sub	sp, #44	; 0x2c
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	4611      	mov	r1, r2
 8008502:	461a      	mov	r2, r3
 8008504:	460b      	mov	r3, r1
 8008506:	80fb      	strh	r3, [r7, #6]
 8008508:	4613      	mov	r3, r2
 800850a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800850c:	88bb      	ldrh	r3, [r7, #4]
 800850e:	085b      	lsrs	r3, r3, #1
 8008510:	b29b      	uxth	r3, r3
 8008512:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800851c:	88fb      	ldrh	r3, [r7, #6]
 800851e:	005a      	lsls	r2, r3, #1
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008528:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
 800852e:	e01b      	b.n	8008568 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	3302      	adds	r3, #2
 800853c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	b2da      	uxtb	r2, r3
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	b2da      	uxtb	r2, r3
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3301      	adds	r3, #1
 800855a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	3302      	adds	r3, #2
 8008560:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	3b01      	subs	r3, #1
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1e0      	bne.n	8008530 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800856e:	88bb      	ldrh	r3, [r7, #4]
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d007      	beq.n	800858a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	b2da      	uxtb	r2, r3
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	701a      	strb	r2, [r3, #0]
  }
}
 800858a:	bf00      	nop
 800858c:	372c      	adds	r7, #44	; 0x2c
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7c1b      	ldrb	r3, [r3, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d115      	bne.n	80085d8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80085ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b0:	2202      	movs	r2, #2
 80085b2:	2181      	movs	r1, #129	; 0x81
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fe86 	bl	800a2c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085c4:	2202      	movs	r2, #2
 80085c6:	2101      	movs	r1, #1
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fe7c 	bl	800a2c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80085d6:	e012      	b.n	80085fe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80085d8:	2340      	movs	r3, #64	; 0x40
 80085da:	2202      	movs	r2, #2
 80085dc:	2181      	movs	r1, #129	; 0x81
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fe71 	bl	800a2c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80085ea:	2340      	movs	r3, #64	; 0x40
 80085ec:	2202      	movs	r2, #2
 80085ee:	2101      	movs	r1, #1
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fe68 	bl	800a2c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085fe:	2308      	movs	r3, #8
 8008600:	2203      	movs	r2, #3
 8008602:	2182      	movs	r1, #130	; 0x82
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 fe5e 	bl	800a2c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008610:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008614:	f001 ff7e 	bl	800a514 <USBD_static_malloc>
 8008618:	4602      	mov	r2, r0
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	e026      	b.n	800867e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008636:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2200      	movs	r2, #0
 800864e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7c1b      	ldrb	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008664:	2101      	movs	r1, #1
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f001 ff1e 	bl	800a4a8 <USBD_LL_PrepareReceive>
 800866c:	e007      	b.n	800867e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	2101      	movs	r1, #1
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 ff15 	bl	800a4a8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008698:	2181      	movs	r1, #129	; 0x81
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f001 fe39 	bl	800a312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80086a6:	2101      	movs	r1, #1
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 fe32 	bl	800a312 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80086b6:	2182      	movs	r1, #130	; 0x82
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fe2a 	bl	800a312 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 ff24 	bl	800a52c <USBD_static_free>
    pdev->pClassData = NULL;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800871c:	2b00      	cmp	r3, #0
 800871e:	d039      	beq.n	8008794 <USBD_CDC_Setup+0x9e>
 8008720:	2b20      	cmp	r3, #32
 8008722:	d17f      	bne.n	8008824 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	88db      	ldrh	r3, [r3, #6]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d029      	beq.n	8008780 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	b25b      	sxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	da11      	bge.n	800875a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008742:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	88d2      	ldrh	r2, [r2, #6]
 8008748:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800874a:	6939      	ldr	r1, [r7, #16]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	88db      	ldrh	r3, [r3, #6]
 8008750:	461a      	mov	r2, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fa09 	bl	8009b6a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008758:	e06b      	b.n	8008832 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	785a      	ldrb	r2, [r3, #1]
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	88db      	ldrh	r3, [r3, #6]
 8008768:	b2da      	uxtb	r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008770:	6939      	ldr	r1, [r7, #16]
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	88db      	ldrh	r3, [r3, #6]
 8008776:	461a      	mov	r2, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f001 fa24 	bl	8009bc6 <USBD_CtlPrepareRx>
      break;
 800877e:	e058      	b.n	8008832 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	7850      	ldrb	r0, [r2, #1]
 800878c:	2200      	movs	r2, #0
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	4798      	blx	r3
      break;
 8008792:	e04e      	b.n	8008832 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	2b0b      	cmp	r3, #11
 800879a:	d02e      	beq.n	80087fa <USBD_CDC_Setup+0x104>
 800879c:	2b0b      	cmp	r3, #11
 800879e:	dc38      	bgt.n	8008812 <USBD_CDC_Setup+0x11c>
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <USBD_CDC_Setup+0xb4>
 80087a4:	2b0a      	cmp	r3, #10
 80087a6:	d014      	beq.n	80087d2 <USBD_CDC_Setup+0xdc>
 80087a8:	e033      	b.n	8008812 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d107      	bne.n	80087c4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	2202      	movs	r2, #2
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 f9d4 	bl	8009b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087c2:	e02e      	b.n	8008822 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f001 f965 	bl	8009a96 <USBD_CtlError>
            ret = USBD_FAIL;
 80087cc:	2302      	movs	r3, #2
 80087ce:	75fb      	strb	r3, [r7, #23]
          break;
 80087d0:	e027      	b.n	8008822 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d107      	bne.n	80087ec <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80087dc:	f107 030f 	add.w	r3, r7, #15
 80087e0:	2201      	movs	r2, #1
 80087e2:	4619      	mov	r1, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f9c0 	bl	8009b6a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087ea:	e01a      	b.n	8008822 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 f951 	bl	8009a96 <USBD_CtlError>
            ret = USBD_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	75fb      	strb	r3, [r7, #23]
          break;
 80087f8:	e013      	b.n	8008822 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	2b03      	cmp	r3, #3
 8008802:	d00d      	beq.n	8008820 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f001 f945 	bl	8009a96 <USBD_CtlError>
            ret = USBD_FAIL;
 800880c:	2302      	movs	r3, #2
 800880e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008810:	e006      	b.n	8008820 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f93e 	bl	8009a96 <USBD_CtlError>
          ret = USBD_FAIL;
 800881a:	2302      	movs	r3, #2
 800881c:	75fb      	strb	r3, [r7, #23]
          break;
 800881e:	e000      	b.n	8008822 <USBD_CDC_Setup+0x12c>
          break;
 8008820:	bf00      	nop
      }
      break;
 8008822:	e006      	b.n	8008832 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 f935 	bl	8009a96 <USBD_CtlError>
      ret = USBD_FAIL;
 800882c:	2302      	movs	r3, #2
 800882e:	75fb      	strb	r3, [r7, #23]
      break;
 8008830:	bf00      	nop
  }

  return ret;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800884e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008856:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d03a      	beq.n	80088d8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008862:	78fa      	ldrb	r2, [r7, #3]
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	440b      	add	r3, r1
 8008870:	331c      	adds	r3, #28
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d029      	beq.n	80088cc <USBD_CDC_DataIn+0x90>
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	440b      	add	r3, r1
 8008886:	331c      	adds	r3, #28
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	78f9      	ldrb	r1, [r7, #3]
 800888c:	68b8      	ldr	r0, [r7, #8]
 800888e:	460b      	mov	r3, r1
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	4403      	add	r3, r0
 8008898:	3338      	adds	r3, #56	; 0x38
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	fbb2 f1f3 	udiv	r1, r2, r3
 80088a0:	fb01 f303 	mul.w	r3, r1, r3
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d110      	bne.n	80088cc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	331c      	adds	r3, #28
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80088be:	78f9      	ldrb	r1, [r7, #3]
 80088c0:	2300      	movs	r3, #0
 80088c2:	2200      	movs	r2, #0
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 fdcc 	bl	800a462 <USBD_LL_Transmit>
 80088ca:	e003      	b.n	80088d4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	e000      	b.n	80088da <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80088d8:	2302      	movs	r3, #2
  }
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	460b      	mov	r3, r1
 80088ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fdf7 	bl	800a4ee <USBD_LL_GetRxDataSize>
 8008900:	4602      	mov	r2, r0
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00d      	beq.n	800892e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008926:	4611      	mov	r1, r2
 8008928:	4798      	blx	r3

    return USBD_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800892e:	2302      	movs	r3, #2
  }
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008946:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800894e:	2b00      	cmp	r3, #0
 8008950:	d015      	beq.n	800897e <USBD_CDC_EP0_RxReady+0x46>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008958:	2bff      	cmp	r3, #255	; 0xff
 800895a:	d010      	beq.n	800897e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800896a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008972:	b292      	uxth	r2, r2
 8008974:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	22ff      	movs	r2, #255	; 0xff
 800897a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2243      	movs	r2, #67	; 0x43
 8008994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008996:	4b03      	ldr	r3, [pc, #12]	; (80089a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008998:	4618      	mov	r0, r3
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	bc80      	pop	{r7}
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	200000b4 	.word	0x200000b4

080089a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2243      	movs	r2, #67	; 0x43
 80089b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80089b6:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	bc80      	pop	{r7}
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000070 	.word	0x20000070

080089c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2243      	movs	r2, #67	; 0x43
 80089d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80089d6:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	200000f8 	.word	0x200000f8

080089e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	220a      	movs	r2, #10
 80089f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80089f6:	4b03      	ldr	r3, [pc, #12]	; (8008a04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	2000002c 	.word	0x2000002c

08008a08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d005      	beq.n	8008a28 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr

08008a34 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a52:	88fa      	ldrh	r2, [r7, #6]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d01c      	beq.n	8008ae0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d115      	bne.n	8008adc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	2181      	movs	r1, #129	; 0x81
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 fcc5 	bl	800a462 <USBD_LL_Transmit>

      return USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e002      	b.n	8008ae2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e000      	b.n	8008ae2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ae0:	2302      	movs	r3, #2
  }
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d017      	beq.n	8008b34 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7c1b      	ldrb	r3, [r3, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b16:	2101      	movs	r1, #1
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f001 fcc5 	bl	800a4a8 <USBD_LL_PrepareReceive>
 8008b1e:	e007      	b.n	8008b30 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 fcbc 	bl	800a4a8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	e000      	b.n	8008b36 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008b34:	2302      	movs	r3, #2
  }
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	e01a      	b.n	8008b8c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	79fa      	ldrb	r2, [r7, #7]
 8008b82:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f001 fb29 	bl	800a1dc <USBD_LL_Init>

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
 8008bb4:	e001      	b.n	8008bba <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3714      	adds	r7, #20
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fb5e 	bl	800a290 <USBD_LL_Start>

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	78fa      	ldrb	r2, [r7, #3]
 8008c16:	4611      	mov	r1, r2
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	4798      	blx	r3
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	4611      	mov	r1, r2
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fed8 	bl	8009a1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c8a:	f003 031f 	and.w	r3, r3, #31
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d016      	beq.n	8008cc0 <USBD_LL_SetupStage+0x6a>
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d81c      	bhi.n	8008cd0 <USBD_LL_SetupStage+0x7a>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <USBD_LL_SetupStage+0x4a>
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d008      	beq.n	8008cb0 <USBD_LL_SetupStage+0x5a>
 8008c9e:	e017      	b.n	8008cd0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f9cb 	bl	8009044 <USBD_StdDevReq>
      break;
 8008cae:	e01a      	b.n	8008ce6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa2d 	bl	8009118 <USBD_StdItfReq>
      break;
 8008cbe:	e012      	b.n	8008ce6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fa6d 	bl	80091a8 <USBD_StdEPReq>
      break;
 8008cce:	e00a      	b.n	8008ce6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008cd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fb36 	bl	800a350 <USBD_LL_StallEP>
      break;
 8008ce4:	bf00      	nop
  }

  return USBD_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008cfe:	7afb      	ldrb	r3, [r7, #11]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d14b      	bne.n	8008d9c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d0a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d134      	bne.n	8008d80 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	68da      	ldr	r2, [r3, #12]
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d919      	bls.n	8008d56 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d203      	bcs.n	8008d44 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	e002      	b.n	8008d4a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6879      	ldr	r1, [r7, #4]
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 ff57 	bl	8009c02 <USBD_CtlContinueRx>
 8008d54:	e038      	b.n	8008dc8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d105      	bne.n	8008d78 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 ff54 	bl	8009c26 <USBD_CtlSendStatus>
 8008d7e:	e023      	b.n	8008dc8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d11e      	bne.n	8008dc8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008d92:	2100      	movs	r1, #0
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 fadb 	bl	800a350 <USBD_LL_StallEP>
 8008d9a:	e015      	b.n	8008dc8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	699b      	ldr	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00d      	beq.n	8008dc4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d108      	bne.n	8008dc4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	7afa      	ldrb	r2, [r7, #11]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	4798      	blx	r3
 8008dc2:	e001      	b.n	8008dc8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e000      	b.n	8008dca <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d17f      	bne.n	8008ee6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3314      	adds	r3, #20
 8008dea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d15c      	bne.n	8008eb0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d915      	bls.n	8008e2e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	1ad2      	subs	r2, r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fec1 	bl	8009ba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e20:	2300      	movs	r3, #0
 8008e22:	2200      	movs	r2, #0
 8008e24:	2100      	movs	r1, #0
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f001 fb3e 	bl	800a4a8 <USBD_LL_PrepareReceive>
 8008e2c:	e04e      	b.n	8008ecc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	6912      	ldr	r2, [r2, #16]
 8008e36:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e3a:	fb01 f202 	mul.w	r2, r1, r2
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11c      	bne.n	8008e7e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d316      	bcc.n	8008e7e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d20f      	bcs.n	8008e7e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 fe9d 	bl	8009ba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	2100      	movs	r1, #0
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f001 fb16 	bl	800a4a8 <USBD_LL_PrepareReceive>
 8008e7c:	e026      	b.n	8008ecc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d105      	bne.n	8008ea0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f001 fa54 	bl	800a350 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fecf 	bl	8009c4c <USBD_CtlReceiveStatus>
 8008eae:	e00d      	b.n	8008ecc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d004      	beq.n	8008ec4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ec4:	2180      	movs	r1, #128	; 0x80
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f001 fa42 	bl	800a350 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d11d      	bne.n	8008f12 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f7ff fe81 	bl	8008bde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ee4:	e015      	b.n	8008f12 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00d      	beq.n	8008f0e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d108      	bne.n	8008f0e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	7afa      	ldrb	r2, [r7, #11]
 8008f06:	4611      	mov	r1, r2
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	4798      	blx	r3
 8008f0c:	e001      	b.n	8008f12 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e000      	b.n	8008f14 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f24:	2340      	movs	r3, #64	; 0x40
 8008f26:	2200      	movs	r2, #0
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f001 f9cb 	bl	800a2c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2240      	movs	r2, #64	; 0x40
 8008f3c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f40:	2340      	movs	r3, #64	; 0x40
 8008f42:	2200      	movs	r2, #0
 8008f44:	2180      	movs	r1, #128	; 0x80
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f9bd 	bl	800a2c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2240      	movs	r2, #64	; 0x40
 8008f56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6852      	ldr	r2, [r2, #4]
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	4611      	mov	r1, r2
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	4798      	blx	r3
  }

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	78fa      	ldrb	r2, [r7, #3]
 8008fae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2204      	movs	r2, #4
 8008fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bc80      	pop	{r7}
 8008fe2:	4770      	bx	lr

08008fe4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d105      	bne.n	8009002 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800901c:	2b03      	cmp	r3, #3
 800901e:	d10b      	bne.n	8009038 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800905a:	2b40      	cmp	r3, #64	; 0x40
 800905c:	d005      	beq.n	800906a <USBD_StdDevReq+0x26>
 800905e:	2b40      	cmp	r3, #64	; 0x40
 8009060:	d84f      	bhi.n	8009102 <USBD_StdDevReq+0xbe>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <USBD_StdDevReq+0x36>
 8009066:	2b20      	cmp	r3, #32
 8009068:	d14b      	bne.n	8009102 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
      break;
 8009078:	e048      	b.n	800910c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	785b      	ldrb	r3, [r3, #1]
 800907e:	2b09      	cmp	r3, #9
 8009080:	d839      	bhi.n	80090f6 <USBD_StdDevReq+0xb2>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <USBD_StdDevReq+0x44>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	080090d9 	.word	0x080090d9
 800908c:	080090ed 	.word	0x080090ed
 8009090:	080090f7 	.word	0x080090f7
 8009094:	080090e3 	.word	0x080090e3
 8009098:	080090f7 	.word	0x080090f7
 800909c:	080090bb 	.word	0x080090bb
 80090a0:	080090b1 	.word	0x080090b1
 80090a4:	080090f7 	.word	0x080090f7
 80090a8:	080090cf 	.word	0x080090cf
 80090ac:	080090c5 	.word	0x080090c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9dc 	bl	8009470 <USBD_GetDescriptor>
          break;
 80090b8:	e022      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fb3f 	bl	8009740 <USBD_SetAddress>
          break;
 80090c2:	e01d      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fb7e 	bl	80097c8 <USBD_SetConfig>
          break;
 80090cc:	e018      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fc07 	bl	80098e4 <USBD_GetConfig>
          break;
 80090d6:	e013      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc37 	bl	800994e <USBD_GetStatus>
          break;
 80090e0:	e00e      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc65 	bl	80099b4 <USBD_SetFeature>
          break;
 80090ea:	e009      	b.n	8009100 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc74 	bl	80099dc <USBD_ClrFeature>
          break;
 80090f4:	e004      	b.n	8009100 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fccc 	bl	8009a96 <USBD_CtlError>
          break;
 80090fe:	bf00      	nop
      }
      break;
 8009100:	e004      	b.n	800910c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fcc6 	bl	8009a96 <USBD_CtlError>
      break;
 800910a:	bf00      	nop
  }

  return ret;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop

08009118 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800912e:	2b40      	cmp	r3, #64	; 0x40
 8009130:	d005      	beq.n	800913e <USBD_StdItfReq+0x26>
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d82e      	bhi.n	8009194 <USBD_StdItfReq+0x7c>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <USBD_StdItfReq+0x26>
 800913a:	2b20      	cmp	r3, #32
 800913c:	d12a      	bne.n	8009194 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009144:	3b01      	subs	r3, #1
 8009146:	2b02      	cmp	r3, #2
 8009148:	d81d      	bhi.n	8009186 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	889b      	ldrh	r3, [r3, #4]
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b01      	cmp	r3, #1
 8009152:	d813      	bhi.n	800917c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	4798      	blx	r3
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	88db      	ldrh	r3, [r3, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d110      	bne.n	8009190 <USBD_StdItfReq+0x78>
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10d      	bne.n	8009190 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fd56 	bl	8009c26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800917a:	e009      	b.n	8009190 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fc89 	bl	8009a96 <USBD_CtlError>
          break;
 8009184:	e004      	b.n	8009190 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc84 	bl	8009a96 <USBD_CtlError>
          break;
 800918e:	e000      	b.n	8009192 <USBD_StdItfReq+0x7a>
          break;
 8009190:	bf00      	nop
      }
      break;
 8009192:	e004      	b.n	800919e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc7d 	bl	8009a96 <USBD_CtlError>
      break;
 800919c:	bf00      	nop
  }

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	889b      	ldrh	r3, [r3, #4]
 80091ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	d007      	beq.n	80091d8 <USBD_StdEPReq+0x30>
 80091c8:	2b40      	cmp	r3, #64	; 0x40
 80091ca:	f200 8146 	bhi.w	800945a <USBD_StdEPReq+0x2b2>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <USBD_StdEPReq+0x40>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	f040 8141 	bne.w	800945a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	4798      	blx	r3
      break;
 80091e6:	e13d      	b.n	8009464 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091f0:	2b20      	cmp	r3, #32
 80091f2:	d10a      	bne.n	800920a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	e12d      	b.n	8009466 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b03      	cmp	r3, #3
 8009210:	d007      	beq.n	8009222 <USBD_StdEPReq+0x7a>
 8009212:	2b03      	cmp	r3, #3
 8009214:	f300 811b 	bgt.w	800944e <USBD_StdEPReq+0x2a6>
 8009218:	2b00      	cmp	r3, #0
 800921a:	d072      	beq.n	8009302 <USBD_StdEPReq+0x15a>
 800921c:	2b01      	cmp	r3, #1
 800921e:	d03a      	beq.n	8009296 <USBD_StdEPReq+0xee>
 8009220:	e115      	b.n	800944e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009228:	2b02      	cmp	r3, #2
 800922a:	d002      	beq.n	8009232 <USBD_StdEPReq+0x8a>
 800922c:	2b03      	cmp	r3, #3
 800922e:	d015      	beq.n	800925c <USBD_StdEPReq+0xb4>
 8009230:	e02b      	b.n	800928a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00c      	beq.n	8009252 <USBD_StdEPReq+0xaa>
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d009      	beq.n	8009252 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 f884 	bl	800a350 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009248:	2180      	movs	r1, #128	; 0x80
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f001 f880 	bl	800a350 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009250:	e020      	b.n	8009294 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc1e 	bl	8009a96 <USBD_CtlError>
              break;
 800925a:	e01b      	b.n	8009294 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	885b      	ldrh	r3, [r3, #2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10e      	bne.n	8009282 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <USBD_StdEPReq+0xda>
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b80      	cmp	r3, #128	; 0x80
 800926e:	d008      	beq.n	8009282 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	88db      	ldrh	r3, [r3, #6]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d104      	bne.n	8009282 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 f867 	bl	800a350 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fccf 	bl	8009c26 <USBD_CtlSendStatus>

              break;
 8009288:	e004      	b.n	8009294 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fc02 	bl	8009a96 <USBD_CtlError>
              break;
 8009292:	bf00      	nop
          }
          break;
 8009294:	e0e0      	b.n	8009458 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929c:	2b02      	cmp	r3, #2
 800929e:	d002      	beq.n	80092a6 <USBD_StdEPReq+0xfe>
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d015      	beq.n	80092d0 <USBD_StdEPReq+0x128>
 80092a4:	e026      	b.n	80092f4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <USBD_StdEPReq+0x11e>
 80092ac:	7bbb      	ldrb	r3, [r7, #14]
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d009      	beq.n	80092c6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 f84a 	bl	800a350 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80092bc:	2180      	movs	r1, #128	; 0x80
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f001 f846 	bl	800a350 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092c4:	e01c      	b.n	8009300 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fbe4 	bl	8009a96 <USBD_CtlError>
              break;
 80092ce:	e017      	b.n	8009300 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	885b      	ldrh	r3, [r3, #2]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d112      	bne.n	80092fe <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d004      	beq.n	80092ec <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 f851 	bl	800a38e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc9a 	bl	8009c26 <USBD_CtlSendStatus>
              }
              break;
 80092f2:	e004      	b.n	80092fe <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fbcd 	bl	8009a96 <USBD_CtlError>
              break;
 80092fc:	e000      	b.n	8009300 <USBD_StdEPReq+0x158>
              break;
 80092fe:	bf00      	nop
          }
          break;
 8009300:	e0aa      	b.n	8009458 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	2b02      	cmp	r3, #2
 800930a:	d002      	beq.n	8009312 <USBD_StdEPReq+0x16a>
 800930c:	2b03      	cmp	r3, #3
 800930e:	d032      	beq.n	8009376 <USBD_StdEPReq+0x1ce>
 8009310:	e097      	b.n	8009442 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <USBD_StdEPReq+0x180>
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b80      	cmp	r3, #128	; 0x80
 800931c:	d004      	beq.n	8009328 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fbb8 	bl	8009a96 <USBD_CtlError>
                break;
 8009326:	e091      	b.n	800944c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009328:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800932c:	2b00      	cmp	r3, #0
 800932e:	da0b      	bge.n	8009348 <USBD_StdEPReq+0x1a0>
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	3310      	adds	r3, #16
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4413      	add	r3, r2
 8009344:	3304      	adds	r3, #4
 8009346:	e00b      	b.n	8009360 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	3304      	adds	r3, #4
 8009360:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2202      	movs	r2, #2
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fbfb 	bl	8009b6a <USBD_CtlSendData>
              break;
 8009374:	e06a      	b.n	800944c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	da11      	bge.n	80093a2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4613      	mov	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	440b      	add	r3, r1
 8009390:	3318      	adds	r3, #24
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d117      	bne.n	80093c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fb7b 	bl	8009a96 <USBD_CtlError>
                  break;
 80093a0:	e054      	b.n	800944c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	f003 020f 	and.w	r2, r3, #15
 80093a8:	6879      	ldr	r1, [r7, #4]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fb68 	bl	8009a96 <USBD_CtlError>
                  break;
 80093c6:	e041      	b.n	800944c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	da0b      	bge.n	80093e8 <USBD_StdEPReq+0x240>
 80093d0:	7bbb      	ldrb	r3, [r7, #14]
 80093d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d6:	4613      	mov	r3, r2
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	3310      	adds	r3, #16
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4413      	add	r3, r2
 80093e4:	3304      	adds	r3, #4
 80093e6:	e00b      	b.n	8009400 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	3304      	adds	r3, #4
 8009400:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <USBD_StdEPReq+0x266>
 8009408:	7bbb      	ldrb	r3, [r7, #14]
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d103      	bne.n	8009416 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e00e      	b.n	8009434 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 ffd6 	bl	800a3cc <USBD_LL_IsStallEP>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	2201      	movs	r2, #1
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	e002      	b.n	8009434 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fb95 	bl	8009b6a <USBD_CtlSendData>
              break;
 8009440:	e004      	b.n	800944c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fb26 	bl	8009a96 <USBD_CtlError>
              break;
 800944a:	bf00      	nop
          }
          break;
 800944c:	e004      	b.n	8009458 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fb20 	bl	8009a96 <USBD_CtlError>
          break;
 8009456:	bf00      	nop
      }
      break;
 8009458:	e004      	b.n	8009464 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fb1a 	bl	8009a96 <USBD_CtlError>
      break;
 8009462:	bf00      	nop
  }

  return ret;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	3b01      	subs	r3, #1
 8009490:	2b06      	cmp	r3, #6
 8009492:	f200 8128 	bhi.w	80096e6 <USBD_GetDescriptor+0x276>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <USBD_GetDescriptor+0x2c>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094d1 	.word	0x080094d1
 80094a4:	08009511 	.word	0x08009511
 80094a8:	080096e7 	.word	0x080096e7
 80094ac:	080096e7 	.word	0x080096e7
 80094b0:	08009687 	.word	0x08009687
 80094b4:	080096b3 	.word	0x080096b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	7c12      	ldrb	r2, [r2, #16]
 80094c4:	f107 0108 	add.w	r1, r7, #8
 80094c8:	4610      	mov	r0, r2
 80094ca:	4798      	blx	r3
 80094cc:	60f8      	str	r0, [r7, #12]
      break;
 80094ce:	e112      	b.n	80096f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7c1b      	ldrb	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10d      	bne.n	80094f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	f107 0208 	add.w	r2, r7, #8
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
 80094e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	3301      	adds	r3, #1
 80094ee:	2202      	movs	r2, #2
 80094f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80094f2:	e100      	b.n	80096f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	f107 0208 	add.w	r2, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	2202      	movs	r2, #2
 800950c:	701a      	strb	r2, [r3, #0]
      break;
 800950e:	e0f2      	b.n	80096f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	885b      	ldrh	r3, [r3, #2]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b05      	cmp	r3, #5
 8009518:	f200 80ac 	bhi.w	8009674 <USBD_GetDescriptor+0x204>
 800951c:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <USBD_GetDescriptor+0xb4>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	0800953d 	.word	0x0800953d
 8009528:	08009571 	.word	0x08009571
 800952c:	080095a5 	.word	0x080095a5
 8009530:	080095d9 	.word	0x080095d9
 8009534:	0800960d 	.word	0x0800960d
 8009538:	08009641 	.word	0x08009641
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00b      	beq.n	8009560 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	7c12      	ldrb	r2, [r2, #16]
 8009554:	f107 0108 	add.w	r1, r7, #8
 8009558:	4610      	mov	r0, r2
 800955a:	4798      	blx	r3
 800955c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800955e:	e091      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa97 	bl	8009a96 <USBD_CtlError>
            err++;
 8009568:	7afb      	ldrb	r3, [r7, #11]
 800956a:	3301      	adds	r3, #1
 800956c:	72fb      	strb	r3, [r7, #11]
          break;
 800956e:	e089      	b.n	8009684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	7c12      	ldrb	r2, [r2, #16]
 8009588:	f107 0108 	add.w	r1, r7, #8
 800958c:	4610      	mov	r0, r2
 800958e:	4798      	blx	r3
 8009590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009592:	e077      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fa7d 	bl	8009a96 <USBD_CtlError>
            err++;
 800959c:	7afb      	ldrb	r3, [r7, #11]
 800959e:	3301      	adds	r3, #1
 80095a0:	72fb      	strb	r3, [r7, #11]
          break;
 80095a2:	e06f      	b.n	8009684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00b      	beq.n	80095c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	7c12      	ldrb	r2, [r2, #16]
 80095bc:	f107 0108 	add.w	r1, r7, #8
 80095c0:	4610      	mov	r0, r2
 80095c2:	4798      	blx	r3
 80095c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095c6:	e05d      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fa63 	bl	8009a96 <USBD_CtlError>
            err++;
 80095d0:	7afb      	ldrb	r3, [r7, #11]
 80095d2:	3301      	adds	r3, #1
 80095d4:	72fb      	strb	r3, [r7, #11]
          break;
 80095d6:	e055      	b.n	8009684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	7c12      	ldrb	r2, [r2, #16]
 80095f0:	f107 0108 	add.w	r1, r7, #8
 80095f4:	4610      	mov	r0, r2
 80095f6:	4798      	blx	r3
 80095f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095fa:	e043      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fa49 	bl	8009a96 <USBD_CtlError>
            err++;
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	3301      	adds	r3, #1
 8009608:	72fb      	strb	r3, [r7, #11]
          break;
 800960a:	e03b      	b.n	8009684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7c12      	ldrb	r2, [r2, #16]
 8009624:	f107 0108 	add.w	r1, r7, #8
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
 800962c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962e:	e029      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fa2f 	bl	8009a96 <USBD_CtlError>
            err++;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	3301      	adds	r3, #1
 800963c:	72fb      	strb	r3, [r7, #11]
          break;
 800963e:	e021      	b.n	8009684 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	7c12      	ldrb	r2, [r2, #16]
 8009658:	f107 0108 	add.w	r1, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009662:	e00f      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa15 	bl	8009a96 <USBD_CtlError>
            err++;
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	3301      	adds	r3, #1
 8009670:	72fb      	strb	r3, [r7, #11]
          break;
 8009672:	e007      	b.n	8009684 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa0d 	bl	8009a96 <USBD_CtlError>
          err++;
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	3301      	adds	r3, #1
 8009680:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009682:	e038      	b.n	80096f6 <USBD_GetDescriptor+0x286>
 8009684:	e037      	b.n	80096f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	7c1b      	ldrb	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d109      	bne.n	80096a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009696:	f107 0208 	add.w	r2, r7, #8
 800969a:	4610      	mov	r0, r2
 800969c:	4798      	blx	r3
 800969e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096a0:	e029      	b.n	80096f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f9f6 	bl	8009a96 <USBD_CtlError>
        err++;
 80096aa:	7afb      	ldrb	r3, [r7, #11]
 80096ac:	3301      	adds	r3, #1
 80096ae:	72fb      	strb	r3, [r7, #11]
      break;
 80096b0:	e021      	b.n	80096f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7c1b      	ldrb	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10d      	bne.n	80096d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	f107 0208 	add.w	r2, r7, #8
 80096c6:	4610      	mov	r0, r2
 80096c8:	4798      	blx	r3
 80096ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	2207      	movs	r2, #7
 80096d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096d4:	e00f      	b.n	80096f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f9dc 	bl	8009a96 <USBD_CtlError>
        err++;
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	3301      	adds	r3, #1
 80096e2:	72fb      	strb	r3, [r7, #11]
      break;
 80096e4:	e007      	b.n	80096f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 f9d4 	bl	8009a96 <USBD_CtlError>
      err++;
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	3301      	adds	r3, #1
 80096f2:	72fb      	strb	r3, [r7, #11]
      break;
 80096f4:	bf00      	nop
  }

  if (err != 0U)
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d11c      	bne.n	8009736 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80096fc:	893b      	ldrh	r3, [r7, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d011      	beq.n	8009726 <USBD_GetDescriptor+0x2b6>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00d      	beq.n	8009726 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	88da      	ldrh	r2, [r3, #6]
 800970e:	893b      	ldrh	r3, [r7, #8]
 8009710:	4293      	cmp	r3, r2
 8009712:	bf28      	it	cs
 8009714:	4613      	movcs	r3, r2
 8009716:	b29b      	uxth	r3, r3
 8009718:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800971a:	893b      	ldrh	r3, [r7, #8]
 800971c:	461a      	mov	r2, r3
 800971e:	68f9      	ldr	r1, [r7, #12]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fa22 	bl	8009b6a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d104      	bne.n	8009738 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa79 	bl	8009c26 <USBD_CtlSendStatus>
 8009734:	e000      	b.n	8009738 <USBD_GetDescriptor+0x2c8>
    return;
 8009736:	bf00      	nop
    }
  }
}
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop

08009740 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	889b      	ldrh	r3, [r3, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d130      	bne.n	80097b4 <USBD_SetAddress+0x74>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	88db      	ldrh	r3, [r3, #6]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d12c      	bne.n	80097b4 <USBD_SetAddress+0x74>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	885b      	ldrh	r3, [r3, #2]
 800975e:	2b7f      	cmp	r3, #127	; 0x7f
 8009760:	d828      	bhi.n	80097b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	885b      	ldrh	r3, [r3, #2]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009774:	2b03      	cmp	r3, #3
 8009776:	d104      	bne.n	8009782 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f98b 	bl	8009a96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009780:	e01d      	b.n	80097be <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7bfa      	ldrb	r2, [r7, #15]
 8009786:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fe48 	bl	800a424 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fa46 	bl	8009c26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097a8:	e009      	b.n	80097be <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b2:	e004      	b.n	80097be <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f96d 	bl	8009a96 <USBD_CtlError>
  }
}
 80097bc:	bf00      	nop
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	885b      	ldrh	r3, [r3, #2]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	4b41      	ldr	r3, [pc, #260]	; (80098e0 <USBD_SetConfig+0x118>)
 80097da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097dc:	4b40      	ldr	r3, [pc, #256]	; (80098e0 <USBD_SetConfig+0x118>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d904      	bls.n	80097ee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f955 	bl	8009a96 <USBD_CtlError>
 80097ec:	e075      	b.n	80098da <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d002      	beq.n	80097fe <USBD_SetConfig+0x36>
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d023      	beq.n	8009844 <USBD_SetConfig+0x7c>
 80097fc:	e062      	b.n	80098c4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80097fe:	4b38      	ldr	r3, [pc, #224]	; (80098e0 <USBD_SetConfig+0x118>)
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01a      	beq.n	800983c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009806:	4b36      	ldr	r3, [pc, #216]	; (80098e0 <USBD_SetConfig+0x118>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2203      	movs	r2, #3
 8009814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009818:	4b31      	ldr	r3, [pc, #196]	; (80098e0 <USBD_SetConfig+0x118>)
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff f9e7 	bl	8008bf2 <USBD_SetClassConfig>
 8009824:	4603      	mov	r3, r0
 8009826:	2b02      	cmp	r3, #2
 8009828:	d104      	bne.n	8009834 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f932 	bl	8009a96 <USBD_CtlError>
            return;
 8009832:	e052      	b.n	80098da <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9f6 	bl	8009c26 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800983a:	e04e      	b.n	80098da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f9f2 	bl	8009c26 <USBD_CtlSendStatus>
        break;
 8009842:	e04a      	b.n	80098da <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009844:	4b26      	ldr	r3, [pc, #152]	; (80098e0 <USBD_SetConfig+0x118>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d112      	bne.n	8009872 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009854:	4b22      	ldr	r3, [pc, #136]	; (80098e0 <USBD_SetConfig+0x118>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800985e:	4b20      	ldr	r3, [pc, #128]	; (80098e0 <USBD_SetConfig+0x118>)
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff f9e3 	bl	8008c30 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f9db 	bl	8009c26 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009870:	e033      	b.n	80098da <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009872:	4b1b      	ldr	r3, [pc, #108]	; (80098e0 <USBD_SetConfig+0x118>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d01d      	beq.n	80098bc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff f9d1 	bl	8008c30 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800988e:	4b14      	ldr	r3, [pc, #80]	; (80098e0 <USBD_SetConfig+0x118>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	461a      	mov	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009898:	4b11      	ldr	r3, [pc, #68]	; (80098e0 <USBD_SetConfig+0x118>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff f9a7 	bl	8008bf2 <USBD_SetClassConfig>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d104      	bne.n	80098b4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f8f2 	bl	8009a96 <USBD_CtlError>
            return;
 80098b2:	e012      	b.n	80098da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9b6 	bl	8009c26 <USBD_CtlSendStatus>
        break;
 80098ba:	e00e      	b.n	80098da <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f9b2 	bl	8009c26 <USBD_CtlSendStatus>
        break;
 80098c2:	e00a      	b.n	80098da <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8e5 	bl	8009a96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <USBD_SetConfig+0x118>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff f9ac 	bl	8008c30 <USBD_ClrClassConfig>
        break;
 80098d8:	bf00      	nop
    }
  }
}
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200003f0 	.word	0x200003f0

080098e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	88db      	ldrh	r3, [r3, #6]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d004      	beq.n	8009900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f8cc 	bl	8009a96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098fe:	e022      	b.n	8009946 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009906:	2b02      	cmp	r3, #2
 8009908:	dc02      	bgt.n	8009910 <USBD_GetConfig+0x2c>
 800990a:	2b00      	cmp	r3, #0
 800990c:	dc03      	bgt.n	8009916 <USBD_GetConfig+0x32>
 800990e:	e015      	b.n	800993c <USBD_GetConfig+0x58>
 8009910:	2b03      	cmp	r3, #3
 8009912:	d00b      	beq.n	800992c <USBD_GetConfig+0x48>
 8009914:	e012      	b.n	800993c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3308      	adds	r3, #8
 8009920:	2201      	movs	r2, #1
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f920 	bl	8009b6a <USBD_CtlSendData>
        break;
 800992a:	e00c      	b.n	8009946 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	3304      	adds	r3, #4
 8009930:	2201      	movs	r2, #1
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f918 	bl	8009b6a <USBD_CtlSendData>
        break;
 800993a:	e004      	b.n	8009946 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f8a9 	bl	8009a96 <USBD_CtlError>
        break;
 8009944:	bf00      	nop
}
 8009946:	bf00      	nop
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b082      	sub	sp, #8
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995e:	3b01      	subs	r3, #1
 8009960:	2b02      	cmp	r3, #2
 8009962:	d81e      	bhi.n	80099a2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d004      	beq.n	8009976 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f891 	bl	8009a96 <USBD_CtlError>
        break;
 8009974:	e01a      	b.n	80099ac <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f043 0202 	orr.w	r2, r3, #2
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	330c      	adds	r3, #12
 8009996:	2202      	movs	r2, #2
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f8e5 	bl	8009b6a <USBD_CtlSendData>
      break;
 80099a0:	e004      	b.n	80099ac <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f876 	bl	8009a96 <USBD_CtlError>
      break;
 80099aa:	bf00      	nop
  }
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d106      	bne.n	80099d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f929 	bl	8009c26 <USBD_CtlSendStatus>
  }
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	3b01      	subs	r3, #1
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d80b      	bhi.n	8009a0a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	885b      	ldrh	r3, [r3, #2]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d10c      	bne.n	8009a14 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f90f 	bl	8009c26 <USBD_CtlSendStatus>
      }
      break;
 8009a08:	e004      	b.n	8009a14 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f842 	bl	8009a96 <USBD_CtlError>
      break;
 8009a12:	e000      	b.n	8009a16 <USBD_ClrFeature+0x3a>
      break;
 8009a14:	bf00      	nop
  }
}
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	785a      	ldrb	r2, [r3, #1]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	3302      	adds	r3, #2
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	3303      	adds	r3, #3
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	4413      	add	r3, r2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	3304      	adds	r3, #4
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	3305      	adds	r3, #5
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	021b      	lsls	r3, r3, #8
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4413      	add	r3, r2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	3306      	adds	r3, #6
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	3307      	adds	r3, #7
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	4413      	add	r3, r2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	80da      	strh	r2, [r3, #6]

}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009aa0:	2180      	movs	r1, #128	; 0x80
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fc54 	bl	800a350 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fc50 	bl	800a350 <USBD_LL_StallEP>
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d032      	beq.n	8009b34 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 f834 	bl	8009b3c <USBD_GetLen>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	75fa      	strb	r2, [r7, #23]
 8009ae8:	461a      	mov	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	4413      	add	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	7812      	ldrb	r2, [r2, #0]
 8009af2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	75fa      	strb	r2, [r7, #23]
 8009afa:	461a      	mov	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4413      	add	r3, r2
 8009b00:	2203      	movs	r2, #3
 8009b02:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009b04:	e012      	b.n	8009b2c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	60fa      	str	r2, [r7, #12]
 8009b0c:	7dfa      	ldrb	r2, [r7, #23]
 8009b0e:	1c51      	adds	r1, r2, #1
 8009b10:	75f9      	strb	r1, [r7, #23]
 8009b12:	4611      	mov	r1, r2
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	440a      	add	r2, r1
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	75fa      	strb	r2, [r7, #23]
 8009b22:	461a      	mov	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	4413      	add	r3, r2
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e8      	bne.n	8009b06 <USBD_GetString+0x4e>
    }
  }
}
 8009b34:	bf00      	nop
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009b48:	e005      	b.n	8009b56 <USBD_GetLen+0x1a>
  {
    len++;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3301      	adds	r3, #1
 8009b54:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f5      	bne.n	8009b4a <USBD_GetLen+0xe>
  }

  return len;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bc80      	pop	{r7}
 8009b68:	4770      	bx	lr

08009b6a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	60f8      	str	r0, [r7, #12]
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	4613      	mov	r3, r2
 8009b76:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b86:	88fa      	ldrh	r2, [r7, #6]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b8c:	88fb      	ldrh	r3, [r7, #6]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	2100      	movs	r1, #0
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fc65 	bl	800a462 <USBD_LL_Transmit>

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	4613      	mov	r3, r2
 8009bae:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 fc53 	bl	800a462 <USBD_LL_Transmit>

  return USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2203      	movs	r2, #3
 8009bd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009bdc:	88fa      	ldrh	r2, [r7, #6]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009be4:	88fa      	ldrh	r2, [r7, #6]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bec:	88fb      	ldrh	r3, [r7, #6]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fc58 	bl	800a4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c10:	88fb      	ldrh	r3, [r7, #6]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	2100      	movs	r1, #0
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fc46 	bl	800a4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b082      	sub	sp, #8
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2204      	movs	r2, #4
 8009c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c36:	2300      	movs	r3, #0
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fc10 	bl	800a462 <USBD_LL_Transmit>

  return USBD_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2205      	movs	r2, #5
 8009c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fc20 	bl	800a4a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
	...

08009c74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4912      	ldr	r1, [pc, #72]	; (8009cc4 <MX_USB_DEVICE_Init+0x50>)
 8009c7c:	4812      	ldr	r0, [pc, #72]	; (8009cc8 <MX_USB_DEVICE_Init+0x54>)
 8009c7e:	f7fe ff5e 	bl	8008b3e <USBD_Init>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c88:	f7f6 fe24 	bl	80008d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c8c:	490f      	ldr	r1, [pc, #60]	; (8009ccc <MX_USB_DEVICE_Init+0x58>)
 8009c8e:	480e      	ldr	r0, [pc, #56]	; (8009cc8 <MX_USB_DEVICE_Init+0x54>)
 8009c90:	f7fe ff80 	bl	8008b94 <USBD_RegisterClass>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c9a:	f7f6 fe1b 	bl	80008d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c9e:	490c      	ldr	r1, [pc, #48]	; (8009cd0 <MX_USB_DEVICE_Init+0x5c>)
 8009ca0:	4809      	ldr	r0, [pc, #36]	; (8009cc8 <MX_USB_DEVICE_Init+0x54>)
 8009ca2:	f7fe feb1 	bl	8008a08 <USBD_CDC_RegisterInterface>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009cac:	f7f6 fe12 	bl	80008d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009cb0:	4805      	ldr	r0, [pc, #20]	; (8009cc8 <MX_USB_DEVICE_Init+0x54>)
 8009cb2:	f7fe ff88 	bl	8008bc6 <USBD_Start>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009cbc:	f7f6 fe0a 	bl	80008d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009cc0:	bf00      	nop
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	2000014c 	.word	0x2000014c
 8009cc8:	200003f4 	.word	0x200003f4
 8009ccc:	20000038 	.word	0x20000038
 8009cd0:	2000013c 	.word	0x2000013c

08009cd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4905      	ldr	r1, [pc, #20]	; (8009cf0 <CDC_Init_FS+0x1c>)
 8009cdc:	4805      	ldr	r0, [pc, #20]	; (8009cf4 <CDC_Init_FS+0x20>)
 8009cde:	f7fe fea9 	bl	8008a34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ce2:	4905      	ldr	r1, [pc, #20]	; (8009cf8 <CDC_Init_FS+0x24>)
 8009ce4:	4803      	ldr	r0, [pc, #12]	; (8009cf4 <CDC_Init_FS+0x20>)
 8009ce6:	f7fe febe 	bl	8008a66 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009cea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000aa0 	.word	0x20000aa0
 8009cf4:	200003f4 	.word	0x200003f4
 8009cf8:	200006b8 	.word	0x200006b8

08009cfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bc80      	pop	{r7}
 8009d08:	4770      	bx	lr
	...

08009d0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b23      	cmp	r3, #35	; 0x23
 8009d20:	d84a      	bhi.n	8009db8 <CDC_Control_FS+0xac>
 8009d22:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <CDC_Control_FS+0x1c>)
 8009d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d28:	08009db9 	.word	0x08009db9
 8009d2c:	08009db9 	.word	0x08009db9
 8009d30:	08009db9 	.word	0x08009db9
 8009d34:	08009db9 	.word	0x08009db9
 8009d38:	08009db9 	.word	0x08009db9
 8009d3c:	08009db9 	.word	0x08009db9
 8009d40:	08009db9 	.word	0x08009db9
 8009d44:	08009db9 	.word	0x08009db9
 8009d48:	08009db9 	.word	0x08009db9
 8009d4c:	08009db9 	.word	0x08009db9
 8009d50:	08009db9 	.word	0x08009db9
 8009d54:	08009db9 	.word	0x08009db9
 8009d58:	08009db9 	.word	0x08009db9
 8009d5c:	08009db9 	.word	0x08009db9
 8009d60:	08009db9 	.word	0x08009db9
 8009d64:	08009db9 	.word	0x08009db9
 8009d68:	08009db9 	.word	0x08009db9
 8009d6c:	08009db9 	.word	0x08009db9
 8009d70:	08009db9 	.word	0x08009db9
 8009d74:	08009db9 	.word	0x08009db9
 8009d78:	08009db9 	.word	0x08009db9
 8009d7c:	08009db9 	.word	0x08009db9
 8009d80:	08009db9 	.word	0x08009db9
 8009d84:	08009db9 	.word	0x08009db9
 8009d88:	08009db9 	.word	0x08009db9
 8009d8c:	08009db9 	.word	0x08009db9
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009db9 	.word	0x08009db9
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009db9 	.word	0x08009db9
 8009da4:	08009db9 	.word	0x08009db9
 8009da8:	08009db9 	.word	0x08009db9
 8009dac:	08009db9 	.word	0x08009db9
 8009db0:	08009db9 	.word	0x08009db9
 8009db4:	08009db9 	.word	0x08009db9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009db8:	bf00      	nop
  }

  return (USBD_OK);
 8009dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop

08009dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	4805      	ldr	r0, [pc, #20]	; (8009dec <CDC_Receive_FS+0x24>)
 8009dd6:	f7fe fe46 	bl	8008a66 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009dda:	4804      	ldr	r0, [pc, #16]	; (8009dec <CDC_Receive_FS+0x24>)
 8009ddc:	f7fe fe85 	bl	8008aea <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009de0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	200003f4 	.word	0x200003f4

08009df0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <CDC_Transmit_FS+0x48>)
 8009e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e00b      	b.n	8009e2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009e16:	887b      	ldrh	r3, [r7, #2]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4806      	ldr	r0, [pc, #24]	; (8009e38 <CDC_Transmit_FS+0x48>)
 8009e1e:	f7fe fe09 	bl	8008a34 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009e22:	4805      	ldr	r0, [pc, #20]	; (8009e38 <CDC_Transmit_FS+0x48>)
 8009e24:	f7fe fe32 	bl	8008a8c <USBD_CDC_TransmitPacket>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200003f4 	.word	0x200003f4

08009e3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	6039      	str	r1, [r7, #0]
 8009e46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2212      	movs	r2, #18
 8009e4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e4e:	4b03      	ldr	r3, [pc, #12]	; (8009e5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	20000168 	.word	0x20000168

08009e60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2204      	movs	r2, #4
 8009e70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e72:	4b03      	ldr	r3, [pc, #12]	; (8009e80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bc80      	pop	{r7}
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	2000017c 	.word	0x2000017c

08009e84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	6039      	str	r1, [r7, #0]
 8009e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	4907      	ldr	r1, [pc, #28]	; (8009eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e9a:	4808      	ldr	r0, [pc, #32]	; (8009ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8009e9c:	f7ff fe0c 	bl	8009ab8 <USBD_GetString>
 8009ea0:	e004      	b.n	8009eac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	4904      	ldr	r1, [pc, #16]	; (8009eb8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ea6:	4805      	ldr	r0, [pc, #20]	; (8009ebc <USBD_FS_ProductStrDescriptor+0x38>)
 8009ea8:	f7ff fe06 	bl	8009ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000e88 	.word	0x20000e88
 8009ebc:	0800af4c 	.word	0x0800af4c

08009ec0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	4904      	ldr	r1, [pc, #16]	; (8009ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ed0:	4804      	ldr	r0, [pc, #16]	; (8009ee4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ed2:	f7ff fdf1 	bl	8009ab8 <USBD_GetString>
  return USBD_StrDesc;
 8009ed6:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000e88 	.word	0x20000e88
 8009ee4:	0800af64 	.word	0x0800af64

08009ee8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	221a      	movs	r2, #26
 8009ef8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009efa:	f000 f843 	bl	8009f84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009efe:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	20000180 	.word	0x20000180

08009f0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4907      	ldr	r1, [pc, #28]	; (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f22:	4808      	ldr	r0, [pc, #32]	; (8009f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f24:	f7ff fdc8 	bl	8009ab8 <USBD_GetString>
 8009f28:	e004      	b.n	8009f34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4904      	ldr	r1, [pc, #16]	; (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f2e:	4805      	ldr	r0, [pc, #20]	; (8009f44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f30:	f7ff fdc2 	bl	8009ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000e88 	.word	0x20000e88
 8009f44:	0800af78 	.word	0x0800af78

08009f48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	4907      	ldr	r1, [pc, #28]	; (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f5e:	4808      	ldr	r0, [pc, #32]	; (8009f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f60:	f7ff fdaa 	bl	8009ab8 <USBD_GetString>
 8009f64:	e004      	b.n	8009f70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4904      	ldr	r1, [pc, #16]	; (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f6a:	4805      	ldr	r0, [pc, #20]	; (8009f80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f6c:	f7ff fda4 	bl	8009ab8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f70:	4b02      	ldr	r3, [pc, #8]	; (8009f7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20000e88 	.word	0x20000e88
 8009f80:	0800af84 	.word	0x0800af84

08009f84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <Get_SerialNum+0x44>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f90:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <Get_SerialNum+0x48>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f96:	4b0e      	ldr	r3, [pc, #56]	; (8009fd0 <Get_SerialNum+0x4c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009faa:	2208      	movs	r2, #8
 8009fac:	4909      	ldr	r1, [pc, #36]	; (8009fd4 <Get_SerialNum+0x50>)
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 f814 	bl	8009fdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fb4:	2204      	movs	r2, #4
 8009fb6:	4908      	ldr	r1, [pc, #32]	; (8009fd8 <Get_SerialNum+0x54>)
 8009fb8:	68b8      	ldr	r0, [r7, #8]
 8009fba:	f000 f80f 	bl	8009fdc <IntToUnicode>
  }
}
 8009fbe:	bf00      	nop
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	1ffff7e8 	.word	0x1ffff7e8
 8009fcc:	1ffff7ec 	.word	0x1ffff7ec
 8009fd0:	1ffff7f0 	.word	0x1ffff7f0
 8009fd4:	20000182 	.word	0x20000182
 8009fd8:	20000192 	.word	0x20000192

08009fdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009fea:	2300      	movs	r3, #0
 8009fec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
 8009ff2:	e027      	b.n	800a044 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	0f1b      	lsrs	r3, r3, #28
 8009ff8:	2b09      	cmp	r3, #9
 8009ffa:	d80b      	bhi.n	800a014 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	0f1b      	lsrs	r3, r3, #28
 800a000:	b2da      	uxtb	r2, r3
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	4619      	mov	r1, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	440b      	add	r3, r1
 800a00c:	3230      	adds	r2, #48	; 0x30
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e00a      	b.n	800a02a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	0f1b      	lsrs	r3, r3, #28
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	4619      	mov	r1, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	440b      	add	r3, r1
 800a024:	3237      	adds	r2, #55	; 0x37
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	011b      	lsls	r3, r3, #4
 800a02e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	3301      	adds	r3, #1
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	4413      	add	r3, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	3301      	adds	r3, #1
 800a042:	75fb      	strb	r3, [r7, #23]
 800a044:	7dfa      	ldrb	r2, [r7, #23]
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d3d3      	bcc.n	8009ff4 <IntToUnicode+0x18>
  }
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	371c      	adds	r7, #28
 800a052:	46bd      	mov	sp, r7
 800a054:	bc80      	pop	{r7}
 800a056:	4770      	bx	lr

0800a058 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a0d      	ldr	r2, [pc, #52]	; (800a09c <HAL_PCD_MspInit+0x44>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d113      	bne.n	800a092 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a06a:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <HAL_PCD_MspInit+0x48>)
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	4a0c      	ldr	r2, [pc, #48]	; (800a0a0 <HAL_PCD_MspInit+0x48>)
 800a070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a074:	61d3      	str	r3, [r2, #28]
 800a076:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <HAL_PCD_MspInit+0x48>)
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a082:	2200      	movs	r2, #0
 800a084:	2100      	movs	r1, #0
 800a086:	2014      	movs	r0, #20
 800a088:	f7f7 fb5d 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a08c:	2014      	movs	r0, #20
 800a08e:	f7f7 fb76 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	40005c00 	.word	0x40005c00
 800a0a0:	40021000 	.word	0x40021000

0800a0a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4610      	mov	r0, r2
 800a0bc:	f7fe fdcb 	bl	8008c56 <USBD_LL_SetupStage>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	440b      	add	r3, r1
 800a0e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	78fb      	ldrb	r3, [r7, #3]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f7fe fdfd 	bl	8008cf0 <USBD_LL_DataOutStage>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b082      	sub	sp, #8
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	440b      	add	r3, r1
 800a11e:	333c      	adds	r3, #60	; 0x3c
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	78fb      	ldrb	r3, [r7, #3]
 800a124:	4619      	mov	r1, r3
 800a126:	f7fe fe54 	bl	8008dd2 <USBD_LL_DataInStage>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe ff64 	bl	800900e <USBD_LL_SOF>
}
 800a146:	bf00      	nop
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d001      	beq.n	800a166 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a162:	f7f6 fbb7 	bl	80008d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a16c:	7bfa      	ldrb	r2, [r7, #15]
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f7fe ff14 	bl	8008f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fecd 	bl	8008f1c <USBD_LL_Reset>
}
 800a182:	bf00      	nop
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
	...

0800a18c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ff0e 	bl	8008fbc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1a8:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <HAL_PCD_SuspendCallback+0x30>)
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	4a03      	ldr	r2, [pc, #12]	; (800a1bc <HAL_PCD_SuspendCallback+0x30>)
 800a1ae:	f043 0306 	orr.w	r3, r3, #6
 800a1b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	e000ed00 	.word	0xe000ed00

0800a1c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe ff08 	bl	8008fe4 <USBD_LL_Resume>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a1e4:	4a28      	ldr	r2, [pc, #160]	; (800a288 <USBD_LL_Init+0xac>)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a26      	ldr	r2, [pc, #152]	; (800a288 <USBD_LL_Init+0xac>)
 800a1f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a1f4:	4b24      	ldr	r3, [pc, #144]	; (800a288 <USBD_LL_Init+0xac>)
 800a1f6:	4a25      	ldr	r2, [pc, #148]	; (800a28c <USBD_LL_Init+0xb0>)
 800a1f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a1fa:	4b23      	ldr	r3, [pc, #140]	; (800a288 <USBD_LL_Init+0xac>)
 800a1fc:	2208      	movs	r2, #8
 800a1fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a200:	4b21      	ldr	r3, [pc, #132]	; (800a288 <USBD_LL_Init+0xac>)
 800a202:	2202      	movs	r2, #2
 800a204:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a206:	4b20      	ldr	r3, [pc, #128]	; (800a288 <USBD_LL_Init+0xac>)
 800a208:	2200      	movs	r2, #0
 800a20a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a20c:	4b1e      	ldr	r3, [pc, #120]	; (800a288 <USBD_LL_Init+0xac>)
 800a20e:	2200      	movs	r2, #0
 800a210:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a212:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <USBD_LL_Init+0xac>)
 800a214:	2200      	movs	r2, #0
 800a216:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a218:	481b      	ldr	r0, [pc, #108]	; (800a288 <USBD_LL_Init+0xac>)
 800a21a:	f7f7 fc67 	bl	8001aec <HAL_PCD_Init>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a224:	f7f6 fb56 	bl	80008d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a22e:	2318      	movs	r3, #24
 800a230:	2200      	movs	r2, #0
 800a232:	2100      	movs	r1, #0
 800a234:	f7f9 f8db 	bl	80033ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a23e:	2358      	movs	r3, #88	; 0x58
 800a240:	2200      	movs	r2, #0
 800a242:	2180      	movs	r1, #128	; 0x80
 800a244:	f7f9 f8d3 	bl	80033ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a24e:	23c0      	movs	r3, #192	; 0xc0
 800a250:	2200      	movs	r2, #0
 800a252:	2181      	movs	r1, #129	; 0x81
 800a254:	f7f9 f8cb 	bl	80033ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a25e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a262:	2200      	movs	r2, #0
 800a264:	2101      	movs	r1, #1
 800a266:	f7f9 f8c2 	bl	80033ee <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a274:	2200      	movs	r2, #0
 800a276:	2182      	movs	r1, #130	; 0x82
 800a278:	f7f9 f8b9 	bl	80033ee <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20001088 	.word	0x20001088
 800a28c:	40005c00 	.word	0x40005c00

0800a290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7f7 fd2b 	bl	8001d02 <HAL_PCD_Start>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f94e 	bl	800a554 <USBD_Get_USB_Status>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	70fb      	strb	r3, [r7, #3]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	70bb      	strb	r3, [r7, #2]
 800a2dc:	4613      	mov	r3, r2
 800a2de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a2ee:	78bb      	ldrb	r3, [r7, #2]
 800a2f0:	883a      	ldrh	r2, [r7, #0]
 800a2f2:	78f9      	ldrb	r1, [r7, #3]
 800a2f4:	f7f7 fea3 	bl	800203e <HAL_PCD_EP_Open>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 f928 	bl	800a554 <USBD_Get_USB_Status>
 800a304:	4603      	mov	r3, r0
 800a306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a308:	7bbb      	ldrb	r3, [r7, #14]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	460b      	mov	r3, r1
 800a31c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	4611      	mov	r1, r2
 800a330:	4618      	mov	r0, r3
 800a332:	f7f7 feea 	bl	800210a <HAL_PCD_EP_Close>
 800a336:	4603      	mov	r3, r0
 800a338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 f909 	bl	800a554 <USBD_Get_USB_Status>
 800a342:	4603      	mov	r3, r0
 800a344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a346:	7bbb      	ldrb	r3, [r7, #14]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a36a:	78fa      	ldrb	r2, [r7, #3]
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7f7 ffaa 	bl	80022c8 <HAL_PCD_EP_SetStall>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 f8ea 	bl	800a554 <USBD_Get_USB_Status>
 800a380:	4603      	mov	r3, r0
 800a382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a384:	7bbb      	ldrb	r3, [r7, #14]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b084      	sub	sp, #16
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	460b      	mov	r3, r1
 800a398:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3a8:	78fa      	ldrb	r2, [r7, #3]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7f7 ffeb 	bl	8002388 <HAL_PCD_EP_ClrStall>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f000 f8cb 	bl	800a554 <USBD_Get_USB_Status>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da0c      	bge.n	800a402 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ee:	68f9      	ldr	r1, [r7, #12]
 800a3f0:	1c5a      	adds	r2, r3, #1
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	440b      	add	r3, r1
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	e00b      	b.n	800a41a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a402:	78fb      	ldrb	r3, [r7, #3]
 800a404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a408:	68f9      	ldr	r1, [r7, #12]
 800a40a:	4613      	mov	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	00db      	lsls	r3, r3, #3
 800a412:	440b      	add	r3, r1
 800a414:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a418:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	bc80      	pop	{r7}
 800a422:	4770      	bx	lr

0800a424 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f7f7 fdd6 	bl	8001ff4 <HAL_PCD_SetAddress>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 f880 	bl	800a554 <USBD_Get_USB_Status>
 800a454:	4603      	mov	r3, r0
 800a456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a458:	7bbb      	ldrb	r3, [r7, #14]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b086      	sub	sp, #24
 800a466:	af00      	add	r7, sp, #0
 800a468:	60f8      	str	r0, [r7, #12]
 800a46a:	607a      	str	r2, [r7, #4]
 800a46c:	461a      	mov	r2, r3
 800a46e:	460b      	mov	r3, r1
 800a470:	72fb      	strb	r3, [r7, #11]
 800a472:	4613      	mov	r3, r2
 800a474:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a484:	893b      	ldrh	r3, [r7, #8]
 800a486:	7af9      	ldrb	r1, [r7, #11]
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	f7f7 feda 	bl	8002242 <HAL_PCD_EP_Transmit>
 800a48e:	4603      	mov	r3, r0
 800a490:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f85d 	bl	800a554 <USBD_Get_USB_Status>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a49e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	607a      	str	r2, [r7, #4]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	72fb      	strb	r3, [r7, #11]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4ca:	893b      	ldrh	r3, [r7, #8]
 800a4cc:	7af9      	ldrb	r1, [r7, #11]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	f7f7 fe63 	bl	800219a <HAL_PCD_EP_Receive>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f83a 	bl	800a554 <USBD_Get_USB_Status>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3718      	adds	r7, #24
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a500:	78fa      	ldrb	r2, [r7, #3]
 800a502:	4611      	mov	r1, r2
 800a504:	4618      	mov	r0, r3
 800a506:	f7f7 fe85 	bl	8002214 <HAL_PCD_EP_GetRxCount>
 800a50a:	4603      	mov	r3, r0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3708      	adds	r7, #8
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a51c:	4b02      	ldr	r3, [pc, #8]	; (800a528 <USBD_static_malloc+0x14>)
}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	bc80      	pop	{r7}
 800a526:	4770      	bx	lr
 800a528:	20001374 	.word	0x20001374

0800a52c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]

}
 800a534:	bf00      	nop
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	bc80      	pop	{r7}
 800a53c:	4770      	bx	lr

0800a53e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	460b      	mov	r3, r1
 800a548:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	bc80      	pop	{r7}
 800a552:	4770      	bx	lr

0800a554 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	4603      	mov	r3, r0
 800a55c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	2b03      	cmp	r3, #3
 800a566:	d817      	bhi.n	800a598 <USBD_Get_USB_Status+0x44>
 800a568:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <USBD_Get_USB_Status+0x1c>)
 800a56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56e:	bf00      	nop
 800a570:	0800a581 	.word	0x0800a581
 800a574:	0800a587 	.word	0x0800a587
 800a578:	0800a58d 	.word	0x0800a58d
 800a57c:	0800a593 	.word	0x0800a593
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
    break;
 800a584:	e00b      	b.n	800a59e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a586:	2302      	movs	r3, #2
 800a588:	73fb      	strb	r3, [r7, #15]
    break;
 800a58a:	e008      	b.n	800a59e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a58c:	2301      	movs	r3, #1
 800a58e:	73fb      	strb	r3, [r7, #15]
    break;
 800a590:	e005      	b.n	800a59e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a592:	2302      	movs	r3, #2
 800a594:	73fb      	strb	r3, [r7, #15]
    break;
 800a596:	e002      	b.n	800a59e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a598:	2302      	movs	r3, #2
 800a59a:	73fb      	strb	r3, [r7, #15]
    break;
 800a59c:	bf00      	nop
  }
  return usb_status;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bc80      	pop	{r7}
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop

0800a5ac <__errno>:
 800a5ac:	4b01      	ldr	r3, [pc, #4]	; (800a5b4 <__errno+0x8>)
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	2000019c 	.word	0x2000019c

0800a5b8 <__libc_init_array>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	4d0c      	ldr	r5, [pc, #48]	; (800a5f0 <__libc_init_array+0x38>)
 800a5be:	4c0d      	ldr	r4, [pc, #52]	; (800a5f4 <__libc_init_array+0x3c>)
 800a5c0:	1b64      	subs	r4, r4, r5
 800a5c2:	10a4      	asrs	r4, r4, #2
 800a5c4:	42a6      	cmp	r6, r4
 800a5c6:	d109      	bne.n	800a5dc <__libc_init_array+0x24>
 800a5c8:	f000 fc9c 	bl	800af04 <_init>
 800a5cc:	2600      	movs	r6, #0
 800a5ce:	4d0a      	ldr	r5, [pc, #40]	; (800a5f8 <__libc_init_array+0x40>)
 800a5d0:	4c0a      	ldr	r4, [pc, #40]	; (800a5fc <__libc_init_array+0x44>)
 800a5d2:	1b64      	subs	r4, r4, r5
 800a5d4:	10a4      	asrs	r4, r4, #2
 800a5d6:	42a6      	cmp	r6, r4
 800a5d8:	d105      	bne.n	800a5e6 <__libc_init_array+0x2e>
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e0:	4798      	blx	r3
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__libc_init_array+0xc>
 800a5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ea:	4798      	blx	r3
 800a5ec:	3601      	adds	r6, #1
 800a5ee:	e7f2      	b.n	800a5d6 <__libc_init_array+0x1e>
 800a5f0:	0800afd8 	.word	0x0800afd8
 800a5f4:	0800afd8 	.word	0x0800afd8
 800a5f8:	0800afd8 	.word	0x0800afd8
 800a5fc:	0800afdc 	.word	0x0800afdc

0800a600 <memset>:
 800a600:	4603      	mov	r3, r0
 800a602:	4402      	add	r2, r0
 800a604:	4293      	cmp	r3, r2
 800a606:	d100      	bne.n	800a60a <memset+0xa>
 800a608:	4770      	bx	lr
 800a60a:	f803 1b01 	strb.w	r1, [r3], #1
 800a60e:	e7f9      	b.n	800a604 <memset+0x4>

0800a610 <siprintf>:
 800a610:	b40e      	push	{r1, r2, r3}
 800a612:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a616:	b500      	push	{lr}
 800a618:	b09c      	sub	sp, #112	; 0x70
 800a61a:	ab1d      	add	r3, sp, #116	; 0x74
 800a61c:	9002      	str	r0, [sp, #8]
 800a61e:	9006      	str	r0, [sp, #24]
 800a620:	9107      	str	r1, [sp, #28]
 800a622:	9104      	str	r1, [sp, #16]
 800a624:	4808      	ldr	r0, [pc, #32]	; (800a648 <siprintf+0x38>)
 800a626:	4909      	ldr	r1, [pc, #36]	; (800a64c <siprintf+0x3c>)
 800a628:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62c:	9105      	str	r1, [sp, #20]
 800a62e:	6800      	ldr	r0, [r0, #0]
 800a630:	a902      	add	r1, sp, #8
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	f000 f868 	bl	800a708 <_svfiprintf_r>
 800a638:	2200      	movs	r2, #0
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	b01c      	add	sp, #112	; 0x70
 800a640:	f85d eb04 	ldr.w	lr, [sp], #4
 800a644:	b003      	add	sp, #12
 800a646:	4770      	bx	lr
 800a648:	2000019c 	.word	0x2000019c
 800a64c:	ffff0208 	.word	0xffff0208

0800a650 <__ssputs_r>:
 800a650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a654:	688e      	ldr	r6, [r1, #8]
 800a656:	4682      	mov	sl, r0
 800a658:	429e      	cmp	r6, r3
 800a65a:	460c      	mov	r4, r1
 800a65c:	4690      	mov	r8, r2
 800a65e:	461f      	mov	r7, r3
 800a660:	d838      	bhi.n	800a6d4 <__ssputs_r+0x84>
 800a662:	898a      	ldrh	r2, [r1, #12]
 800a664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a668:	d032      	beq.n	800a6d0 <__ssputs_r+0x80>
 800a66a:	6825      	ldr	r5, [r4, #0]
 800a66c:	6909      	ldr	r1, [r1, #16]
 800a66e:	3301      	adds	r3, #1
 800a670:	eba5 0901 	sub.w	r9, r5, r1
 800a674:	6965      	ldr	r5, [r4, #20]
 800a676:	444b      	add	r3, r9
 800a678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a67c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a680:	106d      	asrs	r5, r5, #1
 800a682:	429d      	cmp	r5, r3
 800a684:	bf38      	it	cc
 800a686:	461d      	movcc	r5, r3
 800a688:	0553      	lsls	r3, r2, #21
 800a68a:	d531      	bpl.n	800a6f0 <__ssputs_r+0xa0>
 800a68c:	4629      	mov	r1, r5
 800a68e:	f000 fb6f 	bl	800ad70 <_malloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	b950      	cbnz	r0, 800a6ac <__ssputs_r+0x5c>
 800a696:	230c      	movs	r3, #12
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	f8ca 3000 	str.w	r3, [sl]
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a6:	81a3      	strh	r3, [r4, #12]
 800a6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ac:	464a      	mov	r2, r9
 800a6ae:	6921      	ldr	r1, [r4, #16]
 800a6b0:	f000 face 	bl	800ac50 <memcpy>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6be:	81a3      	strh	r3, [r4, #12]
 800a6c0:	6126      	str	r6, [r4, #16]
 800a6c2:	444e      	add	r6, r9
 800a6c4:	6026      	str	r6, [r4, #0]
 800a6c6:	463e      	mov	r6, r7
 800a6c8:	6165      	str	r5, [r4, #20]
 800a6ca:	eba5 0509 	sub.w	r5, r5, r9
 800a6ce:	60a5      	str	r5, [r4, #8]
 800a6d0:	42be      	cmp	r6, r7
 800a6d2:	d900      	bls.n	800a6d6 <__ssputs_r+0x86>
 800a6d4:	463e      	mov	r6, r7
 800a6d6:	4632      	mov	r2, r6
 800a6d8:	4641      	mov	r1, r8
 800a6da:	6820      	ldr	r0, [r4, #0]
 800a6dc:	f000 fac6 	bl	800ac6c <memmove>
 800a6e0:	68a3      	ldr	r3, [r4, #8]
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	1b9b      	subs	r3, r3, r6
 800a6e6:	60a3      	str	r3, [r4, #8]
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	4433      	add	r3, r6
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	e7db      	b.n	800a6a8 <__ssputs_r+0x58>
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	f000 fbb1 	bl	800ae58 <_realloc_r>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d1e1      	bne.n	800a6c0 <__ssputs_r+0x70>
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	6921      	ldr	r1, [r4, #16]
 800a700:	f000 face 	bl	800aca0 <_free_r>
 800a704:	e7c7      	b.n	800a696 <__ssputs_r+0x46>
	...

0800a708 <_svfiprintf_r>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	4698      	mov	r8, r3
 800a70e:	898b      	ldrh	r3, [r1, #12]
 800a710:	4607      	mov	r7, r0
 800a712:	061b      	lsls	r3, r3, #24
 800a714:	460d      	mov	r5, r1
 800a716:	4614      	mov	r4, r2
 800a718:	b09d      	sub	sp, #116	; 0x74
 800a71a:	d50e      	bpl.n	800a73a <_svfiprintf_r+0x32>
 800a71c:	690b      	ldr	r3, [r1, #16]
 800a71e:	b963      	cbnz	r3, 800a73a <_svfiprintf_r+0x32>
 800a720:	2140      	movs	r1, #64	; 0x40
 800a722:	f000 fb25 	bl	800ad70 <_malloc_r>
 800a726:	6028      	str	r0, [r5, #0]
 800a728:	6128      	str	r0, [r5, #16]
 800a72a:	b920      	cbnz	r0, 800a736 <_svfiprintf_r+0x2e>
 800a72c:	230c      	movs	r3, #12
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
 800a734:	e0d1      	b.n	800a8da <_svfiprintf_r+0x1d2>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	616b      	str	r3, [r5, #20]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9309      	str	r3, [sp, #36]	; 0x24
 800a73e:	2320      	movs	r3, #32
 800a740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a744:	2330      	movs	r3, #48	; 0x30
 800a746:	f04f 0901 	mov.w	r9, #1
 800a74a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a74e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8f4 <_svfiprintf_r+0x1ec>
 800a752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a756:	4623      	mov	r3, r4
 800a758:	469a      	mov	sl, r3
 800a75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a75e:	b10a      	cbz	r2, 800a764 <_svfiprintf_r+0x5c>
 800a760:	2a25      	cmp	r2, #37	; 0x25
 800a762:	d1f9      	bne.n	800a758 <_svfiprintf_r+0x50>
 800a764:	ebba 0b04 	subs.w	fp, sl, r4
 800a768:	d00b      	beq.n	800a782 <_svfiprintf_r+0x7a>
 800a76a:	465b      	mov	r3, fp
 800a76c:	4622      	mov	r2, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	4638      	mov	r0, r7
 800a772:	f7ff ff6d 	bl	800a650 <__ssputs_r>
 800a776:	3001      	adds	r0, #1
 800a778:	f000 80aa 	beq.w	800a8d0 <_svfiprintf_r+0x1c8>
 800a77c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77e:	445a      	add	r2, fp
 800a780:	9209      	str	r2, [sp, #36]	; 0x24
 800a782:	f89a 3000 	ldrb.w	r3, [sl]
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 80a2 	beq.w	800a8d0 <_svfiprintf_r+0x1c8>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f04f 32ff 	mov.w	r2, #4294967295
 800a792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a796:	f10a 0a01 	add.w	sl, sl, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	9307      	str	r3, [sp, #28]
 800a79e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a7a4:	4654      	mov	r4, sl
 800a7a6:	2205      	movs	r2, #5
 800a7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ac:	4851      	ldr	r0, [pc, #324]	; (800a8f4 <_svfiprintf_r+0x1ec>)
 800a7ae:	f000 fa41 	bl	800ac34 <memchr>
 800a7b2:	9a04      	ldr	r2, [sp, #16]
 800a7b4:	b9d8      	cbnz	r0, 800a7ee <_svfiprintf_r+0xe6>
 800a7b6:	06d0      	lsls	r0, r2, #27
 800a7b8:	bf44      	itt	mi
 800a7ba:	2320      	movmi	r3, #32
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c0:	0711      	lsls	r1, r2, #28
 800a7c2:	bf44      	itt	mi
 800a7c4:	232b      	movmi	r3, #43	; 0x2b
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d0:	d015      	beq.n	800a7fe <_svfiprintf_r+0xf6>
 800a7d2:	4654      	mov	r4, sl
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	f04f 0c0a 	mov.w	ip, #10
 800a7da:	9a07      	ldr	r2, [sp, #28]
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7e2:	3b30      	subs	r3, #48	; 0x30
 800a7e4:	2b09      	cmp	r3, #9
 800a7e6:	d94e      	bls.n	800a886 <_svfiprintf_r+0x17e>
 800a7e8:	b1b0      	cbz	r0, 800a818 <_svfiprintf_r+0x110>
 800a7ea:	9207      	str	r2, [sp, #28]
 800a7ec:	e014      	b.n	800a818 <_svfiprintf_r+0x110>
 800a7ee:	eba0 0308 	sub.w	r3, r0, r8
 800a7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	46a2      	mov	sl, r4
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	e7d2      	b.n	800a7a4 <_svfiprintf_r+0x9c>
 800a7fe:	9b03      	ldr	r3, [sp, #12]
 800a800:	1d19      	adds	r1, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9103      	str	r1, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfbb      	ittet	lt
 800a80a:	425b      	neglt	r3, r3
 800a80c:	f042 0202 	orrlt.w	r2, r2, #2
 800a810:	9307      	strge	r3, [sp, #28]
 800a812:	9307      	strlt	r3, [sp, #28]
 800a814:	bfb8      	it	lt
 800a816:	9204      	strlt	r2, [sp, #16]
 800a818:	7823      	ldrb	r3, [r4, #0]
 800a81a:	2b2e      	cmp	r3, #46	; 0x2e
 800a81c:	d10c      	bne.n	800a838 <_svfiprintf_r+0x130>
 800a81e:	7863      	ldrb	r3, [r4, #1]
 800a820:	2b2a      	cmp	r3, #42	; 0x2a
 800a822:	d135      	bne.n	800a890 <_svfiprintf_r+0x188>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	3402      	adds	r4, #2
 800a828:	1d1a      	adds	r2, r3, #4
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	9203      	str	r2, [sp, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfb8      	it	lt
 800a832:	f04f 33ff 	movlt.w	r3, #4294967295
 800a836:	9305      	str	r3, [sp, #20]
 800a838:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8f8 <_svfiprintf_r+0x1f0>
 800a83c:	2203      	movs	r2, #3
 800a83e:	4650      	mov	r0, sl
 800a840:	7821      	ldrb	r1, [r4, #0]
 800a842:	f000 f9f7 	bl	800ac34 <memchr>
 800a846:	b140      	cbz	r0, 800a85a <_svfiprintf_r+0x152>
 800a848:	2340      	movs	r3, #64	; 0x40
 800a84a:	eba0 000a 	sub.w	r0, r0, sl
 800a84e:	fa03 f000 	lsl.w	r0, r3, r0
 800a852:	9b04      	ldr	r3, [sp, #16]
 800a854:	3401      	adds	r4, #1
 800a856:	4303      	orrs	r3, r0
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85e:	2206      	movs	r2, #6
 800a860:	4826      	ldr	r0, [pc, #152]	; (800a8fc <_svfiprintf_r+0x1f4>)
 800a862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a866:	f000 f9e5 	bl	800ac34 <memchr>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d038      	beq.n	800a8e0 <_svfiprintf_r+0x1d8>
 800a86e:	4b24      	ldr	r3, [pc, #144]	; (800a900 <_svfiprintf_r+0x1f8>)
 800a870:	bb1b      	cbnz	r3, 800a8ba <_svfiprintf_r+0x1b2>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	3307      	adds	r3, #7
 800a876:	f023 0307 	bic.w	r3, r3, #7
 800a87a:	3308      	adds	r3, #8
 800a87c:	9303      	str	r3, [sp, #12]
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	4433      	add	r3, r6
 800a882:	9309      	str	r3, [sp, #36]	; 0x24
 800a884:	e767      	b.n	800a756 <_svfiprintf_r+0x4e>
 800a886:	460c      	mov	r4, r1
 800a888:	2001      	movs	r0, #1
 800a88a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a88e:	e7a5      	b.n	800a7dc <_svfiprintf_r+0xd4>
 800a890:	2300      	movs	r3, #0
 800a892:	f04f 0c0a 	mov.w	ip, #10
 800a896:	4619      	mov	r1, r3
 800a898:	3401      	adds	r4, #1
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	4620      	mov	r0, r4
 800a89e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8a2:	3a30      	subs	r2, #48	; 0x30
 800a8a4:	2a09      	cmp	r2, #9
 800a8a6:	d903      	bls.n	800a8b0 <_svfiprintf_r+0x1a8>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d0c5      	beq.n	800a838 <_svfiprintf_r+0x130>
 800a8ac:	9105      	str	r1, [sp, #20]
 800a8ae:	e7c3      	b.n	800a838 <_svfiprintf_r+0x130>
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8b8:	e7f0      	b.n	800a89c <_svfiprintf_r+0x194>
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	4b10      	ldr	r3, [pc, #64]	; (800a904 <_svfiprintf_r+0x1fc>)
 800a8c4:	a904      	add	r1, sp, #16
 800a8c6:	f3af 8000 	nop.w
 800a8ca:	1c42      	adds	r2, r0, #1
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	d1d6      	bne.n	800a87e <_svfiprintf_r+0x176>
 800a8d0:	89ab      	ldrh	r3, [r5, #12]
 800a8d2:	065b      	lsls	r3, r3, #25
 800a8d4:	f53f af2c 	bmi.w	800a730 <_svfiprintf_r+0x28>
 800a8d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8da:	b01d      	add	sp, #116	; 0x74
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	ab03      	add	r3, sp, #12
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <_svfiprintf_r+0x1fc>)
 800a8ea:	a904      	add	r1, sp, #16
 800a8ec:	f000 f87c 	bl	800a9e8 <_printf_i>
 800a8f0:	e7eb      	b.n	800a8ca <_svfiprintf_r+0x1c2>
 800a8f2:	bf00      	nop
 800a8f4:	0800afa4 	.word	0x0800afa4
 800a8f8:	0800afaa 	.word	0x0800afaa
 800a8fc:	0800afae 	.word	0x0800afae
 800a900:	00000000 	.word	0x00000000
 800a904:	0800a651 	.word	0x0800a651

0800a908 <_printf_common>:
 800a908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a90c:	4616      	mov	r6, r2
 800a90e:	4699      	mov	r9, r3
 800a910:	688a      	ldr	r2, [r1, #8]
 800a912:	690b      	ldr	r3, [r1, #16]
 800a914:	4607      	mov	r7, r0
 800a916:	4293      	cmp	r3, r2
 800a918:	bfb8      	it	lt
 800a91a:	4613      	movlt	r3, r2
 800a91c:	6033      	str	r3, [r6, #0]
 800a91e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a922:	460c      	mov	r4, r1
 800a924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a928:	b10a      	cbz	r2, 800a92e <_printf_common+0x26>
 800a92a:	3301      	adds	r3, #1
 800a92c:	6033      	str	r3, [r6, #0]
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	0699      	lsls	r1, r3, #26
 800a932:	bf42      	ittt	mi
 800a934:	6833      	ldrmi	r3, [r6, #0]
 800a936:	3302      	addmi	r3, #2
 800a938:	6033      	strmi	r3, [r6, #0]
 800a93a:	6825      	ldr	r5, [r4, #0]
 800a93c:	f015 0506 	ands.w	r5, r5, #6
 800a940:	d106      	bne.n	800a950 <_printf_common+0x48>
 800a942:	f104 0a19 	add.w	sl, r4, #25
 800a946:	68e3      	ldr	r3, [r4, #12]
 800a948:	6832      	ldr	r2, [r6, #0]
 800a94a:	1a9b      	subs	r3, r3, r2
 800a94c:	42ab      	cmp	r3, r5
 800a94e:	dc28      	bgt.n	800a9a2 <_printf_common+0x9a>
 800a950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a954:	1e13      	subs	r3, r2, #0
 800a956:	6822      	ldr	r2, [r4, #0]
 800a958:	bf18      	it	ne
 800a95a:	2301      	movne	r3, #1
 800a95c:	0692      	lsls	r2, r2, #26
 800a95e:	d42d      	bmi.n	800a9bc <_printf_common+0xb4>
 800a960:	4649      	mov	r1, r9
 800a962:	4638      	mov	r0, r7
 800a964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a968:	47c0      	blx	r8
 800a96a:	3001      	adds	r0, #1
 800a96c:	d020      	beq.n	800a9b0 <_printf_common+0xa8>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	68e5      	ldr	r5, [r4, #12]
 800a972:	f003 0306 	and.w	r3, r3, #6
 800a976:	2b04      	cmp	r3, #4
 800a978:	bf18      	it	ne
 800a97a:	2500      	movne	r5, #0
 800a97c:	6832      	ldr	r2, [r6, #0]
 800a97e:	f04f 0600 	mov.w	r6, #0
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	bf08      	it	eq
 800a986:	1aad      	subeq	r5, r5, r2
 800a988:	6922      	ldr	r2, [r4, #16]
 800a98a:	bf08      	it	eq
 800a98c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a990:	4293      	cmp	r3, r2
 800a992:	bfc4      	itt	gt
 800a994:	1a9b      	subgt	r3, r3, r2
 800a996:	18ed      	addgt	r5, r5, r3
 800a998:	341a      	adds	r4, #26
 800a99a:	42b5      	cmp	r5, r6
 800a99c:	d11a      	bne.n	800a9d4 <_printf_common+0xcc>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	e008      	b.n	800a9b4 <_printf_common+0xac>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	47c0      	blx	r8
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d103      	bne.n	800a9b8 <_printf_common+0xb0>
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	e7c4      	b.n	800a946 <_printf_common+0x3e>
 800a9bc:	2030      	movs	r0, #48	; 0x30
 800a9be:	18e1      	adds	r1, r4, r3
 800a9c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ca:	4422      	add	r2, r4
 800a9cc:	3302      	adds	r3, #2
 800a9ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9d2:	e7c5      	b.n	800a960 <_printf_common+0x58>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	4649      	mov	r1, r9
 800a9da:	4638      	mov	r0, r7
 800a9dc:	47c0      	blx	r8
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d0e6      	beq.n	800a9b0 <_printf_common+0xa8>
 800a9e2:	3601      	adds	r6, #1
 800a9e4:	e7d9      	b.n	800a99a <_printf_common+0x92>
	...

0800a9e8 <_printf_i>:
 800a9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	7e0f      	ldrb	r7, [r1, #24]
 800a9ee:	4691      	mov	r9, r2
 800a9f0:	2f78      	cmp	r7, #120	; 0x78
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	469a      	mov	sl, r3
 800a9f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9fe:	d807      	bhi.n	800aa10 <_printf_i+0x28>
 800aa00:	2f62      	cmp	r7, #98	; 0x62
 800aa02:	d80a      	bhi.n	800aa1a <_printf_i+0x32>
 800aa04:	2f00      	cmp	r7, #0
 800aa06:	f000 80d9 	beq.w	800abbc <_printf_i+0x1d4>
 800aa0a:	2f58      	cmp	r7, #88	; 0x58
 800aa0c:	f000 80a4 	beq.w	800ab58 <_printf_i+0x170>
 800aa10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa18:	e03a      	b.n	800aa90 <_printf_i+0xa8>
 800aa1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa1e:	2b15      	cmp	r3, #21
 800aa20:	d8f6      	bhi.n	800aa10 <_printf_i+0x28>
 800aa22:	a101      	add	r1, pc, #4	; (adr r1, 800aa28 <_printf_i+0x40>)
 800aa24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa28:	0800aa81 	.word	0x0800aa81
 800aa2c:	0800aa95 	.word	0x0800aa95
 800aa30:	0800aa11 	.word	0x0800aa11
 800aa34:	0800aa11 	.word	0x0800aa11
 800aa38:	0800aa11 	.word	0x0800aa11
 800aa3c:	0800aa11 	.word	0x0800aa11
 800aa40:	0800aa95 	.word	0x0800aa95
 800aa44:	0800aa11 	.word	0x0800aa11
 800aa48:	0800aa11 	.word	0x0800aa11
 800aa4c:	0800aa11 	.word	0x0800aa11
 800aa50:	0800aa11 	.word	0x0800aa11
 800aa54:	0800aba3 	.word	0x0800aba3
 800aa58:	0800aac5 	.word	0x0800aac5
 800aa5c:	0800ab85 	.word	0x0800ab85
 800aa60:	0800aa11 	.word	0x0800aa11
 800aa64:	0800aa11 	.word	0x0800aa11
 800aa68:	0800abc5 	.word	0x0800abc5
 800aa6c:	0800aa11 	.word	0x0800aa11
 800aa70:	0800aac5 	.word	0x0800aac5
 800aa74:	0800aa11 	.word	0x0800aa11
 800aa78:	0800aa11 	.word	0x0800aa11
 800aa7c:	0800ab8d 	.word	0x0800ab8d
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	1d1a      	adds	r2, r3, #4
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	602a      	str	r2, [r5, #0]
 800aa88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0a4      	b.n	800abde <_printf_i+0x1f6>
 800aa94:	6820      	ldr	r0, [r4, #0]
 800aa96:	6829      	ldr	r1, [r5, #0]
 800aa98:	0606      	lsls	r6, r0, #24
 800aa9a:	f101 0304 	add.w	r3, r1, #4
 800aa9e:	d50a      	bpl.n	800aab6 <_printf_i+0xce>
 800aaa0:	680e      	ldr	r6, [r1, #0]
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	2e00      	cmp	r6, #0
 800aaa6:	da03      	bge.n	800aab0 <_printf_i+0xc8>
 800aaa8:	232d      	movs	r3, #45	; 0x2d
 800aaaa:	4276      	negs	r6, r6
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab0:	230a      	movs	r3, #10
 800aab2:	485e      	ldr	r0, [pc, #376]	; (800ac2c <_printf_i+0x244>)
 800aab4:	e019      	b.n	800aaea <_printf_i+0x102>
 800aab6:	680e      	ldr	r6, [r1, #0]
 800aab8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aabc:	602b      	str	r3, [r5, #0]
 800aabe:	bf18      	it	ne
 800aac0:	b236      	sxthne	r6, r6
 800aac2:	e7ef      	b.n	800aaa4 <_printf_i+0xbc>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	6820      	ldr	r0, [r4, #0]
 800aac8:	1d19      	adds	r1, r3, #4
 800aaca:	6029      	str	r1, [r5, #0]
 800aacc:	0601      	lsls	r1, r0, #24
 800aace:	d501      	bpl.n	800aad4 <_printf_i+0xec>
 800aad0:	681e      	ldr	r6, [r3, #0]
 800aad2:	e002      	b.n	800aada <_printf_i+0xf2>
 800aad4:	0646      	lsls	r6, r0, #25
 800aad6:	d5fb      	bpl.n	800aad0 <_printf_i+0xe8>
 800aad8:	881e      	ldrh	r6, [r3, #0]
 800aada:	2f6f      	cmp	r7, #111	; 0x6f
 800aadc:	bf0c      	ite	eq
 800aade:	2308      	moveq	r3, #8
 800aae0:	230a      	movne	r3, #10
 800aae2:	4852      	ldr	r0, [pc, #328]	; (800ac2c <_printf_i+0x244>)
 800aae4:	2100      	movs	r1, #0
 800aae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaea:	6865      	ldr	r5, [r4, #4]
 800aaec:	2d00      	cmp	r5, #0
 800aaee:	bfa8      	it	ge
 800aaf0:	6821      	ldrge	r1, [r4, #0]
 800aaf2:	60a5      	str	r5, [r4, #8]
 800aaf4:	bfa4      	itt	ge
 800aaf6:	f021 0104 	bicge.w	r1, r1, #4
 800aafa:	6021      	strge	r1, [r4, #0]
 800aafc:	b90e      	cbnz	r6, 800ab02 <_printf_i+0x11a>
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	d04d      	beq.n	800ab9e <_printf_i+0x1b6>
 800ab02:	4615      	mov	r5, r2
 800ab04:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab08:	fb03 6711 	mls	r7, r3, r1, r6
 800ab0c:	5dc7      	ldrb	r7, [r0, r7]
 800ab0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab12:	4637      	mov	r7, r6
 800ab14:	42bb      	cmp	r3, r7
 800ab16:	460e      	mov	r6, r1
 800ab18:	d9f4      	bls.n	800ab04 <_printf_i+0x11c>
 800ab1a:	2b08      	cmp	r3, #8
 800ab1c:	d10b      	bne.n	800ab36 <_printf_i+0x14e>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	07de      	lsls	r6, r3, #31
 800ab22:	d508      	bpl.n	800ab36 <_printf_i+0x14e>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	6861      	ldr	r1, [r4, #4]
 800ab28:	4299      	cmp	r1, r3
 800ab2a:	bfde      	ittt	le
 800ab2c:	2330      	movle	r3, #48	; 0x30
 800ab2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab32:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab36:	1b52      	subs	r2, r2, r5
 800ab38:	6122      	str	r2, [r4, #16]
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f8cd a000 	str.w	sl, [sp]
 800ab44:	aa03      	add	r2, sp, #12
 800ab46:	f7ff fedf 	bl	800a908 <_printf_common>
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d14c      	bne.n	800abe8 <_printf_i+0x200>
 800ab4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab52:	b004      	add	sp, #16
 800ab54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab58:	4834      	ldr	r0, [pc, #208]	; (800ac2c <_printf_i+0x244>)
 800ab5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab5e:	6829      	ldr	r1, [r5, #0]
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab66:	6029      	str	r1, [r5, #0]
 800ab68:	061d      	lsls	r5, r3, #24
 800ab6a:	d514      	bpl.n	800ab96 <_printf_i+0x1ae>
 800ab6c:	07df      	lsls	r7, r3, #31
 800ab6e:	bf44      	itt	mi
 800ab70:	f043 0320 	orrmi.w	r3, r3, #32
 800ab74:	6023      	strmi	r3, [r4, #0]
 800ab76:	b91e      	cbnz	r6, 800ab80 <_printf_i+0x198>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	f023 0320 	bic.w	r3, r3, #32
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	2310      	movs	r3, #16
 800ab82:	e7af      	b.n	800aae4 <_printf_i+0xfc>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	f043 0320 	orr.w	r3, r3, #32
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	2378      	movs	r3, #120	; 0x78
 800ab8e:	4828      	ldr	r0, [pc, #160]	; (800ac30 <_printf_i+0x248>)
 800ab90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab94:	e7e3      	b.n	800ab5e <_printf_i+0x176>
 800ab96:	0659      	lsls	r1, r3, #25
 800ab98:	bf48      	it	mi
 800ab9a:	b2b6      	uxthmi	r6, r6
 800ab9c:	e7e6      	b.n	800ab6c <_printf_i+0x184>
 800ab9e:	4615      	mov	r5, r2
 800aba0:	e7bb      	b.n	800ab1a <_printf_i+0x132>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	6826      	ldr	r6, [r4, #0]
 800aba6:	1d18      	adds	r0, r3, #4
 800aba8:	6961      	ldr	r1, [r4, #20]
 800abaa:	6028      	str	r0, [r5, #0]
 800abac:	0635      	lsls	r5, r6, #24
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	d501      	bpl.n	800abb6 <_printf_i+0x1ce>
 800abb2:	6019      	str	r1, [r3, #0]
 800abb4:	e002      	b.n	800abbc <_printf_i+0x1d4>
 800abb6:	0670      	lsls	r0, r6, #25
 800abb8:	d5fb      	bpl.n	800abb2 <_printf_i+0x1ca>
 800abba:	8019      	strh	r1, [r3, #0]
 800abbc:	2300      	movs	r3, #0
 800abbe:	4615      	mov	r5, r2
 800abc0:	6123      	str	r3, [r4, #16]
 800abc2:	e7ba      	b.n	800ab3a <_printf_i+0x152>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	2100      	movs	r1, #0
 800abc8:	1d1a      	adds	r2, r3, #4
 800abca:	602a      	str	r2, [r5, #0]
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	6862      	ldr	r2, [r4, #4]
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 f82f 	bl	800ac34 <memchr>
 800abd6:	b108      	cbz	r0, 800abdc <_printf_i+0x1f4>
 800abd8:	1b40      	subs	r0, r0, r5
 800abda:	6060      	str	r0, [r4, #4]
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	2300      	movs	r3, #0
 800abe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe6:	e7a8      	b.n	800ab3a <_printf_i+0x152>
 800abe8:	462a      	mov	r2, r5
 800abea:	4649      	mov	r1, r9
 800abec:	4640      	mov	r0, r8
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	47d0      	blx	sl
 800abf2:	3001      	adds	r0, #1
 800abf4:	d0ab      	beq.n	800ab4e <_printf_i+0x166>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	079b      	lsls	r3, r3, #30
 800abfa:	d413      	bmi.n	800ac24 <_printf_i+0x23c>
 800abfc:	68e0      	ldr	r0, [r4, #12]
 800abfe:	9b03      	ldr	r3, [sp, #12]
 800ac00:	4298      	cmp	r0, r3
 800ac02:	bfb8      	it	lt
 800ac04:	4618      	movlt	r0, r3
 800ac06:	e7a4      	b.n	800ab52 <_printf_i+0x16a>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	4640      	mov	r0, r8
 800ac10:	47d0      	blx	sl
 800ac12:	3001      	adds	r0, #1
 800ac14:	d09b      	beq.n	800ab4e <_printf_i+0x166>
 800ac16:	3501      	adds	r5, #1
 800ac18:	68e3      	ldr	r3, [r4, #12]
 800ac1a:	9903      	ldr	r1, [sp, #12]
 800ac1c:	1a5b      	subs	r3, r3, r1
 800ac1e:	42ab      	cmp	r3, r5
 800ac20:	dcf2      	bgt.n	800ac08 <_printf_i+0x220>
 800ac22:	e7eb      	b.n	800abfc <_printf_i+0x214>
 800ac24:	2500      	movs	r5, #0
 800ac26:	f104 0619 	add.w	r6, r4, #25
 800ac2a:	e7f5      	b.n	800ac18 <_printf_i+0x230>
 800ac2c:	0800afb5 	.word	0x0800afb5
 800ac30:	0800afc6 	.word	0x0800afc6

0800ac34 <memchr>:
 800ac34:	4603      	mov	r3, r0
 800ac36:	b510      	push	{r4, lr}
 800ac38:	b2c9      	uxtb	r1, r1
 800ac3a:	4402      	add	r2, r0
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	d101      	bne.n	800ac46 <memchr+0x12>
 800ac42:	2000      	movs	r0, #0
 800ac44:	e003      	b.n	800ac4e <memchr+0x1a>
 800ac46:	7804      	ldrb	r4, [r0, #0]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	428c      	cmp	r4, r1
 800ac4c:	d1f6      	bne.n	800ac3c <memchr+0x8>
 800ac4e:	bd10      	pop	{r4, pc}

0800ac50 <memcpy>:
 800ac50:	440a      	add	r2, r1
 800ac52:	4291      	cmp	r1, r2
 800ac54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac58:	d100      	bne.n	800ac5c <memcpy+0xc>
 800ac5a:	4770      	bx	lr
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac62:	4291      	cmp	r1, r2
 800ac64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac68:	d1f9      	bne.n	800ac5e <memcpy+0xe>
 800ac6a:	bd10      	pop	{r4, pc}

0800ac6c <memmove>:
 800ac6c:	4288      	cmp	r0, r1
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	eb01 0402 	add.w	r4, r1, r2
 800ac74:	d902      	bls.n	800ac7c <memmove+0x10>
 800ac76:	4284      	cmp	r4, r0
 800ac78:	4623      	mov	r3, r4
 800ac7a:	d807      	bhi.n	800ac8c <memmove+0x20>
 800ac7c:	1e43      	subs	r3, r0, #1
 800ac7e:	42a1      	cmp	r1, r4
 800ac80:	d008      	beq.n	800ac94 <memmove+0x28>
 800ac82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac8a:	e7f8      	b.n	800ac7e <memmove+0x12>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4402      	add	r2, r0
 800ac90:	428a      	cmp	r2, r1
 800ac92:	d100      	bne.n	800ac96 <memmove+0x2a>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac9e:	e7f7      	b.n	800ac90 <memmove+0x24>

0800aca0 <_free_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4605      	mov	r5, r0
 800aca4:	2900      	cmp	r1, #0
 800aca6:	d040      	beq.n	800ad2a <_free_r+0x8a>
 800aca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acac:	1f0c      	subs	r4, r1, #4
 800acae:	2b00      	cmp	r3, #0
 800acb0:	bfb8      	it	lt
 800acb2:	18e4      	addlt	r4, r4, r3
 800acb4:	f000 f910 	bl	800aed8 <__malloc_lock>
 800acb8:	4a1c      	ldr	r2, [pc, #112]	; (800ad2c <_free_r+0x8c>)
 800acba:	6813      	ldr	r3, [r2, #0]
 800acbc:	b933      	cbnz	r3, 800accc <_free_r+0x2c>
 800acbe:	6063      	str	r3, [r4, #4]
 800acc0:	6014      	str	r4, [r2, #0]
 800acc2:	4628      	mov	r0, r5
 800acc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc8:	f000 b90c 	b.w	800aee4 <__malloc_unlock>
 800accc:	42a3      	cmp	r3, r4
 800acce:	d908      	bls.n	800ace2 <_free_r+0x42>
 800acd0:	6820      	ldr	r0, [r4, #0]
 800acd2:	1821      	adds	r1, r4, r0
 800acd4:	428b      	cmp	r3, r1
 800acd6:	bf01      	itttt	eq
 800acd8:	6819      	ldreq	r1, [r3, #0]
 800acda:	685b      	ldreq	r3, [r3, #4]
 800acdc:	1809      	addeq	r1, r1, r0
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	e7ed      	b.n	800acbe <_free_r+0x1e>
 800ace2:	461a      	mov	r2, r3
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	b10b      	cbz	r3, 800acec <_free_r+0x4c>
 800ace8:	42a3      	cmp	r3, r4
 800acea:	d9fa      	bls.n	800ace2 <_free_r+0x42>
 800acec:	6811      	ldr	r1, [r2, #0]
 800acee:	1850      	adds	r0, r2, r1
 800acf0:	42a0      	cmp	r0, r4
 800acf2:	d10b      	bne.n	800ad0c <_free_r+0x6c>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	4401      	add	r1, r0
 800acf8:	1850      	adds	r0, r2, r1
 800acfa:	4283      	cmp	r3, r0
 800acfc:	6011      	str	r1, [r2, #0]
 800acfe:	d1e0      	bne.n	800acc2 <_free_r+0x22>
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4401      	add	r1, r0
 800ad06:	6011      	str	r1, [r2, #0]
 800ad08:	6053      	str	r3, [r2, #4]
 800ad0a:	e7da      	b.n	800acc2 <_free_r+0x22>
 800ad0c:	d902      	bls.n	800ad14 <_free_r+0x74>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	e7d6      	b.n	800acc2 <_free_r+0x22>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf01      	itttt	eq
 800ad1c:	6819      	ldreq	r1, [r3, #0]
 800ad1e:	685b      	ldreq	r3, [r3, #4]
 800ad20:	1809      	addeq	r1, r1, r0
 800ad22:	6021      	streq	r1, [r4, #0]
 800ad24:	6063      	str	r3, [r4, #4]
 800ad26:	6054      	str	r4, [r2, #4]
 800ad28:	e7cb      	b.n	800acc2 <_free_r+0x22>
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20001594 	.word	0x20001594

0800ad30 <sbrk_aligned>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	4e0e      	ldr	r6, [pc, #56]	; (800ad6c <sbrk_aligned+0x3c>)
 800ad34:	460c      	mov	r4, r1
 800ad36:	6831      	ldr	r1, [r6, #0]
 800ad38:	4605      	mov	r5, r0
 800ad3a:	b911      	cbnz	r1, 800ad42 <sbrk_aligned+0x12>
 800ad3c:	f000 f8bc 	bl	800aeb8 <_sbrk_r>
 800ad40:	6030      	str	r0, [r6, #0]
 800ad42:	4621      	mov	r1, r4
 800ad44:	4628      	mov	r0, r5
 800ad46:	f000 f8b7 	bl	800aeb8 <_sbrk_r>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d00a      	beq.n	800ad64 <sbrk_aligned+0x34>
 800ad4e:	1cc4      	adds	r4, r0, #3
 800ad50:	f024 0403 	bic.w	r4, r4, #3
 800ad54:	42a0      	cmp	r0, r4
 800ad56:	d007      	beq.n	800ad68 <sbrk_aligned+0x38>
 800ad58:	1a21      	subs	r1, r4, r0
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f000 f8ac 	bl	800aeb8 <_sbrk_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	d101      	bne.n	800ad68 <sbrk_aligned+0x38>
 800ad64:	f04f 34ff 	mov.w	r4, #4294967295
 800ad68:	4620      	mov	r0, r4
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	20001598 	.word	0x20001598

0800ad70 <_malloc_r>:
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	1ccd      	adds	r5, r1, #3
 800ad76:	f025 0503 	bic.w	r5, r5, #3
 800ad7a:	3508      	adds	r5, #8
 800ad7c:	2d0c      	cmp	r5, #12
 800ad7e:	bf38      	it	cc
 800ad80:	250c      	movcc	r5, #12
 800ad82:	2d00      	cmp	r5, #0
 800ad84:	4607      	mov	r7, r0
 800ad86:	db01      	blt.n	800ad8c <_malloc_r+0x1c>
 800ad88:	42a9      	cmp	r1, r5
 800ad8a:	d905      	bls.n	800ad98 <_malloc_r+0x28>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	2600      	movs	r6, #0
 800ad90:	603b      	str	r3, [r7, #0]
 800ad92:	4630      	mov	r0, r6
 800ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad98:	4e2e      	ldr	r6, [pc, #184]	; (800ae54 <_malloc_r+0xe4>)
 800ad9a:	f000 f89d 	bl	800aed8 <__malloc_lock>
 800ad9e:	6833      	ldr	r3, [r6, #0]
 800ada0:	461c      	mov	r4, r3
 800ada2:	bb34      	cbnz	r4, 800adf2 <_malloc_r+0x82>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4638      	mov	r0, r7
 800ada8:	f7ff ffc2 	bl	800ad30 <sbrk_aligned>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	4604      	mov	r4, r0
 800adb0:	d14d      	bne.n	800ae4e <_malloc_r+0xde>
 800adb2:	6834      	ldr	r4, [r6, #0]
 800adb4:	4626      	mov	r6, r4
 800adb6:	2e00      	cmp	r6, #0
 800adb8:	d140      	bne.n	800ae3c <_malloc_r+0xcc>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	4631      	mov	r1, r6
 800adbe:	4638      	mov	r0, r7
 800adc0:	eb04 0803 	add.w	r8, r4, r3
 800adc4:	f000 f878 	bl	800aeb8 <_sbrk_r>
 800adc8:	4580      	cmp	r8, r0
 800adca:	d13a      	bne.n	800ae42 <_malloc_r+0xd2>
 800adcc:	6821      	ldr	r1, [r4, #0]
 800adce:	3503      	adds	r5, #3
 800add0:	1a6d      	subs	r5, r5, r1
 800add2:	f025 0503 	bic.w	r5, r5, #3
 800add6:	3508      	adds	r5, #8
 800add8:	2d0c      	cmp	r5, #12
 800adda:	bf38      	it	cc
 800addc:	250c      	movcc	r5, #12
 800adde:	4638      	mov	r0, r7
 800ade0:	4629      	mov	r1, r5
 800ade2:	f7ff ffa5 	bl	800ad30 <sbrk_aligned>
 800ade6:	3001      	adds	r0, #1
 800ade8:	d02b      	beq.n	800ae42 <_malloc_r+0xd2>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	442b      	add	r3, r5
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	e00e      	b.n	800ae10 <_malloc_r+0xa0>
 800adf2:	6822      	ldr	r2, [r4, #0]
 800adf4:	1b52      	subs	r2, r2, r5
 800adf6:	d41e      	bmi.n	800ae36 <_malloc_r+0xc6>
 800adf8:	2a0b      	cmp	r2, #11
 800adfa:	d916      	bls.n	800ae2a <_malloc_r+0xba>
 800adfc:	1961      	adds	r1, r4, r5
 800adfe:	42a3      	cmp	r3, r4
 800ae00:	6025      	str	r5, [r4, #0]
 800ae02:	bf18      	it	ne
 800ae04:	6059      	strne	r1, [r3, #4]
 800ae06:	6863      	ldr	r3, [r4, #4]
 800ae08:	bf08      	it	eq
 800ae0a:	6031      	streq	r1, [r6, #0]
 800ae0c:	5162      	str	r2, [r4, r5]
 800ae0e:	604b      	str	r3, [r1, #4]
 800ae10:	4638      	mov	r0, r7
 800ae12:	f104 060b 	add.w	r6, r4, #11
 800ae16:	f000 f865 	bl	800aee4 <__malloc_unlock>
 800ae1a:	f026 0607 	bic.w	r6, r6, #7
 800ae1e:	1d23      	adds	r3, r4, #4
 800ae20:	1af2      	subs	r2, r6, r3
 800ae22:	d0b6      	beq.n	800ad92 <_malloc_r+0x22>
 800ae24:	1b9b      	subs	r3, r3, r6
 800ae26:	50a3      	str	r3, [r4, r2]
 800ae28:	e7b3      	b.n	800ad92 <_malloc_r+0x22>
 800ae2a:	6862      	ldr	r2, [r4, #4]
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	bf0c      	ite	eq
 800ae30:	6032      	streq	r2, [r6, #0]
 800ae32:	605a      	strne	r2, [r3, #4]
 800ae34:	e7ec      	b.n	800ae10 <_malloc_r+0xa0>
 800ae36:	4623      	mov	r3, r4
 800ae38:	6864      	ldr	r4, [r4, #4]
 800ae3a:	e7b2      	b.n	800ada2 <_malloc_r+0x32>
 800ae3c:	4634      	mov	r4, r6
 800ae3e:	6876      	ldr	r6, [r6, #4]
 800ae40:	e7b9      	b.n	800adb6 <_malloc_r+0x46>
 800ae42:	230c      	movs	r3, #12
 800ae44:	4638      	mov	r0, r7
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	f000 f84c 	bl	800aee4 <__malloc_unlock>
 800ae4c:	e7a1      	b.n	800ad92 <_malloc_r+0x22>
 800ae4e:	6025      	str	r5, [r4, #0]
 800ae50:	e7de      	b.n	800ae10 <_malloc_r+0xa0>
 800ae52:	bf00      	nop
 800ae54:	20001594 	.word	0x20001594

0800ae58 <_realloc_r>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	4680      	mov	r8, r0
 800ae5e:	4614      	mov	r4, r2
 800ae60:	460e      	mov	r6, r1
 800ae62:	b921      	cbnz	r1, 800ae6e <_realloc_r+0x16>
 800ae64:	4611      	mov	r1, r2
 800ae66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6a:	f7ff bf81 	b.w	800ad70 <_malloc_r>
 800ae6e:	b92a      	cbnz	r2, 800ae7c <_realloc_r+0x24>
 800ae70:	f7ff ff16 	bl	800aca0 <_free_r>
 800ae74:	4625      	mov	r5, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7c:	f000 f838 	bl	800aef0 <_malloc_usable_size_r>
 800ae80:	4284      	cmp	r4, r0
 800ae82:	4607      	mov	r7, r0
 800ae84:	d802      	bhi.n	800ae8c <_realloc_r+0x34>
 800ae86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae8a:	d812      	bhi.n	800aeb2 <_realloc_r+0x5a>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7ff ff6e 	bl	800ad70 <_malloc_r>
 800ae94:	4605      	mov	r5, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0ed      	beq.n	800ae76 <_realloc_r+0x1e>
 800ae9a:	42bc      	cmp	r4, r7
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4631      	mov	r1, r6
 800aea0:	bf28      	it	cs
 800aea2:	463a      	movcs	r2, r7
 800aea4:	f7ff fed4 	bl	800ac50 <memcpy>
 800aea8:	4631      	mov	r1, r6
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fef8 	bl	800aca0 <_free_r>
 800aeb0:	e7e1      	b.n	800ae76 <_realloc_r+0x1e>
 800aeb2:	4635      	mov	r5, r6
 800aeb4:	e7df      	b.n	800ae76 <_realloc_r+0x1e>
	...

0800aeb8 <_sbrk_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	2300      	movs	r3, #0
 800aebc:	4d05      	ldr	r5, [pc, #20]	; (800aed4 <_sbrk_r+0x1c>)
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	f7f6 faa4 	bl	8001410 <_sbrk>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_sbrk_r+0x1a>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_sbrk_r+0x1a>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	2000159c 	.word	0x2000159c

0800aed8 <__malloc_lock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__malloc_lock+0x8>)
 800aeda:	f000 b811 	b.w	800af00 <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	200015a0 	.word	0x200015a0

0800aee4 <__malloc_unlock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__malloc_unlock+0x8>)
 800aee6:	f000 b80c 	b.w	800af02 <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	200015a0 	.word	0x200015a0

0800aef0 <_malloc_usable_size_r>:
 800aef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef4:	1f18      	subs	r0, r3, #4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfbc      	itt	lt
 800aefa:	580b      	ldrlt	r3, [r1, r0]
 800aefc:	18c0      	addlt	r0, r0, r3
 800aefe:	4770      	bx	lr

0800af00 <__retarget_lock_acquire_recursive>:
 800af00:	4770      	bx	lr

0800af02 <__retarget_lock_release_recursive>:
 800af02:	4770      	bx	lr

0800af04 <_init>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr

0800af10 <_fini>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	bf00      	nop
 800af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af16:	bc08      	pop	{r3}
 800af18:	469e      	mov	lr, r3
 800af1a:	4770      	bx	lr
