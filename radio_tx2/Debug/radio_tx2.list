
radio_tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d54  08008d54  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08008d54  08008d54  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d54  08008d54  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000184  08008ee0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013c0  08008ee0  000213c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe17  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea0  00000000  00000000  0002ffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00032e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  00033b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e0a  00000000  00000000  00034720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107cc  00000000  00000000  0004e52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086b34  00000000  00000000  0005ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e582a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  000e587c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08008cc4 	.word	0x08008cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08008cc4 	.word	0x08008cc4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fd96 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f832 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c0 	bl	80002dc <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f888 	bl	8000270 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000160:	f008 f8c8 	bl	80082f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	nrfTx.CE_port = CE_GPIO_Port;
 8000164:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <main+0x5c>)
 8000166:	4a11      	ldr	r2, [pc, #68]	; (80001ac <main+0x60>)
 8000168:	609a      	str	r2, [r3, #8]
	nrfTx.CE_pin = CE_Pin;
 800016a:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <main+0x5c>)
 800016c:	2201      	movs	r2, #1
 800016e:	819a      	strh	r2, [r3, #12]
	nrfTx.CSN_port = CSN_GPIO_Port;
 8000170:	4b0d      	ldr	r3, [pc, #52]	; (80001a8 <main+0x5c>)
 8000172:	4a0f      	ldr	r2, [pc, #60]	; (80001b0 <main+0x64>)
 8000174:	601a      	str	r2, [r3, #0]
	nrfTx.CSN_pin = CSN_Pin;
 8000176:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <main+0x5c>)
 8000178:	2208      	movs	r2, #8
 800017a:	809a      	strh	r2, [r3, #4]
	nrfTx.IRQ_port = IRQ_GPIO_Port;
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <main+0x5c>)
 800017e:	4a0c      	ldr	r2, [pc, #48]	; (80001b0 <main+0x64>)
 8000180:	611a      	str	r2, [r3, #16]
	nrfTx.IRQ_pin = IRQ_Pin;
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <main+0x5c>)
 8000184:	2210      	movs	r2, #16
 8000186:	829a      	strh	r2, [r3, #20]
	nrfTx.hSPIx = &hspi1;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <main+0x5c>)
 800018a:	4a0a      	ldr	r2, [pc, #40]	; (80001b4 <main+0x68>)
 800018c:	619a      	str	r2, [r3, #24]

	nrf24_init(&nrfTx);
 800018e:	4806      	ldr	r0, [pc, #24]	; (80001a8 <main+0x5c>)
 8000190:	f000 f939 	bl	8000406 <nrf24_init>
	nrf24_setTxAddr(&nrfTx, txAddr);
 8000194:	4908      	ldr	r1, [pc, #32]	; (80001b8 <main+0x6c>)
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <main+0x5c>)
 8000198:	f000 fa7a 	bl	8000690 <nrf24_setTxAddr>
	nrf24_setMode(&nrfTx, txMode);
 800019c:	2102      	movs	r1, #2
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <main+0x5c>)
 80001a0:	f000 fa24 	bl	80005ec <nrf24_setMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <main+0x58>
 80001a6:	bf00      	nop
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	40010c00 	.word	0x40010c00
 80001b0:	40010800 	.word	0x40010800
 80001b4:	200001a0 	.word	0x200001a0
 80001b8:	20000000 	.word	0x20000000

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f008 fd72 	bl	8008cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fe:	2302      	movs	r3, #2
 8000200:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000208:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fd1c 	bl	8002c50 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f8ed 	bl	80003fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f002 ff88 	bl	8003154 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024a:	f000 f8d7 	bl	80003fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800024e:	2310      	movs	r3, #16
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f003 f8e1 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000264:	f000 f8ca 	bl	80003fc <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	; 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_SPI1_Init+0x64>)
 8000276:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <MX_SPI1_Init+0x68>)
 8000278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <MX_SPI1_Init+0x64>)
 800027c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_SPI1_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_SPI1_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <MX_SPI1_Init+0x64>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_SPI1_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <MX_SPI1_Init+0x64>)
 800029c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002a2:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002a4:	2208      	movs	r2, #8
 80002a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002bc:	220a      	movs	r2, #10
 80002be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_SPI1_Init+0x64>)
 80002c2:	f003 f963 	bl	800358c <HAL_SPI_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002cc:	f000 f896 	bl	80003fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200001a0 	.word	0x200001a0
 80002d8:	40013000 	.word	0x40013000

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b088      	sub	sp, #32
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <MX_GPIO_Init+0x10c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a3c      	ldr	r2, [pc, #240]	; (80003e8 <MX_GPIO_Init+0x10c>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b3a      	ldr	r3, [pc, #232]	; (80003e8 <MX_GPIO_Init+0x10c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000308:	4b37      	ldr	r3, [pc, #220]	; (80003e8 <MX_GPIO_Init+0x10c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a36      	ldr	r2, [pc, #216]	; (80003e8 <MX_GPIO_Init+0x10c>)
 800030e:	f043 0320 	orr.w	r3, r3, #32
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <MX_GPIO_Init+0x10c>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0320 	and.w	r3, r3, #32
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	4b31      	ldr	r3, [pc, #196]	; (80003e8 <MX_GPIO_Init+0x10c>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a30      	ldr	r2, [pc, #192]	; (80003e8 <MX_GPIO_Init+0x10c>)
 8000326:	f043 0304 	orr.w	r3, r3, #4
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <MX_GPIO_Init+0x10c>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0304 	and.w	r3, r3, #4
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b2b      	ldr	r3, [pc, #172]	; (80003e8 <MX_GPIO_Init+0x10c>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a2a      	ldr	r2, [pc, #168]	; (80003e8 <MX_GPIO_Init+0x10c>)
 800033e:	f043 0308 	orr.w	r3, r3, #8
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <MX_GPIO_Init+0x10c>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0308 	and.w	r3, r3, #8
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <MX_GPIO_Init+0x110>)
 8000358:	f000 ff86 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2108      	movs	r1, #8
 8000360:	4823      	ldr	r0, [pc, #140]	; (80003f0 <MX_GPIO_Init+0x114>)
 8000362:	f000 ff81 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	4822      	ldr	r0, [pc, #136]	; (80003f4 <MX_GPIO_Init+0x118>)
 800036c:	f000 ff7c 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2302      	movs	r3, #2
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4818      	ldr	r0, [pc, #96]	; (80003ec <MX_GPIO_Init+0x110>)
 800038a:	f000 fde9 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 800038e:	2308      	movs	r3, #8
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4812      	ldr	r0, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x114>)
 80003a6:	f000 fddb 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80003aa:	2310      	movs	r3, #16
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_GPIO_Init+0x11c>)
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <MX_GPIO_Init+0x114>)
 80003be:	f000 fdcf 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 80003c2:	2301      	movs	r3, #1
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c6:	2301      	movs	r3, #1
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	4806      	ldr	r0, [pc, #24]	; (80003f4 <MX_GPIO_Init+0x118>)
 80003da:	f000 fdc1 	bl	8000f60 <HAL_GPIO_Init>

}
 80003de:	bf00      	nop
 80003e0:	3720      	adds	r7, #32
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	10110000 	.word	0x10110000

080003fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000400:	b672      	cpsid	i
}
 8000402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000404:	e7fe      	b.n	8000404 <Error_Handler+0x8>

08000406 <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f000 f9c6 	bl	80007a0 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 f9f1 	bl	8000800 <nrf24_writeReg>
	node->crc = no_CRC;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2200      	movs	r2, #0
 8000422:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 8000424:	2200      	movs	r2, #0
 8000426:	2101      	movs	r1, #1
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f9e9 	bl	8000800 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 800042e:	2200      	movs	r2, #0
 8000430:	2102      	movs	r1, #2
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 f9e4 	bl	8000800 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000438:	2203      	movs	r2, #3
 800043a:	2103      	movs	r1, #3
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f000 f9df 	bl	8000800 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000442:	2200      	movs	r2, #0
 8000444:	2104      	movs	r1, #4
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 f9da 	bl	8000800 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 800044c:	2100      	movs	r1, #0
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f000 f813 	bl	800047a <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000454:	2103      	movs	r1, #3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 f85a 	bl	8000510 <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 800045c:	2164      	movs	r1, #100	; 0x64
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f000 f8ae 	bl	80005c0 <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000464:	2101      	movs	r1, #1
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f000 f8c0 	bl	80005ec <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f987 	bl	8000780 <nrf24_CE_enable>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 800047a:	b580      	push	{r7, lr}
 800047c:	b084      	sub	sp, #16
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	460b      	mov	r3, r1
 8000484:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 f98a 	bl	80007a0 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 800048c:	2106      	movs	r1, #6
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f000 fa1d 	bl	80008ce <nrf24_readReg>
 8000494:	4603      	mov	r3, r0
 8000496:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d01e      	beq.n	80004dc <nrf24_setDataRate+0x62>
 800049e:	2b02      	cmp	r3, #2
 80004a0:	dc28      	bgt.n	80004f4 <nrf24_setDataRate+0x7a>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d002      	beq.n	80004ac <nrf24_setDataRate+0x32>
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d00c      	beq.n	80004c4 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 80004aa:	e023      	b.n	80004f4 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	f023 0308 	bic.w	r3, r3, #8
 80004ba:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	775a      	strb	r2, [r3, #29]
			break;
 80004c2:	e018      	b.n	80004f6 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	f023 0320 	bic.w	r3, r3, #32
 80004ca:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	f023 0308 	bic.w	r3, r3, #8
 80004d2:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2201      	movs	r2, #1
 80004d8:	775a      	strb	r2, [r3, #29]
			break;
 80004da:	e00c      	b.n	80004f6 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	f023 0320 	bic.w	r3, r3, #32
 80004e2:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2202      	movs	r2, #2
 80004f0:	775a      	strb	r2, [r3, #29]
			break;
 80004f2:	e000      	b.n	80004f6 <nrf24_setDataRate+0x7c>
			break;
 80004f4:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	461a      	mov	r2, r3
 80004fa:	2106      	movs	r1, #6
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f000 f97f 	bl	8000800 <nrf24_writeReg>
	nrf24_CE_enable(node);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 f93c 	bl	8000780 <nrf24_CE_enable>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f000 f93f 	bl	80007a0 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000522:	2106      	movs	r1, #6
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f9d2 	bl	80008ce <nrf24_readReg>
 800052a:	4603      	mov	r3, r0
 800052c:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 800052e:	78fb      	ldrb	r3, [r7, #3]
 8000530:	2b03      	cmp	r3, #3
 8000532:	d837      	bhi.n	80005a4 <nrf24_setPALevel+0x94>
 8000534:	a201      	add	r2, pc, #4	; (adr r2, 800053c <nrf24_setPALevel+0x2c>)
 8000536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053a:	bf00      	nop
 800053c:	0800054d 	.word	0x0800054d
 8000540:	08000565 	.word	0x08000565
 8000544:	0800057d 	.word	0x0800057d
 8000548:	08000595 	.word	0x08000595
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	f023 0304 	bic.w	r3, r3, #4
 8000552:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	f023 0302 	bic.w	r3, r3, #2
 800055a:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	771a      	strb	r2, [r3, #28]
			break;
 8000562:	e020      	b.n	80005a6 <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	f023 0304 	bic.w	r3, r3, #4
 800056a:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	f043 0302 	orr.w	r3, r3, #2
 8000572:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2201      	movs	r2, #1
 8000578:	771a      	strb	r2, [r3, #28]
			break;
 800057a:	e014      	b.n	80005a6 <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f023 0302 	bic.w	r3, r3, #2
 800058a:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2202      	movs	r2, #2
 8000590:	771a      	strb	r2, [r3, #28]
			break;
 8000592:	e008      	b.n	80005a6 <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	f043 0306 	orr.w	r3, r3, #6
 800059a:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2203      	movs	r2, #3
 80005a0:	771a      	strb	r2, [r3, #28]
			break;
 80005a2:	e000      	b.n	80005a6 <nrf24_setPALevel+0x96>

		default:
			break;
 80005a4:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	461a      	mov	r2, r3
 80005aa:	2106      	movs	r1, #6
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f927 	bl	8000800 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f8e4 	bl	8000780 <nrf24_CE_enable>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f000 f8e7 	bl	80007a0 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	461a      	mov	r2, r3
 80005d6:	2105      	movs	r1, #5
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f911 	bl	8000800 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f8ce 	bl	8000780 <nrf24_CE_enable>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 80005f8:	2100      	movs	r1, #0
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f967 	bl	80008ce <nrf24_readReg>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d837      	bhi.n	800067a <nrf24_setMode+0x8e>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <nrf24_setMode+0x24>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000631 	.word	0x08000631
 8000618:	08000647 	.word	0x08000647
 800061c:	08000665 	.word	0x08000665
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	f023 0302 	bic.w	r3, r3, #2
 8000626:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	779a      	strb	r2, [r3, #30]
			break;
 800062e:	e025      	b.n	800067c <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f8b5 	bl	80007a0 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2201      	movs	r2, #1
 8000642:	779a      	strb	r2, [r3, #30]
			break;
 8000644:	e01a      	b.n	800067c <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f89a 	bl	8000780 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	f023 0301 	bic.w	r3, r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2202      	movs	r2, #2
 8000660:	779a      	strb	r2, [r3, #30]
			break;
 8000662:	e00b      	b.n	800067c <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f000 f88b 	bl	8000780 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	f043 0303 	orr.w	r3, r3, #3
 8000670:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2203      	movs	r2, #3
 8000676:	779a      	strb	r2, [r3, #30]
			break;
 8000678:	e000      	b.n	800067c <nrf24_setMode+0x90>

		default:
			break;
 800067a:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	461a      	mov	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f8bc 	bl	8000800 <nrf24_writeReg>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <nrf24_setTxAddr>:
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
}
// -----------------------------------------------------------------------------

// set up the Tx mode
void nrf24_setTxAddr(nrf24 *node, uint8_t *Address) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 f880 	bl	80007a0 <nrf24_CE_disable>
	nrf24_writeRegMulti(node, TX_ADDR, Address, 5);  // Write the TX address
 80006a0:	2305      	movs	r3, #5
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	2110      	movs	r1, #16
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f8d5 	bl	8000856 <nrf24_writeRegMulti>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f867 	bl	8000780 <nrf24_CE_enable>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <nrf24_Transmit>:
// -----------------------------------------------------------------------------

//transmit the data
uint8_t nrf24_Transmit(nrf24 *node, uint8_t *data, uint8_t len) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b088      	sub	sp, #32
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	75bb      	strb	r3, [r7, #22]

	nrf24_CSN_enable(node);		//select the device
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f000 f877 	bl	80007c0 <nrf24_CSN_enable>
	cmdtosend = W_TX_PAYLOAD;	//payload command
 80006d2:	23a0      	movs	r3, #160	; 0xa0
 80006d4:	75bb      	strb	r3, [r7, #22]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, NRF_TX_TIMEOUT);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6998      	ldr	r0, [r3, #24]
 80006da:	f107 0116 	add.w	r1, r7, #22
 80006de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e2:	2201      	movs	r2, #1
 80006e4:	f002 ffd6 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80006e8:	bf00      	nop
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fbbf 	bl	8003e72 <HAL_SPI_GetState>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1f7      	bne.n	80006ea <nrf24_Transmit+0x30>
	// send the payload
	if (len < 33) HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d808      	bhi.n	8000712 <nrf24_Transmit+0x58>
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6998      	ldr	r0, [r3, #24]
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	b29a      	uxth	r2, r3
 8000708:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800070c:	68b9      	ldr	r1, [r7, #8]
 800070e:	f002 ffc1 	bl	8003694 <HAL_SPI_Transmit>
	nrf24_CSN_disable(node);	//Unselect the device
 8000712:	68f8      	ldr	r0, [r7, #12]
 8000714:	f000 f864 	bl	80007e0 <nrf24_CSN_disable>

	uint8_t timeout = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	77fb      	strb	r3, [r7, #31]
	while (timeout++ < 10) {
 800071c:	e026      	b.n	800076c <nrf24_Transmit+0xb2>
		for (int i = 0; i < 200; ++i) {
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	e003      	b.n	800072c <nrf24_Transmit+0x72>
			__ASM("NOP");
 8000724:	bf00      	nop
		for (int i = 0; i < 200; ++i) {
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	3301      	adds	r3, #1
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	2bc7      	cmp	r3, #199	; 0xc7
 8000730:	ddf8      	ble.n	8000724 <nrf24_Transmit+0x6a>
		}
		uint8_t fifostatus = nrf24_readReg(node, FIFO_STATUS);
 8000732:	2117      	movs	r1, #23
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f000 f8ca 	bl	80008ce <nrf24_readReg>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]

		//check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
		if ((fifostatus & (1 << 4)) && (!(fifostatus & (1 << 3)))) {
 800073e:	7dfb      	ldrb	r3, [r7, #23]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	2b00      	cmp	r3, #0
 8000746:	d011      	beq.n	800076c <nrf24_Transmit+0xb2>
 8000748:	7dfb      	ldrb	r3, [r7, #23]
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10c      	bne.n	800076c <nrf24_Transmit+0xb2>
			cmdtosend = FLUSH_TX;
 8000752:	23e1      	movs	r3, #225	; 0xe1
 8000754:	75bb      	strb	r3, [r7, #22]
			nrf_sendCmd(node, cmdtosend);
 8000756:	7dbb      	ldrb	r3, [r7, #22]
 8000758:	4619      	mov	r1, r3
 800075a:	68f8      	ldr	r0, [r7, #12]
 800075c:	f000 f8e4 	bl	8000928 <nrf_sendCmd>
			nrf24_reset(node, FIFO_STATUS);	//reset FIFO_STATUS
 8000760:	2117      	movs	r1, #23
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 f902 	bl	800096c <nrf24_reset>
			return (1);
 8000768:	2301      	movs	r3, #1
 800076a:	e005      	b.n	8000778 <nrf24_Transmit+0xbe>
	while (timeout++ < 10) {
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	77fa      	strb	r2, [r7, #31]
 8000772:	2b09      	cmp	r3, #9
 8000774:	d9d3      	bls.n	800071e <nrf24_Transmit+0x64>
		}
	}
	return (0);
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6898      	ldr	r0, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	899b      	ldrh	r3, [r3, #12]
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	f000 fd68 	bl	8001268 <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6898      	ldr	r0, [r3, #8]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	899b      	ldrh	r3, [r3, #12]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	f000 fd58 	bl	8001268 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	f000 fd48 	bl	8001268 <HAL_GPIO_WritePin>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	f000 fd38 	bl	8001268 <HAL_GPIO_WritePin>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
 800080c:	4613      	mov	r3, r2
 800080e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	b2db      	uxtb	r3, r3
 8000818:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 800081a:	78bb      	ldrb	r3, [r7, #2]
 800081c:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffce 	bl	80007c0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6998      	ldr	r0, [r3, #24]
 8000828:	f107 010c 	add.w	r1, r7, #12
 800082c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000830:	2202      	movs	r2, #2
 8000832:	f002 ff2f 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000836:	bf00      	nop
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fb18 	bl	8003e72 <HAL_SPI_GetState>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d1f7      	bne.n	8000838 <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ffc9 	bl	80007e0 <nrf24_CSN_disable>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	461a      	mov	r2, r3
 8000862:	460b      	mov	r3, r1
 8000864:	72fb      	strb	r3, [r7, #11]
 8000866:	4613      	mov	r3, r2
 8000868:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	b2db      	uxtb	r3, r3
 8000872:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff ffa3 	bl	80007c0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6998      	ldr	r0, [r3, #24]
 800087e:	f107 0114 	add.w	r1, r7, #20
 8000882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000886:	2201      	movs	r2, #1
 8000888:	f002 ff04 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800088c:	bf00      	nop
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4618      	mov	r0, r3
 8000894:	f003 faed 	bl	8003e72 <HAL_SPI_GetState>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d1f7      	bne.n	800088e <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6998      	ldr	r0, [r3, #24]
 80008a2:	893a      	ldrh	r2, [r7, #8]
 80008a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008a8:	6879      	ldr	r1, [r7, #4]
 80008aa:	f002 fef3 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80008ae:	bf00      	nop
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fadc 	bl	8003e72 <HAL_SPI_GetState>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d1f7      	bne.n	80008b0 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f7ff ff8d 	bl	80007e0 <nrf24_CSN_disable>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ff6e 	bl	80007c0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6998      	ldr	r0, [r3, #24]
 80008e8:	1cf9      	adds	r1, r7, #3
 80008ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ee:	2201      	movs	r2, #1
 80008f0:	f002 fed0 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80008f4:	bf00      	nop
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 fab9 	bl	8003e72 <HAL_SPI_GetState>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1f7      	bne.n	80008f6 <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6998      	ldr	r0, [r3, #24]
 800090a:	f107 010f 	add.w	r1, r7, #15
 800090e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000912:	2201      	movs	r2, #1
 8000914:	f002 fffa 	bl	800390c <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff61 	bl	80007e0 <nrf24_CSN_disable>
	return data;
 800091e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
	nrf24_CSN_enable(node);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f7ff ff43 	bl	80007c0 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6998      	ldr	r0, [r3, #24]
 800093e:	1cf9      	adds	r1, r7, #3
 8000940:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000944:	2201      	movs	r2, #1
 8000946:	f002 fea5 	bl	8003694 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800094a:	bf00      	nop
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fa8e 	bl	8003e72 <HAL_SPI_GetState>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d1f7      	bne.n	800094c <nrf_sendCmd+0x24>
	nrf24_CSN_disable(node);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff3f 	bl	80007e0 <nrf24_CSN_disable>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	460b      	mov	r3, r1
 8000976:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d105      	bne.n	800098a <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 800097e:	2200      	movs	r2, #0
 8000980:	2107      	movs	r1, #7
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff3c 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 8000988:	e0a8      	b.n	8000adc <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	2b17      	cmp	r3, #23
 800098e:	d105      	bne.n	800099c <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000990:	2211      	movs	r2, #17
 8000992:	2117      	movs	r1, #23
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff33 	bl	8000800 <nrf24_writeReg>
}
 800099a:	e09f      	b.n	8000adc <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 800099c:	2208      	movs	r2, #8
 800099e:	2100      	movs	r1, #0
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff2d 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 80009a6:	223f      	movs	r2, #63	; 0x3f
 80009a8:	2101      	movs	r1, #1
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff28 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 80009b0:	2203      	movs	r2, #3
 80009b2:	2102      	movs	r1, #2
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff23 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 80009ba:	2203      	movs	r2, #3
 80009bc:	2103      	movs	r1, #3
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff1e 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 80009c4:	2203      	movs	r2, #3
 80009c6:	2104      	movs	r1, #4
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff19 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 80009ce:	2202      	movs	r2, #2
 80009d0:	2105      	movs	r1, #5
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff14 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 80009d8:	220e      	movs	r2, #14
 80009da:	2106      	movs	r1, #6
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff0f 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2107      	movs	r1, #7
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ff0a 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2108      	movs	r1, #8
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ff05 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2109      	movs	r1, #9
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ff00 	bl	8000800 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000a00:	4a38      	ldr	r2, [pc, #224]	; (8000ae4 <nrf24_reset+0x178>)
 8000a02:	f107 0318 	add.w	r3, r7, #24
 8000a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a0a:	6018      	str	r0, [r3, #0]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8000a10:	f107 0218 	add.w	r2, r7, #24
 8000a14:	2305      	movs	r3, #5
 8000a16:	210a      	movs	r1, #10
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff1c 	bl	8000856 <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8000a1e:	4a32      	ldr	r2, [pc, #200]	; (8000ae8 <nrf24_reset+0x17c>)
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a28:	6018      	str	r0, [r3, #0]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8000a2e:	f107 0210 	add.w	r2, r7, #16
 8000a32:	2305      	movs	r3, #5
 8000a34:	210b      	movs	r1, #11
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ff0d 	bl	8000856 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8000a3c:	22c3      	movs	r2, #195	; 0xc3
 8000a3e:	210c      	movs	r1, #12
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff fedd 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 8000a46:	22c4      	movs	r2, #196	; 0xc4
 8000a48:	210d      	movs	r1, #13
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fed8 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 8000a50:	22c5      	movs	r2, #197	; 0xc5
 8000a52:	210e      	movs	r1, #14
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fed3 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 8000a5a:	22c6      	movs	r2, #198	; 0xc6
 8000a5c:	210f      	movs	r1, #15
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fece 	bl	8000800 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8000a64:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <nrf24_reset+0x178>)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6e:	6018      	str	r0, [r3, #0]
 8000a70:	3304      	adds	r3, #4
 8000a72:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 8000a74:	f107 0208 	add.w	r2, r7, #8
 8000a78:	2305      	movs	r3, #5
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff feea 	bl	8000856 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2111      	movs	r1, #17
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff feba 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2112      	movs	r1, #18
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff feb5 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2113      	movs	r1, #19
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff feb0 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2114      	movs	r1, #20
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff feab 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2115      	movs	r1, #21
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fea6 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2116      	movs	r1, #22
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fea1 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8000abe:	2211      	movs	r2, #17
 8000ac0:	2117      	movs	r1, #23
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fe9c 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	211c      	movs	r1, #28
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fe97 	bl	8000800 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	211d      	movs	r1, #29
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fe92 	bl	8000800 <nrf24_writeReg>
}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	08008cdc 	.word	0x08008cdc
 8000ae8:	08008ce4 	.word	0x08008ce4

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_MspInit+0x40>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_MspInit+0x40>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_MspInit+0x40>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x40>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_MspInit+0x40>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_MspInit+0x40>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <HAL_SPI_MspInit+0x88>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d12f      	bne.n	8000bb0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_SPI_MspInit+0x8c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_SPI_MspInit+0x90>)
 8000b94:	f000 f9e4 	bl	8000f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b98:	2340      	movs	r3, #64	; 0x40
 8000b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_SPI_MspInit+0x90>)
 8000bac:	f000 f9d8 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f87f 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c1a:	f000 fc87 	bl	800152c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000eb4 	.word	0x20000eb4

08000c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c5a:	f7ff ffe5 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f008 f805 	bl	8008c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff fa73 	bl	800014c <main>
  bx lr
 8000c66:	4770      	bx	lr
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000c70:	08008d5c 	.word	0x08008d5c
  ldr r2, =_sbss
 8000c74:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000c78:	200013c0 	.word	0x200013c0

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x28>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f923 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff ff26 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f93b 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f903 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000010 	.word	0x20000010
 8000d08:	2000000c 	.word	0x2000000c

08000d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x1c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_IncTick+0x20>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <HAL_IncTick+0x20>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20000218 	.word	0x20000218

08000d30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return uwTick;
 8000d34:	4b02      	ldr	r3, [pc, #8]	; (8000d40 <HAL_GetTick+0x10>)
 8000d36:	681b      	ldr	r3, [r3, #0]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	20000218 	.word	0x20000218

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4906      	ldr	r1, [pc, #24]	; (8000ddc <__NVIC_EnableIRQ+0x34>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff90 	bl	8000de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff2d 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff42 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff90 	bl	8000e34 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5f 	bl	8000de0 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff35 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b08b      	sub	sp, #44	; 0x2c
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	e169      	b.n	8001248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8158 	bne.w	8001242 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a9a      	ldr	r2, [pc, #616]	; (8001200 <HAL_GPIO_Init+0x2a0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d05e      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000f9c:	4a98      	ldr	r2, [pc, #608]	; (8001200 <HAL_GPIO_Init+0x2a0>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d875      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fa2:	4a98      	ldr	r2, [pc, #608]	; (8001204 <HAL_GPIO_Init+0x2a4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d058      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fa8:	4a96      	ldr	r2, [pc, #600]	; (8001204 <HAL_GPIO_Init+0x2a4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d86f      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fae:	4a96      	ldr	r2, [pc, #600]	; (8001208 <HAL_GPIO_Init+0x2a8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d052      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fb4:	4a94      	ldr	r2, [pc, #592]	; (8001208 <HAL_GPIO_Init+0x2a8>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d869      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fba:	4a94      	ldr	r2, [pc, #592]	; (800120c <HAL_GPIO_Init+0x2ac>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d04c      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fc0:	4a92      	ldr	r2, [pc, #584]	; (800120c <HAL_GPIO_Init+0x2ac>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d863      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fc6:	4a92      	ldr	r2, [pc, #584]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d046      	beq.n	800105a <HAL_GPIO_Init+0xfa>
 8000fcc:	4a90      	ldr	r2, [pc, #576]	; (8001210 <HAL_GPIO_Init+0x2b0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d85d      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d82a      	bhi.n	800102c <HAL_GPIO_Init+0xcc>
 8000fd6:	2b12      	cmp	r3, #18
 8000fd8:	d859      	bhi.n	800108e <HAL_GPIO_Init+0x12e>
 8000fda:	a201      	add	r2, pc, #4	; (adr r2, 8000fe0 <HAL_GPIO_Init+0x80>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	08001035 	.word	0x08001035
 8000fe8:	08001047 	.word	0x08001047
 8000fec:	08001089 	.word	0x08001089
 8000ff0:	0800108f 	.word	0x0800108f
 8000ff4:	0800108f 	.word	0x0800108f
 8000ff8:	0800108f 	.word	0x0800108f
 8000ffc:	0800108f 	.word	0x0800108f
 8001000:	0800108f 	.word	0x0800108f
 8001004:	0800108f 	.word	0x0800108f
 8001008:	0800108f 	.word	0x0800108f
 800100c:	0800108f 	.word	0x0800108f
 8001010:	0800108f 	.word	0x0800108f
 8001014:	0800108f 	.word	0x0800108f
 8001018:	0800108f 	.word	0x0800108f
 800101c:	0800108f 	.word	0x0800108f
 8001020:	0800108f 	.word	0x0800108f
 8001024:	0800103d 	.word	0x0800103d
 8001028:	08001051 	.word	0x08001051
 800102c:	4a79      	ldr	r2, [pc, #484]	; (8001214 <HAL_GPIO_Init+0x2b4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001032:	e02c      	b.n	800108e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e029      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	3304      	adds	r3, #4
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e024      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e01f      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	330c      	adds	r3, #12
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e01a      	b.n	8001090 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e013      	b.n	8001090 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]
          break;
 800107a:	e009      	b.n	8001090 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	615a      	str	r2, [r3, #20]
          break;
 8001086:	e003      	b.n	8001090 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x130>
          break;
 800108e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2bff      	cmp	r3, #255	; 0xff
 8001094:	d801      	bhi.n	800109a <HAL_GPIO_Init+0x13a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e001      	b.n	800109e <HAL_GPIO_Init+0x13e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2bff      	cmp	r3, #255	; 0xff
 80010a4:	d802      	bhi.n	80010ac <HAL_GPIO_Init+0x14c>
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x152>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3b08      	subs	r3, #8
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	210f      	movs	r1, #15
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	401a      	ands	r2, r3
 80010c4:	6a39      	ldr	r1, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	fa01 f303 	lsl.w	r3, r1, r3
 80010cc:	431a      	orrs	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80b1 	beq.w	8001242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e0:	4b4d      	ldr	r3, [pc, #308]	; (8001218 <HAL_GPIO_Init+0x2b8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x2b8>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <HAL_GPIO_Init+0x2b8>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2bc>)
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <HAL_GPIO_Init+0x2c0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x1ec>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a3f      	ldr	r2, [pc, #252]	; (8001224 <HAL_GPIO_Init+0x2c4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1e8>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <HAL_GPIO_Init+0x2c8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1e4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3d      	ldr	r2, [pc, #244]	; (800122c <HAL_GPIO_Init+0x2cc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1e0>
 800113c:	2303      	movs	r3, #3
 800113e:	e006      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001140:	2304      	movs	r3, #4
 8001142:	e004      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001144:	2302      	movs	r3, #2
 8001146:	e002      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 8001148:	2301      	movs	r3, #1
 800114a:	e000      	b.n	800114e <HAL_GPIO_Init+0x1ee>
 800114c:	2300      	movs	r3, #0
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	f002 0203 	and.w	r2, r2, #3
 8001154:	0092      	lsls	r2, r2, #2
 8001156:	4093      	lsls	r3, r2
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800115e:	492f      	ldr	r1, [pc, #188]	; (800121c <HAL_GPIO_Init+0x2bc>)
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	492c      	ldr	r1, [pc, #176]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
 8001184:	e006      	b.n	8001194 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001186:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	43db      	mvns	r3, r3
 800118e:	4928      	ldr	r1, [pc, #160]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 8001190:	4013      	ands	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	4922      	ldr	r1, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	491e      	ldr	r1, [pc, #120]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4918      	ldr	r1, [pc, #96]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	4914      	ldr	r1, [pc, #80]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d021      	beq.n	8001234 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	490e      	ldr	r1, [pc, #56]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
 80011fc:	e021      	b.n	8001242 <HAL_GPIO_Init+0x2e2>
 80011fe:	bf00      	nop
 8001200:	10320000 	.word	0x10320000
 8001204:	10310000 	.word	0x10310000
 8001208:	10220000 	.word	0x10220000
 800120c:	10210000 	.word	0x10210000
 8001210:	10120000 	.word	0x10120000
 8001214:	10110000 	.word	0x10110000
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	40010800 	.word	0x40010800
 8001224:	40010c00 	.word	0x40010c00
 8001228:	40011000 	.word	0x40011000
 800122c:	40011400 	.word	0x40011400
 8001230:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_GPIO_Init+0x304>)
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	43db      	mvns	r3, r3
 800123c:	4909      	ldr	r1, [pc, #36]	; (8001264 <HAL_GPIO_Init+0x304>)
 800123e:	4013      	ands	r3, r2
 8001240:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	3301      	adds	r3, #1
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	fa22 f303 	lsr.w	r3, r2, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	f47f ae8e 	bne.w	8000f74 <HAL_GPIO_Init+0x14>
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	372c      	adds	r7, #44	; 0x2c
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43d9      	mvns	r1, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	400b      	ands	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012cc:	b08b      	sub	sp, #44	; 0x2c
 80012ce:	af06      	add	r7, sp, #24
 80012d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0fd      	b.n	80014d8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 fa11 	bl	8008718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fee0 	bl	80040c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	687e      	ldr	r6, [r7, #4]
 8001310:	466d      	mov	r5, sp
 8001312:	f106 0410 	add.w	r4, r6, #16
 8001316:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001318:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	1d33      	adds	r3, r6, #4
 8001320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f002 feaa 	bl	800407c <USB_CoreInit>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2202      	movs	r2, #2
 8001332:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e0ce      	b.n	80014d8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fedb 	bl	80040fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e04c      	b.n	80013e6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3301      	adds	r3, #1
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	b298      	uxth	r0, r3
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3336      	adds	r3, #54	; 0x36
 800138a:	4602      	mov	r2, r0
 800138c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3303      	adds	r3, #3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3338      	adds	r3, #56	; 0x38
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	333c      	adds	r3, #60	; 0x3c
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3340      	adds	r3, #64	; 0x40
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d3ad      	bcc.n	800134c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73fb      	strb	r3, [r7, #15]
 80013f4:	e044      	b.n	8001480 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001422:	7bfa      	ldrb	r2, [r7, #15]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3301      	adds	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3b5      	bcc.n	80013f6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	687e      	ldr	r6, [r7, #4]
 8001492:	466d      	mov	r5, sp
 8001494:	f106 0410 	add.w	r4, r6, #16
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	1d33      	adds	r3, r6, #4
 80014a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f002 fe35 	bl	8004114 <USB_DevInit>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e00d      	b.n	80014d8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fae7 	bl	8006aa4 <USB_DevDisconnect>

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_PCD_Start+0x16>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e016      	b.n	8001524 <HAL_PCD_Start+0x44>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fdca 	bl	800409c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001508:	2101      	movs	r1, #1
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f007 fb77 	bl	8008bfe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f005 fabb 	bl	8006a90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fabd 	bl	8006ab8 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001548:	d102      	bne.n	8001550 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fb5f 	bl	8001c0e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f005 faaf 	bl	8006ab8 <USB_ReadInterrupts>
 800155a:	4603      	mov	r3, r0
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d112      	bne.n	800158c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001578:	b292      	uxth	r2, r2
 800157a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f007 f945 	bl	800880e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f923 	bl	80017d2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fa91 	bl	8006ab8 <USB_ReadInterrupts>
 8001596:	4603      	mov	r3, r0
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a0:	d10b      	bne.n	80015ba <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015b4:	b292      	uxth	r2, r2
 80015b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f005 fa7a 	bl	8006ab8 <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d10b      	bne.n	80015e8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 fa63 	bl	8006ab8 <USB_ReadInterrupts>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015fc:	d126      	bne.n	800164c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001606:	b29a      	uxth	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0204 	bic.w	r2, r2, #4
 8001610:	b292      	uxth	r2, r2
 8001612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0208 	bic.w	r2, r2, #8
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f007 f926 	bl	8008880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001646:	b292      	uxth	r2, r2
 8001648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f005 fa31 	bl	8006ab8 <USB_ReadInterrupts>
 8001656:	4603      	mov	r3, r0
 8001658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001660:	f040 8082 	bne.w	8001768 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
 8001668:	e010      	b.n	800168c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	7ffb      	ldrb	r3, [r7, #31]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	441a      	add	r2, r3
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	8812      	ldrh	r2, [r2, #0]
 800167a:	b292      	uxth	r2, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	3320      	adds	r3, #32
 8001680:	443b      	add	r3, r7
 8001682:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001686:	7ffb      	ldrb	r3, [r7, #31]
 8001688:	3301      	adds	r3, #1
 800168a:	77fb      	strb	r3, [r7, #31]
 800168c:	7ffb      	ldrb	r3, [r7, #31]
 800168e:	2b07      	cmp	r3, #7
 8001690:	d9eb      	bls.n	800166a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	b292      	uxth	r2, r2
 80016a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	b292      	uxth	r2, r2
 80016be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016c2:	bf00      	nop
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f6      	beq.n	80016c4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016e8:	b292      	uxth	r2, r2
 80016ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	77fb      	strb	r3, [r7, #31]
 80016f2:	e00f      	b.n	8001714 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	4611      	mov	r1, r2
 80016fc:	7ffa      	ldrb	r2, [r7, #31]
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	440a      	add	r2, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	3320      	adds	r3, #32
 8001706:	443b      	add	r3, r7
 8001708:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800170c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	3301      	adds	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
 8001714:	7ffb      	ldrb	r3, [r7, #31]
 8001716:	2b07      	cmp	r3, #7
 8001718:	d9ec      	bls.n	80016f4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0208 	orr.w	r2, r2, #8
 800172c:	b292      	uxth	r2, r2
 800172e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800173a:	b29a      	uxth	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001744:	b292      	uxth	r2, r2
 8001746:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0204 	orr.w	r2, r2, #4
 800175c:	b292      	uxth	r2, r2
 800175e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f007 f872 	bl	800884c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f005 f9a3 	bl	8006ab8 <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177c:	d10e      	bne.n	800179c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001786:	b29a      	uxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001790:	b292      	uxth	r2, r2
 8001792:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f007 f82b 	bl	80087f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 f989 	bl	8006ab8 <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b0:	d10b      	bne.n	80017ca <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c4:	b292      	uxth	r2, r2
 80017c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80017ca:	bf00      	nop
 80017cc:	3720      	adds	r7, #32
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_PCD_SetAddress+0x1a>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e013      	b.n	8001814 <HAL_PCD_SetAddress+0x42>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f005 f930 	bl	8006a6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	70fb      	strb	r3, [r7, #3]
 800182e:	460b      	mov	r3, r1
 8001830:	803b      	strh	r3, [r7, #0]
 8001832:	4613      	mov	r3, r2
 8001834:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800183a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da0e      	bge.n	8001860 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	705a      	strb	r2, [r3, #1]
 800185e:	e00e      	b.n	800187e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	f003 0207 	and.w	r2, r3, #7
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	b2da      	uxtb	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800188a:	883a      	ldrh	r2, [r7, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	78ba      	ldrb	r2, [r7, #2]
 8001894:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018a8:	78bb      	ldrb	r3, [r7, #2]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d102      	bne.n	80018b4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_PCD_EP_Open+0xa6>
 80018be:	2302      	movs	r3, #2
 80018c0:	e00e      	b.n	80018e0 <HAL_PCD_EP_Open+0xc4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fc3f 	bl	8004154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018de:	7afb      	ldrb	r3, [r7, #11]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	da0e      	bge.n	800191a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	705a      	strb	r2, [r3, #1]
 8001918:	e00e      	b.n	8001938 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 0207 	and.w	r2, r3, #7
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	b2da      	uxtb	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_PCD_EP_Close+0x6a>
 800194e:	2302      	movs	r3, #2
 8001950:	e00e      	b.n	8001970 <HAL_PCD_EP_Close+0x88>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 ff61 	bl	8004828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	f003 0207 	and.w	r2, r3, #7
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2200      	movs	r2, #0
 80019b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	7afb      	ldrb	r3, [r7, #11]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d106      	bne.n	80019dc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6979      	ldr	r1, [r7, #20]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 f913 	bl	8004c00 <USB_EPStartXfer>
 80019da:	e005      	b.n	80019e8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f90c 	bl	8004c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019fe:	78fb      	ldrb	r3, [r7, #3]
 8001a00:	f003 0207 	and.w	r2, r3, #7
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a14:	681b      	ldr	r3, [r3, #0]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 f8b9 	bl	8004c00 <USB_EPStartXfer>
 8001a8e:	e005      	b.n	8001a9c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6979      	ldr	r1, [r7, #20]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 f8b2 	bl	8004c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ab2:	78fb      	ldrb	r3, [r7, #3]
 8001ab4:	f003 0207 	and.w	r2, r3, #7
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d901      	bls.n	8001ac4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e04c      	b.n	8001b5e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da0e      	bge.n	8001aea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	705a      	strb	r2, [r3, #1]
 8001ae8:	e00c      	b.n	8001b04 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aea:	78fa      	ldrb	r2, [r7, #3]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_PCD_EP_SetStall+0x7e>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e01c      	b.n	8001b5e <HAL_PCD_EP_SetStall+0xb8>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f004 fe9c 	bl	8006870 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f004 ffc1 	bl	8006ad6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 020f 	and.w	r2, r3, #15
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d901      	bls.n	8001b84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e040      	b.n	8001c06 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da0e      	bge.n	8001baa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	705a      	strb	r2, [r3, #1]
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 0207 	and.w	r2, r3, #7
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_EP_ClrStall+0x82>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00e      	b.n	8001c06 <HAL_PCD_EP_ClrStall+0xa0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 fe8a 	bl	8006910 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08e      	sub	sp, #56	; 0x38
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c16:	e2ec      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 8161 	bne.w	8001efa <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d152      	bne.n	8001ce8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c52:	81fb      	strh	r3, [r7, #14]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3328      	adds	r3, #40	; 0x28
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3302      	adds	r3, #2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	441a      	add	r2, r3
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f006 fd88 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 829b 	beq.w	80021f2 <PCD_EP_ISR_Handler+0x5e4>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 8296 	bne.w	80021f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ce6:	e284      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cf8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d034      	beq.n	8001d6c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	3306      	adds	r3, #6
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f004 ff18 	bl	8006b76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d52:	4013      	ands	r3, r2
 8001d54:	823b      	strh	r3, [r7, #16]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	8a3a      	ldrh	r2, [r7, #16]
 8001d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d60:	b292      	uxth	r2, r2
 8001d62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f006 fcfd 	bl	8008764 <HAL_PCD_SetupStageCallback>
 8001d6a:	e242      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f280 823e 	bge.w	80021f2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d82:	4013      	ands	r3, r2
 8001d84:	83bb      	strh	r3, [r7, #28]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	8bba      	ldrh	r2, [r7, #28]
 8001d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d90:	b292      	uxth	r2, r2
 8001d92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	3306      	adds	r3, #6
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d019      	beq.n	8001dfc <PCD_EP_ISR_Handler+0x1ee>
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	6959      	ldr	r1, [r3, #20]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	f004 fec8 	bl	8006b76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	441a      	add	r2, r3
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001df4:	2100      	movs	r1, #0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f006 fcc6 	bl	8008788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 81f2 	bne.w	80021f2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	4413      	add	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d112      	bne.n	8001e5c <PCD_EP_ISR_Handler+0x24e>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	801a      	strh	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	801a      	strh	r2, [r3, #0]
 8001e5a:	e02f      	b.n	8001ebc <PCD_EP_ISR_Handler+0x2ae>
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b3e      	cmp	r3, #62	; 0x3e
 8001e62:	d813      	bhi.n	8001e8c <PCD_EP_ISR_Handler+0x27e>
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	085b      	lsrs	r3, r3, #1
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <PCD_EP_ISR_Handler+0x270>
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	e017      	b.n	8001ebc <PCD_EP_ISR_Handler+0x2ae>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d102      	bne.n	8001ea6 <PCD_EP_ISR_Handler+0x298>
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	827b      	strh	r3, [r7, #18]
 8001ece:	8a7b      	ldrh	r3, [r7, #18]
 8001ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ed4:	827b      	strh	r3, [r7, #18]
 8001ed6:	8a7b      	ldrh	r3, [r7, #18]
 8001ed8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001edc:	827b      	strh	r3, [r7, #18]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	8a7b      	ldrh	r3, [r7, #18]
 8001ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	8013      	strh	r3, [r2, #0]
 8001ef8:	e17b      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f0c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f280 80ea 	bge.w	80020ea <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f44:	b292      	uxth	r2, r2
 8001f46:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f48:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	7b1b      	ldrb	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d122      	bne.n	8001fac <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3306      	adds	r3, #6
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f8e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 8087 	beq.w	80020a6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	6959      	ldr	r1, [r3, #20]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	88da      	ldrh	r2, [r3, #6]
 8001fa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fa6:	f004 fde6 	bl	8006b76 <USB_ReadPMA>
 8001faa:	e07c      	b.n	80020a6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	78db      	ldrb	r3, [r3, #3]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d108      	bne.n	8001fc6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f927 	bl	800220e <HAL_PCD_EP_DB_Receive>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fc4:	e06f      	b.n	80020a6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	441a      	add	r2, r3
 8001ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002002:	b29b      	uxth	r3, r3
 8002004:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d021      	beq.n	8002064 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002028:	b29b      	uxth	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	3302      	adds	r3, #2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002048:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800204a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204c:	2b00      	cmp	r3, #0
 800204e:	d02a      	beq.n	80020a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	6959      	ldr	r1, [r3, #20]
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	891a      	ldrh	r2, [r3, #8]
 800205c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800205e:	f004 fd8a 	bl	8006b76 <USB_ReadPMA>
 8002062:	e020      	b.n	80020a6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	3306      	adds	r3, #6
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800208e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	6959      	ldr	r1, [r3, #20]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	895a      	ldrh	r2, [r3, #10]
 80020a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a2:	f004 fd68 	bl	8006b76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ac:	441a      	add	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020b8:	441a      	add	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <PCD_EP_ISR_Handler+0x4c2>
 80020c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d206      	bcs.n	80020de <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f006 fb56 	bl	8008788 <HAL_PCD_DataOutStageCallback>
 80020dc:	e005      	b.n	80020ea <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 fd8b 	bl	8004c00 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d07e      	beq.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80020f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800211e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002122:	843b      	strh	r3, [r7, #32]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	8c3b      	ldrh	r3, [r7, #32]
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29b      	uxth	r3, r3
 800213e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	78db      	ldrb	r3, [r3, #3]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d00c      	beq.n	8002162 <PCD_EP_ISR_Handler+0x554>
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	78db      	ldrb	r3, [r3, #3]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002154:	2b02      	cmp	r3, #2
 8002156:	d146      	bne.n	80021e6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002158:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d141      	bne.n	80021e6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	3302      	adds	r3, #2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	8bfb      	ldrh	r3, [r7, #30]
 8002192:	429a      	cmp	r2, r3
 8002194:	d906      	bls.n	80021a4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	8bfb      	ldrh	r3, [r7, #30]
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	619a      	str	r2, [r3, #24]
 80021a2:	e002      	b.n	80021aa <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f006 fb00 	bl	80087be <HAL_PCD_DataInStageCallback>
 80021be:	e018      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	8bfb      	ldrh	r3, [r7, #30]
 80021c6:	441a      	add	r2, r3
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	441a      	add	r2, r3
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fd0e 	bl	8004c00 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021e4:	e005      	b.n	80021f2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021e8:	461a      	mov	r2, r3
 80021ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f91b 	bl	8002428 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f6ff ad0a 	blt.w	8001c18 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3738      	adds	r7, #56	; 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b088      	sub	sp, #32
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	4613      	mov	r3, r2
 800221a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d07e      	beq.n	8002324 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	3302      	adds	r3, #2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	8b7b      	ldrh	r3, [r7, #26]
 8002256:	429a      	cmp	r2, r3
 8002258:	d306      	bcc.n	8002268 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	8b7b      	ldrh	r3, [r7, #26]
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	619a      	str	r2, [r3, #24]
 8002266:	e002      	b.n	800226e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d123      	bne.n	80022be <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002290:	833b      	strh	r3, [r7, #24]
 8002292:	8b3b      	ldrh	r3, [r7, #24]
 8002294:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002298:	833b      	strh	r3, [r7, #24]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	8b3b      	ldrh	r3, [r7, #24]
 80022aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01f      	beq.n	8002308 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e2:	82fb      	strh	r3, [r7, #22]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	8afb      	ldrh	r3, [r7, #22]
 80022f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002308:	8b7b      	ldrh	r3, [r7, #26]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	6959      	ldr	r1, [r3, #20]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	891a      	ldrh	r2, [r3, #8]
 800231c:	8b7b      	ldrh	r3, [r7, #26]
 800231e:	f004 fc2a 	bl	8006b76 <USB_ReadPMA>
 8002322:	e07c      	b.n	800241e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	3306      	adds	r3, #6
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	4413      	add	r3, r2
 8002342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	8b7b      	ldrh	r3, [r7, #26]
 8002354:	429a      	cmp	r2, r3
 8002356:	d306      	bcc.n	8002366 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	8b7b      	ldrh	r3, [r7, #26]
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	619a      	str	r2, [r3, #24]
 8002364:	e002      	b.n	800236c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d123      	bne.n	80023bc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800238a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238e:	83fb      	strh	r3, [r7, #30]
 8002390:	8bfb      	ldrh	r3, [r7, #30]
 8002392:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002396:	83fb      	strh	r3, [r7, #30]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	8bfb      	ldrh	r3, [r7, #30]
 80023a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d11f      	bne.n	8002406 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e0:	83bb      	strh	r3, [r7, #28]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	441a      	add	r2, r3
 80023f0:	8bbb      	ldrh	r3, [r7, #28]
 80023f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002402:	b29b      	uxth	r3, r3
 8002404:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002406:	8b7b      	ldrh	r3, [r7, #26]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	6959      	ldr	r1, [r3, #20]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	895a      	ldrh	r2, [r3, #10]
 8002418:	8b7b      	ldrh	r3, [r7, #26]
 800241a:	f004 fbac 	bl	8006b76 <USB_ReadPMA>
    }
  }

  return count;
 800241e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3720      	adds	r7, #32
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0a2      	sub	sp, #136	; 0x88
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 81c7 	beq.w	80027d0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244a:	b29b      	uxth	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	3302      	adds	r3, #2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002476:	429a      	cmp	r2, r3
 8002478:	d907      	bls.n	800248a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	e002      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80b9 	bne.w	800260c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d126      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0xc8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b6:	4413      	add	r3, r2
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	011a      	lsls	r2, r3, #4
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	801a      	strh	r2, [r3, #0]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e01a      	b.n	8002526 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d116      	bne.n	8002526 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	4413      	add	r3, r2
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	011a      	lsls	r2, r3, #4
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	4413      	add	r3, r2
 800251a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	623b      	str	r3, [r7, #32]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	785b      	ldrb	r3, [r3, #1]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d126      	bne.n	8002582 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002542:	b29b      	uxth	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	011a      	lsls	r2, r3, #4
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4413      	add	r3, r2
 8002556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002566:	b29a      	uxth	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800257a:	b29a      	uxth	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	e017      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	785b      	ldrb	r3, [r3, #1]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d113      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	4413      	add	r3, r2
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	4413      	add	r3, r2
 80025a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f006 f900 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 82d4 	beq.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	881b      	ldrh	r3, [r3, #0]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	827b      	strh	r3, [r7, #18]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	441a      	add	r2, r3
 80025f4:	8a7b      	ldrh	r3, [r7, #18]
 80025f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002606:	b29b      	uxth	r3, r3
 8002608:	8013      	strh	r3, [r2, #0]
 800260a:	e2b2      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d021      	beq.n	800265a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002630:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002656:	b29b      	uxth	r3, r3
 8002658:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 8286 	bne.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266e:	441a      	add	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800267c:	441a      	add	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	d309      	bcc.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	621a      	str	r2, [r3, #32]
 80026a0:	e015      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d107      	bne.n	80026ba <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80026aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026b8:	e009      	b.n	80026ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	785b      	ldrb	r3, [r3, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d155      	bne.n	8002782 <HAL_PCD_EP_DB_Transmit+0x35a>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	63bb      	str	r3, [r7, #56]	; 0x38
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ea:	4413      	add	r3, r2
 80026ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	011a      	lsls	r2, r3, #4
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	4413      	add	r3, r2
 80026f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026fc:	637b      	str	r3, [r7, #52]	; 0x34
 80026fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d112      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x302>
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800270e:	b29a      	uxth	r2, r3
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	801a      	strh	r2, [r3, #0]
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002722:	b29a      	uxth	r2, r3
 8002724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002726:	801a      	strh	r2, [r3, #0]
 8002728:	e047      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x392>
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	2b3e      	cmp	r3, #62	; 0x3e
 800272e:	d811      	bhi.n	8002754 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
 8002736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002742:	3301      	adds	r3, #1
 8002744:	64bb      	str	r3, [r7, #72]	; 0x48
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002748:	b29b      	uxth	r3, r3
 800274a:	029b      	lsls	r3, r3, #10
 800274c:	b29a      	uxth	r2, r3
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e032      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x392>
 8002754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
 800275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_PCD_EP_DB_Transmit+0x342>
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	3b01      	subs	r3, #1
 8002768:	64bb      	str	r3, [r7, #72]	; 0x48
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276c:	b29b      	uxth	r3, r3
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	b29b      	uxth	r3, r3
 8002772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277a:	b29a      	uxth	r2, r3
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e01b      	b.n	80027ba <HAL_PCD_EP_DB_Transmit+0x392>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d117      	bne.n	80027ba <HAL_PCD_EP_DB_Transmit+0x392>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	643b      	str	r3, [r7, #64]	; 0x40
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002798:	b29b      	uxth	r3, r3
 800279a:	461a      	mov	r2, r3
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	4413      	add	r3, r2
 80027a0:	643b      	str	r3, [r7, #64]	; 0x40
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	011a      	lsls	r2, r3, #4
 80027a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027aa:	4413      	add	r3, r2
 80027ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	891a      	ldrh	r2, [r3, #8]
 80027c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f004 f98f 	bl	8006aec <USB_WritePMA>
 80027ce:	e1d0      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	3306      	adds	r3, #6
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002804:	429a      	cmp	r2, r3
 8002806:	d307      	bcc.n	8002818 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002810:	1ad2      	subs	r2, r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	e002      	b.n	800281e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80c4 	bne.w	80029b0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d126      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x456>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	4413      	add	r3, r2
 8002846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	011a      	lsls	r2, r3, #4
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	4413      	add	r3, r2
 8002852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002856:	66bb      	str	r3, [r7, #104]	; 0x68
 8002858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002862:	b29a      	uxth	r2, r3
 8002864:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002866:	801a      	strh	r2, [r3, #0]
 8002868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002872:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002876:	b29a      	uxth	r2, r3
 8002878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e01a      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d116      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	677b      	str	r3, [r7, #116]	; 0x74
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002894:	b29b      	uxth	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289a:	4413      	add	r3, r2
 800289c:	677b      	str	r3, [r7, #116]	; 0x74
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	011a      	lsls	r2, r3, #4
 80028a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a6:	4413      	add	r3, r2
 80028a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028ac:	673b      	str	r3, [r7, #112]	; 0x70
 80028ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d12f      	bne.n	8002922 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028da:	4413      	add	r3, r2
 80028dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	011a      	lsls	r2, r3, #4
 80028e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002900:	b29a      	uxth	r2, r3
 8002902:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002906:	801a      	strh	r2, [r3, #0]
 8002908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002918:	b29a      	uxth	r2, r3
 800291a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291e:	801a      	strh	r2, [r3, #0]
 8002920:	e017      	b.n	8002952 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d113      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x52a>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002938:	4413      	add	r3, r2
 800293a:	67bb      	str	r3, [r7, #120]	; 0x78
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	011a      	lsls	r2, r3, #4
 8002942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002944:	4413      	add	r3, r2
 8002946:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800294a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800294c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f005 ff30 	bl	80087be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 8104 	bne.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002984:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
 80029ae:	e0e0      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d121      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 80b4 	bne.w	8002b72 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a12:	441a      	add	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a20:	441a      	add	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d309      	bcc.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	621a      	str	r2, [r3, #32]
 8002a44:	e015      	b.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a5c:	e009      	b.n	8002a72 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	667b      	str	r3, [r7, #100]	; 0x64
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d155      	bne.n	8002b2c <HAL_PCD_EP_DB_Transmit+0x704>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a94:	4413      	add	r3, r2
 8002a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	011a      	lsls	r2, r3, #4
 8002a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d112      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	e044      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad8:	d811      	bhi.n	8002afe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	3301      	adds	r3, #1
 8002aee:	657b      	str	r3, [r7, #84]	; 0x54
 8002af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	e02f      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
 8002b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b10:	3b01      	subs	r3, #1
 8002b12:	657b      	str	r3, [r7, #84]	; 0x54
 8002b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b28:	801a      	strh	r2, [r3, #0]
 8002b2a:	e018      	b.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d114      	bne.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x736>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b42:	4413      	add	r3, r2
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	011a      	lsls	r2, r3, #4
 8002b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b4e:	4413      	add	r3, r2
 8002b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
 8002b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6959      	ldr	r1, [r3, #20]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	895a      	ldrh	r2, [r3, #10]
 8002b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f003 ffbd 	bl	8006aec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8c:	823b      	strh	r3, [r7, #16]
 8002b8e:	8a3b      	ldrh	r3, [r7, #16]
 8002b90:	f083 0310 	eor.w	r3, r3, #16
 8002b94:	823b      	strh	r3, [r7, #16]
 8002b96:	8a3b      	ldrh	r3, [r7, #16]
 8002b98:	f083 0320 	eor.w	r3, r3, #32
 8002b9c:	823b      	strh	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	441a      	add	r2, r3
 8002bac:	8a3b      	ldrh	r3, [r7, #16]
 8002bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3788      	adds	r7, #136	; 0x88
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	e009      	b.n	8002c16 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c02:	897a      	ldrh	r2, [r7, #10]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	80da      	strh	r2, [r3, #6]
 8002c2a:	e00b      	b.n	8002c44 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e272      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8087 	beq.w	8002d7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c70:	4b92      	ldr	r3, [pc, #584]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00c      	beq.n	8002c96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c7c:	4b8f      	ldr	r3, [pc, #572]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d112      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d10b      	bne.n	8002cae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c96:	4b89      	ldr	r3, [pc, #548]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x12c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d168      	bne.n	8002d7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e24c      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d106      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x76>
 8002cb8:	4b80      	ldr	r3, [pc, #512]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a7f      	ldr	r2, [pc, #508]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	e02e      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4b7b      	ldr	r3, [pc, #492]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7a      	ldr	r2, [pc, #488]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b78      	ldr	r3, [pc, #480]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a77      	ldr	r2, [pc, #476]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e01d      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0xbc>
 8002cf2:	4b72      	ldr	r3, [pc, #456]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a71      	ldr	r2, [pc, #452]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a6e      	ldr	r2, [pc, #440]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xd4>
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6a      	ldr	r2, [pc, #424]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b68      	ldr	r3, [pc, #416]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a67      	ldr	r2, [pc, #412]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f800 	bl	8000d30 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fd fffc 	bl	8000d30 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	; 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e200      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0xe4>
 8002d52:	e014      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd ffec 	bl	8000d30 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fd ffe8 	bl	8000d30 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1ec      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	4b53      	ldr	r3, [pc, #332]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x10c>
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d063      	beq.n	8002e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d96:	4b49      	ldr	r3, [pc, #292]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d11c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
 8002da2:	4b46      	ldr	r3, [pc, #280]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d116      	bne.n	8002ddc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1c0      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b3d      	ldr	r3, [pc, #244]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4939      	ldr	r1, [pc, #228]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dda:	e03a      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d020      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd ffa1 	bl	8000d30 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df2:	f7fd ff9d 	bl	8000d30 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e1a1      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0f0      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b2a      	ldr	r3, [pc, #168]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4927      	ldr	r1, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	e015      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x270>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fd ff80 	bl	8000d30 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fd ff7c 	bl	8000d30 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e180      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03a      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fd ff60 	bl	8000d30 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fd ff5c 	bl	8000d30 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e160      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_RCC_OscConfig+0x26c>)
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 faa6 	bl	80033e4 <RCC_Delay>
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea0:	f7fd ff46 	bl	8000d30 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea6:	e00f      	b.n	8002ec8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fd ff42 	bl	8000d30 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d908      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e146      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	42420000 	.word	0x42420000
 8002ec4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e9      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a6 	beq.w	800302e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b8b      	ldr	r3, [pc, #556]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10d      	bne.n	8002f0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4a87      	ldr	r2, [pc, #540]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	61d3      	str	r3, [r2, #28]
 8002efe:	4b85      	ldr	r3, [pc, #532]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b82      	ldr	r3, [pc, #520]	; (8003118 <HAL_RCC_OscConfig+0x4c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1a:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x4c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7e      	ldr	r2, [pc, #504]	; (8003118 <HAL_RCC_OscConfig+0x4c8>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f26:	f7fd ff03 	bl	8000d30 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2e:	f7fd feff 	bl	8000d30 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e103      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b75      	ldr	r3, [pc, #468]	; (8003118 <HAL_RCC_OscConfig+0x4c8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x312>
 8002f54:	4b6f      	ldr	r3, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6213      	str	r3, [r2, #32]
 8002f60:	e02d      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x334>
 8002f6a:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4a69      	ldr	r2, [pc, #420]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	6213      	str	r3, [r2, #32]
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a66      	ldr	r2, [pc, #408]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	e01c      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x356>
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a60      	ldr	r2, [pc, #384]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	6213      	str	r3, [r2, #32]
 8002f98:	4b5e      	ldr	r3, [pc, #376]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	4a5d      	ldr	r2, [pc, #372]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6213      	str	r3, [r2, #32]
 8002fa4:	e00b      	b.n	8002fbe <HAL_RCC_OscConfig+0x36e>
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4a5a      	ldr	r2, [pc, #360]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6213      	str	r3, [r2, #32]
 8002fb2:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4a57      	ldr	r2, [pc, #348]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002fb8:	f023 0304 	bic.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d015      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fd feb3 	bl	8000d30 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fd feaf 	bl	8000d30 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0b1      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ee      	beq.n	8002fce <HAL_RCC_OscConfig+0x37e>
 8002ff0:	e014      	b.n	800301c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fe9d 	bl	8000d30 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffa:	f7fd fe99 	bl	8000d30 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	; 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e09b      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301c:	7dfb      	ldrb	r3, [r7, #23]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003022:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	4a3b      	ldr	r2, [pc, #236]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8087 	beq.w	8003146 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	2b08      	cmp	r3, #8
 8003042:	d061      	beq.n	8003108 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	2b02      	cmp	r3, #2
 800304a:	d146      	bne.n	80030da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304c:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_RCC_OscConfig+0x4cc>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fd fe6d 	bl	8000d30 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305a:	f7fd fe69 	bl	8000d30 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e06d      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306c:	4b29      	ldr	r3, [pc, #164]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f0      	bne.n	800305a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4921      	ldr	r1, [pc, #132]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a19      	ldr	r1, [r3, #32]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	430b      	orrs	r3, r1
 80030a6:	491b      	ldr	r1, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd fe3d 	bl	8000d30 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fe39 	bl	8000d30 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e03d      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x46a>
 80030d8:	e035      	b.n	8003146 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x4cc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fe26 	bl	8000d30 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fd fe22 	bl	8000d30 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e026      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x498>
 8003106:	e01e      	b.n	8003146 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e019      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_OscConfig+0x500>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d0      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4965      	ldr	r1, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d040      	beq.n	8003274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e073      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4936      	ldr	r1, [pc, #216]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fd fd74 	bl	8000d30 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fd fd70 	bl	8000d30 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e053      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d210      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4922      	ldr	r1, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490a      	ldr	r1, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1cc>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fcd2 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	08008d44 	.word	0x08008d44
 8003320:	20000008 	.word	0x20000008
 8003324:	2000000c 	.word	0x2000000c

08003328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b490      	push	{r4, r7}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800332e:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003330:	1d3c      	adds	r4, r7, #4
 8003332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003338:	f240 2301 	movw	r3, #513	; 0x201
 800333c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003352:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b04      	cmp	r3, #4
 8003360:	d002      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x40>
 8003362:	2b08      	cmp	r3, #8
 8003364:	d003      	beq.n	800336e <HAL_RCC_GetSysClockFreq+0x46>
 8003366:	e02b      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	623b      	str	r3, [r7, #32]
      break;
 800336c:	e02b      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	0c9b      	lsrs	r3, r3, #18
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3328      	adds	r3, #40	; 0x28
 8003378:	443b      	add	r3, r7
 800337a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800337e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d012      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0c5b      	lsrs	r3, r3, #17
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	3328      	adds	r3, #40	; 0x28
 8003396:	443b      	add	r3, r7
 8003398:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800339c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80033a2:	fb03 f202 	mul.w	r2, r3, r2
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	e004      	b.n	80033ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	623b      	str	r3, [r7, #32]
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80033c2:	623b      	str	r3, [r7, #32]
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6a3b      	ldr	r3, [r7, #32]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc90      	pop	{r4, r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	08008cec 	.word	0x08008cec
 80033d8:	40021000 	.word	0x40021000
 80033dc:	007a1200 	.word	0x007a1200
 80033e0:	003d0900 	.word	0x003d0900

080033e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <RCC_Delay+0x34>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <RCC_Delay+0x38>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	0a5b      	lsrs	r3, r3, #9
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003400:	bf00      	nop
  }
  while (Delay --);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f9      	bne.n	8003400 <RCC_Delay+0x1c>
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr
 8003418:	20000008 	.word	0x20000008
 800341c:	10624dd3 	.word	0x10624dd3

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07d      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800343c:	2300      	movs	r3, #0
 800343e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003440:	4b4f      	ldr	r3, [pc, #316]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344c:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	61d3      	str	r3, [r2, #28]
 8003458:	4b49      	ldr	r3, [pc, #292]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b46      	ldr	r3, [pc, #280]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d118      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a42      	ldr	r2, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fd fc56 	bl	8000d30 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003486:	e008      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fd fc52 	bl	8000d30 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d901      	bls.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e06d      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b3a      	ldr	r3, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d027      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c4:	4b2e      	ldr	r3, [pc, #184]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d4:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd fc21 	bl	8000d30 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fd fc1d 	bl	8000d30 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e036      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ee      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4917      	ldr	r1, [pc, #92]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	4313      	orrs	r3, r2
 8003524:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4a13      	ldr	r2, [pc, #76]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	4313      	orrs	r3, r2
 8003554:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003562:	4b07      	ldr	r3, [pc, #28]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
 8003588:	42420440 	.word	0x42420440

0800358c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e076      	b.n	800368c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ae:	d009      	beq.n	80035c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
 80035b6:	e005      	b.n	80035c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fd faa6 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	0c1a      	lsrs	r2, r3, #16
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f002 0204 	and.w	r2, r2, #4
 800366a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	603b      	str	r3, [r7, #0]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_SPI_Transmit+0x22>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e126      	b.n	8003904 <HAL_SPI_Transmit+0x270>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036be:	f7fd fb37 	bl	8000d30 <HAL_GetTick>
 80036c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d002      	beq.n	80036da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036d8:	e10b      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_SPI_Transmit+0x52>
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ea:	e102      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2203      	movs	r2, #3
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	88fa      	ldrh	r2, [r7, #6]
 8003704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	88fa      	ldrh	r2, [r7, #6]
 800370a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d10f      	bne.n	8003754 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003752:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d007      	beq.n	8003772 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377a:	d14b      	bne.n	8003814 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_SPI_Transmit+0xf6>
 8003784:	8afb      	ldrh	r3, [r7, #22]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d13e      	bne.n	8003808 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	881a      	ldrh	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037ae:	e02b      	b.n	8003808 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d112      	bne.n	80037e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	1c9a      	adds	r2, r3, #2
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80037e2:	e011      	b.n	8003808 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e4:	f7fd faa4 	bl	8000d30 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_Transmit+0x168>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_Transmit+0x16e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003806:	e074      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ce      	bne.n	80037b0 <HAL_SPI_Transmit+0x11c>
 8003812:	e04c      	b.n	80038ae <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_SPI_Transmit+0x18e>
 800381c:	8afb      	ldrh	r3, [r7, #22]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d140      	bne.n	80038a4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003848:	e02c      	b.n	80038a4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d113      	bne.n	8003880 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	86da      	strh	r2, [r3, #54]	; 0x36
 800387e:	e011      	b.n	80038a4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003880:	f7fd fa56 	bl	8000d30 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d803      	bhi.n	8003898 <HAL_SPI_Transmit+0x204>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d102      	bne.n	800389e <HAL_SPI_Transmit+0x20a>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038a2:	e026      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1cd      	bne.n	800384a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbc4 	bl	8004040 <SPI_EndRxTxTransaction>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e000      	b.n	80038f2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003902:	7ffb      	ldrb	r3, [r7, #31]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003928:	d112      	bne.n	8003950 <HAL_SPI_Receive+0x44>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10e      	bne.n	8003950 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2204      	movs	r2, #4
 8003936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800393a:	88fa      	ldrh	r2, [r7, #6]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f8f1 	bl	8003b2e <HAL_SPI_TransmitReceive>
 800394c:	4603      	mov	r3, r0
 800394e:	e0ea      	b.n	8003b26 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_SPI_Receive+0x52>
 800395a:	2302      	movs	r3, #2
 800395c:	e0e3      	b.n	8003b26 <HAL_SPI_Receive+0x21a>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003966:	f7fd f9e3 	bl	8000d30 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d002      	beq.n	800397e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800397c:	e0ca      	b.n	8003b14 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_SPI_Receive+0x7e>
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800398e:	e0c1      	b.n	8003b14 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2204      	movs	r2, #4
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d6:	d10f      	bne.n	80039f8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039f6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	2b40      	cmp	r3, #64	; 0x40
 8003a04:	d007      	beq.n	8003a16 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d162      	bne.n	8003ae4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a1e:	e02e      	b.n	8003a7e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f103 020c 	add.w	r2, r3, #12
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a58:	e011      	b.n	8003a7e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5a:	f7fd f969 	bl	8000d30 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d803      	bhi.n	8003a72 <HAL_SPI_Receive+0x166>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Receive+0x16c>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a7c:	e04a      	b.n	8003b14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1cb      	bne.n	8003a20 <HAL_SPI_Receive+0x114>
 8003a88:	e031      	b.n	8003aee <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d113      	bne.n	8003ac0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	b292      	uxth	r2, r2
 8003aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	1c9a      	adds	r2, r3, #2
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003abe:	e011      	b.n	8003ae4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac0:	f7fd f936 	bl	8000d30 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d803      	bhi.n	8003ad8 <HAL_SPI_Receive+0x1cc>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_Receive+0x1d2>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ae2:	e017      	b.n	8003b14 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1cd      	bne.n	8003a8a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fa52 	bl	8003f9c <SPI_EndRxTransaction>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
 8003b10:	e000      	b.n	8003b14 <HAL_SPI_Receive+0x208>
  }

error :
 8003b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08c      	sub	sp, #48	; 0x30
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x26>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e18a      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x33c>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5c:	f7fd f8e8 	bl	8000d30 <HAL_GetTick>
 8003b60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d00f      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x70>
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b84:	d107      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d103      	bne.n	8003b96 <HAL_SPI_TransmitReceive+0x68>
 8003b8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d003      	beq.n	8003b9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
 8003b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b9c:	e15b      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x82>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x82>
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bb6:	e14e      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d003      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	887a      	ldrh	r2, [r7, #2]
 8003bee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d007      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c28:	d178      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_SPI_TransmitReceive+0x10a>
 8003c32:	8b7b      	ldrh	r3, [r7, #26]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d166      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5c:	e053      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x176>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0x176>
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d113      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d119      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x1b8>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d014      	beq.n	8003ce6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	b292      	uxth	r2, r2
 8003cc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	1c9a      	adds	r2, r3, #2
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ce6:	f7fd f823 	bl	8000d30 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d807      	bhi.n	8003d06 <HAL_SPI_TransmitReceive+0x1d8>
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d003      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d04:	e0a7      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1a6      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x130>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1a1      	bne.n	8003c5e <HAL_SPI_TransmitReceive+0x130>
 8003d1a:	e07c      	b.n	8003e16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_SPI_TransmitReceive+0x1fc>
 8003d24:	8b7b      	ldrh	r3, [r7, #26]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d16b      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d50:	e057      	b.n	8003e02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d11c      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x26c>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d017      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x26c>
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d114      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	7812      	ldrb	r2, [r2, #0]
 8003d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d119      	bne.n	8003ddc <HAL_SPI_TransmitReceive+0x2ae>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d014      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ddc:	f7fc ffa8 	bl	8000d30 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d803      	bhi.n	8003df4 <HAL_SPI_TransmitReceive+0x2c6>
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d102      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x2cc>
 8003df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d103      	bne.n	8003e02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e00:	e029      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1a2      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x224>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d19d      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f910 	bl	8004040 <SPI_EndRxTxTransaction>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e32:	e010      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	e000      	b.n	8003e56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e80:	b2db      	uxtb	r3, r3
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e9c:	f7fc ff48 	bl	8000d30 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eac:	f7fc ff40 	bl	8000d30 <HAL_GetTick>
 8003eb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	015b      	lsls	r3, r3, #5
 8003eb8:	0d1b      	lsrs	r3, r3, #20
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ec2:	e054      	b.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d050      	beq.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ecc:	f7fc ff30 	bl	8000d30 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d902      	bls.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d13d      	bne.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003efa:	d111      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	d004      	beq.n	8003f10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d107      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f28:	d10f      	bne.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e017      	b.n	8003f8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d19b      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000008 	.word	0x20000008

08003f9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb0:	d111      	bne.n	8003fd6 <SPI_EndRxTransaction+0x3a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d004      	beq.n	8003fc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d107      	bne.n	8003fd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fde:	d117      	bne.n	8004010 <SPI_EndRxTransaction+0x74>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe8:	d112      	bne.n	8004010 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff49 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e013      	b.n	8004038 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	2180      	movs	r1, #128	; 0x80
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff ff36 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e000      	b.n	8004038 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff18 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e000      	b.n	8004074 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800407c:	b084      	sub	sp, #16
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	f107 0014 	add.w	r0, r7, #20
 800408a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	b004      	add	sp, #16
 800409a:	4770      	bx	lr

0800409c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr

080040c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4013      	ands	r3, r2
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004114:	b084      	sub	sp, #16
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	f107 0014 	add.w	r0, r7, #20
 8004122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	b004      	add	sp, #16
 8004152:	4770      	bx	lr

08004154 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004154:	b480      	push	{r7}
 8004156:	b09b      	sub	sp, #108	; 0x6c
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	78db      	ldrb	r3, [r3, #3]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d81f      	bhi.n	80041c6 <USB_ActivateEndpoint+0x72>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <USB_ActivateEndpoint+0x38>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041b9 	.word	0x080041b9
 8004194:	080041cf 	.word	0x080041cf
 8004198:	080041ab 	.word	0x080041ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800419c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a8:	e012      	b.n	80041d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80041aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80041b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041b6:	e00b      	b.n	80041d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041c4:	e004      	b.n	80041d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041cc:	e000      	b.n	80041d0 <USB_ActivateEndpoint+0x7c>
      break;
 80041ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004208:	b29a      	uxth	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7b1b      	ldrb	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f040 8149 	bne.w	80044d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8084 	beq.w	8004354 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	011a      	lsls	r2, r3, #4
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	88db      	ldrh	r3, [r3, #6]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	81fb      	strh	r3, [r7, #14]
 800428e:	89fb      	ldrh	r3, [r7, #14]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01b      	beq.n	80042d0 <USB_ActivateEndpoint+0x17c>
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	81bb      	strh	r3, [r7, #12]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	89bb      	ldrh	r3, [r7, #12]
 80042bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	78db      	ldrb	r3, [r3, #3]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d020      	beq.n	800431a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ee:	813b      	strh	r3, [r7, #8]
 80042f0:	893b      	ldrh	r3, [r7, #8]
 80042f2:	f083 0320 	eor.w	r3, r3, #32
 80042f6:	813b      	strh	r3, [r7, #8]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]
 8004318:	e27f      	b.n	800481a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	897b      	ldrh	r3, [r7, #10]
 800433e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	b29b      	uxth	r3, r3
 8004350:	8013      	strh	r3, [r2, #0]
 8004352:	e262      	b.n	800481a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	4413      	add	r3, r2
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	011a      	lsls	r2, r3, #4
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	4413      	add	r3, r2
 8004372:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	88db      	ldrh	r3, [r3, #6]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	b29b      	uxth	r3, r3
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004392:	b29b      	uxth	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	4413      	add	r3, r2
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	011a      	lsls	r2, r3, #4
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	4413      	add	r3, r2
 80043a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043aa:	623b      	str	r3, [r7, #32]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d112      	bne.n	80043da <USB_ActivateEndpoint+0x286>
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	e02f      	b.n	800443a <USB_ActivateEndpoint+0x2e6>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b3e      	cmp	r3, #62	; 0x3e
 80043e0:	d813      	bhi.n	800440a <USB_ActivateEndpoint+0x2b6>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <USB_ActivateEndpoint+0x2a8>
 80043f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f8:	3301      	adds	r3, #1
 80043fa:	663b      	str	r3, [r7, #96]	; 0x60
 80043fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043fe:	b29b      	uxth	r3, r3
 8004400:	029b      	lsls	r3, r3, #10
 8004402:	b29a      	uxth	r2, r3
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e017      	b.n	800443a <USB_ActivateEndpoint+0x2e6>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <USB_ActivateEndpoint+0x2d0>
 800441e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004420:	3b01      	subs	r3, #1
 8004422:	663b      	str	r3, [r7, #96]	; 0x60
 8004424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004426:	b29b      	uxth	r3, r3
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	83fb      	strh	r3, [r7, #30]
 8004448:	8bfb      	ldrh	r3, [r7, #30]
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01b      	beq.n	800448a <USB_ActivateEndpoint+0x336>
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	83bb      	strh	r3, [r7, #28]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	8bbb      	ldrh	r3, [r7, #28]
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	837b      	strh	r3, [r7, #26]
 80044a2:	8b7b      	ldrh	r3, [r7, #26]
 80044a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044a8:	837b      	strh	r3, [r7, #26]
 80044aa:	8b7b      	ldrh	r3, [r7, #26]
 80044ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044b0:	837b      	strh	r3, [r7, #26]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	441a      	add	r2, r3
 80044bc:	8b7b      	ldrh	r3, [r7, #26]
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]
 80044d2:	e1a2      	b.n	800481a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	441a      	add	r2, r3
 80044f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004504:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450c:	b29b      	uxth	r3, r3
 800450e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	65bb      	str	r3, [r7, #88]	; 0x58
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451a:	b29b      	uxth	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004520:	4413      	add	r3, r2
 8004522:	65bb      	str	r3, [r7, #88]	; 0x58
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	011a      	lsls	r2, r3, #4
 800452a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800452c:	4413      	add	r3, r2
 800452e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	891b      	ldrh	r3, [r3, #8]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	653b      	str	r3, [r7, #80]	; 0x50
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004554:	4413      	add	r3, r2
 8004556:	653b      	str	r3, [r7, #80]	; 0x50
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011a      	lsls	r2, r3, #4
 800455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004560:	4413      	add	r3, r2
 8004562:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	895b      	ldrh	r3, [r3, #10]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004576:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8091 	bne.w	80046a4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004590:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01b      	beq.n	80045d2 <USB_ActivateEndpoint+0x47e>
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	441a      	add	r2, r3
 80045bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	873b      	strh	r3, [r7, #56]	; 0x38
 80045e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01b      	beq.n	8004622 <USB_ActivateEndpoint+0x4ce>
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	441a      	add	r2, r3
 800460c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800460e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800461a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800461e:	b29b      	uxth	r3, r3
 8004620:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	86bb      	strh	r3, [r7, #52]	; 0x34
 800463a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800463c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004640:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004642:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004648:	86bb      	strh	r3, [r7, #52]	; 0x34
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	441a      	add	r2, r3
 8004654:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800465e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004666:	b29b      	uxth	r3, r3
 8004668:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004680:	867b      	strh	r3, [r7, #50]	; 0x32
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]
 80046a2:	e0ba      	b.n	800481a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01d      	beq.n	80046fc <USB_ActivateEndpoint+0x5a8>
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	441a      	add	r2, r3
 80046e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800470c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01d      	beq.n	8004754 <USB_ActivateEndpoint+0x600>
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d024      	beq.n	80047a6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800477a:	f083 0320 	eor.w	r3, r3, #32
 800477e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	441a      	add	r2, r3
 800478c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
 80047a4:	e01d      	b.n	80047e2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	441a      	add	r2, r3
 80047ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800481a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800481e:	4618      	mov	r0, r3
 8004820:	376c      	adds	r7, #108	; 0x6c
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004828:	b480      	push	{r7}
 800482a:	b08d      	sub	sp, #52	; 0x34
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	7b1b      	ldrb	r3, [r3, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 808e 	bne.w	8004958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d044      	beq.n	80048ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	81bb      	strh	r3, [r7, #12]
 8004852:	89bb      	ldrh	r3, [r7, #12]
 8004854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01b      	beq.n	8004894 <USB_DeactivateEndpoint+0x6c>
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	b29b      	uxth	r3, r3
 800486a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004872:	817b      	strh	r3, [r7, #10]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004890:	b29b      	uxth	r3, r3
 8004892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	813b      	strh	r3, [r7, #8]
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	893b      	ldrh	r3, [r7, #8]
 80048b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
 80048cc:	e192      	b.n	8004bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	827b      	strh	r3, [r7, #18]
 80048dc:	8a7b      	ldrh	r3, [r7, #18]
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <USB_DeactivateEndpoint+0xf6>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	823b      	strh	r3, [r7, #16]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8a3b      	ldrh	r3, [r7, #16]
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	81fb      	strh	r3, [r7, #14]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	89fb      	ldrh	r3, [r7, #14]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]
 8004956:	e14d      	b.n	8004bf4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 80a5 	bne.w	8004aac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	843b      	strh	r3, [r7, #32]
 8004970:	8c3b      	ldrh	r3, [r7, #32]
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01b      	beq.n	80049b2 <USB_DeactivateEndpoint+0x18a>
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004990:	83fb      	strh	r3, [r7, #30]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8bfb      	ldrh	r3, [r7, #30]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	83bb      	strh	r3, [r7, #28]
 80049c0:	8bbb      	ldrh	r3, [r7, #28]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01b      	beq.n	8004a02 <USB_DeactivateEndpoint+0x1da>
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	837b      	strh	r3, [r7, #26]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	441a      	add	r2, r3
 80049ec:	8b7b      	ldrh	r3, [r7, #26]
 80049ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	833b      	strh	r3, [r7, #24]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	441a      	add	r2, r3
 8004a24:	8b3b      	ldrh	r3, [r7, #24]
 8004a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	82fb      	strh	r3, [r7, #22]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	441a      	add	r2, r3
 8004a5c:	8afb      	ldrh	r3, [r7, #22]
 8004a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a88:	82bb      	strh	r3, [r7, #20]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	8abb      	ldrh	r3, [r7, #20]
 8004a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8013      	strh	r3, [r2, #0]
 8004aaa:	e0a3      	b.n	8004bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <USB_DeactivateEndpoint+0x2d4>
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	441a      	add	r2, r3
 8004ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <USB_DeactivateEndpoint+0x324>
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3734      	adds	r7, #52	; 0x34
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b0cc      	sub	sp, #304	; 0x130
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c0e:	6018      	str	r0, [r3, #0]
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c18:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f041 817d 	bne.w	8005f26 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d908      	bls.n	8004c5a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c58:	e007      	b.n	8004c6a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	7b1b      	ldrb	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d152      	bne.n	8004d20 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	88da      	ldrh	r2, [r3, #6]
 8004c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ca0:	6800      	ldr	r0, [r0, #0]
 8004ca2:	f001 ff23 	bl	8006aec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cb2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cd8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	440a      	add	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	011a      	lsls	r2, r3, #4
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	f001 b8b5 	b.w	8005e8a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	78db      	ldrb	r3, [r3, #3]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	f040 84c6 	bne.w	80056be <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6a1a      	ldr	r2, [r3, #32]
 8004d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	f240 8443 	bls.w	80055d6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d76:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dbc:	1ad2      	subs	r2, r2, r3
 8004dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 823e 	beq.w	800526e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004dfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dfe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 809a 	bne.w	8004f4c <USB_EPStartXfer+0x34c>
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e4a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	440a      	add	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	011a      	lsls	r2, r3, #4
 8004e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d122      	bne.n	8004eca <USB_EPStartXfer+0x2ca>
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	e079      	b.n	8004fbe <USB_EPStartXfer+0x3be>
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	2b3e      	cmp	r3, #62	; 0x3e
 8004ed0:	d81b      	bhi.n	8004f0a <USB_EPStartXfer+0x30a>
 8004ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <USB_EPStartXfer+0x2f2>
 8004ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eec:	3301      	adds	r3, #1
 8004eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	029b      	lsls	r3, r3, #10
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	801a      	strh	r2, [r3, #0]
 8004f08:	e059      	b.n	8004fbe <USB_EPStartXfer+0x3be>
 8004f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <USB_EPStartXfer+0x32a>
 8004f20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f24:	3b01      	subs	r3, #1
 8004f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	029b      	lsls	r3, r3, #10
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e038      	b.n	8004fbe <USB_EPStartXfer+0x3be>
 8004f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d130      	bne.n	8004fbe <USB_EPStartXfer+0x3be>
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f7a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	440a      	add	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	011a      	lsls	r2, r3, #4
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	895b      	ldrh	r3, [r3, #10]
 8004fca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6959      	ldr	r1, [r3, #20]
 8004fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fe4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fe8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f001 fd7d 	bl	8006aec <USB_WritePMA>
            ep->xfer_buff += len;
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695a      	ldr	r2, [r3, #20]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	441a      	add	r2, r3
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	429a      	cmp	r2, r3
 800502a:	d90f      	bls.n	800504c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800503c:	1ad2      	subs	r2, r2, r3
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	621a      	str	r2, [r3, #32]
 800504a:	e00e      	b.n	800506a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800504c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005050:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 809a 	bne.w	80051b0 <USB_EPStartXfer+0x5b0>
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005084:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005088:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4619      	mov	r1, r3
 80050a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	440a      	add	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4413      	add	r3, r2
 80050d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d122      	bne.n	800512e <USB_EPStartXfer+0x52e>
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	801a      	strh	r2, [r3, #0]
 800512c:	e083      	b.n	8005236 <USB_EPStartXfer+0x636>
 800512e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005132:	2b3e      	cmp	r3, #62	; 0x3e
 8005134:	d81b      	bhi.n	800516e <USB_EPStartXfer+0x56e>
 8005136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <USB_EPStartXfer+0x556>
 800514c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005150:	3301      	adds	r3, #1
 8005152:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005156:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800515a:	b29b      	uxth	r3, r3
 800515c:	029b      	lsls	r3, r3, #10
 800515e:	b29a      	uxth	r2, r3
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	e063      	b.n	8005236 <USB_EPStartXfer+0x636>
 800516e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <USB_EPStartXfer+0x58e>
 8005184:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005188:	3b01      	subs	r3, #1
 800518a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800518e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	e042      	b.n	8005236 <USB_EPStartXfer+0x636>
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d13a      	bne.n	8005236 <USB_EPStartXfer+0x636>
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4619      	mov	r1, r3
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	440a      	add	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	011a      	lsls	r2, r3, #4
 800520a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4413      	add	r3, r2
 8005216:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800521a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005228:	b29a      	uxth	r2, r3
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	891b      	ldrh	r3, [r3, #8]
 8005242:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005256:	b29b      	uxth	r3, r3
 8005258:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800525c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005260:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005264:	6800      	ldr	r0, [r0, #0]
 8005266:	f001 fc41 	bl	8006aec <USB_WritePMA>
 800526a:	f000 be0e 	b.w	8005e8a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800526e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d16d      	bne.n	800535a <USB_EPStartXfer+0x75a>
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
 800528a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	4413      	add	r3, r2
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011a      	lsls	r2, r3, #4
 80052b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b2:	4413      	add	r3, r2
 80052b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d112      	bne.n	80052e8 <USB_EPStartXfer+0x6e8>
 80052c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e063      	b.n	80053b0 <USB_EPStartXfer+0x7b0>
 80052e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ec:	2b3e      	cmp	r3, #62	; 0x3e
 80052ee:	d817      	bhi.n	8005320 <USB_EPStartXfer+0x720>
 80052f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f4:	085b      	lsrs	r3, r3, #1
 80052f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <USB_EPStartXfer+0x710>
 8005306:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800530a:	3301      	adds	r3, #1
 800530c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005310:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005314:	b29b      	uxth	r3, r3
 8005316:	029b      	lsls	r3, r3, #10
 8005318:	b29a      	uxth	r2, r3
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e047      	b.n	80053b0 <USB_EPStartXfer+0x7b0>
 8005320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800532a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <USB_EPStartXfer+0x740>
 8005336:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800533a:	3b01      	subs	r3, #1
 800533c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005344:	b29b      	uxth	r3, r3
 8005346:	029b      	lsls	r3, r3, #10
 8005348:	b29b      	uxth	r3, r3
 800534a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800534e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005352:	b29a      	uxth	r2, r3
 8005354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e02a      	b.n	80053b0 <USB_EPStartXfer+0x7b0>
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d122      	bne.n	80053b0 <USB_EPStartXfer+0x7b0>
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	653b      	str	r3, [r7, #80]	; 0x50
 8005376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538a:	4413      	add	r3, r2
 800538c:	653b      	str	r3, [r7, #80]	; 0x50
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	4413      	add	r3, r2
 80053a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	891b      	ldrh	r3, [r3, #8]
 80053bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	f001 fb84 	bl	8006aec <USB_WritePMA>
            ep->xfer_buff += len;
 80053e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	441a      	add	r2, r3
 80053f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d90f      	bls.n	800543e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800541e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	621a      	str	r2, [r3, #32]
 800543c:	e00e      	b.n	800545c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800543e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	643b      	str	r3, [r7, #64]	; 0x40
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d16d      	bne.n	8005554 <USB_EPStartXfer+0x954>
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	63bb      	str	r3, [r7, #56]	; 0x38
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	4413      	add	r3, r2
 800549a:	63bb      	str	r3, [r7, #56]	; 0x38
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054b2:	637b      	str	r3, [r7, #52]	; 0x34
 80054b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d112      	bne.n	80054e2 <USB_EPStartXfer+0x8e2>
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e05d      	b.n	800559e <USB_EPStartXfer+0x99e>
 80054e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e6:	2b3e      	cmp	r3, #62	; 0x3e
 80054e8:	d817      	bhi.n	800551a <USB_EPStartXfer+0x91a>
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <USB_EPStartXfer+0x90a>
 8005500:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005504:	3301      	adds	r3, #1
 8005506:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800550a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29a      	uxth	r2, r3
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	801a      	strh	r2, [r3, #0]
 8005518:	e041      	b.n	800559e <USB_EPStartXfer+0x99e>
 800551a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <USB_EPStartXfer+0x93a>
 8005530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005534:	3b01      	subs	r3, #1
 8005536:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800553a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29b      	uxth	r3, r3
 8005544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554c:	b29a      	uxth	r2, r3
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	801a      	strh	r2, [r3, #0]
 8005552:	e024      	b.n	800559e <USB_EPStartXfer+0x99e>
 8005554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d11c      	bne.n	800559e <USB_EPStartXfer+0x99e>
 8005564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005572:	b29b      	uxth	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005578:	4413      	add	r3, r2
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	011a      	lsls	r2, r3, #4
 800558a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558c:	4413      	add	r3, r2
 800558e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005598:	b29a      	uxth	r2, r3
 800559a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	895b      	ldrh	r3, [r3, #10]
 80055aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6959      	ldr	r1, [r3, #20]
 80055ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f001 fa8d 	bl	8006aec <USB_WritePMA>
 80055d2:	f000 bc5a 	b.w	8005e8a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	441a      	add	r2, r3
 800562a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800562e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800563a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563e:	b29b      	uxth	r3, r3
 8005640:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800564e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565c:	b29b      	uxth	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	4413      	add	r3, r2
 8005664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005676:	4413      	add	r3, r2
 8005678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567c:	65bb      	str	r3, [r7, #88]	; 0x58
 800567e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005682:	b29a      	uxth	r2, r3
 8005684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005686:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	891b      	ldrh	r3, [r3, #8]
 8005694:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6959      	ldr	r1, [r3, #20]
 80056a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056b2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056b6:	6800      	ldr	r0, [r0, #0]
 80056b8:	f001 fa18 	bl	8006aec <USB_WritePMA>
 80056bc:	e3e5      	b.n	8005e8a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 81bc 	beq.w	8005ad8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d16d      	bne.n	800585a <USB_EPStartXfer+0xc5a>
 800577e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	67bb      	str	r3, [r7, #120]	; 0x78
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579e:	4413      	add	r3, r2
 80057a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80057a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	011a      	lsls	r2, r3, #4
 80057b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057b8:	677b      	str	r3, [r7, #116]	; 0x74
 80057ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d112      	bne.n	80057e8 <USB_EPStartXfer+0xbe8>
 80057c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e060      	b.n	80058aa <USB_EPStartXfer+0xcaa>
 80057e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ec:	2b3e      	cmp	r3, #62	; 0x3e
 80057ee:	d817      	bhi.n	8005820 <USB_EPStartXfer+0xc20>
 80057f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <USB_EPStartXfer+0xc10>
 8005806:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800580a:	3301      	adds	r3, #1
 800580c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005810:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005814:	b29b      	uxth	r3, r3
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	b29a      	uxth	r2, r3
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e044      	b.n	80058aa <USB_EPStartXfer+0xcaa>
 8005820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005824:	095b      	lsrs	r3, r3, #5
 8005826:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800582a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <USB_EPStartXfer+0xc40>
 8005836:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800583a:	3b01      	subs	r3, #1
 800583c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005840:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005844:	b29b      	uxth	r3, r3
 8005846:	029b      	lsls	r3, r3, #10
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e027      	b.n	80058aa <USB_EPStartXfer+0xcaa>
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	785b      	ldrb	r3, [r3, #1]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d11f      	bne.n	80058aa <USB_EPStartXfer+0xcaa>
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005880:	4413      	add	r3, r2
 8005882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	011a      	lsls	r2, r3, #4
 8005894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005898:	4413      	add	r3, r2
 800589a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800589e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	895b      	ldrh	r3, [r3, #10]
 80058b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6959      	ldr	r1, [r3, #20]
 80058c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058d8:	6800      	ldr	r0, [r0, #0]
 80058da:	f001 f907 	bl	8006aec <USB_WritePMA>
          ep->xfer_buff += len;
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ee:	441a      	add	r2, r3
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a1a      	ldr	r2, [r3, #32]
 8005908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	429a      	cmp	r2, r3
 8005916:	d90f      	bls.n	8005938 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005928:	1ad2      	subs	r2, r2, r3
 800592a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	621a      	str	r2, [r3, #32]
 8005936:	e00e      	b.n	8005956 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 8295 	beq.w	8005e8a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d16d      	bne.n	8005a4c <USB_EPStartXfer+0xe4c>
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	66bb      	str	r3, [r7, #104]	; 0x68
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005990:	4413      	add	r3, r2
 8005992:	66bb      	str	r3, [r7, #104]	; 0x68
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	011a      	lsls	r2, r3, #4
 80059a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059aa:	667b      	str	r3, [r7, #100]	; 0x64
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d112      	bne.n	80059da <USB_EPStartXfer+0xdda>
 80059b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e063      	b.n	8005aa2 <USB_EPStartXfer+0xea2>
 80059da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059de:	2b3e      	cmp	r3, #62	; 0x3e
 80059e0:	d817      	bhi.n	8005a12 <USB_EPStartXfer+0xe12>
 80059e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e6:	085b      	lsrs	r3, r3, #1
 80059e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <USB_EPStartXfer+0xe02>
 80059f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fc:	3301      	adds	r3, #1
 80059fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0e:	801a      	strh	r2, [r3, #0]
 8005a10:	e047      	b.n	8005aa2 <USB_EPStartXfer+0xea2>
 8005a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <USB_EPStartXfer+0xe32>
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	029b      	lsls	r3, r3, #10
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e02a      	b.n	8005aa2 <USB_EPStartXfer+0xea2>
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d122      	bne.n	8005aa2 <USB_EPStartXfer+0xea2>
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	673b      	str	r3, [r7, #112]	; 0x70
 8005a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	4413      	add	r3, r2
 8005a7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	011a      	lsls	r2, r3, #4
 8005a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	891b      	ldrh	r3, [r3, #8]
 8005aae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ac8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005acc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ad0:	6800      	ldr	r0, [r0, #0]
 8005ad2:	f001 f80b 	bl	8006aec <USB_WritePMA>
 8005ad6:	e1d8      	b.n	8005e8a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d178      	bne.n	8005bda <USB_EPStartXfer+0xfda>
 8005ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	011a      	lsls	r2, r3, #4
 8005b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b24:	4413      	add	r3, r2
 8005b26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <USB_EPStartXfer+0xf64>
 8005b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e06b      	b.n	8005c3c <USB_EPStartXfer+0x103c>
 8005b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b68:	2b3e      	cmp	r3, #62	; 0x3e
 8005b6a:	d818      	bhi.n	8005b9e <USB_EPStartXfer+0xf9e>
 8005b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <USB_EPStartXfer+0xf8c>
 8005b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b86:	3301      	adds	r3, #1
 8005b88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	e04e      	b.n	8005c3c <USB_EPStartXfer+0x103c>
 8005b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	f003 031f 	and.w	r3, r3, #31
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <USB_EPStartXfer+0xfbe>
 8005bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bbe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e030      	b.n	8005c3c <USB_EPStartXfer+0x103c>
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d128      	bne.n	8005c3c <USB_EPStartXfer+0x103c>
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c0e:	4413      	add	r3, r2
 8005c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c26:	4413      	add	r3, r2
 8005c28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c3a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	891b      	ldrh	r3, [r3, #8]
 8005c48:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6959      	ldr	r1, [r3, #20]
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c62:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c66:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c6a:	6800      	ldr	r0, [r0, #0]
 8005c6c:	f000 ff3e 	bl	8006aec <USB_WritePMA>
          ep->xfer_buff += len;
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c80:	441a      	add	r2, r3
 8005c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d90f      	bls.n	8005cca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	621a      	str	r2, [r3, #32]
 8005cc8:	e00e      	b.n	8005ce8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80cc 	beq.w	8005e8a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d178      	bne.n	8005e02 <USB_EPStartXfer+0x1202>
 8005d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d34:	4413      	add	r3, r2
 8005d36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	011a      	lsls	r2, r3, #4
 8005d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <USB_EPStartXfer+0x118c>
 8005d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e064      	b.n	8005e56 <USB_EPStartXfer+0x1256>
 8005d8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d90:	2b3e      	cmp	r3, #62	; 0x3e
 8005d92:	d818      	bhi.n	8005dc6 <USB_EPStartXfer+0x11c6>
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <USB_EPStartXfer+0x11b4>
 8005daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e047      	b.n	8005e56 <USB_EPStartXfer+0x1256>
 8005dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <USB_EPStartXfer+0x11e6>
 8005ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de0:	3b01      	subs	r3, #1
 8005de2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	029b      	lsls	r3, r3, #10
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e029      	b.n	8005e56 <USB_EPStartXfer+0x1256>
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d121      	bne.n	8005e56 <USB_EPStartXfer+0x1256>
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e28:	4413      	add	r3, r2
 8005e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	011a      	lsls	r2, r3, #4
 8005e3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e40:	4413      	add	r3, r2
 8005e42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	895b      	ldrh	r3, [r3, #10]
 8005e62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6959      	ldr	r1, [r3, #20]
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	f000 fe31 	bl	8006aec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb8:	8013      	strh	r3, [r2, #0]
 8005eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ec6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eca:	8812      	ldrh	r2, [r2, #0]
 8005ecc:	f082 0210 	eor.w	r2, r2, #16
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ede:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ee2:	8812      	ldrh	r2, [r2, #0]
 8005ee4:	f082 0220 	eor.w	r2, r2, #32
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	8013      	strh	r3, [r2, #0]
 8005f22:	f000 bc9f 	b.w	8006864 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	7b1b      	ldrb	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f040 80ae 	bne.w	8006094 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d917      	bls.n	8005f84 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	619a      	str	r2, [r3, #24]
 8005f82:	e00e      	b.n	8005fa2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fc6:	4413      	add	r3, r2
 8005fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	011a      	lsls	r2, r3, #4
 8005fda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fde:	4413      	add	r3, r2
 8005fe0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d116      	bne.n	800601e <USB_EPStartXfer+0x141e>
 8005ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	e3e8      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
 800601e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006022:	2b3e      	cmp	r3, #62	; 0x3e
 8006024:	d818      	bhi.n	8006058 <USB_EPStartXfer+0x1458>
 8006026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602a:	085b      	lsrs	r3, r3, #1
 800602c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <USB_EPStartXfer+0x1446>
 800603c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006040:	3301      	adds	r3, #1
 8006042:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006046:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800604a:	b29b      	uxth	r3, r3
 800604c:	029b      	lsls	r3, r3, #10
 800604e:	b29a      	uxth	r2, r3
 8006050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	e3cb      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
 8006058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <USB_EPStartXfer+0x1478>
 800606e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006072:	3b01      	subs	r3, #1
 8006074:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006078:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608a:	b29a      	uxth	r2, r3
 800608c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	e3ad      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	78db      	ldrb	r3, [r3, #3]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f040 8200 	bne.w	80064a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f040 8091 	bne.w	80061da <USB_EPStartXfer+0x15da>
 80060b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060dc:	4413      	add	r3, r2
 80060de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	011a      	lsls	r2, r3, #4
 80060f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f4:	4413      	add	r3, r2
 80060f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <USB_EPStartXfer+0x153c>
 800610e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611a:	b29a      	uxth	r2, r3
 800611c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006138:	801a      	strh	r2, [r3, #0]
 800613a:	e083      	b.n	8006244 <USB_EPStartXfer+0x1644>
 800613c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b3e      	cmp	r3, #62	; 0x3e
 800614a:	d820      	bhi.n	800618e <USB_EPStartXfer+0x158e>
 800614c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800615e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <USB_EPStartXfer+0x157c>
 8006172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006176:	3301      	adds	r3, #1
 8006178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006180:	b29b      	uxth	r3, r3
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e05a      	b.n	8006244 <USB_EPStartXfer+0x1644>
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 031f 	and.w	r3, r3, #31
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <USB_EPStartXfer+0x15be>
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e034      	b.n	8006244 <USB_EPStartXfer+0x1644>
 80061da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d12c      	bne.n	8006244 <USB_EPStartXfer+0x1644>
 80061ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006206:	b29b      	uxth	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620e:	4413      	add	r3, r2
 8006210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	011a      	lsls	r2, r3, #4
 8006222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006226:	4413      	add	r3, r2
 8006228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800622c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 8091 	bne.w	8006386 <USB_EPStartXfer+0x1786>
 8006264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006280:	b29b      	uxth	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006288:	4413      	add	r3, r2
 800628a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800628e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	011a      	lsls	r2, r3, #4
 800629c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062a0:	4413      	add	r3, r2
 80062a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d116      	bne.n	80062e8 <USB_EPStartXfer+0x16e8>
 80062ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062de:	b29a      	uxth	r2, r3
 80062e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e07c      	b.n	80063e2 <USB_EPStartXfer+0x17e2>
 80062e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	2b3e      	cmp	r3, #62	; 0x3e
 80062f6:	d820      	bhi.n	800633a <USB_EPStartXfer+0x173a>
 80062f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <USB_EPStartXfer+0x1728>
 800631e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006322:	3301      	adds	r3, #1
 8006324:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006328:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29a      	uxth	r2, r3
 8006332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e053      	b.n	80063e2 <USB_EPStartXfer+0x17e2>
 800633a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <USB_EPStartXfer+0x176a>
 8006360:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006364:	3b01      	subs	r3, #1
 8006366:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800636a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800636e:	b29b      	uxth	r3, r3
 8006370:	029b      	lsls	r3, r3, #10
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e02d      	b.n	80063e2 <USB_EPStartXfer+0x17e2>
 8006386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d125      	bne.n	80063e2 <USB_EPStartXfer+0x17e2>
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	461a      	mov	r2, r3
 80063a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ac:	4413      	add	r3, r2
 80063ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	b29a      	uxth	r2, r3
 80063dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 81fe 	beq.w	80067f0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006414:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <USB_EPStartXfer+0x182c>
 8006420:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800642c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 81db 	bne.w	80067f0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800643a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 81d4 	bne.w	80067f0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800644c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]
 80064a4:	e1a4      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	f040 819a 	bne.w	80067ec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d917      	bls.n	8006504 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e00e      	b.n	8006522 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	785b      	ldrb	r3, [r3, #1]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d178      	bne.n	8006624 <USB_EPStartXfer+0x1a24>
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654e:	b29b      	uxth	r3, r3
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006556:	4413      	add	r3, r2
 8006558:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800655c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800656e:	4413      	add	r3, r2
 8006570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006574:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d116      	bne.n	80065ae <USB_EPStartXfer+0x19ae>
 8006580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	e06b      	b.n	8006686 <USB_EPStartXfer+0x1a86>
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	2b3e      	cmp	r3, #62	; 0x3e
 80065b4:	d818      	bhi.n	80065e8 <USB_EPStartXfer+0x19e8>
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	085b      	lsrs	r3, r3, #1
 80065bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <USB_EPStartXfer+0x19d6>
 80065cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d0:	3301      	adds	r3, #1
 80065d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29a      	uxth	r2, r3
 80065e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065e4:	801a      	strh	r2, [r3, #0]
 80065e6:	e04e      	b.n	8006686 <USB_EPStartXfer+0x1a86>
 80065e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <USB_EPStartXfer+0x1a08>
 80065fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006602:	3b01      	subs	r3, #1
 8006604:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e030      	b.n	8006686 <USB_EPStartXfer+0x1a86>
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d128      	bne.n	8006686 <USB_EPStartXfer+0x1a86>
 8006634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006646:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	4413      	add	r3, r2
 800665a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800665e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	011a      	lsls	r2, r3, #4
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	4413      	add	r3, r2
 8006672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006676:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800667a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d178      	bne.n	8006796 <USB_EPStartXfer+0x1b96>
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	461a      	mov	r2, r3
 80066c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c8:	4413      	add	r3, r2
 80066ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	011a      	lsls	r2, r3, #4
 80066dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e0:	4413      	add	r3, r2
 80066e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d116      	bne.n	8006720 <USB_EPStartXfer+0x1b20>
 80066f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fe:	b29a      	uxth	r2, r3
 8006700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006716:	b29a      	uxth	r2, r3
 8006718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800671c:	801a      	strh	r2, [r3, #0]
 800671e:	e067      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	2b3e      	cmp	r3, #62	; 0x3e
 8006726:	d818      	bhi.n	800675a <USB_EPStartXfer+0x1b5a>
 8006728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672c:	085b      	lsrs	r3, r3, #1
 800672e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <USB_EPStartXfer+0x1b48>
 800673e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800674c:	b29b      	uxth	r3, r3
 800674e:	029b      	lsls	r3, r3, #10
 8006750:	b29a      	uxth	r2, r3
 8006752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e04a      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
 800675a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <USB_EPStartXfer+0x1b7a>
 8006770:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006774:	3b01      	subs	r3, #1
 8006776:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800677a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800677e:	b29b      	uxth	r3, r3
 8006780:	029b      	lsls	r3, r3, #10
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e02c      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
 8006796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800679a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	785b      	ldrb	r3, [r3, #1]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d124      	bne.n	80067f0 <USB_EPStartXfer+0x1bf0>
 80067a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067bc:	4413      	add	r3, r2
 80067be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	011a      	lsls	r2, r3, #4
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d4:	4413      	add	r3, r2
 80067d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e001      	b.n	80067f0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e03a      	b.n	8006866 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800681a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800681e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006822:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006826:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800682a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800682e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d020      	beq.n	80068c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006898:	81bb      	strh	r3, [r7, #12]
 800689a:	89bb      	ldrh	r3, [r7, #12]
 800689c:	f083 0310 	eor.w	r3, r3, #16
 80068a0:	81bb      	strh	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	89bb      	ldrh	r3, [r7, #12]
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
 80068c2:	e01f      	b.n	8006904 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	81fb      	strh	r3, [r7, #14]
 80068dc:	89fb      	ldrh	r3, [r7, #14]
 80068de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068e2:	81fb      	strh	r3, [r7, #14]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	89fb      	ldrh	r3, [r7, #14]
 80068f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006900:	b29b      	uxth	r3, r3
 8006902:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	7b1b      	ldrb	r3, [r3, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 809d 	bne.w	8006a5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d04c      	beq.n	80069c6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	823b      	strh	r3, [r7, #16]
 800693a:	8a3b      	ldrh	r3, [r7, #16]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01b      	beq.n	800697c <USB_EPClearStall+0x6c>
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	b29b      	uxth	r3, r3
 8006952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	81fb      	strh	r3, [r7, #14]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	441a      	add	r2, r3
 8006966:	89fb      	ldrh	r3, [r7, #14]
 8006968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006978:	b29b      	uxth	r3, r3
 800697a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	78db      	ldrb	r3, [r3, #3]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d06c      	beq.n	8006a5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699a:	81bb      	strh	r3, [r7, #12]
 800699c:	89bb      	ldrh	r3, [r7, #12]
 800699e:	f083 0320 	eor.w	r3, r3, #32
 80069a2:	81bb      	strh	r3, [r7, #12]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	89bb      	ldrh	r3, [r7, #12]
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]
 80069c4:	e04b      	b.n	8006a5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	82fb      	strh	r3, [r7, #22]
 80069d4:	8afb      	ldrh	r3, [r7, #22]
 80069d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d01b      	beq.n	8006a16 <USB_EPClearStall+0x106>
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f4:	82bb      	strh	r3, [r7, #20]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	8abb      	ldrh	r3, [r7, #20]
 8006a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2c:	827b      	strh	r3, [r7, #18]
 8006a2e:	8a7b      	ldrh	r3, [r7, #18]
 8006a30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a34:	827b      	strh	r3, [r7, #18]
 8006a36:	8a7b      	ldrh	r3, [r7, #18]
 8006a38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a3c:	827b      	strh	r3, [r7, #18]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	8a7b      	ldrh	r3, [r7, #18]
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr

08006a6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a76:	78fb      	ldrb	r3, [r7, #3]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2280      	movs	r2, #128	; 0x80
 8006a80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006aca:	68fb      	ldr	r3, [r7, #12]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b08d      	sub	sp, #52	; 0x34
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4611      	mov	r1, r2
 8006af8:	461a      	mov	r2, r3
 8006afa:	460b      	mov	r3, r1
 8006afc:	80fb      	strh	r3, [r7, #6]
 8006afe:	4613      	mov	r3, r2
 8006b00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b02:	88bb      	ldrh	r3, [r7, #4]
 8006b04:	3301      	adds	r3, #1
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	005a      	lsls	r2, r3, #1
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b24:	e01e      	b.n	8006b64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	3301      	adds	r3, #1
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	3302      	adds	r3, #2
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	3302      	adds	r3, #2
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b60:	3b01      	subs	r3, #1
 8006b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1dd      	bne.n	8006b26 <USB_WritePMA+0x3a>
  }
}
 8006b6a:	bf00      	nop
 8006b6c:	bf00      	nop
 8006b6e:	3734      	adds	r7, #52	; 0x34
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b08b      	sub	sp, #44	; 0x2c
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	4611      	mov	r1, r2
 8006b82:	461a      	mov	r2, r3
 8006b84:	460b      	mov	r3, r1
 8006b86:	80fb      	strh	r3, [r7, #6]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b8c:	88bb      	ldrh	r3, [r7, #4]
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	005a      	lsls	r2, r3, #1
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
 8006bae:	e01b      	b.n	8006be8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	3302      	adds	r3, #2
 8006bbc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	3302      	adds	r3, #2
 8006be0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	3b01      	subs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e0      	bne.n	8006bb0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bee:	88bb      	ldrh	r3, [r7, #4]
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	701a      	strb	r2, [r3, #0]
  }
}
 8006c0a:	bf00      	nop
 8006c0c:	372c      	adds	r7, #44	; 0x2c
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7c1b      	ldrb	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d115      	bne.n	8006c58 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	2202      	movs	r2, #2
 8006c32:	2181      	movs	r1, #129	; 0x81
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fea6 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c44:	2202      	movs	r2, #2
 8006c46:	2101      	movs	r1, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fe9c 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c56:	e012      	b.n	8006c7e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	2181      	movs	r1, #129	; 0x81
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 fe91 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c6a:	2340      	movs	r3, #64	; 0x40
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	2101      	movs	r1, #1
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe88 	bl	8008986 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c7e:	2308      	movs	r3, #8
 8006c80:	2203      	movs	r2, #3
 8006c82:	2182      	movs	r1, #130	; 0x82
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fe7e 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c90:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c94:	f001 ff9e 	bl	8008bd4 <USBD_static_malloc>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d102      	bne.n	8006cb0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	e026      	b.n	8006cfe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 ff3e 	bl	8008b68 <USBD_LL_PrepareReceive>
 8006cec:	e007      	b.n	8006cfe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 ff35 	bl	8008b68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d18:	2181      	movs	r1, #129	; 0x81
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fe59 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d26:	2101      	movs	r1, #1
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe52 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d36:	2182      	movs	r1, #130	; 0x82
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 fe4a 	bl	80089d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 ff44 	bl	8008bec <USBD_static_free>
    pdev->pClassData = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d86:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d039      	beq.n	8006e14 <USBD_CDC_Setup+0x9e>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d17f      	bne.n	8006ea4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	88db      	ldrh	r3, [r3, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d029      	beq.n	8006e00 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	b25b      	sxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da11      	bge.n	8006dda <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	88d2      	ldrh	r2, [r2, #6]
 8006dc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006dca:	6939      	ldr	r1, [r7, #16]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fa09 	bl	80081ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006dd8:	e06b      	b.n	8006eb2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785a      	ldrb	r2, [r3, #1]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	88db      	ldrh	r3, [r3, #6]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006df0:	6939      	ldr	r1, [r7, #16]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	88db      	ldrh	r3, [r3, #6]
 8006df6:	461a      	mov	r2, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f001 fa24 	bl	8008246 <USBD_CtlPrepareRx>
      break;
 8006dfe:	e058      	b.n	8006eb2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	7850      	ldrb	r0, [r2, #1]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	4798      	blx	r3
      break;
 8006e12:	e04e      	b.n	8006eb2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b0b      	cmp	r3, #11
 8006e1a:	d02e      	beq.n	8006e7a <USBD_CDC_Setup+0x104>
 8006e1c:	2b0b      	cmp	r3, #11
 8006e1e:	dc38      	bgt.n	8006e92 <USBD_CDC_Setup+0x11c>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <USBD_CDC_Setup+0xb4>
 8006e24:	2b0a      	cmp	r3, #10
 8006e26:	d014      	beq.n	8006e52 <USBD_CDC_Setup+0xdc>
 8006e28:	e033      	b.n	8006e92 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d107      	bne.n	8006e44 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e34:	f107 030c 	add.w	r3, r7, #12
 8006e38:	2202      	movs	r2, #2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 f9d4 	bl	80081ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e42:	e02e      	b.n	8006ea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 f965 	bl	8008116 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e50:	e027      	b.n	8006ea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d107      	bne.n	8006e6c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e5c:	f107 030f 	add.w	r3, r7, #15
 8006e60:	2201      	movs	r2, #1
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f9c0 	bl	80081ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e6a:	e01a      	b.n	8006ea2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e6c:	6839      	ldr	r1, [r7, #0]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 f951 	bl	8008116 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e74:	2302      	movs	r3, #2
 8006e76:	75fb      	strb	r3, [r7, #23]
          break;
 8006e78:	e013      	b.n	8006ea2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d00d      	beq.n	8006ea0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f945 	bl	8008116 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e90:	e006      	b.n	8006ea0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 f93e 	bl	8008116 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9e:	e000      	b.n	8006ea2 <USBD_CDC_Setup+0x12c>
          break;
 8006ea0:	bf00      	nop
      }
      break;
 8006ea2:	e006      	b.n	8006eb2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f001 f935 	bl	8008116 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb0:	bf00      	nop
  }

  return ret;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ed6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d03a      	beq.n	8006f58 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	331c      	adds	r3, #28
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d029      	beq.n	8006f4c <USBD_CDC_DataIn+0x90>
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	331c      	adds	r3, #28
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	78f9      	ldrb	r1, [r7, #3]
 8006f0c:	68b8      	ldr	r0, [r7, #8]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	4403      	add	r3, r0
 8006f18:	3338      	adds	r3, #56	; 0x38
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f20:	fb01 f303 	mul.w	r3, r1, r3
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d110      	bne.n	8006f4c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	331c      	adds	r3, #28
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f3e:	78f9      	ldrb	r1, [r7, #3]
 8006f40:	2300      	movs	r3, #0
 8006f42:	2200      	movs	r2, #0
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 fdec 	bl	8008b22 <USBD_LL_Transmit>
 8006f4a:	e003      	b.n	8006f54 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	e000      	b.n	8006f5a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f58:	2302      	movs	r3, #2
  }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f76:	78fb      	ldrb	r3, [r7, #3]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fe17 	bl	8008bae <USBD_LL_GetRxDataSize>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4798      	blx	r3

    return USBD_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d015      	beq.n	8006ffe <USBD_CDC_EP0_RxReady+0x46>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fd8:	2bff      	cmp	r3, #255	; 0xff
 8006fda:	d010      	beq.n	8006ffe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	22ff      	movs	r2, #255	; 0xff
 8006ffa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2243      	movs	r2, #67	; 0x43
 8007014:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	2000009c 	.word	0x2000009c

08007028 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2243      	movs	r2, #67	; 0x43
 8007034:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000058 	.word	0x20000058

08007048 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2243      	movs	r2, #67	; 0x43
 8007054:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	200000e0 	.word	0x200000e0

08007068 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	220a      	movs	r2, #10
 8007074:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007076:	4b03      	ldr	r3, [pc, #12]	; (8007084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007078:	4618      	mov	r0, r3
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	bc80      	pop	{r7}
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000014 	.word	0x20000014

08007088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007092:	2302      	movs	r3, #2
 8007094:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01c      	beq.n	8007160 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800712c:	2b00      	cmp	r3, #0
 800712e:	d115      	bne.n	800715c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800714e:	b29b      	uxth	r3, r3
 8007150:	2181      	movs	r1, #129	; 0x81
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fce5 	bl	8008b22 <USBD_LL_Transmit>

      return USBD_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	e002      	b.n	8007162 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007160:	2302      	movs	r3, #2
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d017      	beq.n	80071b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7c1b      	ldrb	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d109      	bne.n	80071a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007196:	2101      	movs	r1, #1
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fce5 	bl	8008b68 <USBD_LL_PrepareReceive>
 800719e:	e007      	b.n	80071b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	2101      	movs	r1, #1
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fcdc 	bl	8008b68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e000      	b.n	80071b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071b4:	2302      	movs	r3, #2
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	4613      	mov	r3, r2
 80071ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071d2:	2302      	movs	r3, #2
 80071d4:	e01a      	b.n	800720c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 fb49 	bl	800889c <USBD_LL_Init>

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d006      	beq.n	8007236 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	e001      	b.n	800723a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
}
 800723c:	4618      	mov	r0, r3
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr

08007246 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fb7e 	bl	8008950 <USBD_LL_Start>

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr

08007272 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	4611      	mov	r1, r2
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	4798      	blx	r3
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	460b      	mov	r3, r1
 80072ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	4611      	mov	r1, r2
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3

  return USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fed8 	bl	800809e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	2b02      	cmp	r3, #2
 8007310:	d016      	beq.n	8007340 <USBD_LL_SetupStage+0x6a>
 8007312:	2b02      	cmp	r3, #2
 8007314:	d81c      	bhi.n	8007350 <USBD_LL_SetupStage+0x7a>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <USBD_LL_SetupStage+0x4a>
 800731a:	2b01      	cmp	r3, #1
 800731c:	d008      	beq.n	8007330 <USBD_LL_SetupStage+0x5a>
 800731e:	e017      	b.n	8007350 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9cb 	bl	80076c4 <USBD_StdDevReq>
      break;
 800732e:	e01a      	b.n	8007366 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa2d 	bl	8007798 <USBD_StdItfReq>
      break;
 800733e:	e012      	b.n	8007366 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa6d 	bl	8007828 <USBD_StdEPReq>
      break;
 800734e:	e00a      	b.n	8007366 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800735a:	b2db      	uxtb	r3, r3
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fb56 	bl	8008a10 <USBD_LL_StallEP>
      break;
 8007364:	bf00      	nop
  }

  return USBD_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	460b      	mov	r3, r1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d14b      	bne.n	800741c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800738a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007392:	2b03      	cmp	r3, #3
 8007394:	d134      	bne.n	8007400 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d919      	bls.n	80073d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d203      	bcs.n	80073c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	e002      	b.n	80073ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 ff57 	bl	8008282 <USBD_CtlContinueRx>
 80073d4:	e038      	b.n	8007448 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d105      	bne.n	80073f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 ff54 	bl	80082a6 <USBD_CtlSendStatus>
 80073fe:	e023      	b.n	8007448 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007406:	2b05      	cmp	r3, #5
 8007408:	d11e      	bne.n	8007448 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f001 fafb 	bl	8008a10 <USBD_LL_StallEP>
 800741a:	e015      	b.n	8007448 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00d      	beq.n	8007444 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800742e:	2b03      	cmp	r3, #3
 8007430:	d108      	bne.n	8007444 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	7afa      	ldrb	r2, [r7, #11]
 800743c:	4611      	mov	r1, r2
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3
 8007442:	e001      	b.n	8007448 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	e000      	b.n	800744a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	460b      	mov	r3, r1
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d17f      	bne.n	8007566 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3314      	adds	r3, #20
 800746a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007472:	2b02      	cmp	r3, #2
 8007474:	d15c      	bne.n	8007530 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	429a      	cmp	r2, r3
 8007480:	d915      	bls.n	80074ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	b29b      	uxth	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fec1 	bl	8008222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074a0:	2300      	movs	r3, #0
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f001 fb5e 	bl	8008b68 <USBD_LL_PrepareReceive>
 80074ac:	e04e      	b.n	800754c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	6912      	ldr	r2, [r2, #16]
 80074b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ba:	fb01 f202 	mul.w	r2, r1, r2
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11c      	bne.n	80074fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d316      	bcc.n	80074fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074da:	429a      	cmp	r2, r3
 80074dc:	d20f      	bcs.n	80074fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fe9d 	bl	8008222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074f0:	2300      	movs	r3, #0
 80074f2:	2200      	movs	r2, #0
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f001 fb36 	bl	8008b68 <USBD_LL_PrepareReceive>
 80074fc:	e026      	b.n	800754c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007510:	2b03      	cmp	r3, #3
 8007512:	d105      	bne.n	8007520 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007520:	2180      	movs	r1, #128	; 0x80
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f001 fa74 	bl	8008a10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fecf 	bl	80082cc <USBD_CtlReceiveStatus>
 800752e:	e00d      	b.n	800754c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007536:	2b04      	cmp	r3, #4
 8007538:	d004      	beq.n	8007544 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d103      	bne.n	800754c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 fa62 	bl	8008a10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d11d      	bne.n	8007592 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fe81 	bl	800725e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007564:	e015      	b.n	8007592 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00d      	beq.n	800758e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007578:	2b03      	cmp	r3, #3
 800757a:	d108      	bne.n	800758e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	7afa      	ldrb	r2, [r7, #11]
 8007586:	4611      	mov	r1, r2
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	4798      	blx	r3
 800758c:	e001      	b.n	8007592 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800758e:	2302      	movs	r3, #2
 8007590:	e000      	b.n	8007594 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	2200      	movs	r2, #0
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f001 f9eb 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 f9dd 	bl	8008986 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2240      	movs	r2, #64	; 0x40
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6852      	ldr	r2, [r2, #4]
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	4611      	mov	r1, r2
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
  }

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	78fa      	ldrb	r2, [r7, #3]
 800762e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr

0800763c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2204      	movs	r2, #4
 8007654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007672:	2b04      	cmp	r3, #4
 8007674:	d105      	bne.n	8007682 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769c:	2b03      	cmp	r3, #3
 800769e:	d10b      	bne.n	80076b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d005      	beq.n	80076b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d005      	beq.n	80076ea <USBD_StdDevReq+0x26>
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d84f      	bhi.n	8007782 <USBD_StdDevReq+0xbe>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <USBD_StdDevReq+0x36>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d14b      	bne.n	8007782 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	6839      	ldr	r1, [r7, #0]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
      break;
 80076f8:	e048      	b.n	800778c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d839      	bhi.n	8007776 <USBD_StdDevReq+0xb2>
 8007702:	a201      	add	r2, pc, #4	; (adr r2, 8007708 <USBD_StdDevReq+0x44>)
 8007704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007708:	08007759 	.word	0x08007759
 800770c:	0800776d 	.word	0x0800776d
 8007710:	08007777 	.word	0x08007777
 8007714:	08007763 	.word	0x08007763
 8007718:	08007777 	.word	0x08007777
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007731 	.word	0x08007731
 8007724:	08007777 	.word	0x08007777
 8007728:	0800774f 	.word	0x0800774f
 800772c:	08007745 	.word	0x08007745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007730:	6839      	ldr	r1, [r7, #0]
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9dc 	bl	8007af0 <USBD_GetDescriptor>
          break;
 8007738:	e022      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fb3f 	bl	8007dc0 <USBD_SetAddress>
          break;
 8007742:	e01d      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb7e 	bl	8007e48 <USBD_SetConfig>
          break;
 800774c:	e018      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fc07 	bl	8007f64 <USBD_GetConfig>
          break;
 8007756:	e013      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fc37 	bl	8007fce <USBD_GetStatus>
          break;
 8007760:	e00e      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc65 	bl	8008034 <USBD_SetFeature>
          break;
 800776a:	e009      	b.n	8007780 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fc74 	bl	800805c <USBD_ClrFeature>
          break;
 8007774:	e004      	b.n	8007780 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fccc 	bl	8008116 <USBD_CtlError>
          break;
 800777e:	bf00      	nop
      }
      break;
 8007780:	e004      	b.n	800778c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fcc6 	bl	8008116 <USBD_CtlError>
      break;
 800778a:	bf00      	nop
  }

  return ret;
 800778c:	7bfb      	ldrb	r3, [r7, #15]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop

08007798 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d005      	beq.n	80077be <USBD_StdItfReq+0x26>
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d82e      	bhi.n	8007814 <USBD_StdItfReq+0x7c>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <USBD_StdItfReq+0x26>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d12a      	bne.n	8007814 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d81d      	bhi.n	8007806 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	889b      	ldrh	r3, [r3, #4]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d813      	bhi.n	80077fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	88db      	ldrh	r3, [r3, #6]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d110      	bne.n	8007810 <USBD_StdItfReq+0x78>
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10d      	bne.n	8007810 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fd56 	bl	80082a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077fa:	e009      	b.n	8007810 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fc89 	bl	8008116 <USBD_CtlError>
          break;
 8007804:	e004      	b.n	8007810 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fc84 	bl	8008116 <USBD_CtlError>
          break;
 800780e:	e000      	b.n	8007812 <USBD_StdItfReq+0x7a>
          break;
 8007810:	bf00      	nop
      }
      break;
 8007812:	e004      	b.n	800781e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fc7d 	bl	8008116 <USBD_CtlError>
      break;
 800781c:	bf00      	nop
  }

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	889b      	ldrh	r3, [r3, #4]
 800783a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d007      	beq.n	8007858 <USBD_StdEPReq+0x30>
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	f200 8146 	bhi.w	8007ada <USBD_StdEPReq+0x2b2>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <USBD_StdEPReq+0x40>
 8007852:	2b20      	cmp	r3, #32
 8007854:	f040 8141 	bne.w	8007ada <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
      break;
 8007866:	e13d      	b.n	8007ae4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007870:	2b20      	cmp	r3, #32
 8007872:	d10a      	bne.n	800788a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	e12d      	b.n	8007ae6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d007      	beq.n	80078a2 <USBD_StdEPReq+0x7a>
 8007892:	2b03      	cmp	r3, #3
 8007894:	f300 811b 	bgt.w	8007ace <USBD_StdEPReq+0x2a6>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d072      	beq.n	8007982 <USBD_StdEPReq+0x15a>
 800789c:	2b01      	cmp	r3, #1
 800789e:	d03a      	beq.n	8007916 <USBD_StdEPReq+0xee>
 80078a0:	e115      	b.n	8007ace <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d002      	beq.n	80078b2 <USBD_StdEPReq+0x8a>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d015      	beq.n	80078dc <USBD_StdEPReq+0xb4>
 80078b0:	e02b      	b.n	800790a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00c      	beq.n	80078d2 <USBD_StdEPReq+0xaa>
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	d009      	beq.n	80078d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f8a4 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078c8:	2180      	movs	r1, #128	; 0x80
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f8a0 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d0:	e020      	b.n	8007914 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc1e 	bl	8008116 <USBD_CtlError>
              break;
 80078da:	e01b      	b.n	8007914 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10e      	bne.n	8007902 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <USBD_StdEPReq+0xda>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d008      	beq.n	8007902 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	88db      	ldrh	r3, [r3, #6]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f887 	bl	8008a10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fccf 	bl	80082a6 <USBD_CtlSendStatus>

              break;
 8007908:	e004      	b.n	8007914 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc02 	bl	8008116 <USBD_CtlError>
              break;
 8007912:	bf00      	nop
          }
          break;
 8007914:	e0e0      	b.n	8007ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	2b02      	cmp	r3, #2
 800791e:	d002      	beq.n	8007926 <USBD_StdEPReq+0xfe>
 8007920:	2b03      	cmp	r3, #3
 8007922:	d015      	beq.n	8007950 <USBD_StdEPReq+0x128>
 8007924:	e026      	b.n	8007974 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00c      	beq.n	8007946 <USBD_StdEPReq+0x11e>
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d009      	beq.n	8007946 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 f86a 	bl	8008a10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800793c:	2180      	movs	r1, #128	; 0x80
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f866 	bl	8008a10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007944:	e01c      	b.n	8007980 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fbe4 	bl	8008116 <USBD_CtlError>
              break;
 800794e:	e017      	b.n	8007980 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	885b      	ldrh	r3, [r3, #2]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d112      	bne.n	800797e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 f871 	bl	8008a4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fc9a 	bl	80082a6 <USBD_CtlSendStatus>
              }
              break;
 8007972:	e004      	b.n	800797e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fbcd 	bl	8008116 <USBD_CtlError>
              break;
 800797c:	e000      	b.n	8007980 <USBD_StdEPReq+0x158>
              break;
 800797e:	bf00      	nop
          }
          break;
 8007980:	e0aa      	b.n	8007ad8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007988:	2b02      	cmp	r3, #2
 800798a:	d002      	beq.n	8007992 <USBD_StdEPReq+0x16a>
 800798c:	2b03      	cmp	r3, #3
 800798e:	d032      	beq.n	80079f6 <USBD_StdEPReq+0x1ce>
 8007990:	e097      	b.n	8007ac2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007992:	7bbb      	ldrb	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d007      	beq.n	80079a8 <USBD_StdEPReq+0x180>
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b80      	cmp	r3, #128	; 0x80
 800799c:	d004      	beq.n	80079a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fbb8 	bl	8008116 <USBD_CtlError>
                break;
 80079a6:	e091      	b.n	8007acc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da0b      	bge.n	80079c8 <USBD_StdEPReq+0x1a0>
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	3310      	adds	r3, #16
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	3304      	adds	r3, #4
 80079c6:	e00b      	b.n	80079e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	3304      	adds	r3, #4
 80079e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2202      	movs	r2, #2
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fbfb 	bl	80081ea <USBD_CtlSendData>
              break;
 80079f4:	e06a      	b.n	8007acc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	da11      	bge.n	8007a22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	3318      	adds	r3, #24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d117      	bne.n	8007a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fb7b 	bl	8008116 <USBD_CtlError>
                  break;
 8007a20:	e054      	b.n	8007acc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fb68 	bl	8008116 <USBD_CtlError>
                  break;
 8007a46:	e041      	b.n	8007acc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da0b      	bge.n	8007a68 <USBD_StdEPReq+0x240>
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	3310      	adds	r3, #16
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	3304      	adds	r3, #4
 8007a66:	e00b      	b.n	8007a80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3304      	adds	r3, #4
 8007a80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <USBD_StdEPReq+0x266>
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	2b80      	cmp	r3, #128	; 0x80
 8007a8c:	d103      	bne.n	8007a96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	e00e      	b.n	8007ab4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fff6 	bl	8008a8c <USBD_LL_IsStallEP>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	e002      	b.n	8007ab4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fb95 	bl	80081ea <USBD_CtlSendData>
              break;
 8007ac0:	e004      	b.n	8007acc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb26 	bl	8008116 <USBD_CtlError>
              break;
 8007aca:	bf00      	nop
          }
          break;
 8007acc:	e004      	b.n	8007ad8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb20 	bl	8008116 <USBD_CtlError>
          break;
 8007ad6:	bf00      	nop
      }
      break;
 8007ad8:	e004      	b.n	8007ae4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 fb1a 	bl	8008116 <USBD_CtlError>
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	0a1b      	lsrs	r3, r3, #8
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b06      	cmp	r3, #6
 8007b12:	f200 8128 	bhi.w	8007d66 <USBD_GetDescriptor+0x276>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <USBD_GetDescriptor+0x2c>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007d67 	.word	0x08007d67
 8007b2c:	08007d67 	.word	0x08007d67
 8007b30:	08007d07 	.word	0x08007d07
 8007b34:	08007d33 	.word	0x08007d33
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7c12      	ldrb	r2, [r2, #16]
 8007b44:	f107 0108 	add.w	r1, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
      break;
 8007b4e:	e112      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c1b      	ldrb	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10d      	bne.n	8007b74 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b72:	e100      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	f107 0208 	add.w	r2, r7, #8
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
 8007b84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
      break;
 8007b8e:	e0f2      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	885b      	ldrh	r3, [r3, #2]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	f200 80ac 	bhi.w	8007cf4 <USBD_GetDescriptor+0x204>
 8007b9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_GetDescriptor+0xb4>)
 8007b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba2:	bf00      	nop
 8007ba4:	08007bbd 	.word	0x08007bbd
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c59 	.word	0x08007c59
 8007bb4:	08007c8d 	.word	0x08007c8d
 8007bb8:	08007cc1 	.word	0x08007cc1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e091      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa97 	bl	8008116 <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e089      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e077      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa7d 	bl	8008116 <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e06f      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e05d      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa63 	bl	8008116 <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e055      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00b      	beq.n	8007c7c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c7a:	e043      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa49 	bl	8008116 <USBD_CtlError>
            err++;
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	3301      	adds	r3, #1
 8007c88:	72fb      	strb	r3, [r7, #11]
          break;
 8007c8a:	e03b      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e029      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa2f 	bl	8008116 <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e021      	b.n	8007d04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e00f      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa15 	bl	8008116 <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e007      	b.n	8007d04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa0d 	bl	8008116 <USBD_CtlError>
          err++;
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d02:	e038      	b.n	8007d76 <USBD_GetDescriptor+0x286>
 8007d04:	e037      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7c1b      	ldrb	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f107 0208 	add.w	r2, r7, #8
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
 8007d1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d20:	e029      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9f6 	bl	8008116 <USBD_CtlError>
        err++;
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d30:	e021      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7c1b      	ldrb	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	f107 0208 	add.w	r2, r7, #8
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	2207      	movs	r2, #7
 8007d52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d54:	e00f      	b.n	8007d76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f9dc 	bl	8008116 <USBD_CtlError>
        err++;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	3301      	adds	r3, #1
 8007d62:	72fb      	strb	r3, [r7, #11]
      break;
 8007d64:	e007      	b.n	8007d76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9d4 	bl	8008116 <USBD_CtlError>
      err++;
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	3301      	adds	r3, #1
 8007d72:	72fb      	strb	r3, [r7, #11]
      break;
 8007d74:	bf00      	nop
  }

  if (err != 0U)
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d11c      	bne.n	8007db6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d7c:	893b      	ldrh	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d011      	beq.n	8007da6 <USBD_GetDescriptor+0x2b6>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	88db      	ldrh	r3, [r3, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00d      	beq.n	8007da6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88da      	ldrh	r2, [r3, #6]
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	4293      	cmp	r3, r2
 8007d92:	bf28      	it	cs
 8007d94:	4613      	movcs	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa22 	bl	80081ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa79 	bl	80082a6 <USBD_CtlSendStatus>
 8007db4:	e000      	b.n	8007db8 <USBD_GetDescriptor+0x2c8>
    return;
 8007db6:	bf00      	nop
    }
  }
}
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop

08007dc0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	889b      	ldrh	r3, [r3, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d130      	bne.n	8007e34 <USBD_SetAddress+0x74>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d12c      	bne.n	8007e34 <USBD_SetAddress+0x74>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	2b7f      	cmp	r3, #127	; 0x7f
 8007de0:	d828      	bhi.n	8007e34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	2b03      	cmp	r3, #3
 8007df6:	d104      	bne.n	8007e02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f98b 	bl	8008116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e00:	e01d      	b.n	8007e3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fe68 	bl	8008ae4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa46 	bl	80082a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	e009      	b.n	8007e3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e32:	e004      	b.n	8007e3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f96d 	bl	8008116 <USBD_CtlError>
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	885b      	ldrh	r3, [r3, #2]
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	4b41      	ldr	r3, [pc, #260]	; (8007f60 <USBD_SetConfig+0x118>)
 8007e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e5c:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <USBD_SetConfig+0x118>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d904      	bls.n	8007e6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e64:	6839      	ldr	r1, [r7, #0]
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f955 	bl	8008116 <USBD_CtlError>
 8007e6c:	e075      	b.n	8007f5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d002      	beq.n	8007e7e <USBD_SetConfig+0x36>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d023      	beq.n	8007ec4 <USBD_SetConfig+0x7c>
 8007e7c:	e062      	b.n	8007f44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e7e:	4b38      	ldr	r3, [pc, #224]	; (8007f60 <USBD_SetConfig+0x118>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01a      	beq.n	8007ebc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e86:	4b36      	ldr	r3, [pc, #216]	; (8007f60 <USBD_SetConfig+0x118>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2203      	movs	r2, #3
 8007e94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e98:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <USBD_SetConfig+0x118>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7ff f9e7 	bl	8007272 <USBD_SetClassConfig>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d104      	bne.n	8007eb4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f932 	bl	8008116 <USBD_CtlError>
            return;
 8007eb2:	e052      	b.n	8007f5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9f6 	bl	80082a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eba:	e04e      	b.n	8007f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f9f2 	bl	80082a6 <USBD_CtlSendStatus>
        break;
 8007ec2:	e04a      	b.n	8007f5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ec4:	4b26      	ldr	r3, [pc, #152]	; (8007f60 <USBD_SetConfig+0x118>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d112      	bne.n	8007ef2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ed4:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <USBD_SetConfig+0x118>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ede:	4b20      	ldr	r3, [pc, #128]	; (8007f60 <USBD_SetConfig+0x118>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff f9e3 	bl	80072b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f9db 	bl	80082a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ef0:	e033      	b.n	8007f5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <USBD_SetConfig+0x118>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d01d      	beq.n	8007f3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff f9d1 	bl	80072b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f0e:	4b14      	ldr	r3, [pc, #80]	; (8007f60 <USBD_SetConfig+0x118>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <USBD_SetConfig+0x118>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff f9a7 	bl	8007272 <USBD_SetClassConfig>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d104      	bne.n	8007f34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f8f2 	bl	8008116 <USBD_CtlError>
            return;
 8007f32:	e012      	b.n	8007f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f9b6 	bl	80082a6 <USBD_CtlSendStatus>
        break;
 8007f3a:	e00e      	b.n	8007f5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9b2 	bl	80082a6 <USBD_CtlSendStatus>
        break;
 8007f42:	e00a      	b.n	8007f5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f8e5 	bl	8008116 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <USBD_SetConfig+0x118>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7ff f9ac 	bl	80072b0 <USBD_ClrClassConfig>
        break;
 8007f58:	bf00      	nop
    }
  }
}
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	2000021c 	.word	0x2000021c

08007f64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d004      	beq.n	8007f80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f8cc 	bl	8008116 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f7e:	e022      	b.n	8007fc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	dc02      	bgt.n	8007f90 <USBD_GetConfig+0x2c>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dc03      	bgt.n	8007f96 <USBD_GetConfig+0x32>
 8007f8e:	e015      	b.n	8007fbc <USBD_GetConfig+0x58>
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d00b      	beq.n	8007fac <USBD_GetConfig+0x48>
 8007f94:	e012      	b.n	8007fbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3308      	adds	r3, #8
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f920 	bl	80081ea <USBD_CtlSendData>
        break;
 8007faa:	e00c      	b.n	8007fc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f918 	bl	80081ea <USBD_CtlSendData>
        break;
 8007fba:	e004      	b.n	8007fc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007fbc:	6839      	ldr	r1, [r7, #0]
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f8a9 	bl	8008116 <USBD_CtlError>
        break;
 8007fc4:	bf00      	nop
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d81e      	bhi.n	8008022 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	88db      	ldrh	r3, [r3, #6]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d004      	beq.n	8007ff6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f891 	bl	8008116 <USBD_CtlError>
        break;
 8007ff4:	e01a      	b.n	800802c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f043 0202 	orr.w	r2, r3, #2
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	330c      	adds	r3, #12
 8008016:	2202      	movs	r2, #2
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8e5 	bl	80081ea <USBD_CtlSendData>
      break;
 8008020:	e004      	b.n	800802c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f876 	bl	8008116 <USBD_CtlError>
      break;
 800802a:	bf00      	nop
  }
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	885b      	ldrh	r3, [r3, #2]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d106      	bne.n	8008054 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f929 	bl	80082a6 <USBD_CtlSendStatus>
  }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806c:	3b01      	subs	r3, #1
 800806e:	2b02      	cmp	r3, #2
 8008070:	d80b      	bhi.n	800808a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d10c      	bne.n	8008094 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f90f 	bl	80082a6 <USBD_CtlSendStatus>
      }
      break;
 8008088:	e004      	b.n	8008094 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f842 	bl	8008116 <USBD_CtlError>
      break;
 8008092:	e000      	b.n	8008096 <USBD_ClrFeature+0x3a>
      break;
 8008094:	bf00      	nop
  }
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	785a      	ldrb	r2, [r3, #1]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	3302      	adds	r3, #2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	3303      	adds	r3, #3
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	4413      	add	r3, r2
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	3304      	adds	r3, #4
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	3305      	adds	r3, #5
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	4413      	add	r3, r2
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	3306      	adds	r3, #6
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	3307      	adds	r3, #7
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	021b      	lsls	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	4413      	add	r3, r2
 8008106:	b29a      	uxth	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	80da      	strh	r2, [r3, #6]

}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bc80      	pop	{r7}
 8008114:	4770      	bx	lr

08008116 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008120:	2180      	movs	r1, #128	; 0x80
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc74 	bl	8008a10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008128:	2100      	movs	r1, #0
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc70 	bl	8008a10 <USBD_LL_StallEP>
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d032      	beq.n	80081b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f834 	bl	80081bc <USBD_GetLen>
 8008154:	4603      	mov	r3, r0
 8008156:	3301      	adds	r3, #1
 8008158:	b29b      	uxth	r3, r3
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	75fa      	strb	r2, [r7, #23]
 8008168:	461a      	mov	r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	4413      	add	r3, r2
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	7812      	ldrb	r2, [r2, #0]
 8008172:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	75fa      	strb	r2, [r7, #23]
 800817a:	461a      	mov	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4413      	add	r3, r2
 8008180:	2203      	movs	r2, #3
 8008182:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008184:	e012      	b.n	80081ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1c5a      	adds	r2, r3, #1
 800818a:	60fa      	str	r2, [r7, #12]
 800818c:	7dfa      	ldrb	r2, [r7, #23]
 800818e:	1c51      	adds	r1, r2, #1
 8008190:	75f9      	strb	r1, [r7, #23]
 8008192:	4611      	mov	r1, r2
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	440a      	add	r2, r1
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	75fa      	strb	r2, [r7, #23]
 80081a2:	461a      	mov	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4413      	add	r3, r2
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e8      	bne.n	8008186 <USBD_GetString+0x4e>
    }
  }
}
 80081b4:	bf00      	nop
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081c8:	e005      	b.n	80081d6 <USBD_GetLen+0x1a>
  {
    len++;
 80081ca:	7bfb      	ldrb	r3, [r7, #15]
 80081cc:	3301      	adds	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3301      	adds	r3, #1
 80081d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f5      	bne.n	80081ca <USBD_GetLen+0xe>
  }

  return len;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr

080081ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	4613      	mov	r3, r2
 80081f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008200:	88fa      	ldrh	r2, [r7, #6]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008206:	88fa      	ldrh	r2, [r7, #6]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	2100      	movs	r1, #0
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fc85 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b084      	sub	sp, #16
 8008226:	af00      	add	r7, sp, #0
 8008228:	60f8      	str	r0, [r7, #12]
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	4613      	mov	r3, r2
 800822e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008230:	88fb      	ldrh	r3, [r7, #6]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	2100      	movs	r1, #0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fc73 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	4613      	mov	r3, r2
 8008252:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2203      	movs	r2, #3
 8008258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	2100      	movs	r1, #0
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 fc78 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	60f8      	str	r0, [r7, #12]
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fc66 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2204      	movs	r2, #4
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082b6:	2300      	movs	r3, #0
 80082b8:	2200      	movs	r2, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc30 	bl	8008b22 <USBD_LL_Transmit>

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2205      	movs	r2, #5
 80082d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082dc:	2300      	movs	r3, #0
 80082de:	2200      	movs	r2, #0
 80082e0:	2100      	movs	r1, #0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc40 	bl	8008b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082f8:	2200      	movs	r2, #0
 80082fa:	4912      	ldr	r1, [pc, #72]	; (8008344 <MX_USB_DEVICE_Init+0x50>)
 80082fc:	4812      	ldr	r0, [pc, #72]	; (8008348 <MX_USB_DEVICE_Init+0x54>)
 80082fe:	f7fe ff5e 	bl	80071be <USBD_Init>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008308:	f7f8 f878 	bl	80003fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800830c:	490f      	ldr	r1, [pc, #60]	; (800834c <MX_USB_DEVICE_Init+0x58>)
 800830e:	480e      	ldr	r0, [pc, #56]	; (8008348 <MX_USB_DEVICE_Init+0x54>)
 8008310:	f7fe ff80 	bl	8007214 <USBD_RegisterClass>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800831a:	f7f8 f86f 	bl	80003fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800831e:	490c      	ldr	r1, [pc, #48]	; (8008350 <MX_USB_DEVICE_Init+0x5c>)
 8008320:	4809      	ldr	r0, [pc, #36]	; (8008348 <MX_USB_DEVICE_Init+0x54>)
 8008322:	f7fe feb1 	bl	8007088 <USBD_CDC_RegisterInterface>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800832c:	f7f8 f866 	bl	80003fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008330:	4805      	ldr	r0, [pc, #20]	; (8008348 <MX_USB_DEVICE_Init+0x54>)
 8008332:	f7fe ff88 	bl	8007246 <USBD_Start>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800833c:	f7f8 f85e 	bl	80003fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008340:	bf00      	nop
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000134 	.word	0x20000134
 8008348:	20000220 	.word	0x20000220
 800834c:	20000020 	.word	0x20000020
 8008350:	20000124 	.word	0x20000124

08008354 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008358:	2200      	movs	r2, #0
 800835a:	4905      	ldr	r1, [pc, #20]	; (8008370 <CDC_Init_FS+0x1c>)
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <CDC_Init_FS+0x20>)
 800835e:	f7fe fea9 	bl	80070b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008362:	4905      	ldr	r1, [pc, #20]	; (8008378 <CDC_Init_FS+0x24>)
 8008364:	4803      	ldr	r0, [pc, #12]	; (8008374 <CDC_Init_FS+0x20>)
 8008366:	f7fe febe 	bl	80070e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800836a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800836c:	4618      	mov	r0, r3
 800836e:	bd80      	pop	{r7, pc}
 8008370:	200008cc 	.word	0x200008cc
 8008374:	20000220 	.word	0x20000220
 8008378:	200004e4 	.word	0x200004e4

0800837c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008380:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008382:	4618      	mov	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
	...

0800838c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	71fb      	strb	r3, [r7, #7]
 8008398:	4613      	mov	r3, r2
 800839a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b23      	cmp	r3, #35	; 0x23
 80083a0:	d84a      	bhi.n	8008438 <CDC_Control_FS+0xac>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <CDC_Control_FS+0x1c>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	08008439 	.word	0x08008439
 80083ac:	08008439 	.word	0x08008439
 80083b0:	08008439 	.word	0x08008439
 80083b4:	08008439 	.word	0x08008439
 80083b8:	08008439 	.word	0x08008439
 80083bc:	08008439 	.word	0x08008439
 80083c0:	08008439 	.word	0x08008439
 80083c4:	08008439 	.word	0x08008439
 80083c8:	08008439 	.word	0x08008439
 80083cc:	08008439 	.word	0x08008439
 80083d0:	08008439 	.word	0x08008439
 80083d4:	08008439 	.word	0x08008439
 80083d8:	08008439 	.word	0x08008439
 80083dc:	08008439 	.word	0x08008439
 80083e0:	08008439 	.word	0x08008439
 80083e4:	08008439 	.word	0x08008439
 80083e8:	08008439 	.word	0x08008439
 80083ec:	08008439 	.word	0x08008439
 80083f0:	08008439 	.word	0x08008439
 80083f4:	08008439 	.word	0x08008439
 80083f8:	08008439 	.word	0x08008439
 80083fc:	08008439 	.word	0x08008439
 8008400:	08008439 	.word	0x08008439
 8008404:	08008439 	.word	0x08008439
 8008408:	08008439 	.word	0x08008439
 800840c:	08008439 	.word	0x08008439
 8008410:	08008439 	.word	0x08008439
 8008414:	08008439 	.word	0x08008439
 8008418:	08008439 	.word	0x08008439
 800841c:	08008439 	.word	0x08008439
 8008420:	08008439 	.word	0x08008439
 8008424:	08008439 	.word	0x08008439
 8008428:	08008439 	.word	0x08008439
 800842c:	08008439 	.word	0x08008439
 8008430:	08008439 	.word	0x08008439
 8008434:	08008439 	.word	0x08008439
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008438:	bf00      	nop
  }

  return (USBD_OK);
 800843a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop

08008448 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4813      	ldr	r0, [pc, #76]	; (80084a4 <CDC_Receive_FS+0x5c>)
 8008456:	f7fe fe46 	bl	80070e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800845a:	4812      	ldr	r0, [pc, #72]	; (80084a4 <CDC_Receive_FS+0x5c>)
 800845c:	f7fe fe85 	bl	800716a <USBD_CDC_ReceivePacket>

  CDC_Transmit_FS(Buf,*Len);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f821 	bl	80084b0 <CDC_Transmit_FS>
  nrf24_setMode(&nrfTx, txMode);
 800846e:	2102      	movs	r1, #2
 8008470:	480d      	ldr	r0, [pc, #52]	; (80084a8 <CDC_Receive_FS+0x60>)
 8008472:	f7f8 f8bb 	bl	80005ec <nrf24_setMode>
	if (nrf24_Transmit(&nrfTx, Buf, sizeof(Buf)) == 1) {
 8008476:	2204      	movs	r2, #4
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	480b      	ldr	r0, [pc, #44]	; (80084a8 <CDC_Receive_FS+0x60>)
 800847c:	f7f8 f91d 	bl	80006ba <nrf24_Transmit>
 8008480:	4603      	mov	r3, r0
 8008482:	2b01      	cmp	r3, #1
 8008484:	d108      	bne.n	8008498 <CDC_Receive_FS+0x50>
		nrf24_setMode(&nrfTx, standby);
 8008486:	2101      	movs	r1, #1
 8008488:	4807      	ldr	r0, [pc, #28]	; (80084a8 <CDC_Receive_FS+0x60>)
 800848a:	f7f8 f8af 	bl	80005ec <nrf24_setMode>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800848e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008492:	4806      	ldr	r0, [pc, #24]	; (80084ac <CDC_Receive_FS+0x64>)
 8008494:	f7f8 ff00 	bl	8001298 <HAL_GPIO_TogglePin>
	}
  return (USBD_OK);
 8008498:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800849a:	4618      	mov	r0, r3
 800849c:	3708      	adds	r7, #8
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000220 	.word	0x20000220
 80084a8:	200001f8 	.word	0x200001f8
 80084ac:	40011000 	.word	0x40011000

080084b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084c0:	4b0d      	ldr	r3, [pc, #52]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e00b      	b.n	80084ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084d6:	887b      	ldrh	r3, [r7, #2]
 80084d8:	461a      	mov	r2, r3
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4806      	ldr	r0, [pc, #24]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084de:	f7fe fde9 	bl	80070b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <CDC_Transmit_FS+0x48>)
 80084e4:	f7fe fe12 	bl	800710c <USBD_CDC_TransmitPacket>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000220 	.word	0x20000220

080084fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	6039      	str	r1, [r7, #0]
 8008506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2212      	movs	r2, #18
 800850c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	20000150 	.word	0x20000150

08008520 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2204      	movs	r2, #4
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	; (8008540 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20000164 	.word	0x20000164

08008544 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4907      	ldr	r1, [pc, #28]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
 800855a:	4808      	ldr	r0, [pc, #32]	; (800857c <USBD_FS_ProductStrDescriptor+0x38>)
 800855c:	f7ff fdec 	bl	8008138 <USBD_GetString>
 8008560:	e004      	b.n	800856c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	4904      	ldr	r1, [pc, #16]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <USBD_FS_ProductStrDescriptor+0x38>)
 8008568:	f7ff fde6 	bl	8008138 <USBD_GetString>
  }
  return USBD_StrDesc;
 800856c:	4b02      	ldr	r3, [pc, #8]	; (8008578 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000cb4 	.word	0x20000cb4
 800857c:	08008cfc 	.word	0x08008cfc

08008580 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	4904      	ldr	r1, [pc, #16]	; (80085a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008590:	4804      	ldr	r0, [pc, #16]	; (80085a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008592:	f7ff fdd1 	bl	8008138 <USBD_GetString>
  return USBD_StrDesc;
 8008596:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000cb4 	.word	0x20000cb4
 80085a4:	08008d14 	.word	0x08008d14

080085a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	6039      	str	r1, [r7, #0]
 80085b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	221a      	movs	r2, #26
 80085b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085ba:	f000 f843 	bl	8008644 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085be:	4b02      	ldr	r3, [pc, #8]	; (80085c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000168 	.word	0x20000168

080085cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	4907      	ldr	r1, [pc, #28]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085e2:	4808      	ldr	r0, [pc, #32]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085e4:	f7ff fda8 	bl	8008138 <USBD_GetString>
 80085e8:	e004      	b.n	80085f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	4904      	ldr	r1, [pc, #16]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085ee:	4805      	ldr	r0, [pc, #20]	; (8008604 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f0:	f7ff fda2 	bl	8008138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f4:	4b02      	ldr	r3, [pc, #8]	; (8008600 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000cb4 	.word	0x20000cb4
 8008604:	08008d28 	.word	0x08008d28

08008608 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	4907      	ldr	r1, [pc, #28]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800861e:	4808      	ldr	r0, [pc, #32]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008620:	f7ff fd8a 	bl	8008138 <USBD_GetString>
 8008624:	e004      	b.n	8008630 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	4904      	ldr	r1, [pc, #16]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862a:	4805      	ldr	r0, [pc, #20]	; (8008640 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800862c:	f7ff fd84 	bl	8008138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008632:	4618      	mov	r0, r3
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000cb4 	.word	0x20000cb4
 8008640:	08008d34 	.word	0x08008d34

08008644 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800864a:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <Get_SerialNum+0x44>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008650:	4b0e      	ldr	r3, [pc, #56]	; (800868c <Get_SerialNum+0x48>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008656:	4b0e      	ldr	r3, [pc, #56]	; (8008690 <Get_SerialNum+0x4c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4413      	add	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800866a:	2208      	movs	r2, #8
 800866c:	4909      	ldr	r1, [pc, #36]	; (8008694 <Get_SerialNum+0x50>)
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f814 	bl	800869c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008674:	2204      	movs	r2, #4
 8008676:	4908      	ldr	r1, [pc, #32]	; (8008698 <Get_SerialNum+0x54>)
 8008678:	68b8      	ldr	r0, [r7, #8]
 800867a:	f000 f80f 	bl	800869c <IntToUnicode>
  }
}
 800867e:	bf00      	nop
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	1ffff7e8 	.word	0x1ffff7e8
 800868c:	1ffff7ec 	.word	0x1ffff7ec
 8008690:	1ffff7f0 	.word	0x1ffff7f0
 8008694:	2000016a 	.word	0x2000016a
 8008698:	2000017a 	.word	0x2000017a

0800869c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]
 80086b2:	e027      	b.n	8008704 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	0f1b      	lsrs	r3, r3, #28
 80086b8:	2b09      	cmp	r3, #9
 80086ba:	d80b      	bhi.n	80086d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	0f1b      	lsrs	r3, r3, #28
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4619      	mov	r1, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	440b      	add	r3, r1
 80086cc:	3230      	adds	r2, #48	; 0x30
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	e00a      	b.n	80086ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	0f1b      	lsrs	r3, r3, #28
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	4619      	mov	r1, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	440b      	add	r3, r1
 80086e4:	3237      	adds	r2, #55	; 0x37
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	3301      	adds	r3, #1
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	4413      	add	r3, r2
 80086fa:	2200      	movs	r2, #0
 80086fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	3301      	adds	r3, #1
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	7dfa      	ldrb	r2, [r7, #23]
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	429a      	cmp	r2, r3
 800870a:	d3d3      	bcc.n	80086b4 <IntToUnicode+0x18>
  }
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <HAL_PCD_MspInit+0x44>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d113      	bne.n	8008752 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <HAL_PCD_MspInit+0x48>)
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	4a0c      	ldr	r2, [pc, #48]	; (8008760 <HAL_PCD_MspInit+0x48>)
 8008730:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008734:	61d3      	str	r3, [r2, #28]
 8008736:	4b0a      	ldr	r3, [pc, #40]	; (8008760 <HAL_PCD_MspInit+0x48>)
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800873e:	60fb      	str	r3, [r7, #12]
 8008740:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	2014      	movs	r0, #20
 8008748:	f7f8 fbd3 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800874c:	2014      	movs	r0, #20
 800874e:	f7f8 fbec 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008752:	bf00      	nop
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	40005c00 	.word	0x40005c00
 8008760:	40021000 	.word	0x40021000

08008764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe fdab 	bl	80072d6 <USBD_LL_SetupStage>
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	440b      	add	r3, r1
 80087a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	78fb      	ldrb	r3, [r7, #3]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7fe fddd 	bl	8007370 <USBD_LL_DataOutStage>
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	440b      	add	r3, r1
 80087de:	333c      	adds	r3, #60	; 0x3c
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7fe fe34 	bl	8007452 <USBD_LL_DataInStage>
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe ff44 	bl	800768e <USBD_LL_SOF>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d001      	beq.n	8008826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008822:	f7f7 fdeb 	bl	80003fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800882c:	7bfa      	ldrb	r2, [r7, #15]
 800882e:	4611      	mov	r1, r2
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fef4 	bl	800761e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe fead 	bl	800759c <USBD_LL_Reset>
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe feee 	bl	800763c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <HAL_PCD_SuspendCallback+0x30>)
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	4a03      	ldr	r2, [pc, #12]	; (800887c <HAL_PCD_SuspendCallback+0x30>)
 800886e:	f043 0306 	orr.w	r3, r3, #6
 8008872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	e000ed00 	.word	0xe000ed00

08008880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fee8 	bl	8007664 <USBD_LL_Resume>
}
 8008894:	bf00      	nop
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088a4:	4a28      	ldr	r2, [pc, #160]	; (8008948 <USBD_LL_Init+0xac>)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a26      	ldr	r2, [pc, #152]	; (8008948 <USBD_LL_Init+0xac>)
 80088b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <USBD_LL_Init+0xac>)
 80088b6:	4a25      	ldr	r2, [pc, #148]	; (800894c <USBD_LL_Init+0xb0>)
 80088b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088ba:	4b23      	ldr	r3, [pc, #140]	; (8008948 <USBD_LL_Init+0xac>)
 80088bc:	2208      	movs	r2, #8
 80088be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088c0:	4b21      	ldr	r3, [pc, #132]	; (8008948 <USBD_LL_Init+0xac>)
 80088c2:	2202      	movs	r2, #2
 80088c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088c6:	4b20      	ldr	r3, [pc, #128]	; (8008948 <USBD_LL_Init+0xac>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088cc:	4b1e      	ldr	r3, [pc, #120]	; (8008948 <USBD_LL_Init+0xac>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <USBD_LL_Init+0xac>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088d8:	481b      	ldr	r0, [pc, #108]	; (8008948 <USBD_LL_Init+0xac>)
 80088da:	f7f8 fcf6 	bl	80012ca <HAL_PCD_Init>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088e4:	f7f7 fd8a 	bl	80003fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ee:	2318      	movs	r3, #24
 80088f0:	2200      	movs	r2, #0
 80088f2:	2100      	movs	r1, #0
 80088f4:	f7fa f96a 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088fe:	2358      	movs	r3, #88	; 0x58
 8008900:	2200      	movs	r2, #0
 8008902:	2180      	movs	r1, #128	; 0x80
 8008904:	f7fa f962 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800890e:	23c0      	movs	r3, #192	; 0xc0
 8008910:	2200      	movs	r2, #0
 8008912:	2181      	movs	r1, #129	; 0x81
 8008914:	f7fa f95a 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800891e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008922:	2200      	movs	r2, #0
 8008924:	2101      	movs	r1, #1
 8008926:	f7fa f951 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008934:	2200      	movs	r2, #0
 8008936:	2182      	movs	r1, #130	; 0x82
 8008938:	f7fa f948 	bl	8002bcc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20000eb4 	.word	0x20000eb4
 800894c:	40005c00 	.word	0x40005c00

08008950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008966:	4618      	mov	r0, r3
 8008968:	f7f8 fdba 	bl	80014e0 <HAL_PCD_Start>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7bfb      	ldrb	r3, [r7, #15]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f94e 	bl	8008c14 <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800897c:	7bbb      	ldrb	r3, [r7, #14]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	4603      	mov	r3, r0
 8008996:	70fb      	strb	r3, [r7, #3]
 8008998:	460b      	mov	r3, r1
 800899a:	70bb      	strb	r3, [r7, #2]
 800899c:	4613      	mov	r3, r2
 800899e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ae:	78bb      	ldrb	r3, [r7, #2]
 80089b0:	883a      	ldrh	r2, [r7, #0]
 80089b2:	78f9      	ldrb	r1, [r7, #3]
 80089b4:	f7f8 ff32 	bl	800181c <HAL_PCD_EP_Open>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f928 	bl	8008c14 <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7f8 ff79 	bl	80018e8 <HAL_PCD_EP_Close>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 f909 	bl	8008c14 <USBD_Get_USB_Status>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f9 f839 	bl	8001aa6 <HAL_PCD_EP_SetStall>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7bfb      	ldrb	r3, [r7, #15]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f8ea 	bl	8008c14 <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7f9 f87a 	bl	8001b66 <HAL_PCD_EP_ClrStall>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f8cb 	bl	8008c14 <USBD_Get_USB_Status>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da0c      	bge.n	8008ac2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008aa8:	78fb      	ldrb	r3, [r7, #3]
 8008aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	440b      	add	r3, r1
 8008abc:	3302      	adds	r3, #2
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	e00b      	b.n	8008ada <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac8:	68f9      	ldr	r1, [r7, #12]
 8008aca:	4613      	mov	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	440b      	add	r3, r1
 8008ad4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ad8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008afe:	78fa      	ldrb	r2, [r7, #3]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f8 fe65 	bl	80017d2 <HAL_PCD_SetAddress>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f880 	bl	8008c14 <USBD_Get_USB_Status>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	460b      	mov	r3, r1
 8008b30:	72fb      	strb	r3, [r7, #11]
 8008b32:	4613      	mov	r3, r2
 8008b34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b44:	893b      	ldrh	r3, [r7, #8]
 8008b46:	7af9      	ldrb	r1, [r7, #11]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	f7f8 ff69 	bl	8001a20 <HAL_PCD_EP_Transmit>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 f85d 	bl	8008c14 <USBD_Get_USB_Status>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	461a      	mov	r2, r3
 8008b74:	460b      	mov	r3, r1
 8008b76:	72fb      	strb	r3, [r7, #11]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b8a:	893b      	ldrh	r3, [r7, #8]
 8008b8c:	7af9      	ldrb	r1, [r7, #11]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	f7f8 fef2 	bl	8001978 <HAL_PCD_EP_Receive>
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f83a 	bl	8008c14 <USBD_Get_USB_Status>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ba4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bc0:	78fa      	ldrb	r2, [r7, #3]
 8008bc2:	4611      	mov	r1, r2
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7f8 ff14 	bl	80019f2 <HAL_PCD_EP_GetRxCount>
 8008bca:	4603      	mov	r3, r0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_static_malloc+0x14>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr
 8008be8:	200011a0 	.word	0x200011a0

08008bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d817      	bhi.n	8008c58 <USBD_Get_USB_Status+0x44>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_Get_USB_Status+0x1c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c47 	.word	0x08008c47
 8008c38:	08008c4d 	.word	0x08008c4d
 8008c3c:	08008c53 	.word	0x08008c53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	e00b      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4a:	e008      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c50:	e005      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c52:	2302      	movs	r3, #2
 8008c54:	73fb      	strb	r3, [r7, #15]
    break;
 8008c56:	e002      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	bf00      	nop
  }
  return usb_status;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop

08008c6c <__libc_init_array>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	2600      	movs	r6, #0
 8008c70:	4d0c      	ldr	r5, [pc, #48]	; (8008ca4 <__libc_init_array+0x38>)
 8008c72:	4c0d      	ldr	r4, [pc, #52]	; (8008ca8 <__libc_init_array+0x3c>)
 8008c74:	1b64      	subs	r4, r4, r5
 8008c76:	10a4      	asrs	r4, r4, #2
 8008c78:	42a6      	cmp	r6, r4
 8008c7a:	d109      	bne.n	8008c90 <__libc_init_array+0x24>
 8008c7c:	f000 f822 	bl	8008cc4 <_init>
 8008c80:	2600      	movs	r6, #0
 8008c82:	4d0a      	ldr	r5, [pc, #40]	; (8008cac <__libc_init_array+0x40>)
 8008c84:	4c0a      	ldr	r4, [pc, #40]	; (8008cb0 <__libc_init_array+0x44>)
 8008c86:	1b64      	subs	r4, r4, r5
 8008c88:	10a4      	asrs	r4, r4, #2
 8008c8a:	42a6      	cmp	r6, r4
 8008c8c:	d105      	bne.n	8008c9a <__libc_init_array+0x2e>
 8008c8e:	bd70      	pop	{r4, r5, r6, pc}
 8008c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c94:	4798      	blx	r3
 8008c96:	3601      	adds	r6, #1
 8008c98:	e7ee      	b.n	8008c78 <__libc_init_array+0xc>
 8008c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9e:	4798      	blx	r3
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7f2      	b.n	8008c8a <__libc_init_array+0x1e>
 8008ca4:	08008d54 	.word	0x08008d54
 8008ca8:	08008d54 	.word	0x08008d54
 8008cac:	08008d54 	.word	0x08008d54
 8008cb0:	08008d58 	.word	0x08008d58

08008cb4 <memset>:
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4402      	add	r2, r0
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d100      	bne.n	8008cbe <memset+0xa>
 8008cbc:	4770      	bx	lr
 8008cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc2:	e7f9      	b.n	8008cb8 <memset+0x4>

08008cc4 <_init>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr

08008cd0 <_fini>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	bf00      	nop
 8008cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd6:	bc08      	pop	{r3}
 8008cd8:	469e      	mov	lr, r3
 8008cda:	4770      	bx	lr
