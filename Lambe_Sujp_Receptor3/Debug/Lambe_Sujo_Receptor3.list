
Lambe_Sujo_Receptor3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b074  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800b180  0800b180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b23c  0800b23c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b23c  0800b23c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b23c  0800b23c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b23c  0800b23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b240  0800b240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  200001e8  0800b42c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800b42c  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f22  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003590  00000000  00000000  00035133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000386c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b16d  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016290  00000000  00000000  00055c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f490  00000000  00000000  0006bedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb36d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005198  00000000  00000000  000fb3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b168 	.word	0x0800b168

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b168 	.word	0x0800b168

0800014c <HAL_TIM_IC_CaptureCallback>:
uint32_t counter2 = 0;
uint16_t position2 = 0;
int16_t speed2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800015c:	d10a      	bne.n	8000174 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		counter = __HAL_TIM_GET_COUNTER(htim);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000164:	4a0d      	ldr	r2, [pc, #52]	; (800019c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000166:	6013      	str	r3, [r2, #0]
		position = (int16_t)counter;
 8000168:	4b0c      	ldr	r3, [pc, #48]	; (800019c <HAL_TIM_IC_CaptureCallback+0x50>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	b29a      	uxth	r2, r3
 800016e:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000170:	801a      	strh	r2, [r3, #0]
	}else if(htim->Instance == TIM4){
		counter2 = __HAL_TIM_GET_COUNTER(htim);
		position2 = (int16_t)counter2;
	}

}
 8000172:	e00e      	b.n	8000192 <HAL_TIM_IC_CaptureCallback+0x46>
	}else if(htim->Instance == TIM4){
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800017a:	4293      	cmp	r3, r2
 800017c:	d109      	bne.n	8000192 <HAL_TIM_IC_CaptureCallback+0x46>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000186:	6013      	str	r3, [r2, #0]
		position2 = (int16_t)counter2;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	b29a      	uxth	r2, r3
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <HAL_TIM_IC_CaptureCallback+0x60>)
 8000190:	801a      	strh	r2, [r3, #0]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200003ac 	.word	0x200003ac
 80001a0:	200003b0 	.word	0x200003b0
 80001a4:	40000800 	.word	0x40000800
 80001a8:	200003b4 	.word	0x200003b4
 80001ac:	200003b8 	.word	0x200003b8

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f001 fac2 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f8f2 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 fb56 	bl	800086c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001c0:	f000 f948 	bl	8000454 <MX_SPI1_Init>
  MX_TIM2_Init();
 80001c4:	f000 fa34 	bl	8000630 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001c8:	f000 f97a 	bl	80004c0 <MX_TIM1_Init>
  MX_TIM4_Init();
 80001cc:	f000 fafa 	bl	80007c4 <MX_TIM4_Init>
  MX_TIM3_Init();
 80001d0:	f000 fa82 	bl	80006d8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80001d4:	f009 fea6 	bl	8009f24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Configuração do rádio */
  nrfRx.CE_port = CE_GPIO_Port;
 80001d8:	4b5f      	ldr	r3, [pc, #380]	; (8000358 <main+0x1a8>)
 80001da:	4a60      	ldr	r2, [pc, #384]	; (800035c <main+0x1ac>)
 80001dc:	609a      	str	r2, [r3, #8]
  nrfRx.CE_pin = CE_Pin;
 80001de:	4b5e      	ldr	r3, [pc, #376]	; (8000358 <main+0x1a8>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	819a      	strh	r2, [r3, #12]
  nrfRx.CSN_port = CSN_GPIO_Port;
 80001e4:	4b5c      	ldr	r3, [pc, #368]	; (8000358 <main+0x1a8>)
 80001e6:	4a5e      	ldr	r2, [pc, #376]	; (8000360 <main+0x1b0>)
 80001e8:	601a      	str	r2, [r3, #0]
  nrfRx.CSN_pin = CSN_Pin;
 80001ea:	4b5b      	ldr	r3, [pc, #364]	; (8000358 <main+0x1a8>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	809a      	strh	r2, [r3, #4]
  nrfRx.IRQ_port = IRQ_GPIO_Port;
 80001f0:	4b59      	ldr	r3, [pc, #356]	; (8000358 <main+0x1a8>)
 80001f2:	4a5b      	ldr	r2, [pc, #364]	; (8000360 <main+0x1b0>)
 80001f4:	611a      	str	r2, [r3, #16]
  nrfRx.IRQ_pin = IRQ_Pin;
 80001f6:	4b58      	ldr	r3, [pc, #352]	; (8000358 <main+0x1a8>)
 80001f8:	2210      	movs	r2, #16
 80001fa:	829a      	strh	r2, [r3, #20]
  nrfRx.hSPIx = &hspi1;
 80001fc:	4b56      	ldr	r3, [pc, #344]	; (8000358 <main+0x1a8>)
 80001fe:	4a59      	ldr	r2, [pc, #356]	; (8000364 <main+0x1b4>)
 8000200:	619a      	str	r2, [r3, #24]

  nrf24_init(&nrfRx);
 8000202:	4855      	ldr	r0, [pc, #340]	; (8000358 <main+0x1a8>)
 8000204:	f000 fc1d 	bl	8000a42 <nrf24_init>
  nrf24_setDataRate(&nrfRx, _250kbs);
 8000208:	2100      	movs	r1, #0
 800020a:	4853      	ldr	r0, [pc, #332]	; (8000358 <main+0x1a8>)
 800020c:	f000 fc53 	bl	8000ab6 <nrf24_setDataRate>
  nrf24_setPALevel(&nrfRx, high);
 8000210:	2103      	movs	r1, #3
 8000212:	4851      	ldr	r0, [pc, #324]	; (8000358 <main+0x1a8>)
 8000214:	f000 fc9a 	bl	8000b4c <nrf24_setPALevel>

  nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 8000218:	230b      	movs	r3, #11
 800021a:	2200      	movs	r2, #0
 800021c:	4952      	ldr	r1, [pc, #328]	; (8000368 <main+0x1b8>)
 800021e:	484e      	ldr	r0, [pc, #312]	; (8000358 <main+0x1a8>)
 8000220:	f000 fd54 	bl	8000ccc <nrf24_setRxPipe>
  //nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
  //nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
  //nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
  nrf24_setMode(&nrfRx, rxMode);
 8000224:	2103      	movs	r1, #3
 8000226:	484c      	ldr	r0, [pc, #304]	; (8000358 <main+0x1a8>)
 8000228:	f000 fcfe 	bl	8000c28 <nrf24_setMode>
  /* Configuração dos timers referentes aos encoders */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800022c:	213c      	movs	r1, #60	; 0x3c
 800022e:	484f      	ldr	r0, [pc, #316]	; (800036c <main+0x1bc>)
 8000230:	f004 feaa 	bl	8004f88 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000234:	213c      	movs	r1, #60	; 0x3c
 8000236:	484e      	ldr	r0, [pc, #312]	; (8000370 <main+0x1c0>)
 8000238:	f004 fea6 	bl	8004f88 <HAL_TIM_Encoder_Start_IT>
  /* Configuração dos timers referentes ao PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	484d      	ldr	r0, [pc, #308]	; (8000374 <main+0x1c4>)
 8000240:	f004 fd5e 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	484b      	ldr	r0, [pc, #300]	; (8000374 <main+0x1c4>)
 8000248:	f004 fd5a 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800024c:	2108      	movs	r1, #8
 800024e:	4849      	ldr	r0, [pc, #292]	; (8000374 <main+0x1c4>)
 8000250:	f004 fd56 	bl	8004d00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000254:	2104      	movs	r1, #4
 8000256:	4848      	ldr	r0, [pc, #288]	; (8000378 <main+0x1c8>)
 8000258:	f004 fd52 	bl	8004d00 <HAL_TIM_PWM_Start>

  quemSouEu();
 800025c:	f000 fba8 	bl	80009b0 <quemSouEu>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4845      	ldr	r0, [pc, #276]	; (800037c <main+0x1cc>)
 8000268:	f001 fd97 	bl	8001d9a <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (isDataAvailable(&nrfRx, 0) == 1){
 800026c:	2100      	movs	r1, #0
 800026e:	483a      	ldr	r0, [pc, #232]	; (8000358 <main+0x1a8>)
 8000270:	f000 fdc0 	bl	8000df4 <isDataAvailable>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d1f8      	bne.n	800026c <main+0xbc>
			readData();
 800027a:	f000 fb85 	bl	8000988 <readData>
			/* checando se o dado é nosso */
			if(rxData[0] == byte_confirmacao){
 800027e:	4b40      	ldr	r3, [pc, #256]	; (8000380 <main+0x1d0>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2bff      	cmp	r3, #255	; 0xff
 8000284:	d1f2      	bne.n	800026c <main+0xbc>
				V_D = rxData[2*id -1];
 8000286:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <main+0x1d4>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	3b01      	subs	r3, #1
 800028e:	4a3c      	ldr	r2, [pc, #240]	; (8000380 <main+0x1d0>)
 8000290:	5cd2      	ldrb	r2, [r2, r3]
 8000292:	4b3d      	ldr	r3, [pc, #244]	; (8000388 <main+0x1d8>)
 8000294:	701a      	strb	r2, [r3, #0]
				V_E = rxData[2*id];
 8000296:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <main+0x1d4>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	4a38      	ldr	r2, [pc, #224]	; (8000380 <main+0x1d0>)
 800029e:	5cd2      	ldrb	r2, [r2, r3]
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <main+0x1dc>)
 80002a2:	701a      	strb	r2, [r3, #0]

				if(V_D >= 128){
 80002a4:	4b38      	ldr	r3, [pc, #224]	; (8000388 <main+0x1d8>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	b25b      	sxtb	r3, r3
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	da09      	bge.n	80002c2 <main+0x112>
					V_D = V_D - 128;
 80002ae:	4b36      	ldr	r3, [pc, #216]	; (8000388 <main+0x1d8>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	3b80      	subs	r3, #128	; 0x80
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b34      	ldr	r3, [pc, #208]	; (8000388 <main+0x1d8>)
 80002b8:	701a      	strb	r2, [r3, #0]
					sentido_d = 0;
 80002ba:	4b35      	ldr	r3, [pc, #212]	; (8000390 <main+0x1e0>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e002      	b.n	80002c8 <main+0x118>
				}else{
					sentido_d = 1;
 80002c2:	4b33      	ldr	r3, [pc, #204]	; (8000390 <main+0x1e0>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
				}
				if(V_E >= 128){
 80002c8:	4b30      	ldr	r3, [pc, #192]	; (800038c <main+0x1dc>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	da09      	bge.n	80002e6 <main+0x136>
					V_E = V_E - 128;
 80002d2:	4b2e      	ldr	r3, [pc, #184]	; (800038c <main+0x1dc>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	3b80      	subs	r3, #128	; 0x80
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <main+0x1dc>)
 80002dc:	701a      	strb	r2, [r3, #0]
					sentido_e = 0;
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <main+0x1e4>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	e002      	b.n	80002ec <main+0x13c>
				}else{
					sentido_e = 1;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <main+0x1e4>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	701a      	strb	r2, [r3, #0]
				//			  PWM REVERSE/SLOW DECAY AN1 = PWM e AN2 = 1
				// nesse caso os canais de PWM que devem ser conectados aos pinos da ponte H.
				// sendo TIM1_CH1 e TIM1_CH2 no AN1 e AN2 respectivamente (direito)
				// e     TIM1_CH3 e TIM3-CH1 no BN1 e BN2 respectivamente (esquerdo)
				// sendo sentido_x = 1 inverso e o sentido_x = 0 para frente.
				if(sentido_d == 0){
 80002ec:	4b28      	ldr	r3, [pc, #160]	; (8000390 <main+0x1e0>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	f083 0301 	eor.w	r3, r3, #1
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d009      	beq.n	800030e <main+0x15e>
					TIM1->CCR1 = 100 -V_D;
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <main+0x1d8>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <main+0x1e8>)
 8000304:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 100;
 8000306:	4b24      	ldr	r3, [pc, #144]	; (8000398 <main+0x1e8>)
 8000308:	2264      	movs	r2, #100	; 0x64
 800030a:	639a      	str	r2, [r3, #56]	; 0x38
 800030c:	e008      	b.n	8000320 <main+0x170>
				}else{
					TIM1->CCR1 = 100;
 800030e:	4b22      	ldr	r3, [pc, #136]	; (8000398 <main+0x1e8>)
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 100 -V_D;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <main+0x1d8>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <main+0x1e8>)
 800031e:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if(sentido_e == 0){
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <main+0x1e4>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d009      	beq.n	8000342 <main+0x192>
					TIM1->CCR3 = 100 -V_E;
 800032e:	4b17      	ldr	r3, [pc, #92]	; (800038c <main+0x1dc>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000336:	4b18      	ldr	r3, [pc, #96]	; (8000398 <main+0x1e8>)
 8000338:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR2 = 100;
 800033a:	4b18      	ldr	r3, [pc, #96]	; (800039c <main+0x1ec>)
 800033c:	2264      	movs	r2, #100	; 0x64
 800033e:	639a      	str	r2, [r3, #56]	; 0x38
 8000340:	e794      	b.n	800026c <main+0xbc>

				}else{
					TIM1->CCR3 = 100;
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <main+0x1e8>)
 8000344:	2264      	movs	r2, #100	; 0x64
 8000346:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR2 = 100 -V_E;
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <main+0x1dc>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <main+0x1ec>)
 8000352:	639a      	str	r2, [r3, #56]	; 0x38
		if (isDataAvailable(&nrfRx, 0) == 1){
 8000354:	e78a      	b.n	800026c <main+0xbc>
 8000356:	bf00      	nop
 8000358:	2000037c 	.word	0x2000037c
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40010800 	.word	0x40010800
 8000364:	20000204 	.word	0x20000204
 8000368:	20000000 	.word	0x20000000
 800036c:	200002a4 	.word	0x200002a4
 8000370:	20000334 	.word	0x20000334
 8000374:	2000025c 	.word	0x2000025c
 8000378:	200002ec 	.word	0x200002ec
 800037c:	40011000 	.word	0x40011000
 8000380:	2000039c 	.word	0x2000039c
 8000384:	200003a7 	.word	0x200003a7
 8000388:	200003a9 	.word	0x200003a9
 800038c:	200003a8 	.word	0x200003a8
 8000390:	200003ab 	.word	0x200003ab
 8000394:	200003aa 	.word	0x200003aa
 8000398:	40012c00 	.word	0x40012c00
 800039c:	40000400 	.word	0x40000400

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	; 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003aa:	2228      	movs	r2, #40	; 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f00a fa58 	bl	800a864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 f9c4 	bl	8003784 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000402:	f000 fb19 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000416:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f003 fc30 	bl	8003c88 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800042e:	f000 fb03 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000432:	2310      	movs	r3, #16
 8000434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f003 fd89 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000448:	f000 faf6 	bl	8000a38 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3750      	adds	r7, #80	; 0x50
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000458:	4b17      	ldr	r3, [pc, #92]	; (80004b8 <MX_SPI1_Init+0x64>)
 800045a:	4a18      	ldr	r2, [pc, #96]	; (80004bc <MX_SPI1_Init+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800045e:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800046c:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <MX_SPI1_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000472:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <MX_SPI1_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000488:	2208      	movs	r2, #8
 800048a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <MX_SPI1_Init+0x64>)
 800048e:	2200      	movs	r2, #0
 8000490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_SPI1_Init+0x64>)
 8000494:	2200      	movs	r2, #0
 8000496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <MX_SPI1_Init+0x64>)
 800049a:	2200      	movs	r2, #0
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <MX_SPI1_Init+0x64>)
 80004a0:	220a      	movs	r2, #10
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_SPI1_Init+0x64>)
 80004a6:	f003 fe0b 	bl	80040c0 <HAL_SPI_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004b0:	f000 fac2 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000204 	.word	0x20000204
 80004bc:	40013000 	.word	0x40013000

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b096      	sub	sp, #88	; 0x58
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2220      	movs	r2, #32
 80004f6:	2100      	movs	r1, #0
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00a f9b3 	bl	800a864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <MX_TIM1_Init+0x168>)
 8000500:	4a4a      	ldr	r2, [pc, #296]	; (800062c <MX_TIM1_Init+0x16c>)
 8000502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14-1;
 8000504:	4b48      	ldr	r3, [pc, #288]	; (8000628 <MX_TIM1_Init+0x168>)
 8000506:	220d      	movs	r2, #13
 8000508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b47      	ldr	r3, [pc, #284]	; (8000628 <MX_TIM1_Init+0x168>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 101 - 1;
 8000510:	4b45      	ldr	r3, [pc, #276]	; (8000628 <MX_TIM1_Init+0x168>)
 8000512:	2264      	movs	r2, #100	; 0x64
 8000514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000516:	4b44      	ldr	r3, [pc, #272]	; (8000628 <MX_TIM1_Init+0x168>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800051c:	4b42      	ldr	r3, [pc, #264]	; (8000628 <MX_TIM1_Init+0x168>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_TIM1_Init+0x168>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000528:	483f      	ldr	r0, [pc, #252]	; (8000628 <MX_TIM1_Init+0x168>)
 800052a:	f004 fb41 	bl	8004bb0 <HAL_TIM_Base_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000534:	f000 fa80 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000542:	4619      	mov	r1, r3
 8000544:	4838      	ldr	r0, [pc, #224]	; (8000628 <MX_TIM1_Init+0x168>)
 8000546:	f004 ff93 	bl	8005470 <HAL_TIM_ConfigClockSource>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000550:	f000 fa72 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000554:	4834      	ldr	r0, [pc, #208]	; (8000628 <MX_TIM1_Init+0x168>)
 8000556:	f004 fb7a 	bl	8004c4e <HAL_TIM_PWM_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000560:	f000 fa6a 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000564:	2300      	movs	r3, #0
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000570:	4619      	mov	r1, r3
 8000572:	482d      	ldr	r0, [pc, #180]	; (8000628 <MX_TIM1_Init+0x168>)
 8000574:	f005 fb08 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800057e:	f000 fa5b 	bl	8000a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000582:	2360      	movs	r3, #96	; 0x60
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058a:	2300      	movs	r3, #0
 800058c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800058e:	2300      	movs	r3, #0
 8000590:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	4820      	ldr	r0, [pc, #128]	; (8000628 <MX_TIM1_Init+0x168>)
 80005a8:	f004 fea4 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80005b2:	f000 fa41 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	2204      	movs	r2, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	481a      	ldr	r0, [pc, #104]	; (8000628 <MX_TIM1_Init+0x168>)
 80005c0:	f004 fe98 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80005ca:	f000 fa35 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	2208      	movs	r2, #8
 80005d4:	4619      	mov	r1, r3
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <MX_TIM1_Init+0x168>)
 80005d8:	f004 fe8c 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80005e2:	f000 fa29 	bl	8000a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <MX_TIM1_Init+0x168>)
 800060a:	f005 fb1b 	bl	8005c44 <HAL_TIMEx_ConfigBreakDeadTime>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000614:	f000 fa10 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <MX_TIM1_Init+0x168>)
 800061a:	f000 ff2b 	bl	8001474 <HAL_TIM_MspPostInit>

}
 800061e:	bf00      	nop
 8000620:	3758      	adds	r7, #88	; 0x58
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000025c 	.word	0x2000025c
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08c      	sub	sp, #48	; 0x30
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2224      	movs	r2, #36	; 0x24
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00a f910 	bl	800a864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_TIM2_Init+0xa4>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4 - 1;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_TIM2_Init+0xa4>)
 8000656:	2203      	movs	r2, #3
 8000658:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065a:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_TIM2_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_TIM2_Init+0xa4>)
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_TIM2_Init+0xa4>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_TIM2_Init+0xa4>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000674:	2303      	movs	r3, #3
 8000676:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800067c:	2301      	movs	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_TIM2_Init+0xa4>)
 80006a0:	f004 fbd0 	bl	8004e44 <HAL_TIM_Encoder_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006aa:	f000 f9c5 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_TIM2_Init+0xa4>)
 80006bc:	f005 fa64 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006c6:	f000 f9b7 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200002a4 	.word	0x200002a4

080006d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000708:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_TIM3_Init+0xe4>)
 800070a:	4a2d      	ldr	r2, [pc, #180]	; (80007c0 <MX_TIM3_Init+0xe8>)
 800070c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14-1;
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_TIM3_Init+0xe4>)
 8000710:	220d      	movs	r2, #13
 8000712:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_TIM3_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 101-1;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_TIM3_Init+0xe4>)
 800071c:	2264      	movs	r2, #100	; 0x64
 800071e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_TIM3_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <MX_TIM3_Init+0xe4>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800072c:	4823      	ldr	r0, [pc, #140]	; (80007bc <MX_TIM3_Init+0xe4>)
 800072e:	f004 fa3f 	bl	8004bb0 <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000738:	f000 f97e 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	4619      	mov	r1, r3
 8000748:	481c      	ldr	r0, [pc, #112]	; (80007bc <MX_TIM3_Init+0xe4>)
 800074a:	f004 fe91 	bl	8005470 <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000754:	f000 f970 	bl	8000a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000758:	4818      	ldr	r0, [pc, #96]	; (80007bc <MX_TIM3_Init+0xe4>)
 800075a:	f004 fa78 	bl	8004c4e <HAL_TIM_PWM_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000764:	f000 f968 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	4619      	mov	r1, r3
 8000776:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_TIM3_Init+0xe4>)
 8000778:	f005 fa06 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000782:	f000 f959 	bl	8000a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000786:	2360      	movs	r3, #96	; 0x60
 8000788:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2204      	movs	r2, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM3_Init+0xe4>)
 800079e:	f004 fda9 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007a8:	f000 f946 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM3_Init+0xe4>)
 80007ae:	f000 fe61 	bl	8001474 <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3738      	adds	r7, #56	; 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002ec 	.word	0x200002ec
 80007c0:	40000400 	.word	0x40000400

080007c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2224      	movs	r2, #36	; 0x24
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00a f846 	bl	800a864 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_TIM4_Init+0xa0>)
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <MX_TIM4_Init+0xa4>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_TIM4_Init+0xa0>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM4_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_TIM4_Init+0xa0>)
 80007f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM4_Init+0xa0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM4_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000806:	2303      	movs	r3, #3
 8000808:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800080e:	2301      	movs	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800081e:	2301      	movs	r3, #1
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_TIM4_Init+0xa0>)
 8000832:	f004 fb07 	bl	8004e44 <HAL_TIM_Encoder_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f8fc 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM4_Init+0xa0>)
 800084e:	f005 f99b 	bl	8005b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000858:	f000 f8ee 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	; 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000334 	.word	0x20000334
 8000868:	40000800 	.word	0x40000800

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_GPIO_Init+0x10c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <MX_GPIO_Init+0x10c>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MX_GPIO_Init+0x10c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	4b37      	ldr	r3, [pc, #220]	; (8000978 <MX_GPIO_Init+0x10c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a36      	ldr	r2, [pc, #216]	; (8000978 <MX_GPIO_Init+0x10c>)
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0320 	and.w	r3, r3, #32
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a30      	ldr	r2, [pc, #192]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b2e      	ldr	r3, [pc, #184]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a2a      	ldr	r2, [pc, #168]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_GPIO_Init+0x10c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e6:	4825      	ldr	r0, [pc, #148]	; (800097c <MX_GPIO_Init+0x110>)
 80008e8:	f001 fa57 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|IRQ_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2118      	movs	r1, #24
 80008f0:	4823      	ldr	r0, [pc, #140]	; (8000980 <MX_GPIO_Init+0x114>)
 80008f2:	f001 fa52 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	4822      	ldr	r0, [pc, #136]	; (8000984 <MX_GPIO_Init+0x118>)
 80008fc:	f001 fa4d 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2302      	movs	r3, #2
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_GPIO_Init+0x110>)
 800091a:	f001 f8a3 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|IRQ_Pin;
 800091e:	2318      	movs	r3, #24
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <MX_GPIO_Init+0x114>)
 8000936:	f001 f895 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_GPIO_Init+0x118>)
 8000952:	f001 f887 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP1_Pin DIP2_Pin DIP3_Pin DIP4_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin|DIP3_Pin|DIP4_Pin;
 8000956:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000960:	2301      	movs	r3, #1
 8000962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_GPIO_Init+0x118>)
 800096c:	f001 f87a 	bl	8001a64 <HAL_GPIO_Init>

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	40011000 	.word	0x40011000
 8000980:	40010800 	.word	0x40010800
 8000984:	40010c00 	.word	0x40010c00

08000988 <readData>:

/* USER CODE BEGIN 4 */
void readData(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	nrf24_Receive(&nrfRx, rxData, PAYLOAD);
 800098c:	220b      	movs	r2, #11
 800098e:	4905      	ldr	r1, [pc, #20]	; (80009a4 <readData+0x1c>)
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <readData+0x20>)
 8000992:	f000 fa5f 	bl	8000e54 <nrf24_Receive>
	//CDC_Transmit_FS(rxData, 11);
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <readData+0x24>)
 800099c:	f001 fa15 	bl	8001dca <HAL_GPIO_TogglePin>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000039c 	.word	0x2000039c
 80009a8:	2000037c 	.word	0x2000037c
 80009ac:	40011000 	.word	0x40011000

080009b0 <quemSouEu>:

void quemSouEu(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	//se 0 então o DIP está ativado
	if(!HAL_GPIO_ReadPin(DIP1_GPIO_Port, DIP1_Pin)){
 80009b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b8:	481d      	ldr	r0, [pc, #116]	; (8000a30 <quemSouEu+0x80>)
 80009ba:	f001 f9d7 	bl	8001d6c <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10f      	bne.n	80009e4 <quemSouEu+0x34>
		if(HAL_GPIO_ReadPin(DIP2_GPIO_Port, DIP2_Pin)){
 80009c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c8:	4819      	ldr	r0, [pc, #100]	; (8000a30 <quemSouEu+0x80>)
 80009ca:	f001 f9cf 	bl	8001d6c <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <quemSouEu+0x2c>
			id = 1;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <quemSouEu+0x84>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
	}else if(!HAL_GPIO_ReadPin(DIP3_GPIO_Port, DIP3_Pin)){
		id = 3;
	}else if(!HAL_GPIO_ReadPin(DIP4_GPIO_Port, DIP4_Pin)){
		id = 4;
	}
}
 80009da:	e026      	b.n	8000a2a <quemSouEu+0x7a>
			id = 5;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <quemSouEu+0x84>)
 80009de:	2205      	movs	r2, #5
 80009e0:	701a      	strb	r2, [r3, #0]
}
 80009e2:	e022      	b.n	8000a2a <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP2_GPIO_Port, DIP2_Pin)){
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <quemSouEu+0x80>)
 80009ea:	f001 f9bf 	bl	8001d6c <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <quemSouEu+0x4c>
		id = 2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <quemSouEu+0x84>)
 80009f6:	2202      	movs	r2, #2
 80009f8:	701a      	strb	r2, [r3, #0]
}
 80009fa:	e016      	b.n	8000a2a <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP3_GPIO_Port, DIP3_Pin)){
 80009fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <quemSouEu+0x80>)
 8000a02:	f001 f9b3 	bl	8001d6c <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d103      	bne.n	8000a14 <quemSouEu+0x64>
		id = 3;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <quemSouEu+0x84>)
 8000a0e:	2203      	movs	r2, #3
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	e00a      	b.n	8000a2a <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP4_GPIO_Port, DIP4_Pin)){
 8000a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <quemSouEu+0x80>)
 8000a1a:	f001 f9a7 	bl	8001d6c <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d102      	bne.n	8000a2a <quemSouEu+0x7a>
		id = 4;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <quemSouEu+0x84>)
 8000a26:	2204      	movs	r2, #4
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	200003a7 	.word	0x200003a7

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>

08000a42 <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f000 fa54 	bl	8000ef8 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 fa7f 	bl	8000f58 <nrf24_writeReg>
	node->crc = no_CRC;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 8000a60:	2200      	movs	r2, #0
 8000a62:	2101      	movs	r1, #1
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 fa77 	bl	8000f58 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 fa72 	bl	8000f58 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000a74:	2203      	movs	r2, #3
 8000a76:	2103      	movs	r1, #3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fa6d 	bl	8000f58 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2104      	movs	r1, #4
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 fa68 	bl	8000f58 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000a88:	2100      	movs	r1, #0
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f813 	bl	8000ab6 <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000a90:	2103      	movs	r1, #3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f85a 	bl	8000b4c <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f8ae 	bl	8000bfc <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f8c0 	bl	8000c28 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 fa15 	bl	8000ed8 <nrf24_CE_enable>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b084      	sub	sp, #16
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 fa18 	bl	8000ef8 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000ac8:	2106      	movs	r1, #6
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 faab 	bl	8001026 <nrf24_readReg>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d01e      	beq.n	8000b18 <nrf24_setDataRate+0x62>
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	dc28      	bgt.n	8000b30 <nrf24_setDataRate+0x7a>
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <nrf24_setDataRate+0x32>
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d00c      	beq.n	8000b00 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000ae6:	e023      	b.n	8000b30 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f023 0308 	bic.w	r3, r3, #8
 8000af6:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	775a      	strb	r2, [r3, #29]
			break;
 8000afe:	e018      	b.n	8000b32 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f023 0320 	bic.w	r3, r3, #32
 8000b06:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	f023 0308 	bic.w	r3, r3, #8
 8000b0e:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	775a      	strb	r2, [r3, #29]
			break;
 8000b16:	e00c      	b.n	8000b32 <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f023 0320 	bic.w	r3, r3, #32
 8000b1e:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	775a      	strb	r2, [r3, #29]
			break;
 8000b2e:	e000      	b.n	8000b32 <nrf24_setDataRate+0x7c>
			break;
 8000b30:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	461a      	mov	r2, r3
 8000b36:	2106      	movs	r1, #6
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 fa0d 	bl	8000f58 <nrf24_writeReg>
	nrf24_CE_enable(node);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f9ca 	bl	8000ed8 <nrf24_CE_enable>
}
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 f9cd 	bl	8000ef8 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000b5e:	2106      	movs	r1, #6
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fa60 	bl	8001026 <nrf24_readReg>
 8000b66:	4603      	mov	r3, r0
 8000b68:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d837      	bhi.n	8000be0 <nrf24_setPALevel+0x94>
 8000b70:	a201      	add	r2, pc, #4	; (adr r2, 8000b78 <nrf24_setPALevel+0x2c>)
 8000b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b76:	bf00      	nop
 8000b78:	08000b89 	.word	0x08000b89
 8000b7c:	08000ba1 	.word	0x08000ba1
 8000b80:	08000bb9 	.word	0x08000bb9
 8000b84:	08000bd1 	.word	0x08000bd1
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f023 0304 	bic.w	r3, r3, #4
 8000b8e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	771a      	strb	r2, [r3, #28]
			break;
 8000b9e:	e020      	b.n	8000be2 <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f023 0304 	bic.w	r3, r3, #4
 8000ba6:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	771a      	strb	r2, [r3, #28]
			break;
 8000bb6:	e014      	b.n	8000be2 <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f023 0302 	bic.w	r3, r3, #2
 8000bc6:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2202      	movs	r2, #2
 8000bcc:	771a      	strb	r2, [r3, #28]
			break;
 8000bce:	e008      	b.n	8000be2 <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	f043 0306 	orr.w	r3, r3, #6
 8000bd6:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	771a      	strb	r2, [r3, #28]
			break;
 8000bde:	e000      	b.n	8000be2 <nrf24_setPALevel+0x96>

		default:
			break;
 8000be0:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	461a      	mov	r2, r3
 8000be6:	2106      	movs	r1, #6
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f9b5 	bl	8000f58 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f972 	bl	8000ed8 <nrf24_CE_enable>
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f975 	bl	8000ef8 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000c0e:	78fb      	ldrb	r3, [r7, #3]
 8000c10:	461a      	mov	r2, r3
 8000c12:	2105      	movs	r1, #5
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f99f 	bl	8000f58 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f95c 	bl	8000ed8 <nrf24_CE_enable>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000c34:	2100      	movs	r1, #0
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f9f5 	bl	8001026 <nrf24_readReg>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d837      	bhi.n	8000cb6 <nrf24_setMode+0x8e>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <nrf24_setMode+0x24>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c6d 	.word	0x08000c6d
 8000c54:	08000c83 	.word	0x08000c83
 8000c58:	08000ca1 	.word	0x08000ca1
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f023 0302 	bic.w	r3, r3, #2
 8000c62:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	779a      	strb	r2, [r3, #30]
			break;
 8000c6a:	e025      	b.n	8000cb8 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f000 f943 	bl	8000ef8 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	779a      	strb	r2, [r3, #30]
			break;
 8000c80:	e01a      	b.n	8000cb8 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f928 	bl	8000ed8 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	f023 0301 	bic.w	r3, r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	779a      	strb	r2, [r3, #30]
			break;
 8000c9e:	e00b      	b.n	8000cb8 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f000 f919 	bl	8000ed8 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	f043 0303 	orr.w	r3, r3, #3
 8000cac:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	779a      	strb	r2, [r3, #30]
			break;
 8000cb4:	e000      	b.n	8000cb8 <nrf24_setMode+0x90>

		default:
			break;
 8000cb6:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f94a 	bl	8000f58 <nrf24_writeReg>
}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	461a      	mov	r2, r3
 8000cda:	460b      	mov	r3, r1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	71bb      	strb	r3, [r7, #6]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 f908 	bl	8000ef8 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 8000ce8:	2107      	movs	r1, #7
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f000 f9ea 	bl	80010c4 <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f997 	bl	8001026 <nrf24_readReg>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	b25a      	sxtb	r2, r3
 8000d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	75fb      	strb	r3, [r7, #23]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	461a      	mov	r2, r3
 8000d14:	2102      	movs	r1, #2
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f91e 	bl	8000f58 <nrf24_writeReg>
	/* We must write the address for Data Pipe 1, if we want to use any pipe from 2 to 5
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1
	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d860      	bhi.n	8000de4 <nrf24_setRxPipe+0x118>
 8000d22:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <nrf24_setRxPipe+0x5c>)
 8000d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d5b 	.word	0x08000d5b
 8000d30:	08000d75 	.word	0x08000d75
 8000d34:	08000d91 	.word	0x08000d91
 8000d38:	08000dad 	.word	0x08000dad
 8000d3c:	08000dc9 	.word	0x08000dc9
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 8000d40:	2305      	movs	r3, #5
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	210a      	movs	r1, #10
 8000d46:	68f8      	ldr	r0, [r7, #12]
 8000d48:	f000 f931 	bl	8000fae <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2111      	movs	r1, #17
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f000 f900 	bl	8000f58 <nrf24_writeReg>
			break;
 8000d58:	e045      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	210b      	movs	r1, #11
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f924 	bl	8000fae <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 8000d66:	79bb      	ldrb	r3, [r7, #6]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	2112      	movs	r1, #18
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f000 f8f3 	bl	8000f58 <nrf24_writeReg>
			break;
 8000d72:	e038      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	210c      	movs	r1, #12
 8000d7c:	68f8      	ldr	r0, [r7, #12]
 8000d7e:	f000 f8eb 	bl	8000f58 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	461a      	mov	r2, r3
 8000d86:	2113      	movs	r1, #19
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f8e5 	bl	8000f58 <nrf24_writeReg>
			break;
 8000d8e:	e02a      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	210d      	movs	r1, #13
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f8dd 	bl	8000f58 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	461a      	mov	r2, r3
 8000da2:	2114      	movs	r1, #20
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f8d7 	bl	8000f58 <nrf24_writeReg>
			break;
 8000daa:	e01c      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	210e      	movs	r1, #14
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f8cf 	bl	8000f58 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2115      	movs	r1, #21
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f000 f8c9 	bl	8000f58 <nrf24_writeReg>
			break;
 8000dc6:	e00e      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	210f      	movs	r1, #15
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f8c1 	bl	8000f58 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2116      	movs	r1, #22
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f000 f8bb 	bl	8000f58 <nrf24_writeReg>
			break;
 8000de2:	e000      	b.n	8000de6 <nrf24_setRxPipe+0x11a>

		default:
			break;
 8000de4:	bf00      	nop
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f000 f876 	bl	8000ed8 <nrf24_CE_enable>
}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <isDataAvailable>:
// -----------------------------------------------------------------------------

uint8_t isDataAvailable(nrf24 *node, uint8_t pipenum) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
	uint8_t status = nrf24_readReg(node, STATUS);
 8000e00:	2107      	movs	r1, #7
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f90f 	bl	8001026 <nrf24_readReg>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
	if ((status - 64 == 0) && pipenum == 0) {
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b40      	cmp	r3, #64	; 0x40
 8000e10:	d109      	bne.n	8000e26 <isDataAvailable+0x32>
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d106      	bne.n	8000e26 <isDataAvailable+0x32>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000e18:	2240      	movs	r2, #64	; 0x40
 8000e1a:	2107      	movs	r1, #7
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 f89b 	bl	8000f58 <nrf24_writeReg>
		return 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e012      	b.n	8000e4c <isDataAvailable+0x58>
	}
	else if ((status & (1 << 6)) && (status & (pipenum << 1))) {
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00c      	beq.n	8000e4a <isDataAvailable+0x56>
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <isDataAvailable+0x56>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000e3c:	2240      	movs	r2, #64	; 0x40
 8000e3e:	2107      	movs	r1, #7
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f889 	bl	8000f58 <nrf24_writeReg>
		return 1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <isDataAvailable+0x58>
	}
	return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <nrf24_Receive>:
// -----------------------------------------------------------------------------

void nrf24_Receive(nrf24 *node, uint8_t *data, uint8_t len) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]

	nrf24_CSN_enable(node);		//select the device
 8000e66:	68f8      	ldr	r0, [r7, #12]
 8000e68:	f000 f856 	bl	8000f18 <nrf24_CSN_enable>
	cmdtosend = R_RX_PAYLOAD;	//payload command
 8000e6c:	2361      	movs	r3, #97	; 0x61
 8000e6e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	f107 0117 	add.w	r1, r7, #23
 8000e78:	2364      	movs	r3, #100	; 0x64
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f003 f9a4 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fd8d 	bl	80049a6 <HAL_SPI_GetState>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <nrf24_Receive+0x2e>
	//Receive the payload
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6998      	ldr	r0, [r3, #24]
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	f003 face 	bl	8004440 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000ea4:	bf00      	nop
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fd7b 	bl	80049a6 <HAL_SPI_GetState>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d1f7      	bne.n	8000ea6 <nrf24_Receive+0x52>
	nrf24_CSN_disable(node);	//Unselect the device
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f83e 	bl	8000f38 <nrf24_CSN_disable>
	HAL_Delay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 fc9f 	bl	8001800 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000ec2:	23e2      	movs	r3, #226	; 0xe2
 8000ec4:	75fb      	strb	r3, [r7, #23]
	nrf_sendCmd(node, cmdtosend);
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f8d8 	bl	8001080 <nrf_sendCmd>
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6898      	ldr	r0, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	899b      	ldrh	r3, [r3, #12]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	f000 ff55 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6898      	ldr	r0, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	899b      	ldrh	r3, [r3, #12]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f000 ff45 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f000 ff35 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	889b      	ldrh	r3, [r3, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f000 ff25 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000f68:	78fb      	ldrb	r3, [r7, #3]
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000f72:	78bb      	ldrb	r3, [r7, #2]
 8000f74:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffce 	bl	8000f18 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6998      	ldr	r0, [r3, #24]
 8000f80:	f107 010c 	add.w	r1, r7, #12
 8000f84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f88:	2202      	movs	r2, #2
 8000f8a:	f003 f91d 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000f8e:	bf00      	nop
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fd06 	bl	80049a6 <HAL_SPI_GetState>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d1f7      	bne.n	8000f90 <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffc9 	bl	8000f38 <nrf24_CSN_disable>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	460b      	mov	r3, r1
 8000fbc:	72fb      	strb	r3, [r7, #11]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000fc2:	7afb      	ldrb	r3, [r7, #11]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff ffa3 	bl	8000f18 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6998      	ldr	r0, [r3, #24]
 8000fd6:	f107 0114 	add.w	r1, r7, #20
 8000fda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f003 f8f2 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000fe4:	bf00      	nop
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fcdb 	bl	80049a6 <HAL_SPI_GetState>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d1f7      	bne.n	8000fe6 <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6998      	ldr	r0, [r3, #24]
 8000ffa:	893a      	ldrh	r2, [r7, #8]
 8000ffc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f003 f8e1 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001006:	bf00      	nop
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fcca 	bl	80049a6 <HAL_SPI_GetState>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d1f7      	bne.n	8001008 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff ff8d 	bl	8000f38 <nrf24_CSN_disable>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ff6e 	bl	8000f18 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6998      	ldr	r0, [r3, #24]
 8001040:	1cf9      	adds	r1, r7, #3
 8001042:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001046:	2201      	movs	r2, #1
 8001048:	f003 f8be 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800104c:	bf00      	nop
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fca7 	bl	80049a6 <HAL_SPI_GetState>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d1f7      	bne.n	800104e <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6998      	ldr	r0, [r3, #24]
 8001062:	f107 010f 	add.w	r1, r7, #15
 8001066:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800106a:	2201      	movs	r2, #1
 800106c:	f003 f9e8 	bl	8004440 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff61 	bl	8000f38 <nrf24_CSN_disable>
	return data;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
	nrf24_CSN_enable(node);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff43 	bl	8000f18 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6998      	ldr	r0, [r3, #24]
 8001096:	1cf9      	adds	r1, r7, #3
 8001098:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800109c:	2201      	movs	r2, #1
 800109e:	f003 f893 	bl	80041c8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80010a2:	bf00      	nop
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 fc7c 	bl	80049a6 <HAL_SPI_GetState>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d1f7      	bne.n	80010a4 <nrf_sendCmd+0x24>
	nrf24_CSN_disable(node);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff3f 	bl	8000f38 <nrf24_CSN_disable>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d105      	bne.n	80010e2 <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2107      	movs	r1, #7
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ff3c 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 80010e0:	e0a8      	b.n	8001234 <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2b17      	cmp	r3, #23
 80010e6:	d105      	bne.n	80010f4 <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 80010e8:	2211      	movs	r2, #17
 80010ea:	2117      	movs	r1, #23
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff33 	bl	8000f58 <nrf24_writeReg>
}
 80010f2:	e09f      	b.n	8001234 <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 80010f4:	2208      	movs	r2, #8
 80010f6:	2100      	movs	r1, #0
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff2d 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 80010fe:	223f      	movs	r2, #63	; 0x3f
 8001100:	2101      	movs	r1, #1
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff28 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8001108:	2203      	movs	r2, #3
 800110a:	2102      	movs	r1, #2
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff23 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 8001112:	2203      	movs	r2, #3
 8001114:	2103      	movs	r1, #3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff1e 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 800111c:	2203      	movs	r2, #3
 800111e:	2104      	movs	r1, #4
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff19 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 8001126:	2202      	movs	r2, #2
 8001128:	2105      	movs	r1, #5
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff14 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8001130:	220e      	movs	r2, #14
 8001132:	2106      	movs	r1, #6
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff0f 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 800113a:	2200      	movs	r2, #0
 800113c:	2107      	movs	r1, #7
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ff0a 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 8001144:	2200      	movs	r2, #0
 8001146:	2108      	movs	r1, #8
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff05 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 800114e:	2200      	movs	r2, #0
 8001150:	2109      	movs	r1, #9
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ff00 	bl	8000f58 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8001158:	4a38      	ldr	r2, [pc, #224]	; (800123c <nrf24_reset+0x178>)
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001162:	6018      	str	r0, [r3, #0]
 8001164:	3304      	adds	r3, #4
 8001166:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8001168:	f107 0218 	add.w	r2, r7, #24
 800116c:	2305      	movs	r3, #5
 800116e:	210a      	movs	r1, #10
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff1c 	bl	8000fae <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 8001176:	4a32      	ldr	r2, [pc, #200]	; (8001240 <nrf24_reset+0x17c>)
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	6018      	str	r0, [r3, #0]
 8001182:	3304      	adds	r3, #4
 8001184:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 8001186:	f107 0210 	add.w	r2, r7, #16
 800118a:	2305      	movs	r3, #5
 800118c:	210b      	movs	r1, #11
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff0d 	bl	8000fae <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 8001194:	22c3      	movs	r2, #195	; 0xc3
 8001196:	210c      	movs	r1, #12
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff fedd 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 800119e:	22c4      	movs	r2, #196	; 0xc4
 80011a0:	210d      	movs	r1, #13
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fed8 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 80011a8:	22c5      	movs	r2, #197	; 0xc5
 80011aa:	210e      	movs	r1, #14
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fed3 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 80011b2:	22c6      	movs	r2, #198	; 0xc6
 80011b4:	210f      	movs	r1, #15
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fece 	bl	8000f58 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <nrf24_reset+0x178>)
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c6:	6018      	str	r0, [r3, #0]
 80011c8:	3304      	adds	r3, #4
 80011ca:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 80011cc:	f107 0208 	add.w	r2, r7, #8
 80011d0:	2305      	movs	r3, #5
 80011d2:	2110      	movs	r1, #16
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff feea 	bl	8000fae <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2111      	movs	r1, #17
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff feba 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2112      	movs	r1, #18
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff feb5 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2113      	movs	r1, #19
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff feb0 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2114      	movs	r1, #20
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff feab 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2115      	movs	r1, #21
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fea6 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2116      	movs	r1, #22
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fea1 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8001216:	2211      	movs	r2, #17
 8001218:	2117      	movs	r1, #23
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fe9c 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	211c      	movs	r1, #28
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fe97 	bl	8000f58 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	211d      	movs	r1, #29
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fe92 	bl	8000f58 <nrf24_writeReg>
}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0800b180 	.word	0x0800b180
 8001240:	0800b188 	.word	0x0800b188

08001244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_MspInit+0x40>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_MspInit+0x40>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_MspInit+0x40>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_MspInit+0x40>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_MspInit+0x40>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_MspInit+0x40>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000

08001288 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a1b      	ldr	r2, [pc, #108]	; (8001310 <HAL_SPI_MspInit+0x88>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d12f      	bne.n	8001308 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_SPI_MspInit+0x8c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012d8:	23a0      	movs	r3, #160	; 0xa0
 80012da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480b      	ldr	r0, [pc, #44]	; (8001318 <HAL_SPI_MspInit+0x90>)
 80012ec:	f000 fbba 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <HAL_SPI_MspInit+0x90>)
 8001304:	f000 fbae 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40013000 	.word	0x40013000
 8001314:	40021000 	.word	0x40021000
 8001318:	40010800 	.word	0x40010800

0800131c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a12      	ldr	r2, [pc, #72]	; (8001374 <HAL_TIM_Base_MspInit+0x58>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d10c      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 8001334:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001346:	e010      	b.n	800136a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_TIM_Base_MspInit+0x60>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	61d3      	str	r3, [r2, #28]
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_TIM_Base_MspInit+0x5c>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	40012c00 	.word	0x40012c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40000400 	.word	0x40000400

08001380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139e:	d12c      	bne.n	80013fa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	61d3      	str	r3, [r2, #28]
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013be:	f043 0304 	orr.w	r3, r3, #4
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4619      	mov	r1, r3
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013e4:	f000 fb3e 	bl	8001a64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2100      	movs	r1, #0
 80013ec:	201c      	movs	r0, #28
 80013ee:	f000 fb02 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f2:	201c      	movs	r0, #28
 80013f4:	f000 fb1b 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013f8:	e030      	b.n	800145c <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a1b      	ldr	r2, [pc, #108]	; (800146c <HAL_TIM_Encoder_MspInit+0xec>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d12b      	bne.n	800145c <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	61d3      	str	r3, [r2, #28]
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_TIM_Encoder_MspInit+0xe4>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001434:	23c0      	movs	r3, #192	; 0xc0
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001448:	f000 fb0c 	bl	8001a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	201e      	movs	r0, #30
 8001452:	f000 fad0 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001456:	201e      	movs	r0, #30
 8001458:	f000 fae9 	bl	8001a2e <HAL_NVIC_EnableIRQ>
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	40010800 	.word	0x40010800
 800146c:	40000800 	.word	0x40000800
 8001470:	40010c00 	.word	0x40010c00

08001474 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_TIM_MspPostInit+0xbc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d119      	bne.n	80014c8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014ac:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	2302      	movs	r3, #2
 80014b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <HAL_TIM_MspPostInit+0xc4>)
 80014c2:	f000 facf 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014c6:	e02e      	b.n	8001526 <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_TIM_MspPostInit+0xc8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d129      	bne.n	8001526 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_TIM_MspPostInit+0xc0>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014ea:	2320      	movs	r3, #32
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2302      	movs	r3, #2
 80014f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <HAL_TIM_MspPostInit+0xcc>)
 80014fe:	f000 fab1 	bl	8001a64 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_TIM_MspPostInit+0xd0>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_TIM_MspPostInit+0xd0>)
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	6053      	str	r3, [r2, #4]
}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40000400 	.word	0x40000400
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40010000 	.word	0x40010000

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <SysTick_Handler+0x88>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <SysTick_Handler+0x88>)
 8001598:	6013      	str	r3, [r2, #0]
		if (indx == 500)
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <SysTick_Handler+0x88>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015a2:	d132      	bne.n	800160a <SysTick_Handler+0x7e>
		{
			speed = ((position - oldpos)*2);  // speed in clicks/sec
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <SysTick_Handler+0x8c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <SysTick_Handler+0x90>)
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <SysTick_Handler+0x94>)
 80015b8:	801a      	strh	r2, [r3, #0]
			oldpos = position;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <SysTick_Handler+0x8c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <SysTick_Handler+0x90>)
 80015c2:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e1: %d\n",speed);
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <SysTick_Handler+0x94>)
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4915      	ldr	r1, [pc, #84]	; (8001624 <SysTick_Handler+0x98>)
 80015ce:	4816      	ldr	r0, [pc, #88]	; (8001628 <SysTick_Handler+0x9c>)
 80015d0:	f009 f950 	bl	800a874 <siprintf>
			//CDC_Transmit_FS(buffer, strlen(buffer));

			speed2 = ((position2 - oldpos2)*2);  // speed in clicks/sec
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <SysTick_Handler+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <SysTick_Handler+0xa4>)
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	b29b      	uxth	r3, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <SysTick_Handler+0xa8>)
 80015e8:	801a      	strh	r2, [r3, #0]
			oldpos2 = position2;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <SysTick_Handler+0xa0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <SysTick_Handler+0xa4>)
 80015f2:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e2: %d\n",speed2);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <SysTick_Handler+0xa8>)
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	461a      	mov	r2, r3
 80015fc:	490e      	ldr	r1, [pc, #56]	; (8001638 <SysTick_Handler+0xac>)
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <SysTick_Handler+0x9c>)
 8001600:	f009 f938 	bl	800a874 <siprintf>
			//CDC_Transmit_FS(buffer, strlen(buffer));

			indx = 0;
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <SysTick_Handler+0x88>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f8dd 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200003bc 	.word	0x200003bc
 8001618:	200003b0 	.word	0x200003b0
 800161c:	200003c0 	.word	0x200003c0
 8001620:	200003b2 	.word	0x200003b2
 8001624:	0800b190 	.word	0x0800b190
 8001628:	200003c4 	.word	0x200003c4
 800162c:	200003b8 	.word	0x200003b8
 8001630:	200003c2 	.word	0x200003c2
 8001634:	200003ba 	.word	0x200003ba
 8001638:	0800b198 	.word	0x0800b198

0800163c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001642:	f000 fd0c 	bl	800205e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20001078 	.word	0x20001078

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f003 fd45 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200002a4 	.word	0x200002a4

08001664 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM4_IRQHandler+0x10>)
 800166a:	f003 fd3b 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000334 	.word	0x20000334

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f009 f8b2 	bl	800a810 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20005000 	.word	0x20005000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200003d8 	.word	0x200003d8
 80016e0:	20001598 	.word	0x20001598

080016e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	; (8001734 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001716:	f7ff ffe5 	bl	80016e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800171a:	f009 f87f 	bl	800a81c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800171e:	f7fe fd47 	bl	80001b0 <main>
  bx lr
 8001722:	4770      	bx	lr
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800172c:	0800b244 	.word	0x0800b244
  ldr r2, =_sbss
 8001730:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001734:	20001594 	.word	0x20001594

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_Init+0x28>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f947 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	200f      	movs	r0, #15
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fd74 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f95f 	bl	8001a4a <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f927 	bl	80019f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000010 	.word	0x20000010
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x1c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_IncTick+0x20>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_IncTick+0x20>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000010 	.word	0x20000010
 80017e8:	200003dc 	.word	0x200003dc

080017ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_GetTick+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	200003dc 	.word	0x200003dc

08001800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fff0 	bl	80017ec <HAL_GetTick>
 800180c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001818:	d005      	beq.n	8001826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_Delay+0x44>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001826:	bf00      	nop
 8001828:	f7ff ffe0 	bl	80017ec <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	429a      	cmp	r2, r3
 8001836:	d8f7      	bhi.n	8001828 <HAL_Delay+0x28>
  {
  }
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000010 	.word	0x20000010

08001848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185e:	68ba      	ldr	r2, [r7, #8]
 8001860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001864:	4013      	ands	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187a:	4a04      	ldr	r2, [pc, #16]	; (800188c <__NVIC_SetPriorityGrouping+0x44>)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	60d3      	str	r3, [r2, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	0a1b      	lsrs	r3, r3, #8
 800189a:	f003 0307 	and.w	r3, r3, #7
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	db0b      	blt.n	80018d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	4906      	ldr	r1, [pc, #24]	; (80018e0 <__NVIC_EnableIRQ+0x34>)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	2001      	movs	r0, #1
 80018ce:	fa00 f202 	lsl.w	r2, r0, r2
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff90 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff2d 	bl	8001848 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff42 	bl	8001890 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff35 	bl	80018ac <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e169      	b.n	8001d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8158 	bne.w	8001d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a9a      	ldr	r2, [pc, #616]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d875      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d058      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aac:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d86f      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d052      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ab8:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d869      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001abe:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04c      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d863      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aca:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d046      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d85d      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d82a      	bhi.n	8001b30 <HAL_GPIO_Init+0xcc>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d859      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_GPIO_Init+0x80>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b4b 	.word	0x08001b4b
 8001af0:	08001b8d 	.word	0x08001b8d
 8001af4:	08001b93 	.word	0x08001b93
 8001af8:	08001b93 	.word	0x08001b93
 8001afc:	08001b93 	.word	0x08001b93
 8001b00:	08001b93 	.word	0x08001b93
 8001b04:	08001b93 	.word	0x08001b93
 8001b08:	08001b93 	.word	0x08001b93
 8001b0c:	08001b93 	.word	0x08001b93
 8001b10:	08001b93 	.word	0x08001b93
 8001b14:	08001b93 	.word	0x08001b93
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b93 	.word	0x08001b93
 8001b20:	08001b93 	.word	0x08001b93
 8001b24:	08001b93 	.word	0x08001b93
 8001b28:	08001b41 	.word	0x08001b41
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	4a79      	ldr	r2, [pc, #484]	; (8001d18 <HAL_GPIO_Init+0x2b4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b36:	e02c      	b.n	8001b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e029      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	3304      	adds	r3, #4
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e024      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e01f      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e01a      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b66:	2304      	movs	r3, #4
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e013      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	611a      	str	r2, [r3, #16]
          break;
 8001b7e:	e009      	b.n	8001b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b80:	2308      	movs	r3, #8
 8001b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	615a      	str	r2, [r3, #20]
          break;
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          break;
 8001b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d801      	bhi.n	8001b9e <HAL_GPIO_Init+0x13a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_Init+0x13e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_GPIO_Init+0x14c>
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x152>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b1 	beq.w	8001d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_GPIO_Init+0x2c0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_GPIO_Init+0x2c4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_GPIO_Init+0x2c8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1e4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_GPIO_Init+0x2cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1e0>
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c50:	2300      	movs	r3, #0
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	492c      	ldr	r1, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4928      	ldr	r1, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	491e      	ldr	r1, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4918      	ldr	r1, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4914      	ldr	r1, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d021      	beq.n	8001d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e021      	b.n	8001d46 <HAL_GPIO_Init+0x2e2>
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae8e 	bne.w	8001a78 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af06      	add	r7, sp, #24
 8001e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0fd      	b.n	800200a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f008 fa4a 	bl	800a2bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 ff8e 	bl	8005d56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	687e      	ldr	r6, [r7, #4]
 8001e42:	466d      	mov	r5, sp
 8001e44:	f106 0410 	add.w	r4, r6, #16
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f003 ff58 	bl	8005d0a <USB_CoreInit>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0ce      	b.n	800200a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 ff89 	bl	8005d8a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e04c      	b.n	8001f18 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	3301      	adds	r3, #1
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	b298      	uxth	r0, r3
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	3336      	adds	r3, #54	; 0x36
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	333c      	adds	r3, #60	; 0x3c
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3340      	adds	r3, #64	; 0x40
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	3301      	adds	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3ad      	bcc.n	8001e7e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	e044      	b.n	8001fb2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d3b5      	bcc.n	8001f28 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	687e      	ldr	r6, [r7, #4]
 8001fc4:	466d      	mov	r5, sp
 8001fc6:	f106 0410 	add.w	r4, r6, #16
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	602b      	str	r3, [r5, #0]
 8001fd2:	1d33      	adds	r3, r6, #4
 8001fd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd6:	6838      	ldr	r0, [r7, #0]
 8001fd8:	f003 fee3 	bl	8005da2 <USB_DevInit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00d      	b.n	800200a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f006 fb96 	bl	8008734 <USB_DevDisconnect>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002012 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_PCD_Start+0x16>
 8002024:	2302      	movs	r3, #2
 8002026:	e016      	b.n	8002056 <HAL_PCD_Start+0x44>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fe78 	bl	8005d2a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800203a:	2101      	movs	r1, #1
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f008 fbb0 	bl	800a7a2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f006 fb6a 	bl	8008720 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b088      	sub	sp, #32
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f006 fb6c 	bl	8008748 <USB_ReadInterrupts>
 8002070:	4603      	mov	r3, r0
 8002072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207a:	d102      	bne.n	8002082 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 fb5f 	bl	8002740 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f006 fb5e 	bl	8008748 <USB_ReadInterrupts>
 800208c:	4603      	mov	r3, r0
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002096:	d112      	bne.n	80020be <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	b292      	uxth	r2, r2
 80020ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f008 f97e 	bl	800a3b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020b6:	2100      	movs	r1, #0
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f923 	bl	8002304 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f006 fb40 	bl	8008748 <USB_ReadInterrupts>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d2:	d10b      	bne.n	80020ec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020e6:	b292      	uxth	r2, r2
 80020e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f006 fb29 	bl	8008748 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002100:	d10b      	bne.n	800211a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002114:	b292      	uxth	r2, r2
 8002116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f006 fb12 	bl	8008748 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	d126      	bne.n	800217e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0204 	bic.w	r2, r2, #4
 8002142:	b292      	uxth	r2, r2
 8002144:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0208 	bic.w	r2, r2, #8
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f008 f95f 	bl	800a424 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800216e:	b29a      	uxth	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f006 fae0 	bl	8008748 <USB_ReadInterrupts>
 8002188:	4603      	mov	r3, r0
 800218a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002192:	f040 8082 	bne.w	800229a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	77fb      	strb	r3, [r7, #31]
 800219a:	e010      	b.n	80021be <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	7ffb      	ldrb	r3, [r7, #31]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	7ffb      	ldrb	r3, [r7, #31]
 80021aa:	8812      	ldrh	r2, [r2, #0]
 80021ac:	b292      	uxth	r2, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	3320      	adds	r3, #32
 80021b2:	443b      	add	r3, r7
 80021b4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	3301      	adds	r3, #1
 80021bc:	77fb      	strb	r3, [r7, #31]
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	2b07      	cmp	r3, #7
 80021c2:	d9eb      	bls.n	800219c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	b292      	uxth	r2, r2
 80021d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80021f4:	bf00      	nop
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f6      	beq.n	80021f6 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	b292      	uxth	r2, r2
 800221c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]
 8002224:	e00f      	b.n	8002246 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002226:	7ffb      	ldrb	r3, [r7, #31]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4611      	mov	r1, r2
 800222e:	7ffa      	ldrb	r2, [r7, #31]
 8002230:	0092      	lsls	r2, r2, #2
 8002232:	440a      	add	r2, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	3320      	adds	r3, #32
 8002238:	443b      	add	r3, r7
 800223a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800223e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002240:	7ffb      	ldrb	r3, [r7, #31]
 8002242:	3301      	adds	r3, #1
 8002244:	77fb      	strb	r3, [r7, #31]
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	2b07      	cmp	r3, #7
 800224a:	d9ec      	bls.n	8002226 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0208 	orr.w	r2, r2, #8
 800225e:	b292      	uxth	r2, r2
 8002260:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0204 	orr.w	r2, r2, #4
 800228e:	b292      	uxth	r2, r2
 8002290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f008 f8ab 	bl	800a3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f006 fa52 	bl	8008748 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ae:	d10e      	bne.n	80022ce <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022c2:	b292      	uxth	r2, r2
 80022c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f008 f864 	bl	800a396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f006 fa38 	bl	8008748 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022e2:	d10b      	bne.n	80022fc <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f6:	b292      	uxth	r2, r2
 80022f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80022fc:	bf00      	nop
 80022fe:	3720      	adds	r7, #32
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_PCD_SetAddress+0x1a>
 800231a:	2302      	movs	r3, #2
 800231c:	e013      	b.n	8002346 <HAL_PCD_SetAddress+0x42>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f006 f9df 	bl	80086fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	461a      	mov	r2, r3
 800235c:	4603      	mov	r3, r0
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	460b      	mov	r3, r1
 8002362:	803b      	strh	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0e      	bge.n	8002392 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	705a      	strb	r2, [r3, #1]
 8002390:	e00e      	b.n	80023b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023bc:	883a      	ldrh	r2, [r7, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	78ba      	ldrb	r2, [r7, #2]
 80023c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023da:	78bb      	ldrb	r3, [r7, #2]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d102      	bne.n	80023e6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_PCD_EP_Open+0xa6>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e00e      	b.n	8002412 <HAL_PCD_EP_Open+0xc4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68f9      	ldr	r1, [r7, #12]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 fcee 	bl	8005de4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002410:	7afb      	ldrb	r3, [r7, #11]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da0e      	bge.n	800244c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	705a      	strb	r2, [r3, #1]
 800244a:	e00e      	b.n	800246a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 0207 	and.w	r2, r3, #7
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_PCD_EP_Close+0x6a>
 8002480:	2302      	movs	r3, #2
 8002482:	e00e      	b.n	80024a2 <HAL_PCD_EP_Close+0x88>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f810 	bl	80064b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	460b      	mov	r3, r1
 80024b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4413      	add	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2200      	movs	r2, #0
 80024e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6979      	ldr	r1, [r7, #20]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 f9c2 	bl	8006890 <USB_EPStartXfer>
 800250c:	e005      	b.n	800251a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6979      	ldr	r1, [r7, #20]
 8002514:	4618      	mov	r0, r3
 8002516:	f004 f9bb 	bl	8006890 <USB_EPStartXfer>
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 0207 	and.w	r2, r3, #7
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	460b      	mov	r3, r1
 8002560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2200      	movs	r2, #0
 8002596:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2201      	movs	r2, #1
 800259c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d106      	bne.n	80025c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6979      	ldr	r1, [r7, #20]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 f968 	bl	8006890 <USB_EPStartXfer>
 80025c0:	e005      	b.n	80025ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 f961 	bl	8006890 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 0207 	and.w	r2, r3, #7
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d901      	bls.n	80025f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e04c      	b.n	8002690 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da0e      	bge.n	800261c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	705a      	strb	r2, [r3, #1]
 800261a:	e00c      	b.n	8002636 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_EP_SetStall+0x7e>
 8002652:	2302      	movs	r3, #2
 8002654:	e01c      	b.n	8002690 <HAL_PCD_EP_SetStall+0xb8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68f9      	ldr	r1, [r7, #12]
 8002664:	4618      	mov	r0, r3
 8002666:	f005 ff4b 	bl	8008500 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	2b00      	cmp	r3, #0
 8002672:	d108      	bne.n	8002686 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f006 f870 	bl	8008766 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 020f 	and.w	r2, r3, #15
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d901      	bls.n	80026b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e040      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	da0e      	bge.n	80026dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	705a      	strb	r2, [r3, #1]
 80026da:	e00e      	b.n	80026fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0207 	and.w	r2, r3, #7
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_PCD_EP_ClrStall+0x82>
 8002716:	2302      	movs	r3, #2
 8002718:	e00e      	b.n	8002738 <HAL_PCD_EP_ClrStall+0xa0>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f005 ff39 	bl	80085a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08e      	sub	sp, #56	; 0x38
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002748:	e2ec      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002752:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002760:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 8161 	bne.w	8002a2c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800276a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d152      	bne.n	800281a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	81fb      	strh	r3, [r7, #14]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29b      	uxth	r3, r3
 8002796:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3328      	adds	r3, #40	; 0x28
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	3302      	adds	r3, #2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	441a      	add	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027d8:	2100      	movs	r1, #0
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f007 fdc1 	bl	800a362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 829b 	beq.w	8002d24 <PCD_EP_ISR_Handler+0x5e4>
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f040 8296 	bne.w	8002d24 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002804:	b2da      	uxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	b292      	uxth	r2, r2
 800280c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002818:	e284      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800282a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800282c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002830:	2b00      	cmp	r3, #0
 8002832:	d034      	beq.n	800289e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	3306      	adds	r3, #6
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002872:	b29b      	uxth	r3, r3
 8002874:	f005 ffc7 	bl	8008806 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002884:	4013      	ands	r3, r2
 8002886:	823b      	strh	r3, [r7, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	8a3a      	ldrh	r2, [r7, #16]
 800288e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002892:	b292      	uxth	r2, r2
 8002894:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f007 fd36 	bl	800a308 <HAL_PCD_SetupStageCallback>
 800289c:	e242      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800289e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f280 823e 	bge.w	8002d24 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028b4:	4013      	ands	r3, r2
 80028b6:	83bb      	strh	r3, [r7, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	8bba      	ldrh	r2, [r7, #28]
 80028be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c2:	b292      	uxth	r2, r2
 80028c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	3306      	adds	r3, #6
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <PCD_EP_ISR_Handler+0x1ee>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	6959      	ldr	r1, [r3, #20]
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002912:	b29b      	uxth	r3, r3
 8002914:	f005 ff77 	bl	8008806 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	441a      	add	r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002926:	2100      	movs	r1, #0
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f007 fcff 	bl	800a32c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 81f2 	bne.w	8002d24 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4413      	add	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d112      	bne.n	800298e <PCD_EP_ISR_Handler+0x24e>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002972:	b29a      	uxth	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29a      	uxth	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e02f      	b.n	80029ee <PCD_EP_ISR_Handler+0x2ae>
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b3e      	cmp	r3, #62	; 0x3e
 8002994:	d813      	bhi.n	80029be <PCD_EP_ISR_Handler+0x27e>
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <PCD_EP_ISR_Handler+0x270>
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	3301      	adds	r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	801a      	strh	r2, [r3, #0]
 80029bc:	e017      	b.n	80029ee <PCD_EP_ISR_Handler+0x2ae>
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d102      	bne.n	80029d8 <PCD_EP_ISR_Handler+0x298>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	3b01      	subs	r3, #1
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	b29b      	uxth	r3, r3
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	b29b      	uxth	r3, r3
 80029e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	827b      	strh	r3, [r7, #18]
 8002a00:	8a7b      	ldrh	r3, [r7, #18]
 8002a02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a06:	827b      	strh	r3, [r7, #18]
 8002a08:	8a7b      	ldrh	r3, [r7, #18]
 8002a0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a0e:	827b      	strh	r3, [r7, #18]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	8a7b      	ldrh	r3, [r7, #18]
 8002a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	8013      	strh	r3, [r2, #0]
 8002a2a:	e17b      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f280 80ea 	bge.w	8002c1c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a5e:	4013      	ands	r3, r2
 8002a60:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a76:	b292      	uxth	r2, r2
 8002a78:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	7b1b      	ldrb	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d122      	bne.n	8002ade <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3306      	adds	r3, #6
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002ac2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8087 	beq.w	8002bd8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	6959      	ldr	r1, [r3, #20]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	88da      	ldrh	r2, [r3, #6]
 8002ad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ad8:	f005 fe95 	bl	8008806 <USB_ReadPMA>
 8002adc:	e07c      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	78db      	ldrb	r3, [r3, #3]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d108      	bne.n	8002af8 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ae6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f927 	bl	8002d40 <HAL_PCD_EP_DB_Receive>
 8002af2:	4603      	mov	r3, r0
 8002af4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002af6:	e06f      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	441a      	add	r2, r3
 8002b22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d021      	beq.n	8002b96 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3302      	adds	r3, #2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b7a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02a      	beq.n	8002bd8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	6959      	ldr	r1, [r3, #20]
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	891a      	ldrh	r2, [r3, #8]
 8002b8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b90:	f005 fe39 	bl	8008806 <USB_ReadPMA>
 8002b94:	e020      	b.n	8002bd8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3306      	adds	r3, #6
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bbe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	6959      	ldr	r1, [r3, #20]
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	895a      	ldrh	r2, [r3, #10]
 8002bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bd4:	f005 fe17 	bl	8008806 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bde:	441a      	add	r2, r3
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bea:	441a      	add	r2, r3
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <PCD_EP_ISR_Handler+0x4c2>
 8002bf8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d206      	bcs.n	8002c10 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f007 fb8f 	bl	800a32c <HAL_PCD_DataOutStageCallback>
 8002c0e:	e005      	b.n	8002c1c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 fe3a 	bl	8006890 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d07e      	beq.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	843b      	strh	r3, [r7, #32]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	441a      	add	r2, r3
 8002c64:	8c3b      	ldrh	r3, [r7, #32]
 8002c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	78db      	ldrb	r3, [r3, #3]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d00c      	beq.n	8002c94 <PCD_EP_ISR_Handler+0x554>
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	78db      	ldrb	r3, [r3, #3]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d146      	bne.n	8002d18 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d141      	bne.n	8002d18 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cbc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	8bfb      	ldrh	r3, [r7, #30]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d906      	bls.n	8002cd6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	8bfb      	ldrh	r3, [r7, #30]
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	619a      	str	r2, [r3, #24]
 8002cd4:	e002      	b.n	8002cdc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f007 fb39 	bl	800a362 <HAL_PCD_DataInStageCallback>
 8002cf0:	e018      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	8bfb      	ldrh	r3, [r7, #30]
 8002cf8:	441a      	add	r2, r3
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	8bfb      	ldrh	r3, [r7, #30]
 8002d04:	441a      	add	r2, r3
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fdbd 	bl	8006890 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d16:	e005      	b.n	8002d24 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f91b 	bl	8002f5a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f6ff ad0a 	blt.w	800274a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3738      	adds	r7, #56	; 0x38
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07e      	beq.n	8002e56 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d80:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	8b7b      	ldrh	r3, [r7, #26]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d306      	bcc.n	8002d9a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	8b7b      	ldrh	r3, [r7, #26]
 8002d92:	1ad2      	subs	r2, r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	619a      	str	r2, [r3, #24]
 8002d98:	e002      	b.n	8002da0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d123      	bne.n	8002df0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	833b      	strh	r3, [r7, #24]
 8002dc4:	8b3b      	ldrh	r3, [r7, #24]
 8002dc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dca:	833b      	strh	r3, [r7, #24]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	8b3b      	ldrh	r3, [r7, #24]
 8002ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01f      	beq.n	8002e3a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	82fb      	strh	r3, [r7, #22]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	441a      	add	r2, r3
 8002e24:	8afb      	ldrh	r3, [r7, #22]
 8002e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e3a:	8b7b      	ldrh	r3, [r7, #26]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8087 	beq.w	8002f50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	6959      	ldr	r1, [r3, #20]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	891a      	ldrh	r2, [r3, #8]
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
 8002e50:	f005 fcd9 	bl	8008806 <USB_ReadPMA>
 8002e54:	e07c      	b.n	8002f50 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	3306      	adds	r3, #6
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	8b7b      	ldrh	r3, [r7, #26]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d306      	bcc.n	8002e98 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	8b7b      	ldrh	r3, [r7, #26]
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	619a      	str	r2, [r3, #24]
 8002e96:	e002      	b.n	8002e9e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d123      	bne.n	8002eee <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	83fb      	strh	r3, [r7, #30]
 8002ec2:	8bfb      	ldrh	r3, [r7, #30]
 8002ec4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ec8:	83fb      	strh	r3, [r7, #30]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	441a      	add	r2, r3
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d11f      	bne.n	8002f38 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	83bb      	strh	r3, [r7, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	8bbb      	ldrh	r3, [r7, #28]
 8002f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f38:	8b7b      	ldrh	r3, [r7, #26]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6959      	ldr	r1, [r3, #20]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	895a      	ldrh	r2, [r3, #10]
 8002f4a:	8b7b      	ldrh	r3, [r7, #26]
 8002f4c:	f005 fc5b 	bl	8008806 <USB_ReadPMA>
    }
  }

  return count;
 8002f50:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b0a2      	sub	sp, #136	; 0x88
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	4613      	mov	r3, r2
 8002f66:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 81c7 	beq.w	8003302 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d907      	bls.n	8002fbc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fb4:	1ad2      	subs	r2, r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	e002      	b.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 80b9 	bne.w	800313e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d126      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	4413      	add	r3, r2
 8002fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	011a      	lsls	r2, r3, #4
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003006:	b29a      	uxth	r2, r3
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	801a      	strh	r2, [r3, #0]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29a      	uxth	r2, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e01a      	b.n	8003058 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d116      	bne.n	8003058 <HAL_PCD_EP_DB_Transmit+0xfe>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	633b      	str	r3, [r7, #48]	; 0x30
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	4413      	add	r3, r2
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	011a      	lsls	r2, r3, #4
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	4413      	add	r3, r2
 800304c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2200      	movs	r2, #0
 8003056:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	623b      	str	r3, [r7, #32]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	785b      	ldrb	r3, [r3, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d126      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	61bb      	str	r3, [r7, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	b29b      	uxth	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4413      	add	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	011a      	lsls	r2, r3, #4
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	4413      	add	r3, r2
 8003088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003098:	b29a      	uxth	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	801a      	strh	r2, [r3, #0]
 80030b2:	e017      	b.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	785b      	ldrb	r3, [r3, #1]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d113      	bne.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	4413      	add	r3, r2
 80030cc:	623b      	str	r3, [r7, #32]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	011a      	lsls	r2, r3, #4
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	4413      	add	r3, r2
 80030d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f007 f939 	bl	800a362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 82d4 	beq.w	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29b      	uxth	r3, r3
 800310e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	827b      	strh	r3, [r7, #18]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	8a7b      	ldrh	r3, [r7, #18]
 8003128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	b29b      	uxth	r3, r3
 800313a:	8013      	strh	r3, [r2, #0]
 800313c:	e2b2      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d021      	beq.n	800318c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	b29b      	uxth	r3, r3
 800318a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003192:	2b01      	cmp	r3, #1
 8003194:	f040 8286 	bne.w	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a0:	441a      	add	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031ae:	441a      	add	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d309      	bcc.n	80031d4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a1a      	ldr	r2, [r3, #32]
 80031ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031cc:	1ad2      	subs	r2, r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	621a      	str	r2, [r3, #32]
 80031d2:	e015      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80031dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031ea:	e009      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d155      	bne.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321c:	4413      	add	r3, r2
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	011a      	lsls	r2, r3, #4
 8003226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003228:	4413      	add	r3, r2
 800322a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	2b00      	cmp	r3, #0
 8003234:	d112      	bne.n	800325c <HAL_PCD_EP_DB_Transmit+0x302>
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003240:	b29a      	uxth	r2, r3
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	801a      	strh	r2, [r3, #0]
 8003246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	b29b      	uxth	r3, r3
 800324c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003254:	b29a      	uxth	r2, r3
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	e047      	b.n	80032ec <HAL_PCD_EP_DB_Transmit+0x392>
 800325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325e:	2b3e      	cmp	r3, #62	; 0x3e
 8003260:	d811      	bhi.n	8003286 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003264:	085b      	lsrs	r3, r3, #1
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
 8003268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003274:	3301      	adds	r3, #1
 8003276:	64bb      	str	r3, [r7, #72]	; 0x48
 8003278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327a:	b29b      	uxth	r3, r3
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	b29a      	uxth	r2, r3
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	e032      	b.n	80032ec <HAL_PCD_EP_DB_Transmit+0x392>
 8003286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	64bb      	str	r3, [r7, #72]	; 0x48
 800328c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_PCD_EP_DB_Transmit+0x342>
 8003296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003298:	3b01      	subs	r3, #1
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48
 800329c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329e:	b29b      	uxth	r3, r3
 80032a0:	029b      	lsls	r3, r3, #10
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	e01b      	b.n	80032ec <HAL_PCD_EP_DB_Transmit+0x392>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d117      	bne.n	80032ec <HAL_PCD_EP_DB_Transmit+0x392>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d0:	4413      	add	r3, r2
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	011a      	lsls	r2, r3, #4
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6959      	ldr	r1, [r3, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	891a      	ldrh	r2, [r3, #8]
 80032f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f005 fa3e 	bl	800877c <USB_WritePMA>
 8003300:	e1d0      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800330a:	b29b      	uxth	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	3306      	adds	r3, #6
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800332a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003336:	429a      	cmp	r2, r3
 8003338:	d307      	bcc.n	800334a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003342:	1ad2      	subs	r2, r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	619a      	str	r2, [r3, #24]
 8003348:	e002      	b.n	8003350 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f040 80c4 	bne.w	80034e2 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d126      	bne.n	80033b0 <HAL_PCD_EP_DB_Transmit+0x456>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003370:	b29b      	uxth	r3, r3
 8003372:	461a      	mov	r2, r3
 8003374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003376:	4413      	add	r3, r2
 8003378:	66fb      	str	r3, [r7, #108]	; 0x6c
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	011a      	lsls	r2, r3, #4
 8003380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003382:	4413      	add	r3, r2
 8003384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003388:	66bb      	str	r3, [r7, #104]	; 0x68
 800338a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003394:	b29a      	uxth	r2, r3
 8003396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	e01a      	b.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d116      	bne.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x48c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	677b      	str	r3, [r7, #116]	; 0x74
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	4413      	add	r3, r2
 80033ce:	677b      	str	r3, [r7, #116]	; 0x74
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	011a      	lsls	r2, r3, #4
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	4413      	add	r3, r2
 80033da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033de:	673b      	str	r3, [r7, #112]	; 0x70
 80033e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e2:	2200      	movs	r2, #0
 80033e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d12f      	bne.n	8003454 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800340c:	4413      	add	r3, r2
 800340e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	011a      	lsls	r2, r3, #4
 8003418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800341c:	4413      	add	r3, r2
 800341e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003432:	b29a      	uxth	r2, r3
 8003434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344a:	b29a      	uxth	r2, r3
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	e017      	b.n	8003484 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d113      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x52a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	4413      	add	r3, r2
 800346c:	67bb      	str	r3, [r7, #120]	; 0x78
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	011a      	lsls	r2, r3, #4
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	4413      	add	r3, r2
 8003478:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800347c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800347e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003480:	2200      	movs	r2, #0
 8003482:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f006 ff69 	bl	800a362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	f040 8104 	bne.w	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80034cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
 80034e0:	e0e0      	b.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d121      	bne.n	8003530 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800351c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	b29b      	uxth	r3, r3
 800352e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003536:	2b01      	cmp	r3, #1
 8003538:	f040 80b4 	bne.w	80036a4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003544:	441a      	add	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003552:	441a      	add	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	6a1a      	ldr	r2, [r3, #32]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d309      	bcc.n	8003578 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	621a      	str	r2, [r3, #32]
 8003576:	e015      	b.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003580:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800358e:	e009      	b.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	667b      	str	r3, [r7, #100]	; 0x64
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d155      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0x704>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c6:	4413      	add	r3, r2
 80035c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	011a      	lsls	r2, r3, #4
 80035d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d2:	4413      	add	r3, r2
 80035d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80035da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d112      	bne.n	8003606 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80035e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035fe:	b29a      	uxth	r2, r3
 8003600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	e044      	b.n	8003690 <HAL_PCD_EP_DB_Transmit+0x736>
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	2b3e      	cmp	r3, #62	; 0x3e
 800360a:	d811      	bhi.n	8003630 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	657b      	str	r3, [r7, #84]	; 0x54
 8003612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800361c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361e:	3301      	adds	r3, #1
 8003620:	657b      	str	r3, [r7, #84]	; 0x54
 8003622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003624:	b29b      	uxth	r3, r3
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	b29a      	uxth	r2, r3
 800362a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800362c:	801a      	strh	r2, [r3, #0]
 800362e:	e02f      	b.n	8003690 <HAL_PCD_EP_DB_Transmit+0x736>
 8003630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	657b      	str	r3, [r7, #84]	; 0x54
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	3b01      	subs	r3, #1
 8003644:	657b      	str	r3, [r7, #84]	; 0x54
 8003646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003648:	b29b      	uxth	r3, r3
 800364a:	029b      	lsls	r3, r3, #10
 800364c:	b29b      	uxth	r3, r3
 800364e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003656:	b29a      	uxth	r2, r3
 8003658:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e018      	b.n	8003690 <HAL_PCD_EP_DB_Transmit+0x736>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d114      	bne.n	8003690 <HAL_PCD_EP_DB_Transmit+0x736>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003674:	4413      	add	r3, r2
 8003676:	667b      	str	r3, [r7, #100]	; 0x64
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	011a      	lsls	r2, r3, #4
 800367e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003680:	4413      	add	r3, r2
 8003682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
 8003688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368a:	b29a      	uxth	r2, r3
 800368c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800368e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6959      	ldr	r1, [r3, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	895a      	ldrh	r2, [r3, #10]
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	b29b      	uxth	r3, r3
 80036a0:	f005 f86c 	bl	800877c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036be:	823b      	strh	r3, [r7, #16]
 80036c0:	8a3b      	ldrh	r3, [r7, #16]
 80036c2:	f083 0310 	eor.w	r3, r3, #16
 80036c6:	823b      	strh	r3, [r7, #16]
 80036c8:	8a3b      	ldrh	r3, [r7, #16]
 80036ca:	f083 0320 	eor.w	r3, r3, #32
 80036ce:	823b      	strh	r3, [r7, #16]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	8a3b      	ldrh	r3, [r7, #16]
 80036e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3788      	adds	r7, #136	; 0x88
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	817b      	strh	r3, [r7, #10]
 800370c:	4613      	mov	r3, r2
 800370e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e009      	b.n	8003748 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003734:	897a      	ldrh	r2, [r7, #10]
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d107      	bne.n	800375e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	b29a      	uxth	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	80da      	strh	r2, [r3, #6]
 800375c:	e00b      	b.n	8003776 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2201      	movs	r2, #1
 8003762:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b29a      	uxth	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	b29a      	uxth	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e272      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8087 	beq.w	80038b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037a4:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 030c 	and.w	r3, r3, #12
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d00c      	beq.n	80037ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037b0:	4b8f      	ldr	r3, [pc, #572]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d112      	bne.n	80037e2 <HAL_RCC_OscConfig+0x5e>
 80037bc:	4b8c      	ldr	r3, [pc, #560]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ca:	4b89      	ldr	r3, [pc, #548]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d06c      	beq.n	80038b0 <HAL_RCC_OscConfig+0x12c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d168      	bne.n	80038b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e24c      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x76>
 80037ec:	4b80      	ldr	r3, [pc, #512]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7f      	ldr	r2, [pc, #508]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e02e      	b.n	8003858 <HAL_RCC_OscConfig+0xd4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x98>
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7a      	ldr	r2, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b78      	ldr	r3, [pc, #480]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a77      	ldr	r2, [pc, #476]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xd4>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0xbc>
 8003826:	4b72      	ldr	r3, [pc, #456]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a71      	ldr	r2, [pc, #452]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b6f      	ldr	r3, [pc, #444]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6e      	ldr	r2, [pc, #440]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xd4>
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6a      	ldr	r2, [pc, #424]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd ffc4 	bl	80017ec <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd ffc0 	bl	80017ec <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e200      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b5d      	ldr	r3, [pc, #372]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xe4>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd ffb0 	bl	80017ec <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd ffac 	bl	80017ec <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1ec      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b53      	ldr	r3, [pc, #332]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x10c>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038be:	4b4c      	ldr	r3, [pc, #304]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x18c>
 80038d6:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x176>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c0      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4939      	ldr	r1, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391e:	f7fd ff65 	bl	80017ec <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003926:	f7fd ff61 	bl	80017ec <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a1      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4927      	ldr	r1, [pc, #156]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fd ff44 	bl	80017ec <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd ff40 	bl	80017ec <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e180      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d03a      	beq.n	8003a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fd ff24 	bl	80017ec <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd ff20 	bl	80017ec <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e160      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f000 faa6 	bl	8003f18 <RCC_Delay>
 80039cc:	e01c      	b.n	8003a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fd ff0a 	bl	80017ec <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039da:	e00f      	b.n	80039fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039dc:	f7fd ff06 	bl	80017ec <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d908      	bls.n	80039fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e146      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	42420000 	.word	0x42420000
 80039f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	4b92      	ldr	r3, [pc, #584]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e9      	bne.n	80039dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a6 	beq.w	8003b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	4a87      	ldr	r2, [pc, #540]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a30:	61d3      	str	r3, [r2, #28]
 8003a32:	4b85      	ldr	r3, [pc, #532]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a42:	4b82      	ldr	r3, [pc, #520]	; (8003c4c <HAL_RCC_OscConfig+0x4c8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d118      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4e:	4b7f      	ldr	r3, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0x4c8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7e      	ldr	r2, [pc, #504]	; (8003c4c <HAL_RCC_OscConfig+0x4c8>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5a:	f7fd fec7 	bl	80017ec <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fd fec3 	bl	80017ec <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b64      	cmp	r3, #100	; 0x64
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e103      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a74:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0x4c8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0f0      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d106      	bne.n	8003a96 <HAL_RCC_OscConfig+0x312>
 8003a88:	4b6f      	ldr	r3, [pc, #444]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4a6e      	ldr	r2, [pc, #440]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6213      	str	r3, [r2, #32]
 8003a94:	e02d      	b.n	8003af2 <HAL_RCC_OscConfig+0x36e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x334>
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a69      	ldr	r2, [pc, #420]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	4b67      	ldr	r3, [pc, #412]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a66      	ldr	r2, [pc, #408]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	f023 0304 	bic.w	r3, r3, #4
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	e01c      	b.n	8003af2 <HAL_RCC_OscConfig+0x36e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b05      	cmp	r3, #5
 8003abe:	d10c      	bne.n	8003ada <HAL_RCC_OscConfig+0x356>
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a60      	ldr	r2, [pc, #384]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	4a5d      	ldr	r2, [pc, #372]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6213      	str	r3, [r2, #32]
 8003ad8:	e00b      	b.n	8003af2 <HAL_RCC_OscConfig+0x36e>
 8003ada:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	6213      	str	r3, [r2, #32]
 8003ae6:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	4a57      	ldr	r2, [pc, #348]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	f023 0304 	bic.w	r3, r3, #4
 8003af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d015      	beq.n	8003b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afa:	f7fd fe77 	bl	80017ec <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fd fe73 	bl	80017ec <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0b1      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ee      	beq.n	8003b02 <HAL_RCC_OscConfig+0x37e>
 8003b24:	e014      	b.n	8003b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fd fe61 	bl	80017ec <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2c:	e00a      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2e:	f7fd fe5d 	bl	80017ec <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e09b      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	4b40      	ldr	r3, [pc, #256]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ee      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b56:	4b3c      	ldr	r3, [pc, #240]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a3b      	ldr	r2, [pc, #236]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8087 	beq.w	8003c7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b6c:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d061      	beq.n	8003c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d146      	bne.n	8003c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b80:	4b33      	ldr	r3, [pc, #204]	; (8003c50 <HAL_RCC_OscConfig+0x4cc>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fd fe31 	bl	80017ec <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fd fe2d 	bl	80017ec <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e06d      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba0:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d108      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4921      	ldr	r1, [pc, #132]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bc8:	4b1f      	ldr	r3, [pc, #124]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a19      	ldr	r1, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	491b      	ldr	r1, [pc, #108]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fd fe01 	bl	80017ec <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fd fdfd 	bl	80017ec <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e03d      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x46a>
 8003c0c:	e035      	b.n	8003c7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x4cc>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd fdea 	bl	80017ec <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fd fde6 	bl	80017ec <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e026      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x498>
 8003c3a:	e01e      	b.n	8003c7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e019      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x500>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000

08003c88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0d0      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d910      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0207 	bic.w	r2, r3, #7
 8003cb2:	4965      	ldr	r1, [pc, #404]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d040      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b41      	ldr	r3, [pc, #260]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e073      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d56:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d66:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f023 0203 	bic.w	r2, r3, #3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4936      	ldr	r1, [pc, #216]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d78:	f7fd fd38 	bl	80017ec <HAL_GetTick>
 8003d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d80:	f7fd fd34 	bl	80017ec <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e053      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 020c 	and.w	r2, r3, #12
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1eb      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d210      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	4922      	ldr	r1, [pc, #136]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 f821 	bl	8003e5c <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	; (8003e50 <HAL_RCC_ClockConfig+0x1c8>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <HAL_RCC_ClockConfig+0x1cc>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_ClockConfig+0x1d0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fc96 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40022000 	.word	0x40022000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	0800b1f8 	.word	0x0800b1f8
 8003e54:	20000008 	.word	0x20000008
 8003e58:	2000000c 	.word	0x2000000c

08003e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e5c:	b490      	push	{r4, r7}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e64:	1d3c      	adds	r4, r7, #4
 8003e66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e6c:	f240 2301 	movw	r3, #513	; 0x201
 8003e70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	2300      	movs	r3, #0
 8003e78:	61bb      	str	r3, [r7, #24]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e86:	4b21      	ldr	r3, [pc, #132]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d002      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x40>
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x46>
 8003e9a:	e02b      	b.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e9c:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e9e:	623b      	str	r3, [r7, #32]
      break;
 8003ea0:	e02b      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	0c9b      	lsrs	r3, r3, #18
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3328      	adds	r3, #40	; 0x28
 8003eac:	443b      	add	r3, r7
 8003eae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	0c5b      	lsrs	r3, r3, #17
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	3328      	adds	r3, #40	; 0x28
 8003eca:	443b      	add	r3, r7
 8003ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ed6:	fb03 f202 	mul.w	r2, r3, r2
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	e004      	b.n	8003eee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee8:	fb02 f303 	mul.w	r3, r2, r3
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	623b      	str	r3, [r7, #32]
      break;
 8003ef2:	e002      	b.n	8003efa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ef6:	623b      	str	r3, [r7, #32]
      break;
 8003ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003efa:	6a3b      	ldr	r3, [r7, #32]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3728      	adds	r7, #40	; 0x28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc90      	pop	{r4, r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	0800b1a0 	.word	0x0800b1a0
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	003d0900 	.word	0x003d0900

08003f18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <RCC_Delay+0x34>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <RCC_Delay+0x38>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a5b      	lsrs	r3, r3, #9
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f34:	bf00      	nop
  }
  while (Delay --);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	60fa      	str	r2, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f9      	bne.n	8003f34 <RCC_Delay+0x1c>
}
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	10624dd3 	.word	0x10624dd3

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d07d      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f80:	4b4c      	ldr	r3, [pc, #304]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4a4b      	ldr	r2, [pc, #300]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b46      	ldr	r3, [pc, #280]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d118      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa8:	4b43      	ldr	r3, [pc, #268]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a42      	ldr	r2, [pc, #264]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fc1a 	bl	80017ec <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fba:	e008      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fd fc16 	bl	80017ec <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e06d      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fce:	4b3a      	ldr	r3, [pc, #232]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fda:	4b36      	ldr	r3, [pc, #216]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d02e      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d027      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004000:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800400e:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fd fbe5 	bl	80017ec <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	e00a      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004026:	f7fd fbe1 	bl	80017ec <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e036      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0ee      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004048:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4917      	ldr	r1, [pc, #92]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	4313      	orrs	r3, r2
 8004058:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	490b      	ldr	r1, [pc, #44]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	4904      	ldr	r1, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000
 80040b8:	40007000 	.word	0x40007000
 80040bc:	42420440 	.word	0x42420440

080040c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e076      	b.n	80041c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e2:	d009      	beq.n	80040f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	61da      	str	r2, [r3, #28]
 80040ea:	e005      	b.n	80040f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fd f8b8 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	ea42 0103 	orr.w	r1, r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	0c1a      	lsrs	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f002 0204 	and.w	r2, r2, #4
 800419e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b088      	sub	sp, #32
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	603b      	str	r3, [r7, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_SPI_Transmit+0x22>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e126      	b.n	8004438 <HAL_SPI_Transmit+0x270>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041f2:	f7fd fafb 	bl	80017ec <HAL_GetTick>
 80041f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d002      	beq.n	800420e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800420c:	e10b      	b.n	8004426 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_SPI_Transmit+0x52>
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800421e:	e102      	b.n	8004426 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2203      	movs	r2, #3
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	88fa      	ldrh	r2, [r7, #6]
 800423e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004266:	d10f      	bne.n	8004288 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004276:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004286:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d007      	beq.n	80042a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d14b      	bne.n	8004348 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Transmit+0xf6>
 80042b8:	8afb      	ldrh	r3, [r7, #22]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d13e      	bne.n	800433c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	881a      	ldrh	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	1c9a      	adds	r2, r3, #2
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042e2:	e02b      	b.n	800433c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d112      	bne.n	8004318 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	881a      	ldrh	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	1c9a      	adds	r2, r3, #2
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	86da      	strh	r2, [r3, #54]	; 0x36
 8004316:	e011      	b.n	800433c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004318:	f7fd fa68 	bl	80017ec <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d803      	bhi.n	8004330 <HAL_SPI_Transmit+0x168>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d102      	bne.n	8004336 <HAL_SPI_Transmit+0x16e>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	77fb      	strb	r3, [r7, #31]
          goto error;
 800433a:	e074      	b.n	8004426 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ce      	bne.n	80042e4 <HAL_SPI_Transmit+0x11c>
 8004346:	e04c      	b.n	80043e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_SPI_Transmit+0x18e>
 8004350:	8afb      	ldrh	r3, [r7, #22]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d140      	bne.n	80043d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800437c:	e02c      	b.n	80043d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d113      	bne.n	80043b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80043b2:	e011      	b.n	80043d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043b4:	f7fd fa1a 	bl	80017ec <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d803      	bhi.n	80043cc <HAL_SPI_Transmit+0x204>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d102      	bne.n	80043d2 <HAL_SPI_Transmit+0x20a>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043d6:	e026      	b.n	8004426 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1cd      	bne.n	800437e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fbc4 	bl	8004b74 <SPI_EndRxTxTransaction>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	e000      	b.n	8004426 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004424:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004436:	7ffb      	ldrb	r3, [r7, #31]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445c:	d112      	bne.n	8004484 <HAL_SPI_Receive+0x44>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10e      	bne.n	8004484 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2204      	movs	r2, #4
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f8f1 	bl	8004662 <HAL_SPI_TransmitReceive>
 8004480:	4603      	mov	r3, r0
 8004482:	e0ea      	b.n	800465a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_SPI_Receive+0x52>
 800448e:	2302      	movs	r3, #2
 8004490:	e0e3      	b.n	800465a <HAL_SPI_Receive+0x21a>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800449a:	f7fd f9a7 	bl	80017ec <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
 80044ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044b0:	e0ca      	b.n	8004648 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Receive+0x7e>
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044c2:	e0c1      	b.n	8004648 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2204      	movs	r2, #4
 80044c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	88fa      	ldrh	r2, [r7, #6]
 80044dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800450a:	d10f      	bne.n	800452c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800451a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800452a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d007      	beq.n	800454a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004548:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d162      	bne.n	8004618 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004552:	e02e      	b.n	80045b2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d115      	bne.n	800458e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f103 020c 	add.w	r2, r3, #12
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458c:	e011      	b.n	80045b2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458e:	f7fd f92d 	bl	80017ec <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_Receive+0x166>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_Receive+0x16c>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045b0:	e04a      	b.n	8004648 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1cb      	bne.n	8004554 <HAL_SPI_Receive+0x114>
 80045bc:	e031      	b.n	8004622 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d113      	bne.n	80045f4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	b292      	uxth	r2, r2
 80045d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	1c9a      	adds	r2, r3, #2
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045f2:	e011      	b.n	8004618 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045f4:	f7fd f8fa 	bl	80017ec <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d803      	bhi.n	800460c <HAL_SPI_Receive+0x1cc>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d102      	bne.n	8004612 <HAL_SPI_Receive+0x1d2>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004616:	e017      	b.n	8004648 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1cd      	bne.n	80045be <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 fa52 	bl	8004ad0 <SPI_EndRxTransaction>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	75fb      	strb	r3, [r7, #23]
 8004644:	e000      	b.n	8004648 <HAL_SPI_Receive+0x208>
  }

error :
 8004646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08c      	sub	sp, #48	; 0x30
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x26>
 8004684:	2302      	movs	r3, #2
 8004686:	e18a      	b.n	800499e <HAL_SPI_TransmitReceive+0x33c>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004690:	f7fd f8ac 	bl	80017ec <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00f      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b8:	d107      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_SPI_TransmitReceive+0x68>
 80046c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d003      	beq.n	80046d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046d0:	e15b      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x82>
 80046de:	887b      	ldrh	r3, [r7, #2]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d103      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046ea:	e14e      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d003      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2205      	movs	r2, #5
 80046fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	887a      	ldrh	r2, [r7, #2]
 8004710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	887a      	ldrh	r2, [r7, #2]
 8004716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d007      	beq.n	8004754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d178      	bne.n	8004850 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_SPI_TransmitReceive+0x10a>
 8004766:	8b7b      	ldrh	r3, [r7, #26]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d166      	bne.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004790:	e053      	b.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d11b      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d016      	beq.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d113      	bne.n	80047d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d119      	bne.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800481a:	f7fc ffe7 	bl	80017ec <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004826:	429a      	cmp	r2, r3
 8004828:	d807      	bhi.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d003      	beq.n	800483a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004838:	e0a7      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1a6      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1a1      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x130>
 800484e:	e07c      	b.n	800494a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_TransmitReceive+0x1fc>
 8004858:	8b7b      	ldrh	r3, [r7, #26]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d16b      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004884:	e057      	b.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d11c      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d017      	beq.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d114      	bne.n	80048ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	330c      	adds	r3, #12
 80048ae:	7812      	ldrb	r2, [r2, #0]
 80048b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d119      	bne.n	8004910 <HAL_SPI_TransmitReceive+0x2ae>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800490c:	2301      	movs	r3, #1
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004910:	f7fc ff6c 	bl	80017ec <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800491c:	429a      	cmp	r2, r3
 800491e:	d803      	bhi.n	8004928 <HAL_SPI_TransmitReceive+0x2c6>
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d102      	bne.n	800492e <HAL_SPI_TransmitReceive+0x2cc>
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004934:	e029      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1a2      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x224>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d19d      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800494a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f910 	bl	8004b74 <SPI_EndRxTxTransaction>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004966:	e010      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e000      	b.n	800498a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800499a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3730      	adds	r7, #48	; 0x30
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b4:	b2db      	uxtb	r3, r3
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	4613      	mov	r3, r2
 80049ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049d0:	f7fc ff0c 	bl	80017ec <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049e0:	f7fc ff04 	bl	80017ec <HAL_GetTick>
 80049e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	015b      	lsls	r3, r3, #5
 80049ec:	0d1b      	lsrs	r3, r3, #20
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049f6:	e054      	b.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d050      	beq.n	8004aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a00:	f7fc fef4 	bl	80017ec <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d902      	bls.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d13d      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d111      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	d004      	beq.n	8004a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a42:	d107      	bne.n	8004a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5c:	d10f      	bne.n	8004a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e017      	b.n	8004ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	bf0c      	ite	eq
 8004ab2:	2301      	moveq	r3, #1
 8004ab4:	2300      	movne	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	79fb      	ldrb	r3, [r7, #7]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d19b      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	20000008 	.word	0x20000008

08004ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae4:	d111      	bne.n	8004b0a <SPI_EndRxTransaction+0x3a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aee:	d004      	beq.n	8004afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af8:	d107      	bne.n	8004b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b08:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d117      	bne.n	8004b44 <SPI_EndRxTransaction+0x74>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1c:	d112      	bne.n	8004b44 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2101      	movs	r1, #1
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff ff49 	bl	80049c0 <SPI_WaitFlagStateUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01a      	beq.n	8004b6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e013      	b.n	8004b6c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2180      	movs	r1, #128	; 0x80
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff ff36 	bl	80049c0 <SPI_WaitFlagStateUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e000      	b.n	8004b6c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	2180      	movs	r1, #128	; 0x80
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff ff18 	bl	80049c0 <SPI_WaitFlagStateUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f043 0220 	orr.w	r2, r3, #32
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e000      	b.n	8004ba8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fba0 	bl	800131c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 fd26 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e041      	b.n	8004ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f839 	bl	8004cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f000 fcd7 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x24>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e022      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d109      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x3e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_PWM_Start+0x58>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e05e      	b.n	8004e30 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x92>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fec4 	bl	8005b40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <HAL_TIM_PWM_Start+0x138>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_TIM_PWM_Start+0x138>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_TIM_PWM_Start+0xfa>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de4:	d009      	beq.n	8004dfa <HAL_TIM_PWM_Start+0xfa>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a14      	ldr	r2, [pc, #80]	; (8004e3c <HAL_TIM_PWM_Start+0x13c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_TIM_PWM_Start+0xfa>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <HAL_TIM_PWM_Start+0x140>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d111      	bne.n	8004e1e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2b06      	cmp	r3, #6
 8004e0a:	d010      	beq.n	8004e2e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1c:	e007      	b.n	8004e2e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800

08004e44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e093      	b.n	8004f80 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fc fa87 	bl	8001380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e88:	f023 0307 	bic.w	r3, r3, #7
 8004e8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3304      	adds	r3, #4
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f000 fbd1 	bl	8005640 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ee4:	f023 030c 	bic.w	r3, r3, #12
 8004ee8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	4313      	orrs	r3, r2
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	011a      	lsls	r2, r3, #4
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	4313      	orrs	r3, r2
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d110      	bne.n	8004fda <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d102      	bne.n	8004fc4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fbe:	7b7b      	ldrb	r3, [r7, #13]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e089      	b.n	80050dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd8:	e031      	b.n	800503e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d110      	bne.n	8005002 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d102      	bne.n	8004fec <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fe6:	7b3b      	ldrb	r3, [r7, #12]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e075      	b.n	80050dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005000:	e01d      	b.n	800503e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d108      	bne.n	800501a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005008:	7bbb      	ldrb	r3, [r7, #14]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800500e:	7b7b      	ldrb	r3, [r7, #13]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005014:	7b3b      	ldrb	r3, [r7, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e05e      	b.n	80050dc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2202      	movs	r2, #2
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d010      	beq.n	800506c <HAL_TIM_Encoder_Start_IT+0xe4>
 800504a:	e01f      	b.n	800508c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fd73 	bl	8005b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0202 	orr.w	r2, r2, #2
 8005068:	60da      	str	r2, [r3, #12]
      break;
 800506a:	e02e      	b.n	80050ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	2104      	movs	r1, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd63 	bl	8005b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0204 	orr.w	r2, r2, #4
 8005088:	60da      	str	r2, [r3, #12]
      break;
 800508a:	e01e      	b.n	80050ca <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fd53 	bl	8005b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	2104      	movs	r1, #4
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fd4c 	bl	8005b40 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0202 	orr.w	r2, r2, #2
 80050b6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0204 	orr.w	r2, r2, #4
 80050c6:	60da      	str	r2, [r3, #12]
      break;
 80050c8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0202 	mvn.w	r2, #2
 8005110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fb f810 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa6b 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa71 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0204 	mvn.w	r2, #4
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fa ffe6 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fa41 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fa47 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fa ffbc 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa17 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fa1d 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b10      	cmp	r3, #16
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0210 	mvn.w	r2, #16
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2208      	movs	r2, #8
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fa ff92 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f9ed 	bl	800560a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f9f3 	bl	800561c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0201 	mvn.w	r2, #1
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9c8 	bl	80055f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b80      	cmp	r3, #128	; 0x80
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b80      	cmp	r3, #128	; 0x80
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fd32 	bl	8005cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f9b7 	bl	800562e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b20      	cmp	r3, #32
 80052cc:	d10e      	bne.n	80052ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d107      	bne.n	80052ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0220 	mvn.w	r2, #32
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fcfd 	bl	8005ce6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800530a:	2302      	movs	r3, #2
 800530c:	e0ac      	b.n	8005468 <HAL_TIM_PWM_ConfigChannel+0x174>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	f200 809f 	bhi.w	800545c <HAL_TIM_PWM_ConfigChannel+0x168>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005359 	.word	0x08005359
 8005328:	0800545d 	.word	0x0800545d
 800532c:	0800545d 	.word	0x0800545d
 8005330:	0800545d 	.word	0x0800545d
 8005334:	08005399 	.word	0x08005399
 8005338:	0800545d 	.word	0x0800545d
 800533c:	0800545d 	.word	0x0800545d
 8005340:	0800545d 	.word	0x0800545d
 8005344:	080053db 	.word	0x080053db
 8005348:	0800545d 	.word	0x0800545d
 800534c:	0800545d 	.word	0x0800545d
 8005350:	0800545d 	.word	0x0800545d
 8005354:	0800541b 	.word	0x0800541b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f9d0 	bl	8005704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	619a      	str	r2, [r3, #24]
      break;
 8005396:	e062      	b.n	800545e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa16 	bl	80057d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]
      break;
 80053d8:	e041      	b.n	800545e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fa5f 	bl	80058a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0208 	orr.w	r2, r2, #8
 80053f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0204 	bic.w	r2, r2, #4
 8005404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69d9      	ldr	r1, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	61da      	str	r2, [r3, #28]
      break;
 8005418:	e021      	b.n	800545e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 faa9 	bl	8005978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	021a      	lsls	r2, r3, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	61da      	str	r2, [r3, #28]
      break;
 800545a:	e000      	b.n	800545e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800545c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIM_ConfigClockSource+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e0b3      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x180>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c0:	d03e      	beq.n	8005540 <HAL_TIM_ConfigClockSource+0xd0>
 80054c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c6:	f200 8087 	bhi.w	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ce:	f000 8085 	beq.w	80055dc <HAL_TIM_ConfigClockSource+0x16c>
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d87f      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054d8:	2b70      	cmp	r3, #112	; 0x70
 80054da:	d01a      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0xa2>
 80054dc:	2b70      	cmp	r3, #112	; 0x70
 80054de:	d87b      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054e0:	2b60      	cmp	r3, #96	; 0x60
 80054e2:	d050      	beq.n	8005586 <HAL_TIM_ConfigClockSource+0x116>
 80054e4:	2b60      	cmp	r3, #96	; 0x60
 80054e6:	d877      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054e8:	2b50      	cmp	r3, #80	; 0x50
 80054ea:	d03c      	beq.n	8005566 <HAL_TIM_ConfigClockSource+0xf6>
 80054ec:	2b50      	cmp	r3, #80	; 0x50
 80054ee:	d873      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d058      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0x136>
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d86f      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 80054f8:	2b30      	cmp	r3, #48	; 0x30
 80054fa:	d064      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x156>
 80054fc:	2b30      	cmp	r3, #48	; 0x30
 80054fe:	d86b      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 8005500:	2b20      	cmp	r3, #32
 8005502:	d060      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x156>
 8005504:	2b20      	cmp	r3, #32
 8005506:	d867      	bhi.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d05c      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x156>
 800550c:	2b10      	cmp	r3, #16
 800550e:	d05a      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005510:	e062      	b.n	80055d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6899      	ldr	r1, [r3, #8]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f000 faee 	bl	8005b02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005534:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	609a      	str	r2, [r3, #8]
      break;
 800553e:	e04e      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6899      	ldr	r1, [r3, #8]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f000 fad7 	bl	8005b02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005562:	609a      	str	r2, [r3, #8]
      break;
 8005564:	e03b      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	6859      	ldr	r1, [r3, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	461a      	mov	r2, r3
 8005574:	f000 fa4e 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2150      	movs	r1, #80	; 0x50
 800557e:	4618      	mov	r0, r3
 8005580:	f000 faa5 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 8005584:	e02b      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6859      	ldr	r1, [r3, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	f000 fa6c 	bl	8005a70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2160      	movs	r1, #96	; 0x60
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fa95 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 80055a4:	e01b      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	461a      	mov	r2, r3
 80055b4:	f000 fa2e 	bl	8005a14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2140      	movs	r1, #64	; 0x40
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fa85 	bl	8005ace <TIM_ITRx_SetConfig>
      break;
 80055c4:	e00b      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f000 fa7c 	bl	8005ace <TIM_ITRx_SetConfig>
        break;
 80055d6:	e002      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055d8:	bf00      	nop
 80055da:	e000      	b.n	80055de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a29      	ldr	r2, [pc, #164]	; (80056f8 <TIM_Base_SetConfig+0xb8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a26      	ldr	r2, [pc, #152]	; (80056fc <TIM_Base_SetConfig+0xbc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x30>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a25      	ldr	r2, [pc, #148]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a1c      	ldr	r2, [pc, #112]	; (80056f8 <TIM_Base_SetConfig+0xb8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00b      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d007      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a19      	ldr	r2, [pc, #100]	; (80056fc <TIM_Base_SetConfig+0xbc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d003      	beq.n	80056a2 <TIM_Base_SetConfig+0x62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <TIM_Base_SetConfig+0xc0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a07      	ldr	r2, [pc, #28]	; (80056f8 <TIM_Base_SetConfig+0xb8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40012c00 	.word	0x40012c00
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800

08005704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0303 	bic.w	r3, r3, #3
 800573a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f023 0302 	bic.w	r3, r3, #2
 800574c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <TIM_OC1_SetConfig+0xc8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d10c      	bne.n	800577a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0308 	bic.w	r3, r3, #8
 8005766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 0304 	bic.w	r3, r3, #4
 8005778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <TIM_OC1_SetConfig+0xc8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d111      	bne.n	80057a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bc80      	pop	{r7}
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40012c00 	.word	0x40012c00

080057d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0210 	bic.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0320 	bic.w	r3, r3, #32
 800581a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <TIM_OC2_SetConfig+0xd0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d10d      	bne.n	800584c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800584a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <TIM_OC2_SetConfig+0xd0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	bc80      	pop	{r7}
 800589e:	4770      	bx	lr
 80058a0:	40012c00 	.word	0x40012c00

080058a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <TIM_OC3_SetConfig+0xd0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10d      	bne.n	800591e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800591c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <TIM_OC3_SetConfig+0xd0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d113      	bne.n	800594e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00

08005978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <TIM_OC4_SetConfig+0x98>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d109      	bne.n	80059ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	621a      	str	r2, [r3, #32]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00

08005a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 030a 	bic.w	r3, r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	621a      	str	r2, [r3, #32]
}
 8005a66:	bf00      	nop
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f023 0210 	bic.w	r2, r3, #16
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	031b      	lsls	r3, r3, #12
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	621a      	str	r2, [r3, #32]
}
 8005ac4:	bf00      	nop
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f043 0307 	orr.w	r3, r3, #7
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	609a      	str	r2, [r3, #8]
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr

08005b02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	021a      	lsls	r2, r3, #8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	609a      	str	r2, [r3, #8]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1a      	ldr	r2, [r3, #32]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a1a      	ldr	r2, [r3, #32]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e046      	b.n	8005c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00e      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bec:	d009      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a10      	ldr	r2, [pc, #64]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d10c      	bne.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800

08005c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e03d      	b.n	8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	f107 0014 	add.w	r0, r7, #20
 8005d18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	b004      	add	sp, #16
 8005d28:	4770      	bx	lr

08005d2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d3a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d3e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d5e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	4013      	ands	r3, r2
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005da2:	b084      	sub	sp, #16
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	f107 0014 	add.w	r0, r7, #20
 8005db0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	b004      	add	sp, #16
 8005de0:	4770      	bx	lr
	...

08005de4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b09b      	sub	sp, #108	; 0x6c
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	78db      	ldrb	r3, [r3, #3]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d81f      	bhi.n	8005e56 <USB_ActivateEndpoint+0x72>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USB_ActivateEndpoint+0x38>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e2d 	.word	0x08005e2d
 8005e20:	08005e49 	.word	0x08005e49
 8005e24:	08005e5f 	.word	0x08005e5f
 8005e28:	08005e3b 	.word	0x08005e3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e38:	e012      	b.n	8005e60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e46:	e00b      	b.n	8005e60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e50:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e54:	e004      	b.n	8005e60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005e5c:	e000      	b.n	8005e60 <USB_ActivateEndpoint+0x7c>
      break;
 8005e5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	7b1b      	ldrb	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8149 	bne.w	8006164 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8084 	beq.w	8005fe4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	011a      	lsls	r2, r3, #4
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	88db      	ldrh	r3, [r3, #6]
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	81fb      	strh	r3, [r7, #14]
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <USB_ActivateEndpoint+0x17c>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	81bb      	strh	r3, [r7, #12]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	89bb      	ldrh	r3, [r7, #12]
 8005f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	78db      	ldrb	r3, [r3, #3]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d020      	beq.n	8005faa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f7e:	813b      	strh	r3, [r7, #8]
 8005f80:	893b      	ldrh	r3, [r7, #8]
 8005f82:	f083 0320 	eor.w	r3, r3, #32
 8005f86:	813b      	strh	r3, [r7, #8]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	893b      	ldrh	r3, [r7, #8]
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]
 8005fa8:	e27f      	b.n	80064aa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	817b      	strh	r3, [r7, #10]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	897b      	ldrh	r3, [r7, #10]
 8005fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	8013      	strh	r3, [r2, #0]
 8005fe2:	e262      	b.n	80064aa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	4413      	add	r3, r2
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	011a      	lsls	r2, r3, #4
 8005ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006000:	4413      	add	r3, r2
 8006002:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	88db      	ldrh	r3, [r3, #6]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	b29b      	uxth	r3, r3
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	4413      	add	r3, r2
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	011a      	lsls	r2, r3, #4
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	4413      	add	r3, r2
 8006036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d112      	bne.n	800606a <USB_ActivateEndpoint+0x286>
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800604e:	b29a      	uxth	r2, r3
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e02f      	b.n	80060ca <USB_ActivateEndpoint+0x2e6>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b3e      	cmp	r3, #62	; 0x3e
 8006070:	d813      	bhi.n	800609a <USB_ActivateEndpoint+0x2b6>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	663b      	str	r3, [r7, #96]	; 0x60
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <USB_ActivateEndpoint+0x2a8>
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	3301      	adds	r3, #1
 800608a:	663b      	str	r3, [r7, #96]	; 0x60
 800608c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29a      	uxth	r2, r3
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	801a      	strh	r2, [r3, #0]
 8006098:	e017      	b.n	80060ca <USB_ActivateEndpoint+0x2e6>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	095b      	lsrs	r3, r3, #5
 80060a0:	663b      	str	r3, [r7, #96]	; 0x60
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 031f 	and.w	r3, r3, #31
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <USB_ActivateEndpoint+0x2d0>
 80060ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b0:	3b01      	subs	r3, #1
 80060b2:	663b      	str	r3, [r7, #96]	; 0x60
 80060b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	83fb      	strh	r3, [r7, #30]
 80060d8:	8bfb      	ldrh	r3, [r7, #30]
 80060da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01b      	beq.n	800611a <USB_ActivateEndpoint+0x336>
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	83bb      	strh	r3, [r7, #28]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	441a      	add	r2, r3
 8006104:	8bbb      	ldrh	r3, [r7, #28]
 8006106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800610a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006116:	b29b      	uxth	r3, r3
 8006118:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	837b      	strh	r3, [r7, #26]
 8006132:	8b7b      	ldrh	r3, [r7, #26]
 8006134:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006138:	837b      	strh	r3, [r7, #26]
 800613a:	8b7b      	ldrh	r3, [r7, #26]
 800613c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006140:	837b      	strh	r3, [r7, #26]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	8b7b      	ldrh	r3, [r7, #26]
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]
 8006162:	e1a2      	b.n	80064aa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006194:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b0:	4413      	add	r3, r2
 80061b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	011a      	lsls	r2, r3, #4
 80061ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c2:	657b      	str	r3, [r7, #84]	; 0x54
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	891b      	ldrh	r3, [r3, #8]
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	653b      	str	r3, [r7, #80]	; 0x50
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	4413      	add	r3, r2
 80061e6:	653b      	str	r3, [r7, #80]	; 0x50
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	011a      	lsls	r2, r3, #4
 80061ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	895b      	ldrh	r3, [r3, #10]
 80061fc:	085b      	lsrs	r3, r3, #1
 80061fe:	b29b      	uxth	r3, r3
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006206:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f040 8091 	bne.w	8006334 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006220:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01b      	beq.n	8006262 <USB_ActivateEndpoint+0x47e>
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800623c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006240:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	441a      	add	r2, r3
 800624c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800624e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800625a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006270:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01b      	beq.n	80062b2 <USB_ActivateEndpoint+0x4ce>
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006290:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006310:	867b      	strh	r3, [r7, #50]	; 0x32
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800631e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	b29b      	uxth	r3, r3
 8006330:	8013      	strh	r3, [r2, #0]
 8006332:	e0ba      	b.n	80064aa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006344:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01d      	beq.n	800638c <USB_ActivateEndpoint+0x5a8>
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	441a      	add	r2, r3
 8006374:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800639c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01d      	beq.n	80063e4 <USB_ActivateEndpoint+0x600>
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	78db      	ldrb	r3, [r3, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d024      	beq.n	8006436 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006402:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006406:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800640a:	f083 0320 	eor.w	r3, r3, #32
 800640e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e01d      	b.n	8006472 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	b29b      	uxth	r3, r3
 8006444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800644c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	441a      	add	r2, r3
 800645a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006488:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80064aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	376c      	adds	r7, #108	; 0x6c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b08d      	sub	sp, #52	; 0x34
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	7b1b      	ldrb	r3, [r3, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 808e 	bne.w	80065e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	785b      	ldrb	r3, [r3, #1]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d044      	beq.n	800655e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	81bb      	strh	r3, [r7, #12]
 80064e2:	89bb      	ldrh	r3, [r7, #12]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01b      	beq.n	8006524 <USB_DeactivateEndpoint+0x6c>
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	817b      	strh	r3, [r7, #10]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	897b      	ldrh	r3, [r7, #10]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653a:	813b      	strh	r3, [r7, #8]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	893b      	ldrh	r3, [r7, #8]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
 800655c:	e192      	b.n	8006884 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	827b      	strh	r3, [r7, #18]
 800656c:	8a7b      	ldrh	r3, [r7, #18]
 800656e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d01b      	beq.n	80065ae <USB_DeactivateEndpoint+0xf6>
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658c:	823b      	strh	r3, [r7, #16]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	8a3b      	ldrh	r3, [r7, #16]
 800659a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800659e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c4:	81fb      	strh	r3, [r7, #14]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	89fb      	ldrh	r3, [r7, #14]
 80065d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8013      	strh	r3, [r2, #0]
 80065e6:	e14d      	b.n	8006884 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80a5 	bne.w	800673c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	843b      	strh	r3, [r7, #32]
 8006600:	8c3b      	ldrh	r3, [r7, #32]
 8006602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d01b      	beq.n	8006642 <USB_DeactivateEndpoint+0x18a>
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	83fb      	strh	r3, [r7, #30]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	441a      	add	r2, r3
 800662c:	8bfb      	ldrh	r3, [r7, #30]
 800662e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663e:	b29b      	uxth	r3, r3
 8006640:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	83bb      	strh	r3, [r7, #28]
 8006650:	8bbb      	ldrh	r3, [r7, #28]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01b      	beq.n	8006692 <USB_DeactivateEndpoint+0x1da>
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	837b      	strh	r3, [r7, #26]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	8b7b      	ldrh	r3, [r7, #26]
 800667e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800668e:	b29b      	uxth	r3, r3
 8006690:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	833b      	strh	r3, [r7, #24]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8b3b      	ldrh	r3, [r7, #24]
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	82fb      	strh	r3, [r7, #22]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	8afb      	ldrh	r3, [r7, #22]
 80066ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fe:	b29b      	uxth	r3, r3
 8006700:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	82bb      	strh	r3, [r7, #20]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	8abb      	ldrh	r3, [r7, #20]
 8006726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800672a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006736:	b29b      	uxth	r3, r3
 8006738:	8013      	strh	r3, [r2, #0]
 800673a:	e0a3      	b.n	8006884 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800674a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800674c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01b      	beq.n	800678c <USB_DeactivateEndpoint+0x2d4>
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	441a      	add	r2, r3
 8006776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	857b      	strh	r3, [r7, #42]	; 0x2a
 800679a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800679c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01b      	beq.n	80067dc <USB_DeactivateEndpoint+0x324>
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	441a      	add	r2, r3
 80067c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067d8:	b29b      	uxth	r3, r3
 80067da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	847b      	strh	r3, [r7, #34]	; 0x22
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	441a      	add	r2, r3
 800686e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006880:	b29b      	uxth	r3, r3
 8006882:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3734      	adds	r7, #52	; 0x34
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b0cc      	sub	sp, #304	; 0x130
 8006894:	af00      	add	r7, sp, #0
 8006896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800689e:	6018      	str	r0, [r3, #0]
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	f041 817d 	bne.w	8007bb6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d908      	bls.n	80068ea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068e8:	e007      	b.n	80068fa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80068ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	7b1b      	ldrb	r3, [r3, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d152      	bne.n	80069b0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800690a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800690e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6959      	ldr	r1, [r3, #20]
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	88da      	ldrh	r2, [r3, #6]
 8006922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006926:	b29b      	uxth	r3, r3
 8006928:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800692c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006930:	6800      	ldr	r0, [r0, #0]
 8006932:	f001 ff23 	bl	800877c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800693a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800693e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006942:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006958:	b29b      	uxth	r3, r3
 800695a:	4619      	mov	r1, r3
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006964:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006968:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	440a      	add	r2, r1
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4413      	add	r3, r2
 800698c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	801a      	strh	r2, [r3, #0]
 80069ac:	f001 b8b5 	b.w	8007b1a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	78db      	ldrb	r3, [r3, #3]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	f040 84c6 	bne.w	800734e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	429a      	cmp	r2, r3
 80069dc:	f240 8443 	bls.w	8007266 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 823e 	beq.w	8006efe <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a8e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 809a 	bne.w	8006bdc <USB_EPStartXfer+0x34c>
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ab0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ab4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4619      	mov	r1, r3
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ada:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	011a      	lsls	r2, r3, #4
 8006af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d122      	bne.n	8006b5a <USB_EPStartXfer+0x2ca>
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	801a      	strh	r2, [r3, #0]
 8006b58:	e079      	b.n	8006c4e <USB_EPStartXfer+0x3be>
 8006b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b60:	d81b      	bhi.n	8006b9a <USB_EPStartXfer+0x30a>
 8006b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b66:	085b      	lsrs	r3, r3, #1
 8006b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d004      	beq.n	8006b82 <USB_EPStartXfer+0x2f2>
 8006b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	e059      	b.n	8006c4e <USB_EPStartXfer+0x3be>
 8006b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	f003 031f 	and.w	r3, r3, #31
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <USB_EPStartXfer+0x32a>
 8006bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	029b      	lsls	r3, r3, #10
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	801a      	strh	r2, [r3, #0]
 8006bda:	e038      	b.n	8006c4e <USB_EPStartXfer+0x3be>
 8006bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d130      	bne.n	8006c4e <USB_EPStartXfer+0x3be>
 8006bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c0a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006c0e:	6812      	ldr	r2, [r2, #0]
 8006c10:	440a      	add	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c3a:	601a      	str	r2, [r3, #0]
 8006c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	895b      	ldrh	r3, [r3, #10]
 8006c5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6959      	ldr	r1, [r3, #20]
 8006c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f001 fd7d 	bl	800877c <USB_WritePMA>
            ep->xfer_buff += len;
 8006c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695a      	ldr	r2, [r3, #20]
 8006c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c92:	441a      	add	r2, r3
 8006c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d90f      	bls.n	8006cdc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	621a      	str	r2, [r3, #32]
 8006cda:	e00e      	b.n	8006cfa <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f040 809a 	bne.w	8006e40 <USB_EPStartXfer+0x5b0>
 8006d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d18:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4619      	mov	r1, r3
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d3e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	440a      	add	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	011a      	lsls	r2, r3, #4
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d122      	bne.n	8006dbe <USB_EPStartXfer+0x52e>
 8006d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	801a      	strh	r2, [r3, #0]
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e083      	b.n	8006ec6 <USB_EPStartXfer+0x636>
 8006dbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc2:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc4:	d81b      	bhi.n	8006dfe <USB_EPStartXfer+0x56e>
 8006dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dca:	085b      	lsrs	r3, r3, #1
 8006dcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <USB_EPStartXfer+0x556>
 8006ddc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006de0:	3301      	adds	r3, #1
 8006de2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006de6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	e063      	b.n	8006ec6 <USB_EPStartXfer+0x636>
 8006dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <USB_EPStartXfer+0x58e>
 8006e14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	029b      	lsls	r3, r3, #10
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	e042      	b.n	8006ec6 <USB_EPStartXfer+0x636>
 8006e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d13a      	bne.n	8006ec6 <USB_EPStartXfer+0x636>
 8006e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e54:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e5c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e82:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	440a      	add	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	011a      	lsls	r2, r3, #4
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	891b      	ldrh	r3, [r3, #8]
 8006ed2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6959      	ldr	r1, [r3, #20]
 8006ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006eec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ef0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ef4:	6800      	ldr	r0, [r0, #0]
 8006ef6:	f001 fc41 	bl	800877c <USB_WritePMA>
 8006efa:	f000 be0e 	b.w	8007b1a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d16d      	bne.n	8006fea <USB_EPStartXfer+0x75a>
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2e:	4413      	add	r3, r2
 8006f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f48:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d112      	bne.n	8006f78 <USB_EPStartXfer+0x6e8>
 8006f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f60:	801a      	strh	r2, [r3, #0]
 8006f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e063      	b.n	8007040 <USB_EPStartXfer+0x7b0>
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7e:	d817      	bhi.n	8006fb0 <USB_EPStartXfer+0x720>
 8006f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <USB_EPStartXfer+0x710>
 8006f96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	029b      	lsls	r3, r3, #10
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e047      	b.n	8007040 <USB_EPStartXfer+0x7b0>
 8006fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0x740>
 8006fc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e02a      	b.n	8007040 <USB_EPStartXfer+0x7b0>
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d122      	bne.n	8007040 <USB_EPStartXfer+0x7b0>
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	653b      	str	r3, [r7, #80]	; 0x50
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007014:	b29b      	uxth	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800701a:	4413      	add	r3, r2
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	011a      	lsls	r2, r3, #4
 800702c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702e:	4413      	add	r3, r2
 8007030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703a:	b29a      	uxth	r2, r3
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	891b      	ldrh	r3, [r3, #8]
 800704c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6959      	ldr	r1, [r3, #20]
 800705c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007060:	b29b      	uxth	r3, r3
 8007062:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007066:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800706a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800706e:	6800      	ldr	r0, [r0, #0]
 8007070:	f001 fb84 	bl	800877c <USB_WritePMA>
            ep->xfer_buff += len;
 8007074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	695a      	ldr	r2, [r3, #20]
 8007080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007084:	441a      	add	r2, r3
 8007086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d90f      	bls.n	80070ce <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6a1a      	ldr	r2, [r3, #32]
 80070ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	621a      	str	r2, [r3, #32]
 80070cc:	e00e      	b.n	80070ec <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80070ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	643b      	str	r3, [r7, #64]	; 0x40
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d16d      	bne.n	80071e4 <USB_EPStartXfer+0x954>
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	63bb      	str	r3, [r7, #56]	; 0x38
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007122:	b29b      	uxth	r3, r3
 8007124:	461a      	mov	r2, r3
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	4413      	add	r3, r2
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38
 800712c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	011a      	lsls	r2, r3, #4
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	4413      	add	r3, r2
 800713e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
 8007144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d112      	bne.n	8007172 <USB_EPStartXfer+0x8e2>
 800714c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007156:	b29a      	uxth	r2, r3
 8007158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	b29b      	uxth	r3, r3
 8007162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716a:	b29a      	uxth	r2, r3
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	e05d      	b.n	800722e <USB_EPStartXfer+0x99e>
 8007172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007176:	2b3e      	cmp	r3, #62	; 0x3e
 8007178:	d817      	bhi.n	80071aa <USB_EPStartXfer+0x91a>
 800717a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717e:	085b      	lsrs	r3, r3, #1
 8007180:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <USB_EPStartXfer+0x90a>
 8007190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007194:	3301      	adds	r3, #1
 8007196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800719a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800719e:	b29b      	uxth	r3, r3
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e041      	b.n	800722e <USB_EPStartXfer+0x99e>
 80071aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <USB_EPStartXfer+0x93a>
 80071c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071c4:	3b01      	subs	r3, #1
 80071c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	029b      	lsls	r3, r3, #10
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071dc:	b29a      	uxth	r2, r3
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	801a      	strh	r2, [r3, #0]
 80071e2:	e024      	b.n	800722e <USB_EPStartXfer+0x99e>
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d11c      	bne.n	800722e <USB_EPStartXfer+0x99e>
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007208:	4413      	add	r3, r2
 800720a:	643b      	str	r3, [r7, #64]	; 0x40
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	011a      	lsls	r2, r3, #4
 800721a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721c:	4413      	add	r3, r2
 800721e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007228:	b29a      	uxth	r2, r3
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	895b      	ldrh	r3, [r3, #10]
 800723a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6959      	ldr	r1, [r3, #20]
 800724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724e:	b29b      	uxth	r3, r3
 8007250:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007254:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007258:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f001 fa8d 	bl	800877c <USB_WritePMA>
 8007262:	f000 bc5a 	b.w	8007b1a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	b29b      	uxth	r3, r3
 8007294:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	441a      	add	r2, r3
 80072ba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80072be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	461a      	mov	r2, r3
 80072f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f2:	4413      	add	r3, r2
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	011a      	lsls	r2, r3, #4
 8007304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007306:	4413      	add	r3, r2
 8007308:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800730c:	65bb      	str	r3, [r7, #88]	; 0x58
 800730e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007312:	b29a      	uxth	r2, r3
 8007314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007316:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	891b      	ldrh	r3, [r3, #8]
 8007324:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	b29b      	uxth	r3, r3
 800733a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800733e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007342:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007346:	6800      	ldr	r0, [r0, #0]
 8007348:	f001 fa18 	bl	800877c <USB_WritePMA>
 800734c:	e3e5      	b.n	8007b1a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800734e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007352:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800735c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007374:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80073a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6a1a      	ldr	r2, [r3, #32]
 80073b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 81bc 	beq.w	8007768 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	785b      	ldrb	r3, [r3, #1]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d16d      	bne.n	80074ea <USB_EPStartXfer+0xc5a>
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	67bb      	str	r3, [r7, #120]	; 0x78
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800742e:	4413      	add	r3, r2
 8007430:	67bb      	str	r3, [r7, #120]	; 0x78
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	011a      	lsls	r2, r3, #4
 8007440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007442:	4413      	add	r3, r2
 8007444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007448:	677b      	str	r3, [r7, #116]	; 0x74
 800744a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d112      	bne.n	8007478 <USB_EPStartXfer+0xbe8>
 8007452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800745c:	b29a      	uxth	r2, r3
 800745e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007460:	801a      	strh	r2, [r3, #0]
 8007462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007464:	881b      	ldrh	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e060      	b.n	800753a <USB_EPStartXfer+0xcaa>
 8007478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747c:	2b3e      	cmp	r3, #62	; 0x3e
 800747e:	d817      	bhi.n	80074b0 <USB_EPStartXfer+0xc20>
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <USB_EPStartXfer+0xc10>
 8007496:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800749a:	3301      	adds	r3, #1
 800749c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	e044      	b.n	800753a <USB_EPStartXfer+0xcaa>
 80074b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <USB_EPStartXfer+0xc40>
 80074c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074ca:	3b01      	subs	r3, #1
 80074cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	029b      	lsls	r3, r3, #10
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	e027      	b.n	800753a <USB_EPStartXfer+0xcaa>
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d11f      	bne.n	800753a <USB_EPStartXfer+0xcaa>
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007508:	b29b      	uxth	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007510:	4413      	add	r3, r2
 8007512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	011a      	lsls	r2, r3, #4
 8007524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007528:	4413      	add	r3, r2
 800752a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800752e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007534:	b29a      	uxth	r2, r3
 8007536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007538:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800753a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	895b      	ldrh	r3, [r3, #10]
 8007546:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800754a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6959      	ldr	r1, [r3, #20]
 8007556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755a:	b29b      	uxth	r3, r3
 800755c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007560:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007564:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007568:	6800      	ldr	r0, [r0, #0]
 800756a:	f001 f907 	bl	800877c <USB_WritePMA>
          ep->xfer_buff += len;
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695a      	ldr	r2, [r3, #20]
 800757a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757e:	441a      	add	r2, r3
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800758c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a1a      	ldr	r2, [r3, #32]
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d90f      	bls.n	80075c8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80075a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a1a      	ldr	r2, [r3, #32]
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	1ad2      	subs	r2, r2, r3
 80075ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	621a      	str	r2, [r3, #32]
 80075c6:	e00e      	b.n	80075e6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8295 	beq.w	8007b1a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d16d      	bne.n	80076dc <USB_EPStartXfer+0xe4c>
 8007600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	66bb      	str	r3, [r7, #104]	; 0x68
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007620:	4413      	add	r3, r2
 8007622:	66bb      	str	r3, [r7, #104]	; 0x68
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	011a      	lsls	r2, r3, #4
 8007632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007634:	4413      	add	r3, r2
 8007636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800763a:	667b      	str	r3, [r7, #100]	; 0x64
 800763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d112      	bne.n	800766a <USB_EPStartXfer+0xdda>
 8007644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800764e:	b29a      	uxth	r2, r3
 8007650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007652:	801a      	strh	r2, [r3, #0]
 8007654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800765e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007662:	b29a      	uxth	r2, r3
 8007664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007666:	801a      	strh	r2, [r3, #0]
 8007668:	e063      	b.n	8007732 <USB_EPStartXfer+0xea2>
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	2b3e      	cmp	r3, #62	; 0x3e
 8007670:	d817      	bhi.n	80076a2 <USB_EPStartXfer+0xe12>
 8007672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800767c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <USB_EPStartXfer+0xe02>
 8007688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800768c:	3301      	adds	r3, #1
 800768e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007696:	b29b      	uxth	r3, r3
 8007698:	029b      	lsls	r3, r3, #10
 800769a:	b29a      	uxth	r2, r3
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e047      	b.n	8007732 <USB_EPStartXfer+0xea2>
 80076a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0xe32>
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	e02a      	b.n	8007732 <USB_EPStartXfer+0xea2>
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d122      	bne.n	8007732 <USB_EPStartXfer+0xea2>
 80076ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	673b      	str	r3, [r7, #112]	; 0x70
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007706:	b29b      	uxth	r3, r3
 8007708:	461a      	mov	r2, r3
 800770a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800770c:	4413      	add	r3, r2
 800770e:	673b      	str	r3, [r7, #112]	; 0x70
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	011a      	lsls	r2, r3, #4
 800771e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007720:	4413      	add	r3, r2
 8007722:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007726:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772c:	b29a      	uxth	r2, r3
 800772e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007730:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	891b      	ldrh	r3, [r3, #8]
 800773e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6959      	ldr	r1, [r3, #20]
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	b29b      	uxth	r3, r3
 8007754:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007758:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800775c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007760:	6800      	ldr	r0, [r0, #0]
 8007762:	f001 f80b 	bl	800877c <USB_WritePMA>
 8007766:	e1d8      	b.n	8007b1a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d178      	bne.n	800786a <USB_EPStartXfer+0xfda>
 8007778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007794:	b29b      	uxth	r3, r3
 8007796:	461a      	mov	r2, r3
 8007798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800779c:	4413      	add	r3, r2
 800779e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	011a      	lsls	r2, r3, #4
 80077b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d116      	bne.n	80077f4 <USB_EPStartXfer+0xf64>
 80077c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e06b      	b.n	80078cc <USB_EPStartXfer+0x103c>
 80077f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f8:	2b3e      	cmp	r3, #62	; 0x3e
 80077fa:	d818      	bhi.n	800782e <USB_EPStartXfer+0xf9e>
 80077fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d004      	beq.n	800781c <USB_EPStartXfer+0xf8c>
 8007812:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007816:	3301      	adds	r3, #1
 8007818:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800781c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007820:	b29b      	uxth	r3, r3
 8007822:	029b      	lsls	r3, r3, #10
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800782a:	801a      	strh	r2, [r3, #0]
 800782c:	e04e      	b.n	80078cc <USB_EPStartXfer+0x103c>
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2b00      	cmp	r3, #0
 8007842:	d104      	bne.n	800784e <USB_EPStartXfer+0xfbe>
 8007844:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007848:	3b01      	subs	r3, #1
 800784a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800784e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007852:	b29b      	uxth	r3, r3
 8007854:	029b      	lsls	r3, r3, #10
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e030      	b.n	80078cc <USB_EPStartXfer+0x103c>
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d128      	bne.n	80078cc <USB_EPStartXfer+0x103c>
 800787a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007896:	b29b      	uxth	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800789e:	4413      	add	r3, r2
 80078a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078b6:	4413      	add	r3, r2
 80078b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	891b      	ldrh	r3, [r3, #8]
 80078d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6959      	ldr	r1, [r3, #20]
 80078e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	f000 ff3e 	bl	800877c <USB_WritePMA>
          ep->xfer_buff += len;
 8007900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007910:	441a      	add	r2, r3
 8007912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a1a      	ldr	r2, [r3, #32]
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	429a      	cmp	r2, r3
 8007938:	d90f      	bls.n	800795a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6a1a      	ldr	r2, [r3, #32]
 8007946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	621a      	str	r2, [r3, #32]
 8007958:	e00e      	b.n	8007978 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2200      	movs	r2, #0
 8007976:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80cc 	beq.w	8007b1a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	785b      	ldrb	r3, [r3, #1]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d178      	bne.n	8007a92 <USB_EPStartXfer+0x1202>
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079bc:	b29b      	uxth	r3, r3
 80079be:	461a      	mov	r2, r3
 80079c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c4:	4413      	add	r3, r2
 80079c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	011a      	lsls	r2, r3, #4
 80079d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079dc:	4413      	add	r3, r2
 80079de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d116      	bne.n	8007a1c <USB_EPStartXfer+0x118c>
 80079ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	e064      	b.n	8007ae6 <USB_EPStartXfer+0x1256>
 8007a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a20:	2b3e      	cmp	r3, #62	; 0x3e
 8007a22:	d818      	bhi.n	8007a56 <USB_EPStartXfer+0x11c6>
 8007a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <USB_EPStartXfer+0x11b4>
 8007a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a3e:	3301      	adds	r3, #1
 8007a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	029b      	lsls	r3, r3, #10
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a52:	801a      	strh	r2, [r3, #0]
 8007a54:	e047      	b.n	8007ae6 <USB_EPStartXfer+0x1256>
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USB_EPStartXfer+0x11e6>
 8007a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a70:	3b01      	subs	r3, #1
 8007a72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	029b      	lsls	r3, r3, #10
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e029      	b.n	8007ae6 <USB_EPStartXfer+0x1256>
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d121      	bne.n	8007ae6 <USB_EPStartXfer+0x1256>
 8007aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ab8:	4413      	add	r3, r2
 8007aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	011a      	lsls	r2, r3, #4
 8007acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	895b      	ldrh	r3, [r3, #10]
 8007af2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6959      	ldr	r1, [r3, #20]
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b14:	6800      	ldr	r0, [r0, #0]
 8007b16:	f000 fe31 	bl	800877c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b3c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b48:	8013      	strh	r3, [r2, #0]
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b56:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b5a:	8812      	ldrh	r2, [r2, #0]
 8007b5c:	f082 0210 	eor.w	r2, r2, #16
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b6e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	f082 0220 	eor.w	r2, r2, #32
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	8013      	strh	r3, [r2, #0]
 8007bb2:	f000 bc9f 	b.w	80084f4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	7b1b      	ldrb	r3, [r3, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 80ae 	bne.w	8007d24 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699a      	ldr	r2, [r3, #24]
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d917      	bls.n	8007c14 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	699a      	ldr	r2, [r3, #24]
 8007c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c04:	1ad2      	subs	r2, r2, r3
 8007c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	619a      	str	r2, [r3, #24]
 8007c12:	e00e      	b.n	8007c32 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c56:	4413      	add	r3, r2
 8007c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	011a      	lsls	r2, r3, #4
 8007c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c6e:	4413      	add	r3, r2
 8007c70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d116      	bne.n	8007cae <USB_EPStartXfer+0x141e>
 8007c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c98:	881b      	ldrh	r3, [r3, #0]
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e3e8      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
 8007cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb2:	2b3e      	cmp	r3, #62	; 0x3e
 8007cb4:	d818      	bhi.n	8007ce8 <USB_EPStartXfer+0x1458>
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <USB_EPStartXfer+0x1446>
 8007ccc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	029b      	lsls	r3, r3, #10
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	e3cb      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
 8007ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cec:	095b      	lsrs	r3, r3, #5
 8007cee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <USB_EPStartXfer+0x1478>
 8007cfe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d02:	3b01      	subs	r3, #1
 8007d04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	029b      	lsls	r3, r3, #10
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d20:	801a      	strh	r2, [r3, #0]
 8007d22:	e3ad      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	78db      	ldrb	r3, [r3, #3]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	f040 8200 	bne.w	8008136 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f040 8091 	bne.w	8007e6a <USB_EPStartXfer+0x15da>
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	461a      	mov	r2, r3
 8007d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	011a      	lsls	r2, r3, #4
 8007d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d84:	4413      	add	r3, r2
 8007d86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d116      	bne.n	8007dcc <USB_EPStartXfer+0x153c>
 8007d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db0:	801a      	strh	r2, [r3, #0]
 8007db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	e083      	b.n	8007ed4 <USB_EPStartXfer+0x1644>
 8007dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007dda:	d820      	bhi.n	8007e1e <USB_EPStartXfer+0x158e>
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	085b      	lsrs	r3, r3, #1
 8007dea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d004      	beq.n	8007e0c <USB_EPStartXfer+0x157c>
 8007e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e06:	3301      	adds	r3, #1
 8007e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	029b      	lsls	r3, r3, #10
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	e05a      	b.n	8007ed4 <USB_EPStartXfer+0x1644>
 8007e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <USB_EPStartXfer+0x15be>
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	029b      	lsls	r3, r3, #10
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e66:	801a      	strh	r2, [r3, #0]
 8007e68:	e034      	b.n	8007ed4 <USB_EPStartXfer+0x1644>
 8007e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	785b      	ldrb	r3, [r3, #1]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d12c      	bne.n	8007ed4 <USB_EPStartXfer+0x1644>
 8007e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	011a      	lsls	r2, r3, #4
 8007eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f040 8091 	bne.w	8008016 <USB_EPStartXfer+0x1786>
 8007ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f18:	4413      	add	r3, r2
 8007f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	011a      	lsls	r2, r3, #4
 8007f2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f30:	4413      	add	r3, r2
 8007f32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d116      	bne.n	8007f78 <USB_EPStartXfer+0x16e8>
 8007f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f5c:	801a      	strh	r2, [r3, #0]
 8007f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	e07c      	b.n	8008072 <USB_EPStartXfer+0x17e2>
 8007f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b3e      	cmp	r3, #62	; 0x3e
 8007f86:	d820      	bhi.n	8007fca <USB_EPStartXfer+0x173a>
 8007f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <USB_EPStartXfer+0x1728>
 8007fae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	029b      	lsls	r3, r3, #10
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	e053      	b.n	8008072 <USB_EPStartXfer+0x17e2>
 8007fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	095b      	lsrs	r3, r3, #5
 8007fd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 031f 	and.w	r3, r3, #31
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <USB_EPStartXfer+0x176a>
 8007ff0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ffa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	029b      	lsls	r3, r3, #10
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	e02d      	b.n	8008072 <USB_EPStartXfer+0x17e2>
 8008016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	785b      	ldrb	r3, [r3, #1]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d125      	bne.n	8008072 <USB_EPStartXfer+0x17e2>
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008034:	b29b      	uxth	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800803c:	4413      	add	r3, r2
 800803e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	011a      	lsls	r2, r3, #4
 8008050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008054:	4413      	add	r3, r2
 8008056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800805a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	b29a      	uxth	r2, r3
 800806c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008070:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 81fe 	beq.w	8008480 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <USB_EPStartXfer+0x182c>
 80080b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10d      	bne.n	80080d8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 81db 	bne.w	8008480 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 81d4 	bne.w	8008480 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4413      	add	r3, r2
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
 8008134:	e1a4      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	2b01      	cmp	r3, #1
 8008144:	f040 819a 	bne.w	800847c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	429a      	cmp	r2, r3
 8008162:	d917      	bls.n	8008194 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699a      	ldr	r2, [r3, #24]
 8008180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008184:	1ad2      	subs	r2, r2, r3
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	619a      	str	r2, [r3, #24]
 8008192:	e00e      	b.n	80081b2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2200      	movs	r2, #0
 80081b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	785b      	ldrb	r3, [r3, #1]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d178      	bne.n	80082b4 <USB_EPStartXfer+0x1a24>
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081e6:	4413      	add	r3, r2
 80081e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	011a      	lsls	r2, r3, #4
 80081fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081fe:	4413      	add	r3, r2
 8008200:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008204:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d116      	bne.n	800823e <USB_EPStartXfer+0x19ae>
 8008210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008222:	801a      	strh	r2, [r3, #0]
 8008224:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	e06b      	b.n	8008316 <USB_EPStartXfer+0x1a86>
 800823e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008242:	2b3e      	cmp	r3, #62	; 0x3e
 8008244:	d818      	bhi.n	8008278 <USB_EPStartXfer+0x19e8>
 8008246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <USB_EPStartXfer+0x19d6>
 800825c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008260:	3301      	adds	r3, #1
 8008262:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29a      	uxth	r2, r3
 8008270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008274:	801a      	strh	r2, [r3, #0]
 8008276:	e04e      	b.n	8008316 <USB_EPStartXfer+0x1a86>
 8008278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2b00      	cmp	r3, #0
 800828c:	d104      	bne.n	8008298 <USB_EPStartXfer+0x1a08>
 800828e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008292:	3b01      	subs	r3, #1
 8008294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e030      	b.n	8008316 <USB_EPStartXfer+0x1a86>
 80082b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d128      	bne.n	8008316 <USB_EPStartXfer+0x1a86>
 80082c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	461a      	mov	r2, r3
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e8:	4413      	add	r3, r2
 80082ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	011a      	lsls	r2, r3, #4
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	4413      	add	r3, r2
 8008302:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800830a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800830e:	b29a      	uxth	r2, r3
 8008310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d178      	bne.n	8008426 <USB_EPStartXfer+0x1b96>
 8008334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008350:	b29b      	uxth	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008358:	4413      	add	r3, r2
 800835a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	011a      	lsls	r2, r3, #4
 800836c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008370:	4413      	add	r3, r2
 8008372:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800837a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d116      	bne.n	80083b0 <USB_EPStartXfer+0x1b20>
 8008382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008386:	881b      	ldrh	r3, [r3, #0]
 8008388:	b29b      	uxth	r3, r3
 800838a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800838e:	b29a      	uxth	r2, r3
 8008390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008394:	801a      	strh	r2, [r3, #0]
 8008396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	e067      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
 80083b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b4:	2b3e      	cmp	r3, #62	; 0x3e
 80083b6:	d818      	bhi.n	80083ea <USB_EPStartXfer+0x1b5a>
 80083b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d004      	beq.n	80083d8 <USB_EPStartXfer+0x1b48>
 80083ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083d2:	3301      	adds	r3, #1
 80083d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083dc:	b29b      	uxth	r3, r3
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083e6:	801a      	strh	r2, [r3, #0]
 80083e8:	e04a      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
 80083ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f8:	f003 031f 	and.w	r3, r3, #31
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <USB_EPStartXfer+0x1b7a>
 8008400:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008404:	3b01      	subs	r3, #1
 8008406:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800840a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800840e:	b29b      	uxth	r3, r3
 8008410:	029b      	lsls	r3, r3, #10
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e02c      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
 8008426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	785b      	ldrb	r3, [r3, #1]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d124      	bne.n	8008480 <USB_EPStartXfer+0x1bf0>
 8008436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008444:	b29b      	uxth	r3, r3
 8008446:	461a      	mov	r2, r3
 8008448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844c:	4413      	add	r3, r2
 800844e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	011a      	lsls	r2, r3, #4
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008464:	4413      	add	r3, r2
 8008466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800846a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800846e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008472:	b29a      	uxth	r2, r3
 8008474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e001      	b.n	8008480 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e03a      	b.n	80084f6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	785b      	ldrb	r3, [r3, #1]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008528:	81bb      	strh	r3, [r7, #12]
 800852a:	89bb      	ldrh	r3, [r7, #12]
 800852c:	f083 0310 	eor.w	r3, r3, #16
 8008530:	81bb      	strh	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	89bb      	ldrh	r3, [r7, #12]
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]
 8008552:	e01f      	b.n	8008594 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	81fb      	strh	r3, [r7, #14]
 800856c:	89fb      	ldrh	r3, [r7, #14]
 800856e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008572:	81fb      	strh	r3, [r7, #14]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	441a      	add	r2, r3
 800857e:	89fb      	ldrh	r3, [r7, #14]
 8008580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008590:	b29b      	uxth	r3, r3
 8008592:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	7b1b      	ldrb	r3, [r3, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 809d 	bne.w	80086ee <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d04c      	beq.n	8008656 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	823b      	strh	r3, [r7, #16]
 80085ca:	8a3b      	ldrh	r3, [r7, #16]
 80085cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <USB_EPClearStall+0x6c>
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	81fb      	strh	r3, [r7, #14]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	89fb      	ldrh	r3, [r7, #14]
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	78db      	ldrb	r3, [r3, #3]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d06c      	beq.n	80086ee <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862a:	81bb      	strh	r3, [r7, #12]
 800862c:	89bb      	ldrh	r3, [r7, #12]
 800862e:	f083 0320 	eor.w	r3, r3, #32
 8008632:	81bb      	strh	r3, [r7, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	441a      	add	r2, r3
 800863e:	89bb      	ldrh	r3, [r7, #12]
 8008640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008650:	b29b      	uxth	r3, r3
 8008652:	8013      	strh	r3, [r2, #0]
 8008654:	e04b      	b.n	80086ee <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	82fb      	strh	r3, [r7, #22]
 8008664:	8afb      	ldrh	r3, [r7, #22]
 8008666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01b      	beq.n	80086a6 <USB_EPClearStall+0x106>
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	b29b      	uxth	r3, r3
 800867c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008684:	82bb      	strh	r3, [r7, #20]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	441a      	add	r2, r3
 8008690:	8abb      	ldrh	r3, [r7, #20]
 8008692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	881b      	ldrh	r3, [r3, #0]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086bc:	827b      	strh	r3, [r7, #18]
 80086be:	8a7b      	ldrh	r3, [r7, #18]
 80086c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086c4:	827b      	strh	r3, [r7, #18]
 80086c6:	8a7b      	ldrh	r3, [r7, #18]
 80086c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086cc:	827b      	strh	r3, [r7, #18]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	8a7b      	ldrh	r3, [r7, #18]
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d103      	bne.n	8008714 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr

08008734 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008756:	b29b      	uxth	r3, r3
 8008758:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800875a:	68fb      	ldr	r3, [r7, #12]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800877c:	b480      	push	{r7}
 800877e:	b08d      	sub	sp, #52	; 0x34
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4611      	mov	r1, r2
 8008788:	461a      	mov	r2, r3
 800878a:	460b      	mov	r3, r1
 800878c:	80fb      	strh	r3, [r7, #6]
 800878e:	4613      	mov	r3, r2
 8008790:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008792:	88bb      	ldrh	r3, [r7, #4]
 8008794:	3301      	adds	r3, #1
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087a2:	88fb      	ldrh	r3, [r7, #6]
 80087a4:	005a      	lsls	r2, r3, #1
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087b4:	e01e      	b.n	80087f4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	3301      	adds	r3, #1
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	4313      	orrs	r3, r2
 80087d2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	3302      	adds	r3, #2
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	3302      	adds	r3, #2
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	3301      	adds	r3, #1
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	3b01      	subs	r3, #1
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1dd      	bne.n	80087b6 <USB_WritePMA+0x3a>
  }
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3734      	adds	r7, #52	; 0x34
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr

08008806 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008806:	b480      	push	{r7}
 8008808:	b08b      	sub	sp, #44	; 0x2c
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	4611      	mov	r1, r2
 8008812:	461a      	mov	r2, r3
 8008814:	460b      	mov	r3, r1
 8008816:	80fb      	strh	r3, [r7, #6]
 8008818:	4613      	mov	r3, r2
 800881a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800881c:	88bb      	ldrh	r3, [r7, #4]
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	b29b      	uxth	r3, r3
 8008822:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800882c:	88fb      	ldrh	r3, [r7, #6]
 800882e:	005a      	lsls	r2, r3, #1
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008838:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
 800883e:	e01b      	b.n	8008878 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	3302      	adds	r3, #2
 800884c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	3301      	adds	r3, #1
 800885a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	0a1b      	lsrs	r3, r3, #8
 8008860:	b2da      	uxtb	r2, r3
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	3301      	adds	r3, #1
 800886a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	3302      	adds	r3, #2
 8008870:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	3b01      	subs	r3, #1
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e0      	bne.n	8008840 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800887e:	88bb      	ldrh	r3, [r7, #4]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	b2da      	uxtb	r2, r3
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	701a      	strb	r2, [r3, #0]
  }
}
 800889a:	bf00      	nop
 800889c:	372c      	adds	r7, #44	; 0x2c
 800889e:	46bd      	mov	sp, r7
 80088a0:	bc80      	pop	{r7}
 80088a2:	4770      	bx	lr

080088a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7c1b      	ldrb	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d115      	bne.n	80088e8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088c0:	2202      	movs	r2, #2
 80088c2:	2181      	movs	r1, #129	; 0x81
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 fe30 	bl	800a52a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d4:	2202      	movs	r2, #2
 80088d6:	2101      	movs	r1, #1
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f001 fe26 	bl	800a52a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088e6:	e012      	b.n	800890e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088e8:	2340      	movs	r3, #64	; 0x40
 80088ea:	2202      	movs	r2, #2
 80088ec:	2181      	movs	r1, #129	; 0x81
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 fe1b 	bl	800a52a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088fa:	2340      	movs	r3, #64	; 0x40
 80088fc:	2202      	movs	r2, #2
 80088fe:	2101      	movs	r1, #1
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 fe12 	bl	800a52a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800890e:	2308      	movs	r3, #8
 8008910:	2203      	movs	r2, #3
 8008912:	2182      	movs	r1, #130	; 0x82
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 fe08 	bl	800a52a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008920:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008924:	f001 ff28 	bl	800a778 <USBD_static_malloc>
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800893a:	2301      	movs	r3, #1
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e026      	b.n	800898e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008946:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7c1b      	ldrb	r3, [r3, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008974:	2101      	movs	r1, #1
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fec8 	bl	800a70c <USBD_LL_PrepareReceive>
 800897c:	e007      	b.n	800898e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008984:	2340      	movs	r3, #64	; 0x40
 8008986:	2101      	movs	r1, #1
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 febf 	bl	800a70c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089a8:	2181      	movs	r1, #129	; 0x81
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f001 fde3 	bl	800a576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089b6:	2101      	movs	r1, #1
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 fddc 	bl	800a576 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089c6:	2182      	movs	r1, #130	; 0x82
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 fdd4 	bl	800a576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fece 	bl	800a790 <USBD_static_free>
    pdev->pClassData = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b086      	sub	sp, #24
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d039      	beq.n	8008aa4 <USBD_CDC_Setup+0x9e>
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d17f      	bne.n	8008b34 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	88db      	ldrh	r3, [r3, #6]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d029      	beq.n	8008a90 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	b25b      	sxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da11      	bge.n	8008a6a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	88d2      	ldrh	r2, [r2, #6]
 8008a58:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a5a:	6939      	ldr	r1, [r7, #16]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	88db      	ldrh	r3, [r3, #6]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 f9d9 	bl	8009e1a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a68:	e06b      	b.n	8008b42 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	785a      	ldrb	r2, [r3, #1]
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	88db      	ldrh	r3, [r3, #6]
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a80:	6939      	ldr	r1, [r7, #16]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	88db      	ldrh	r3, [r3, #6]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 f9f4 	bl	8009e76 <USBD_CtlPrepareRx>
      break;
 8008a8e:	e058      	b.n	8008b42 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	7850      	ldrb	r0, [r2, #1]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	4798      	blx	r3
      break;
 8008aa2:	e04e      	b.n	8008b42 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b0b      	cmp	r3, #11
 8008aaa:	d02e      	beq.n	8008b0a <USBD_CDC_Setup+0x104>
 8008aac:	2b0b      	cmp	r3, #11
 8008aae:	dc38      	bgt.n	8008b22 <USBD_CDC_Setup+0x11c>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <USBD_CDC_Setup+0xb4>
 8008ab4:	2b0a      	cmp	r3, #10
 8008ab6:	d014      	beq.n	8008ae2 <USBD_CDC_Setup+0xdc>
 8008ab8:	e033      	b.n	8008b22 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d107      	bne.n	8008ad4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	2202      	movs	r2, #2
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 f9a4 	bl	8009e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ad2:	e02e      	b.n	8008b32 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 f935 	bl	8009d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008adc:	2302      	movs	r3, #2
 8008ade:	75fb      	strb	r3, [r7, #23]
          break;
 8008ae0:	e027      	b.n	8008b32 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d107      	bne.n	8008afc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008aec:	f107 030f 	add.w	r3, r7, #15
 8008af0:	2201      	movs	r2, #1
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 f990 	bl	8009e1a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008afa:	e01a      	b.n	8008b32 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f921 	bl	8009d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b04:	2302      	movs	r3, #2
 8008b06:	75fb      	strb	r3, [r7, #23]
          break;
 8008b08:	e013      	b.n	8008b32 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d00d      	beq.n	8008b30 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f915 	bl	8009d46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b20:	e006      	b.n	8008b30 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 f90e 	bl	8009d46 <USBD_CtlError>
          ret = USBD_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8008b2e:	e000      	b.n	8008b32 <USBD_CDC_Setup+0x12c>
          break;
 8008b30:	bf00      	nop
      }
      break;
 8008b32:	e006      	b.n	8008b42 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 f905 	bl	8009d46 <USBD_CtlError>
      ret = USBD_FAIL;
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b40:	bf00      	nop
  }

  return ret;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b66:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d03a      	beq.n	8008be8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	6879      	ldr	r1, [r7, #4]
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	440b      	add	r3, r1
 8008b80:	331c      	adds	r3, #28
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d029      	beq.n	8008bdc <USBD_CDC_DataIn+0x90>
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	331c      	adds	r3, #28
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	78f9      	ldrb	r1, [r7, #3]
 8008b9c:	68b8      	ldr	r0, [r7, #8]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	4403      	add	r3, r0
 8008ba8:	3338      	adds	r3, #56	; 0x38
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d110      	bne.n	8008bdc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bba:	78fa      	ldrb	r2, [r7, #3]
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	440b      	add	r3, r1
 8008bc8:	331c      	adds	r3, #28
 8008bca:	2200      	movs	r2, #0
 8008bcc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bce:	78f9      	ldrb	r1, [r7, #3]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fd76 	bl	800a6c6 <USBD_LL_Transmit>
 8008bda:	e003      	b.n	8008be4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e000      	b.n	8008bea <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008be8:	2302      	movs	r3, #2
  }
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 fda1 	bl	800a752 <USBD_LL_GetRxDataSize>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00d      	beq.n	8008c3e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c36:	4611      	mov	r1, r2
 8008c38:	4798      	blx	r3

    return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c56:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d015      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x46>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c68:	2bff      	cmp	r3, #255	; 0xff
 8008c6a:	d010      	beq.n	8008c8e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c7a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c82:	b292      	uxth	r2, r2
 8008c84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	22ff      	movs	r2, #255	; 0xff
 8008c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2243      	movs	r2, #67	; 0x43
 8008ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008ca6:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	2000009c 	.word	0x2000009c

08008cb8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2243      	movs	r2, #67	; 0x43
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	; (8008cd4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000058 	.word	0x20000058

08008cd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2243      	movs	r2, #67	; 0x43
 8008ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008ce6:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	200000e0 	.word	0x200000e0

08008cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	220a      	movs	r2, #10
 8008d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d06:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000014 	.word	0x20000014

08008d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d22:	2302      	movs	r3, #2
 8008d24:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d005      	beq.n	8008d38 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bc80      	pop	{r7}
 8008d42:	4770      	bx	lr

08008d44 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d58:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr

08008d76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b085      	sub	sp, #20
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr

08008d9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	7c1b      	ldrb	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc8:	2101      	movs	r1, #1
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f001 fc9e 	bl	800a70c <USBD_LL_PrepareReceive>
 8008dd0:	e007      	b.n	8008de2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dd8:	2340      	movs	r3, #64	; 0x40
 8008dda:	2101      	movs	r1, #1
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f001 fc95 	bl	800a70c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008de6:	2302      	movs	r3, #2
  }
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e04:	2302      	movs	r3, #2
 8008e06:	e01a      	b.n	8008e3e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	79fa      	ldrb	r2, [r7, #7]
 8008e34:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e36:	68f8      	ldr	r0, [r7, #12]
 8008e38:	f001 fb02 	bl	800a440 <USBD_LL_Init>

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d006      	beq.n	8008e68 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
 8008e66:	e001      	b.n	8008e6c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 fb37 	bl	800a4f4 <USBD_LL_Start>

  return USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	370c      	adds	r7, #12
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00c      	beq.n	8008ed8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	78fa      	ldrb	r2, [r7, #3]
 8008ef8:	4611      	mov	r1, r2
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3

  return USBD_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fed7 	bl	8009cce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f2e:	461a      	mov	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f3c:	f003 031f 	and.w	r3, r3, #31
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d016      	beq.n	8008f72 <USBD_LL_SetupStage+0x6a>
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d81c      	bhi.n	8008f82 <USBD_LL_SetupStage+0x7a>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <USBD_LL_SetupStage+0x4a>
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d008      	beq.n	8008f62 <USBD_LL_SetupStage+0x5a>
 8008f50:	e017      	b.n	8008f82 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f9ca 	bl	80092f4 <USBD_StdDevReq>
      break;
 8008f60:	e01a      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fa2c 	bl	80093c8 <USBD_StdItfReq>
      break;
 8008f70:	e012      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa6c 	bl	8009458 <USBD_StdEPReq>
      break;
 8008f80:	e00a      	b.n	8008f98 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4619      	mov	r1, r3
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f001 fb0f 	bl	800a5b4 <USBD_LL_StallEP>
      break;
 8008f96:	bf00      	nop
  }

  return USBD_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	460b      	mov	r3, r1
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d14b      	bne.n	800904e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008fbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d134      	bne.n	8009032 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d919      	bls.n	8009008 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	1ad2      	subs	r2, r2, r3
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d203      	bcs.n	8008ff6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	e002      	b.n	8008ffc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 ff56 	bl	8009eb2 <USBD_CtlContinueRx>
 8009006:	e038      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800901a:	2b03      	cmp	r3, #3
 800901c:	d105      	bne.n	800902a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 ff53 	bl	8009ed6 <USBD_CtlSendStatus>
 8009030:	e023      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009038:	2b05      	cmp	r3, #5
 800903a:	d11e      	bne.n	800907a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009044:	2100      	movs	r1, #0
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f001 fab4 	bl	800a5b4 <USBD_LL_StallEP>
 800904c:	e015      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00d      	beq.n	8009076 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009060:	2b03      	cmp	r3, #3
 8009062:	d108      	bne.n	8009076 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	7afa      	ldrb	r2, [r7, #11]
 800906e:	4611      	mov	r1, r2
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	4798      	blx	r3
 8009074:	e001      	b.n	800907a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009076:	2302      	movs	r3, #2
 8009078:	e000      	b.n	800907c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	460b      	mov	r3, r1
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009092:	7afb      	ldrb	r3, [r7, #11]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d17f      	bne.n	8009198 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3314      	adds	r3, #20
 800909c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d15c      	bne.n	8009162 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d915      	bls.n	80090e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	68da      	ldr	r2, [r3, #12]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	1ad2      	subs	r2, r2, r3
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fec0 	bl	8009e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d2:	2300      	movs	r3, #0
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f001 fb17 	bl	800a70c <USBD_LL_PrepareReceive>
 80090de:	e04e      	b.n	800917e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	6912      	ldr	r2, [r2, #16]
 80090e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80090ec:	fb01 f202 	mul.w	r2, r1, r2
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d11c      	bne.n	8009130 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d316      	bcc.n	8009130 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800910c:	429a      	cmp	r2, r3
 800910e:	d20f      	bcs.n	8009130 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009110:	2200      	movs	r2, #0
 8009112:	2100      	movs	r1, #0
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fe9c 	bl	8009e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009122:	2300      	movs	r3, #0
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f001 faef 	bl	800a70c <USBD_LL_PrepareReceive>
 800912e:	e026      	b.n	800917e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009142:	2b03      	cmp	r3, #3
 8009144:	d105      	bne.n	8009152 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009152:	2180      	movs	r1, #128	; 0x80
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f001 fa2d 	bl	800a5b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 fece 	bl	8009efc <USBD_CtlReceiveStatus>
 8009160:	e00d      	b.n	800917e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009168:	2b04      	cmp	r3, #4
 800916a:	d004      	beq.n	8009176 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009176:	2180      	movs	r1, #128	; 0x80
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f001 fa1b 	bl	800a5b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009184:	2b01      	cmp	r3, #1
 8009186:	d11d      	bne.n	80091c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f7ff fe81 	bl	8008e90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009196:	e015      	b.n	80091c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d108      	bne.n	80091c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	7afa      	ldrb	r2, [r7, #11]
 80091b8:	4611      	mov	r1, r2
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	4798      	blx	r3
 80091be:	e001      	b.n	80091c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091c0:	2302      	movs	r3, #2
 80091c2:	e000      	b.n	80091c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 f9a4 	bl	800a52a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2240      	movs	r2, #64	; 0x40
 80091ee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091f2:	2340      	movs	r3, #64	; 0x40
 80091f4:	2200      	movs	r2, #0
 80091f6:	2180      	movs	r1, #128	; 0x80
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 f996 	bl	800a52a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2240      	movs	r2, #64	; 0x40
 8009208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	6852      	ldr	r2, [r2, #4]
 800923e:	b2d2      	uxtb	r2, r2
 8009240:	4611      	mov	r1, r2
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
  }

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr

0800926e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2204      	movs	r2, #4
 8009286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr

08009296 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d105      	bne.n	80092b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr

080092c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ce:	2b03      	cmp	r3, #3
 80092d0:	d10b      	bne.n	80092ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d005      	beq.n	800931a <USBD_StdDevReq+0x26>
 800930e:	2b40      	cmp	r3, #64	; 0x40
 8009310:	d84f      	bhi.n	80093b2 <USBD_StdDevReq+0xbe>
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <USBD_StdDevReq+0x36>
 8009316:	2b20      	cmp	r3, #32
 8009318:	d14b      	bne.n	80093b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
      break;
 8009328:	e048      	b.n	80093bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b09      	cmp	r3, #9
 8009330:	d839      	bhi.n	80093a6 <USBD_StdDevReq+0xb2>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <USBD_StdDevReq+0x44>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	08009389 	.word	0x08009389
 800933c:	0800939d 	.word	0x0800939d
 8009340:	080093a7 	.word	0x080093a7
 8009344:	08009393 	.word	0x08009393
 8009348:	080093a7 	.word	0x080093a7
 800934c:	0800936b 	.word	0x0800936b
 8009350:	08009361 	.word	0x08009361
 8009354:	080093a7 	.word	0x080093a7
 8009358:	0800937f 	.word	0x0800937f
 800935c:	08009375 	.word	0x08009375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9dc 	bl	8009720 <USBD_GetDescriptor>
          break;
 8009368:	e022      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb3f 	bl	80099f0 <USBD_SetAddress>
          break;
 8009372:	e01d      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fb7e 	bl	8009a78 <USBD_SetConfig>
          break;
 800937c:	e018      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc07 	bl	8009b94 <USBD_GetConfig>
          break;
 8009386:	e013      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fc37 	bl	8009bfe <USBD_GetStatus>
          break;
 8009390:	e00e      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc65 	bl	8009c64 <USBD_SetFeature>
          break;
 800939a:	e009      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc74 	bl	8009c8c <USBD_ClrFeature>
          break;
 80093a4:	e004      	b.n	80093b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fccc 	bl	8009d46 <USBD_CtlError>
          break;
 80093ae:	bf00      	nop
      }
      break;
 80093b0:	e004      	b.n	80093bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 fcc6 	bl	8009d46 <USBD_CtlError>
      break;
 80093ba:	bf00      	nop
  }

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop

080093c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093de:	2b40      	cmp	r3, #64	; 0x40
 80093e0:	d005      	beq.n	80093ee <USBD_StdItfReq+0x26>
 80093e2:	2b40      	cmp	r3, #64	; 0x40
 80093e4:	d82e      	bhi.n	8009444 <USBD_StdItfReq+0x7c>
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <USBD_StdItfReq+0x26>
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d12a      	bne.n	8009444 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d81d      	bhi.n	8009436 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	889b      	ldrh	r3, [r3, #4]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	2b01      	cmp	r3, #1
 8009402:	d813      	bhi.n	800942c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
 8009412:	4603      	mov	r3, r0
 8009414:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	88db      	ldrh	r3, [r3, #6]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d110      	bne.n	8009440 <USBD_StdItfReq+0x78>
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10d      	bne.n	8009440 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fd56 	bl	8009ed6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800942a:	e009      	b.n	8009440 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fc89 	bl	8009d46 <USBD_CtlError>
          break;
 8009434:	e004      	b.n	8009440 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fc84 	bl	8009d46 <USBD_CtlError>
          break;
 800943e:	e000      	b.n	8009442 <USBD_StdItfReq+0x7a>
          break;
 8009440:	bf00      	nop
      }
      break;
 8009442:	e004      	b.n	800944e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc7d 	bl	8009d46 <USBD_CtlError>
      break;
 800944c:	bf00      	nop
  }

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	889b      	ldrh	r3, [r3, #4]
 800946a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d007      	beq.n	8009488 <USBD_StdEPReq+0x30>
 8009478:	2b40      	cmp	r3, #64	; 0x40
 800947a:	f200 8146 	bhi.w	800970a <USBD_StdEPReq+0x2b2>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <USBD_StdEPReq+0x40>
 8009482:	2b20      	cmp	r3, #32
 8009484:	f040 8141 	bne.w	800970a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
      break;
 8009496:	e13d      	b.n	8009714 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d10a      	bne.n	80094ba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	e12d      	b.n	8009716 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d007      	beq.n	80094d2 <USBD_StdEPReq+0x7a>
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	f300 811b 	bgt.w	80096fe <USBD_StdEPReq+0x2a6>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d072      	beq.n	80095b2 <USBD_StdEPReq+0x15a>
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d03a      	beq.n	8009546 <USBD_StdEPReq+0xee>
 80094d0:	e115      	b.n	80096fe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d002      	beq.n	80094e2 <USBD_StdEPReq+0x8a>
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d015      	beq.n	800950c <USBD_StdEPReq+0xb4>
 80094e0:	e02b      	b.n	800953a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00c      	beq.n	8009502 <USBD_StdEPReq+0xaa>
 80094e8:	7bbb      	ldrb	r3, [r7, #14]
 80094ea:	2b80      	cmp	r3, #128	; 0x80
 80094ec:	d009      	beq.n	8009502 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 f85e 	bl	800a5b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80094f8:	2180      	movs	r1, #128	; 0x80
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 f85a 	bl	800a5b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009500:	e020      	b.n	8009544 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc1e 	bl	8009d46 <USBD_CtlError>
              break;
 800950a:	e01b      	b.n	8009544 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	885b      	ldrh	r3, [r3, #2]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10e      	bne.n	8009532 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <USBD_StdEPReq+0xda>
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b80      	cmp	r3, #128	; 0x80
 800951e:	d008      	beq.n	8009532 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	88db      	ldrh	r3, [r3, #6]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 f841 	bl	800a5b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fccf 	bl	8009ed6 <USBD_CtlSendStatus>

              break;
 8009538:	e004      	b.n	8009544 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc02 	bl	8009d46 <USBD_CtlError>
              break;
 8009542:	bf00      	nop
          }
          break;
 8009544:	e0e0      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	2b02      	cmp	r3, #2
 800954e:	d002      	beq.n	8009556 <USBD_StdEPReq+0xfe>
 8009550:	2b03      	cmp	r3, #3
 8009552:	d015      	beq.n	8009580 <USBD_StdEPReq+0x128>
 8009554:	e026      	b.n	80095a4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00c      	beq.n	8009576 <USBD_StdEPReq+0x11e>
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b80      	cmp	r3, #128	; 0x80
 8009560:	d009      	beq.n	8009576 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f824 	bl	800a5b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800956c:	2180      	movs	r1, #128	; 0x80
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f820 	bl	800a5b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009574:	e01c      	b.n	80095b0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009576:	6839      	ldr	r1, [r7, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fbe4 	bl	8009d46 <USBD_CtlError>
              break;
 800957e:	e017      	b.n	80095b0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	885b      	ldrh	r3, [r3, #2]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d112      	bne.n	80095ae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009592:	7bbb      	ldrb	r3, [r7, #14]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 f82b 	bl	800a5f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fc9a 	bl	8009ed6 <USBD_CtlSendStatus>
              }
              break;
 80095a2:	e004      	b.n	80095ae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fbcd 	bl	8009d46 <USBD_CtlError>
              break;
 80095ac:	e000      	b.n	80095b0 <USBD_StdEPReq+0x158>
              break;
 80095ae:	bf00      	nop
          }
          break;
 80095b0:	e0aa      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d002      	beq.n	80095c2 <USBD_StdEPReq+0x16a>
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d032      	beq.n	8009626 <USBD_StdEPReq+0x1ce>
 80095c0:	e097      	b.n	80096f2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <USBD_StdEPReq+0x180>
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2b80      	cmp	r3, #128	; 0x80
 80095cc:	d004      	beq.n	80095d8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fbb8 	bl	8009d46 <USBD_CtlError>
                break;
 80095d6:	e091      	b.n	80096fc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0b      	bge.n	80095f8 <USBD_StdEPReq+0x1a0>
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	3310      	adds	r3, #16
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	3304      	adds	r3, #4
 80095f6:	e00b      	b.n	8009610 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	3304      	adds	r3, #4
 8009610:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2202      	movs	r2, #2
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fbfb 	bl	8009e1a <USBD_CtlSendData>
              break;
 8009624:	e06a      	b.n	80096fc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962a:	2b00      	cmp	r3, #0
 800962c:	da11      	bge.n	8009652 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	f003 020f 	and.w	r2, r3, #15
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	4613      	mov	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	440b      	add	r3, r1
 8009640:	3318      	adds	r3, #24
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d117      	bne.n	8009678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fb7b 	bl	8009d46 <USBD_CtlError>
                  break;
 8009650:	e054      	b.n	80096fc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	6879      	ldr	r1, [r7, #4]
 800965a:	4613      	mov	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	440b      	add	r3, r1
 8009664:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fb68 	bl	8009d46 <USBD_CtlError>
                  break;
 8009676:	e041      	b.n	80096fc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800967c:	2b00      	cmp	r3, #0
 800967e:	da0b      	bge.n	8009698 <USBD_StdEPReq+0x240>
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009686:	4613      	mov	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4413      	add	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	3310      	adds	r3, #16
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4413      	add	r3, r2
 8009694:	3304      	adds	r3, #4
 8009696:	e00b      	b.n	80096b0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	3304      	adds	r3, #4
 80096b0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <USBD_StdEPReq+0x266>
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b80      	cmp	r3, #128	; 0x80
 80096bc:	d103      	bne.n	80096c6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e00e      	b.n	80096e4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 ffb0 	bl	800a630 <USBD_LL_IsStallEP>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2201      	movs	r2, #1
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e002      	b.n	80096e4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	2202      	movs	r2, #2
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fb95 	bl	8009e1a <USBD_CtlSendData>
              break;
 80096f0:	e004      	b.n	80096fc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fb26 	bl	8009d46 <USBD_CtlError>
              break;
 80096fa:	bf00      	nop
          }
          break;
 80096fc:	e004      	b.n	8009708 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80096fe:	6839      	ldr	r1, [r7, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fb20 	bl	8009d46 <USBD_CtlError>
          break;
 8009706:	bf00      	nop
      }
      break;
 8009708:	e004      	b.n	8009714 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb1a 	bl	8009d46 <USBD_CtlError>
      break;
 8009712:	bf00      	nop
  }

  return ret;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009732:	2300      	movs	r3, #0
 8009734:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	2b06      	cmp	r3, #6
 8009742:	f200 8128 	bhi.w	8009996 <USBD_GetDescriptor+0x276>
 8009746:	a201      	add	r2, pc, #4	; (adr r2, 800974c <USBD_GetDescriptor+0x2c>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009769 	.word	0x08009769
 8009750:	08009781 	.word	0x08009781
 8009754:	080097c1 	.word	0x080097c1
 8009758:	08009997 	.word	0x08009997
 800975c:	08009997 	.word	0x08009997
 8009760:	08009937 	.word	0x08009937
 8009764:	08009963 	.word	0x08009963
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	7c12      	ldrb	r2, [r2, #16]
 8009774:	f107 0108 	add.w	r1, r7, #8
 8009778:	4610      	mov	r0, r2
 800977a:	4798      	blx	r3
 800977c:	60f8      	str	r0, [r7, #12]
      break;
 800977e:	e112      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7c1b      	ldrb	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10d      	bne.n	80097a4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	f107 0208 	add.w	r2, r7, #8
 8009794:	4610      	mov	r0, r2
 8009796:	4798      	blx	r3
 8009798:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3301      	adds	r3, #1
 800979e:	2202      	movs	r2, #2
 80097a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097a2:	e100      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ac:	f107 0208 	add.w	r2, r7, #8
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3301      	adds	r3, #1
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
      break;
 80097be:	e0f2      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	885b      	ldrh	r3, [r3, #2]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	f200 80ac 	bhi.w	8009924 <USBD_GetDescriptor+0x204>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <USBD_GetDescriptor+0xb4>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	08009821 	.word	0x08009821
 80097dc:	08009855 	.word	0x08009855
 80097e0:	08009889 	.word	0x08009889
 80097e4:	080098bd 	.word	0x080098bd
 80097e8:	080098f1 	.word	0x080098f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	7c12      	ldrb	r2, [r2, #16]
 8009804:	f107 0108 	add.w	r1, r7, #8
 8009808:	4610      	mov	r0, r2
 800980a:	4798      	blx	r3
 800980c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980e:	e091      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fa97 	bl	8009d46 <USBD_CtlError>
            err++;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	3301      	adds	r3, #1
 800981c:	72fb      	strb	r3, [r7, #11]
          break;
 800981e:	e089      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e077      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa7d 	bl	8009d46 <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e06f      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800985a:	68db      	ldr	r3, [r3, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e05d      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fa63 	bl	8009d46 <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e055      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e043      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa49 	bl	8009d46 <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e03b      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098ce:	695b      	ldr	r3, [r3, #20]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098de:	e029      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa2f 	bl	8009d46 <USBD_CtlError>
            err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
          break;
 80098ee:	e021      	b.n	8009934 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7c12      	ldrb	r2, [r2, #16]
 8009908:	f107 0108 	add.w	r1, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009912:	e00f      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa15 	bl	8009d46 <USBD_CtlError>
            err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
          break;
 8009922:	e007      	b.n	8009934 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa0d 	bl	8009d46 <USBD_CtlError>
          err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009932:	e038      	b.n	80099a6 <USBD_GetDescriptor+0x286>
 8009934:	e037      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	7c1b      	ldrb	r3, [r3, #16]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d109      	bne.n	8009952 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009946:	f107 0208 	add.w	r2, r7, #8
 800994a:	4610      	mov	r0, r2
 800994c:	4798      	blx	r3
 800994e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009950:	e029      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f9f6 	bl	8009d46 <USBD_CtlError>
        err++;
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	3301      	adds	r3, #1
 800995e:	72fb      	strb	r3, [r7, #11]
      break;
 8009960:	e021      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7c1b      	ldrb	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10d      	bne.n	8009986 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009972:	f107 0208 	add.w	r2, r7, #8
 8009976:	4610      	mov	r0, r2
 8009978:	4798      	blx	r3
 800997a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	3301      	adds	r3, #1
 8009980:	2207      	movs	r2, #7
 8009982:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009984:	e00f      	b.n	80099a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9dc 	bl	8009d46 <USBD_CtlError>
        err++;
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	3301      	adds	r3, #1
 8009992:	72fb      	strb	r3, [r7, #11]
      break;
 8009994:	e007      	b.n	80099a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9d4 	bl	8009d46 <USBD_CtlError>
      err++;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	3301      	adds	r3, #1
 80099a2:	72fb      	strb	r3, [r7, #11]
      break;
 80099a4:	bf00      	nop
  }

  if (err != 0U)
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d11c      	bne.n	80099e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099ac:	893b      	ldrh	r3, [r7, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d011      	beq.n	80099d6 <USBD_GetDescriptor+0x2b6>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	88db      	ldrh	r3, [r3, #6]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00d      	beq.n	80099d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88da      	ldrh	r2, [r3, #6]
 80099be:	893b      	ldrh	r3, [r7, #8]
 80099c0:	4293      	cmp	r3, r2
 80099c2:	bf28      	it	cs
 80099c4:	4613      	movcs	r3, r2
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099ca:	893b      	ldrh	r3, [r7, #8]
 80099cc:	461a      	mov	r2, r3
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fa22 	bl	8009e1a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	88db      	ldrh	r3, [r3, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d104      	bne.n	80099e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fa79 	bl	8009ed6 <USBD_CtlSendStatus>
 80099e4:	e000      	b.n	80099e8 <USBD_GetDescriptor+0x2c8>
    return;
 80099e6:	bf00      	nop
    }
  }
}
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	889b      	ldrh	r3, [r3, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d130      	bne.n	8009a64 <USBD_SetAddress+0x74>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	88db      	ldrh	r3, [r3, #6]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d12c      	bne.n	8009a64 <USBD_SetAddress+0x74>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	885b      	ldrh	r3, [r3, #2]
 8009a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a10:	d828      	bhi.n	8009a64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	885b      	ldrh	r3, [r3, #2]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a24:	2b03      	cmp	r3, #3
 8009a26:	d104      	bne.n	8009a32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 f98b 	bl	8009d46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a30:	e01d      	b.n	8009a6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7bfa      	ldrb	r2, [r7, #15]
 8009a36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fe22 	bl	800a688 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa46 	bl	8009ed6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d004      	beq.n	8009a5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a58:	e009      	b.n	8009a6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	e004      	b.n	8009a6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f96d 	bl	8009d46 <USBD_CtlError>
  }
}
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	885b      	ldrh	r3, [r3, #2]
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	4b41      	ldr	r3, [pc, #260]	; (8009b90 <USBD_SetConfig+0x118>)
 8009a8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a8c:	4b40      	ldr	r3, [pc, #256]	; (8009b90 <USBD_SetConfig+0x118>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d904      	bls.n	8009a9e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f955 	bl	8009d46 <USBD_CtlError>
 8009a9c:	e075      	b.n	8009b8a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d002      	beq.n	8009aae <USBD_SetConfig+0x36>
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d023      	beq.n	8009af4 <USBD_SetConfig+0x7c>
 8009aac:	e062      	b.n	8009b74 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009aae:	4b38      	ldr	r3, [pc, #224]	; (8009b90 <USBD_SetConfig+0x118>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01a      	beq.n	8009aec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ab6:	4b36      	ldr	r3, [pc, #216]	; (8009b90 <USBD_SetConfig+0x118>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ac8:	4b31      	ldr	r3, [pc, #196]	; (8009b90 <USBD_SetConfig+0x118>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff f9e8 	bl	8008ea4 <USBD_SetClassConfig>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d104      	bne.n	8009ae4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f932 	bl	8009d46 <USBD_CtlError>
            return;
 8009ae2:	e052      	b.n	8009b8a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f9f6 	bl	8009ed6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009aea:	e04e      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f9f2 	bl	8009ed6 <USBD_CtlSendStatus>
        break;
 8009af2:	e04a      	b.n	8009b8a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009af4:	4b26      	ldr	r3, [pc, #152]	; (8009b90 <USBD_SetConfig+0x118>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d112      	bne.n	8009b22 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b04:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b0e:	4b20      	ldr	r3, [pc, #128]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f7ff f9e4 	bl	8008ee2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9db 	bl	8009ed6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b20:	e033      	b.n	8009b8a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b22:	4b1b      	ldr	r3, [pc, #108]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d01d      	beq.n	8009b6c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff f9d2 	bl	8008ee2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b3e:	4b14      	ldr	r3, [pc, #80]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b48:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff f9a8 	bl	8008ea4 <USBD_SetClassConfig>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d104      	bne.n	8009b64 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f8f2 	bl	8009d46 <USBD_CtlError>
            return;
 8009b62:	e012      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9b6 	bl	8009ed6 <USBD_CtlSendStatus>
        break;
 8009b6a:	e00e      	b.n	8009b8a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9b2 	bl	8009ed6 <USBD_CtlSendStatus>
        break;
 8009b72:	e00a      	b.n	8009b8a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f8e5 	bl	8009d46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <USBD_SetConfig+0x118>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff f9ad 	bl	8008ee2 <USBD_ClrClassConfig>
        break;
 8009b88:	bf00      	nop
    }
  }
}
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	200003e0 	.word	0x200003e0

08009b94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88db      	ldrh	r3, [r3, #6]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d004      	beq.n	8009bb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f8cc 	bl	8009d46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bae:	e022      	b.n	8009bf6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	dc02      	bgt.n	8009bc0 <USBD_GetConfig+0x2c>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc03      	bgt.n	8009bc6 <USBD_GetConfig+0x32>
 8009bbe:	e015      	b.n	8009bec <USBD_GetConfig+0x58>
 8009bc0:	2b03      	cmp	r3, #3
 8009bc2:	d00b      	beq.n	8009bdc <USBD_GetConfig+0x48>
 8009bc4:	e012      	b.n	8009bec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f920 	bl	8009e1a <USBD_CtlSendData>
        break;
 8009bda:	e00c      	b.n	8009bf6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3304      	adds	r3, #4
 8009be0:	2201      	movs	r2, #1
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f918 	bl	8009e1a <USBD_CtlSendData>
        break;
 8009bea:	e004      	b.n	8009bf6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8a9 	bl	8009d46 <USBD_CtlError>
        break;
 8009bf4:	bf00      	nop
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d81e      	bhi.n	8009c52 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	88db      	ldrh	r3, [r3, #6]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d004      	beq.n	8009c26 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f891 	bl	8009d46 <USBD_CtlError>
        break;
 8009c24:	e01a      	b.n	8009c5c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f043 0202 	orr.w	r2, r3, #2
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	330c      	adds	r3, #12
 8009c46:	2202      	movs	r2, #2
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f8e5 	bl	8009e1a <USBD_CtlSendData>
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f876 	bl	8009d46 <USBD_CtlError>
      break;
 8009c5a:	bf00      	nop
  }
}
 8009c5c:	bf00      	nop
 8009c5e:	3708      	adds	r7, #8
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d106      	bne.n	8009c84 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f929 	bl	8009ed6 <USBD_CtlSendStatus>
  }
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d80b      	bhi.n	8009cba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	885b      	ldrh	r3, [r3, #2]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d10c      	bne.n	8009cc4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f90f 	bl	8009ed6 <USBD_CtlSendStatus>
      }
      break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f842 	bl	8009d46 <USBD_CtlError>
      break;
 8009cc2:	e000      	b.n	8009cc6 <USBD_ClrFeature+0x3a>
      break;
 8009cc4:	bf00      	nop
  }
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781a      	ldrb	r2, [r3, #0]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	785a      	ldrb	r2, [r3, #1]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	3302      	adds	r3, #2
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	3303      	adds	r3, #3
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	3304      	adds	r3, #4
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	3305      	adds	r3, #5
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4413      	add	r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	3306      	adds	r3, #6
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	3307      	adds	r3, #7
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4413      	add	r3, r2
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	80da      	strh	r2, [r3, #6]

}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bc80      	pop	{r7}
 8009d44:	4770      	bx	lr

08009d46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d50:	2180      	movs	r1, #128	; 0x80
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fc2e 	bl	800a5b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d58:	2100      	movs	r1, #0
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fc2a 	bl	800a5b4 <USBD_LL_StallEP>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d032      	beq.n	8009de4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f834 	bl	8009dec <USBD_GetLen>
 8009d84:	4603      	mov	r3, r0
 8009d86:	3301      	adds	r3, #1
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	75fa      	strb	r2, [r7, #23]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	7812      	ldrb	r2, [r2, #0]
 8009da2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	75fa      	strb	r2, [r7, #23]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4413      	add	r3, r2
 8009db0:	2203      	movs	r2, #3
 8009db2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009db4:	e012      	b.n	8009ddc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	60fa      	str	r2, [r7, #12]
 8009dbc:	7dfa      	ldrb	r2, [r7, #23]
 8009dbe:	1c51      	adds	r1, r2, #1
 8009dc0:	75f9      	strb	r1, [r7, #23]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	68ba      	ldr	r2, [r7, #8]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	75fa      	strb	r2, [r7, #23]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d1e8      	bne.n	8009db6 <USBD_GetString+0x4e>
    }
  }
}
 8009de4:	bf00      	nop
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009df8:	e005      	b.n	8009e06 <USBD_GetLen+0x1a>
  {
    len++;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3301      	adds	r3, #1
 8009e04:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f5      	bne.n	8009dfa <USBD_GetLen+0xe>
  }

  return len;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bc80      	pop	{r7}
 8009e18:	4770      	bx	lr

08009e1a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	4613      	mov	r3, r2
 8009e26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e30:	88fa      	ldrh	r2, [r7, #6]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e36:	88fa      	ldrh	r2, [r7, #6]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	2100      	movs	r1, #0
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f000 fc3f 	bl	800a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	2100      	movs	r1, #0
 8009e66:	68f8      	ldr	r0, [r7, #12]
 8009e68:	f000 fc2d 	bl	800a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	4613      	mov	r3, r2
 8009e82:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2203      	movs	r2, #3
 8009e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e8c:	88fa      	ldrh	r2, [r7, #6]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009e94:	88fa      	ldrh	r2, [r7, #6]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fc32 	bl	800a70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	60b9      	str	r1, [r7, #8]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec0:	88fb      	ldrh	r3, [r7, #6]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fc20 	bl	800a70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2204      	movs	r2, #4
 8009ee2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fbea 	bl	800a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2205      	movs	r2, #5
 8009f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fbfa 	bl	800a70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	4912      	ldr	r1, [pc, #72]	; (8009f74 <MX_USB_DEVICE_Init+0x50>)
 8009f2c:	4812      	ldr	r0, [pc, #72]	; (8009f78 <MX_USB_DEVICE_Init+0x54>)
 8009f2e:	f7fe ff5f 	bl	8008df0 <USBD_Init>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f38:	f7f6 fd7e 	bl	8000a38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f3c:	490f      	ldr	r1, [pc, #60]	; (8009f7c <MX_USB_DEVICE_Init+0x58>)
 8009f3e:	480e      	ldr	r0, [pc, #56]	; (8009f78 <MX_USB_DEVICE_Init+0x54>)
 8009f40:	f7fe ff81 	bl	8008e46 <USBD_RegisterClass>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d001      	beq.n	8009f4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f4a:	f7f6 fd75 	bl	8000a38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f4e:	490c      	ldr	r1, [pc, #48]	; (8009f80 <MX_USB_DEVICE_Init+0x5c>)
 8009f50:	4809      	ldr	r0, [pc, #36]	; (8009f78 <MX_USB_DEVICE_Init+0x54>)
 8009f52:	f7fe fee1 	bl	8008d18 <USBD_CDC_RegisterInterface>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f5c:	f7f6 fd6c 	bl	8000a38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f60:	4805      	ldr	r0, [pc, #20]	; (8009f78 <MX_USB_DEVICE_Init+0x54>)
 8009f62:	f7fe ff89 	bl	8008e78 <USBD_Start>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f6c:	f7f6 fd64 	bl	8000a38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000134 	.word	0x20000134
 8009f78:	200003e4 	.word	0x200003e4
 8009f7c:	20000020 	.word	0x20000020
 8009f80:	20000124 	.word	0x20000124

08009f84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f88:	2200      	movs	r2, #0
 8009f8a:	4905      	ldr	r1, [pc, #20]	; (8009fa0 <CDC_Init_FS+0x1c>)
 8009f8c:	4805      	ldr	r0, [pc, #20]	; (8009fa4 <CDC_Init_FS+0x20>)
 8009f8e:	f7fe fed9 	bl	8008d44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f92:	4905      	ldr	r1, [pc, #20]	; (8009fa8 <CDC_Init_FS+0x24>)
 8009f94:	4803      	ldr	r0, [pc, #12]	; (8009fa4 <CDC_Init_FS+0x20>)
 8009f96:	f7fe feee 	bl	8008d76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000a90 	.word	0x20000a90
 8009fa4:	200003e4 	.word	0x200003e4
 8009fa8:	200006a8 	.word	0x200006a8

08009fac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr
	...

08009fbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fcc:	79fb      	ldrb	r3, [r7, #7]
 8009fce:	2b23      	cmp	r3, #35	; 0x23
 8009fd0:	d84a      	bhi.n	800a068 <CDC_Control_FS+0xac>
 8009fd2:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <CDC_Control_FS+0x1c>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	0800a069 	.word	0x0800a069
 8009fdc:	0800a069 	.word	0x0800a069
 8009fe0:	0800a069 	.word	0x0800a069
 8009fe4:	0800a069 	.word	0x0800a069
 8009fe8:	0800a069 	.word	0x0800a069
 8009fec:	0800a069 	.word	0x0800a069
 8009ff0:	0800a069 	.word	0x0800a069
 8009ff4:	0800a069 	.word	0x0800a069
 8009ff8:	0800a069 	.word	0x0800a069
 8009ffc:	0800a069 	.word	0x0800a069
 800a000:	0800a069 	.word	0x0800a069
 800a004:	0800a069 	.word	0x0800a069
 800a008:	0800a069 	.word	0x0800a069
 800a00c:	0800a069 	.word	0x0800a069
 800a010:	0800a069 	.word	0x0800a069
 800a014:	0800a069 	.word	0x0800a069
 800a018:	0800a069 	.word	0x0800a069
 800a01c:	0800a069 	.word	0x0800a069
 800a020:	0800a069 	.word	0x0800a069
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a069 	.word	0x0800a069
 800a02c:	0800a069 	.word	0x0800a069
 800a030:	0800a069 	.word	0x0800a069
 800a034:	0800a069 	.word	0x0800a069
 800a038:	0800a069 	.word	0x0800a069
 800a03c:	0800a069 	.word	0x0800a069
 800a040:	0800a069 	.word	0x0800a069
 800a044:	0800a069 	.word	0x0800a069
 800a048:	0800a069 	.word	0x0800a069
 800a04c:	0800a069 	.word	0x0800a069
 800a050:	0800a069 	.word	0x0800a069
 800a054:	0800a069 	.word	0x0800a069
 800a058:	0800a069 	.word	0x0800a069
 800a05c:	0800a069 	.word	0x0800a069
 800a060:	0800a069 	.word	0x0800a069
 800a064:	0800a069 	.word	0x0800a069
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a068:	bf00      	nop
  }

  return (USBD_OK);
 800a06a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop

0800a078 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	4805      	ldr	r0, [pc, #20]	; (800a09c <CDC_Receive_FS+0x24>)
 800a086:	f7fe fe76 	bl	8008d76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a08a:	4804      	ldr	r0, [pc, #16]	; (800a09c <CDC_Receive_FS+0x24>)
 800a08c:	f7fe fe86 	bl	8008d9c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a090:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	200003e4 	.word	0x200003e4

0800a0a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	6039      	str	r1, [r7, #0]
 800a0aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2212      	movs	r2, #18
 800a0b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0b2:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bc80      	pop	{r7}
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	20000150 	.word	0x20000150

0800a0c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2204      	movs	r2, #4
 800a0d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0d6:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bc80      	pop	{r7}
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000164 	.word	0x20000164

0800a0e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	6039      	str	r1, [r7, #0]
 800a0f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	4907      	ldr	r1, [pc, #28]	; (800a11c <USBD_FS_ProductStrDescriptor+0x34>)
 800a0fe:	4808      	ldr	r0, [pc, #32]	; (800a120 <USBD_FS_ProductStrDescriptor+0x38>)
 800a100:	f7ff fe32 	bl	8009d68 <USBD_GetString>
 800a104:	e004      	b.n	800a110 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4904      	ldr	r1, [pc, #16]	; (800a11c <USBD_FS_ProductStrDescriptor+0x34>)
 800a10a:	4805      	ldr	r0, [pc, #20]	; (800a120 <USBD_FS_ProductStrDescriptor+0x38>)
 800a10c:	f7ff fe2c 	bl	8009d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a110:	4b02      	ldr	r3, [pc, #8]	; (800a11c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	20000e78 	.word	0x20000e78
 800a120:	0800b1b0 	.word	0x0800b1b0

0800a124 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	4603      	mov	r3, r0
 800a12c:	6039      	str	r1, [r7, #0]
 800a12e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	4904      	ldr	r1, [pc, #16]	; (800a144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a134:	4804      	ldr	r0, [pc, #16]	; (800a148 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a136:	f7ff fe17 	bl	8009d68 <USBD_GetString>
  return USBD_StrDesc;
 800a13a:	4b02      	ldr	r3, [pc, #8]	; (800a144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20000e78 	.word	0x20000e78
 800a148:	0800b1c8 	.word	0x0800b1c8

0800a14c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	6039      	str	r1, [r7, #0]
 800a156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	221a      	movs	r2, #26
 800a15c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a15e:	f000 f843 	bl	800a1e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a162:	4b02      	ldr	r3, [pc, #8]	; (800a16c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000168 	.word	0x20000168

0800a170 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	6039      	str	r1, [r7, #0]
 800a17a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a17c:	79fb      	ldrb	r3, [r7, #7]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d105      	bne.n	800a18e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	4907      	ldr	r1, [pc, #28]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a186:	4808      	ldr	r0, [pc, #32]	; (800a1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a188:	f7ff fdee 	bl	8009d68 <USBD_GetString>
 800a18c:	e004      	b.n	800a198 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	4904      	ldr	r1, [pc, #16]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a192:	4805      	ldr	r0, [pc, #20]	; (800a1a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a194:	f7ff fde8 	bl	8009d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000e78 	.word	0x20000e78
 800a1a8:	0800b1dc 	.word	0x0800b1dc

0800a1ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b8:	79fb      	ldrb	r3, [r7, #7]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1c2:	4808      	ldr	r0, [pc, #32]	; (800a1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1c4:	f7ff fdd0 	bl	8009d68 <USBD_GetString>
 800a1c8:	e004      	b.n	800a1d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	4904      	ldr	r1, [pc, #16]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1ce:	4805      	ldr	r0, [pc, #20]	; (800a1e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1d0:	f7ff fdca 	bl	8009d68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1d4:	4b02      	ldr	r3, [pc, #8]	; (800a1e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000e78 	.word	0x20000e78
 800a1e4:	0800b1e8 	.word	0x0800b1e8

0800a1e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <Get_SerialNum+0x44>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1f4:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <Get_SerialNum+0x48>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1fa:	4b0e      	ldr	r3, [pc, #56]	; (800a234 <Get_SerialNum+0x4c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4413      	add	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a20e:	2208      	movs	r2, #8
 800a210:	4909      	ldr	r1, [pc, #36]	; (800a238 <Get_SerialNum+0x50>)
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 f814 	bl	800a240 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a218:	2204      	movs	r2, #4
 800a21a:	4908      	ldr	r1, [pc, #32]	; (800a23c <Get_SerialNum+0x54>)
 800a21c:	68b8      	ldr	r0, [r7, #8]
 800a21e:	f000 f80f 	bl	800a240 <IntToUnicode>
  }
}
 800a222:	bf00      	nop
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	1ffff7e8 	.word	0x1ffff7e8
 800a230:	1ffff7ec 	.word	0x1ffff7ec
 800a234:	1ffff7f0 	.word	0x1ffff7f0
 800a238:	2000016a 	.word	0x2000016a
 800a23c:	2000017a 	.word	0x2000017a

0800a240 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a240:	b480      	push	{r7}
 800a242:	b087      	sub	sp, #28
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4613      	mov	r3, r2
 800a24c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a252:	2300      	movs	r3, #0
 800a254:	75fb      	strb	r3, [r7, #23]
 800a256:	e027      	b.n	800a2a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	0f1b      	lsrs	r3, r3, #28
 800a25c:	2b09      	cmp	r3, #9
 800a25e:	d80b      	bhi.n	800a278 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	0f1b      	lsrs	r3, r3, #28
 800a264:	b2da      	uxtb	r2, r3
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	4619      	mov	r1, r3
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	440b      	add	r3, r1
 800a270:	3230      	adds	r2, #48	; 0x30
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]
 800a276:	e00a      	b.n	800a28e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	0f1b      	lsrs	r3, r3, #28
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	4619      	mov	r1, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	440b      	add	r3, r1
 800a288:	3237      	adds	r2, #55	; 0x37
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	3301      	adds	r3, #1
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	4413      	add	r3, r2
 800a29e:	2200      	movs	r2, #0
 800a2a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	75fb      	strb	r3, [r7, #23]
 800a2a8:	7dfa      	ldrb	r2, [r7, #23]
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3d3      	bcc.n	800a258 <IntToUnicode+0x18>
  }
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr

0800a2bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a0d      	ldr	r2, [pc, #52]	; (800a300 <HAL_PCD_MspInit+0x44>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d113      	bne.n	800a2f6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2ce:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <HAL_PCD_MspInit+0x48>)
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	4a0c      	ldr	r2, [pc, #48]	; (800a304 <HAL_PCD_MspInit+0x48>)
 800a2d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2d8:	61d3      	str	r3, [r2, #28]
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <HAL_PCD_MspInit+0x48>)
 800a2dc:	69db      	ldr	r3, [r3, #28]
 800a2de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	2014      	movs	r0, #20
 800a2ec:	f7f7 fb83 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a2f0:	2014      	movs	r0, #20
 800a2f2:	f7f7 fb9c 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	40005c00 	.word	0x40005c00
 800a304:	40021000 	.word	0x40021000

0800a308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe fdf2 	bl	8008f08 <USBD_LL_SetupStage>
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	00db      	lsls	r3, r3, #3
 800a34a:	440b      	add	r3, r1
 800a34c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	4619      	mov	r1, r3
 800a356:	f7fe fe24 	bl	8008fa2 <USBD_LL_DataOutStage>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	00db      	lsls	r3, r3, #3
 800a380:	440b      	add	r3, r1
 800a382:	333c      	adds	r3, #60	; 0x3c
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	4619      	mov	r1, r3
 800a38a:	f7fe fe7b 	bl	8009084 <USBD_LL_DataInStage>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe ff8b 	bl	80092c0 <USBD_LL_SOF>
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d001      	beq.n	800a3ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a3c6:	f7f6 fb37 	bl	8000a38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3d0:	7bfa      	ldrb	r2, [r7, #15]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe ff3b 	bl	8009250 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fef4 	bl	80091ce <USBD_LL_Reset>
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe ff35 	bl	800926e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d005      	beq.n	800a418 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <HAL_PCD_SuspendCallback+0x30>)
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	4a03      	ldr	r2, [pc, #12]	; (800a420 <HAL_PCD_SuspendCallback+0x30>)
 800a412:	f043 0306 	orr.w	r3, r3, #6
 800a416:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	e000ed00 	.word	0xe000ed00

0800a424 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe ff2f 	bl	8009296 <USBD_LL_Resume>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a448:	4a28      	ldr	r2, [pc, #160]	; (800a4ec <USBD_LL_Init+0xac>)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a26      	ldr	r2, [pc, #152]	; (800a4ec <USBD_LL_Init+0xac>)
 800a454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a458:	4b24      	ldr	r3, [pc, #144]	; (800a4ec <USBD_LL_Init+0xac>)
 800a45a:	4a25      	ldr	r2, [pc, #148]	; (800a4f0 <USBD_LL_Init+0xb0>)
 800a45c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a45e:	4b23      	ldr	r3, [pc, #140]	; (800a4ec <USBD_LL_Init+0xac>)
 800a460:	2208      	movs	r2, #8
 800a462:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a464:	4b21      	ldr	r3, [pc, #132]	; (800a4ec <USBD_LL_Init+0xac>)
 800a466:	2202      	movs	r2, #2
 800a468:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a46a:	4b20      	ldr	r3, [pc, #128]	; (800a4ec <USBD_LL_Init+0xac>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a470:	4b1e      	ldr	r3, [pc, #120]	; (800a4ec <USBD_LL_Init+0xac>)
 800a472:	2200      	movs	r2, #0
 800a474:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <USBD_LL_Init+0xac>)
 800a478:	2200      	movs	r2, #0
 800a47a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a47c:	481b      	ldr	r0, [pc, #108]	; (800a4ec <USBD_LL_Init+0xac>)
 800a47e:	f7f7 fcbd 	bl	8001dfc <HAL_PCD_Init>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a488:	f7f6 fad6 	bl	8000a38 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a492:	2318      	movs	r3, #24
 800a494:	2200      	movs	r2, #0
 800a496:	2100      	movs	r1, #0
 800a498:	f7f9 f931 	bl	80036fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4a2:	2358      	movs	r3, #88	; 0x58
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2180      	movs	r1, #128	; 0x80
 800a4a8:	f7f9 f929 	bl	80036fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4b2:	23c0      	movs	r3, #192	; 0xc0
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2181      	movs	r1, #129	; 0x81
 800a4b8:	f7f9 f921 	bl	80036fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	f7f9 f918 	bl	80036fe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2182      	movs	r1, #130	; 0x82
 800a4dc:	f7f9 f90f 	bl	80036fe <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20001078 	.word	0x20001078
 800a4f0:	40005c00 	.word	0x40005c00

0800a4f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a500:	2300      	movs	r3, #0
 800a502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7f7 fd81 	bl	8002012 <HAL_PCD_Start>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f94e 	bl	800a7b8 <USBD_Get_USB_Status>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a520:	7bbb      	ldrb	r3, [r7, #14]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	461a      	mov	r2, r3
 800a538:	4603      	mov	r3, r0
 800a53a:	70fb      	strb	r3, [r7, #3]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70bb      	strb	r3, [r7, #2]
 800a540:	4613      	mov	r3, r2
 800a542:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a552:	78bb      	ldrb	r3, [r7, #2]
 800a554:	883a      	ldrh	r2, [r7, #0]
 800a556:	78f9      	ldrb	r1, [r7, #3]
 800a558:	f7f7 fef9 	bl	800234e <HAL_PCD_EP_Open>
 800a55c:	4603      	mov	r3, r0
 800a55e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a560:	7bfb      	ldrb	r3, [r7, #15]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 f928 	bl	800a7b8 <USBD_Get_USB_Status>
 800a568:	4603      	mov	r3, r0
 800a56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b084      	sub	sp, #16
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	6078      	str	r0, [r7, #4]
 800a57e:	460b      	mov	r3, r1
 800a580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a590:	78fa      	ldrb	r2, [r7, #3]
 800a592:	4611      	mov	r1, r2
 800a594:	4618      	mov	r0, r3
 800a596:	f7f7 ff40 	bl	800241a <HAL_PCD_EP_Close>
 800a59a:	4603      	mov	r3, r0
 800a59c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 f909 	bl	800a7b8 <USBD_Get_USB_Status>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f8 f800 	bl	80025d8 <HAL_PCD_EP_SetStall>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f8ea 	bl	800a7b8 <USBD_Get_USB_Status>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7f8 f841 	bl	8002698 <HAL_PCD_EP_ClrStall>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f8cb 	bl	800a7b8 <USBD_Get_USB_Status>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a626:	7bbb      	ldrb	r3, [r7, #14]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a642:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	da0c      	bge.n	800a666 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a64c:	78fb      	ldrb	r3, [r7, #3]
 800a64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	440b      	add	r3, r1
 800a660:	3302      	adds	r3, #2
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	e00b      	b.n	800a67e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a66c:	68f9      	ldr	r1, [r7, #12]
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	440b      	add	r3, r1
 800a678:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a67c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr

0800a688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6a2:	78fa      	ldrb	r2, [r7, #3]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7f7 fe2c 	bl	8002304 <HAL_PCD_SetAddress>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 f880 	bl	800a7b8 <USBD_Get_USB_Status>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b086      	sub	sp, #24
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	72fb      	strb	r3, [r7, #11]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6e8:	893b      	ldrh	r3, [r7, #8]
 800a6ea:	7af9      	ldrb	r1, [r7, #11]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	f7f7 ff30 	bl	8002552 <HAL_PCD_EP_Transmit>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f85d 	bl	800a7b8 <USBD_Get_USB_Status>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a702:	7dbb      	ldrb	r3, [r7, #22]
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	607a      	str	r2, [r7, #4]
 800a716:	461a      	mov	r2, r3
 800a718:	460b      	mov	r3, r1
 800a71a:	72fb      	strb	r3, [r7, #11]
 800a71c:	4613      	mov	r3, r2
 800a71e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a72e:	893b      	ldrh	r3, [r7, #8]
 800a730:	7af9      	ldrb	r1, [r7, #11]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	f7f7 feb9 	bl	80024aa <HAL_PCD_EP_Receive>
 800a738:	4603      	mov	r3, r0
 800a73a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 f83a 	bl	800a7b8 <USBD_Get_USB_Status>
 800a744:	4603      	mov	r3, r0
 800a746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a748:	7dbb      	ldrb	r3, [r7, #22]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	460b      	mov	r3, r1
 800a75c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4611      	mov	r1, r2
 800a768:	4618      	mov	r0, r3
 800a76a:	f7f7 fedb 	bl	8002524 <HAL_PCD_EP_GetRxCount>
 800a76e:	4603      	mov	r3, r0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a780:	4b02      	ldr	r3, [pc, #8]	; (800a78c <USBD_static_malloc+0x14>)
}
 800a782:	4618      	mov	r0, r3
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	bc80      	pop	{r7}
 800a78a:	4770      	bx	lr
 800a78c:	20001364 	.word	0x20001364

0800a790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]

}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr

0800a7a2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a7ae:	bf00      	nop
 800a7b0:	370c      	adds	r7, #12
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bc80      	pop	{r7}
 800a7b6:	4770      	bx	lr

0800a7b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d817      	bhi.n	800a7fc <USBD_Get_USB_Status+0x44>
 800a7cc:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <USBD_Get_USB_Status+0x1c>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a7e5 	.word	0x0800a7e5
 800a7d8:	0800a7eb 	.word	0x0800a7eb
 800a7dc:	0800a7f1 	.word	0x0800a7f1
 800a7e0:	0800a7f7 	.word	0x0800a7f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e8:	e00b      	b.n	800a802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ee:	e008      	b.n	800a802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7f4:	e005      	b.n	800a802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7fa:	e002      	b.n	800a802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	bf00      	nop
  }
  return usb_status;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	bc80      	pop	{r7}
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <__errno>:
 800a810:	4b01      	ldr	r3, [pc, #4]	; (800a818 <__errno+0x8>)
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	20000184 	.word	0x20000184

0800a81c <__libc_init_array>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	2600      	movs	r6, #0
 800a820:	4d0c      	ldr	r5, [pc, #48]	; (800a854 <__libc_init_array+0x38>)
 800a822:	4c0d      	ldr	r4, [pc, #52]	; (800a858 <__libc_init_array+0x3c>)
 800a824:	1b64      	subs	r4, r4, r5
 800a826:	10a4      	asrs	r4, r4, #2
 800a828:	42a6      	cmp	r6, r4
 800a82a:	d109      	bne.n	800a840 <__libc_init_array+0x24>
 800a82c:	f000 fc9c 	bl	800b168 <_init>
 800a830:	2600      	movs	r6, #0
 800a832:	4d0a      	ldr	r5, [pc, #40]	; (800a85c <__libc_init_array+0x40>)
 800a834:	4c0a      	ldr	r4, [pc, #40]	; (800a860 <__libc_init_array+0x44>)
 800a836:	1b64      	subs	r4, r4, r5
 800a838:	10a4      	asrs	r4, r4, #2
 800a83a:	42a6      	cmp	r6, r4
 800a83c:	d105      	bne.n	800a84a <__libc_init_array+0x2e>
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	f855 3b04 	ldr.w	r3, [r5], #4
 800a844:	4798      	blx	r3
 800a846:	3601      	adds	r6, #1
 800a848:	e7ee      	b.n	800a828 <__libc_init_array+0xc>
 800a84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a84e:	4798      	blx	r3
 800a850:	3601      	adds	r6, #1
 800a852:	e7f2      	b.n	800a83a <__libc_init_array+0x1e>
 800a854:	0800b23c 	.word	0x0800b23c
 800a858:	0800b23c 	.word	0x0800b23c
 800a85c:	0800b23c 	.word	0x0800b23c
 800a860:	0800b240 	.word	0x0800b240

0800a864 <memset>:
 800a864:	4603      	mov	r3, r0
 800a866:	4402      	add	r2, r0
 800a868:	4293      	cmp	r3, r2
 800a86a:	d100      	bne.n	800a86e <memset+0xa>
 800a86c:	4770      	bx	lr
 800a86e:	f803 1b01 	strb.w	r1, [r3], #1
 800a872:	e7f9      	b.n	800a868 <memset+0x4>

0800a874 <siprintf>:
 800a874:	b40e      	push	{r1, r2, r3}
 800a876:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a87a:	b500      	push	{lr}
 800a87c:	b09c      	sub	sp, #112	; 0x70
 800a87e:	ab1d      	add	r3, sp, #116	; 0x74
 800a880:	9002      	str	r0, [sp, #8]
 800a882:	9006      	str	r0, [sp, #24]
 800a884:	9107      	str	r1, [sp, #28]
 800a886:	9104      	str	r1, [sp, #16]
 800a888:	4808      	ldr	r0, [pc, #32]	; (800a8ac <siprintf+0x38>)
 800a88a:	4909      	ldr	r1, [pc, #36]	; (800a8b0 <siprintf+0x3c>)
 800a88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	6800      	ldr	r0, [r0, #0]
 800a894:	a902      	add	r1, sp, #8
 800a896:	9301      	str	r3, [sp, #4]
 800a898:	f000 f868 	bl	800a96c <_svfiprintf_r>
 800a89c:	2200      	movs	r2, #0
 800a89e:	9b02      	ldr	r3, [sp, #8]
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	b01c      	add	sp, #112	; 0x70
 800a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a8:	b003      	add	sp, #12
 800a8aa:	4770      	bx	lr
 800a8ac:	20000184 	.word	0x20000184
 800a8b0:	ffff0208 	.word	0xffff0208

0800a8b4 <__ssputs_r>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	688e      	ldr	r6, [r1, #8]
 800a8ba:	4682      	mov	sl, r0
 800a8bc:	429e      	cmp	r6, r3
 800a8be:	460c      	mov	r4, r1
 800a8c0:	4690      	mov	r8, r2
 800a8c2:	461f      	mov	r7, r3
 800a8c4:	d838      	bhi.n	800a938 <__ssputs_r+0x84>
 800a8c6:	898a      	ldrh	r2, [r1, #12]
 800a8c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8cc:	d032      	beq.n	800a934 <__ssputs_r+0x80>
 800a8ce:	6825      	ldr	r5, [r4, #0]
 800a8d0:	6909      	ldr	r1, [r1, #16]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	eba5 0901 	sub.w	r9, r5, r1
 800a8d8:	6965      	ldr	r5, [r4, #20]
 800a8da:	444b      	add	r3, r9
 800a8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8e4:	106d      	asrs	r5, r5, #1
 800a8e6:	429d      	cmp	r5, r3
 800a8e8:	bf38      	it	cc
 800a8ea:	461d      	movcc	r5, r3
 800a8ec:	0553      	lsls	r3, r2, #21
 800a8ee:	d531      	bpl.n	800a954 <__ssputs_r+0xa0>
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	f000 fb6f 	bl	800afd4 <_malloc_r>
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	b950      	cbnz	r0, 800a910 <__ssputs_r+0x5c>
 800a8fa:	230c      	movs	r3, #12
 800a8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a900:	f8ca 3000 	str.w	r3, [sl]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a910:	464a      	mov	r2, r9
 800a912:	6921      	ldr	r1, [r4, #16]
 800a914:	f000 face 	bl	800aeb4 <memcpy>
 800a918:	89a3      	ldrh	r3, [r4, #12]
 800a91a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	6126      	str	r6, [r4, #16]
 800a926:	444e      	add	r6, r9
 800a928:	6026      	str	r6, [r4, #0]
 800a92a:	463e      	mov	r6, r7
 800a92c:	6165      	str	r5, [r4, #20]
 800a92e:	eba5 0509 	sub.w	r5, r5, r9
 800a932:	60a5      	str	r5, [r4, #8]
 800a934:	42be      	cmp	r6, r7
 800a936:	d900      	bls.n	800a93a <__ssputs_r+0x86>
 800a938:	463e      	mov	r6, r7
 800a93a:	4632      	mov	r2, r6
 800a93c:	4641      	mov	r1, r8
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	f000 fac6 	bl	800aed0 <memmove>
 800a944:	68a3      	ldr	r3, [r4, #8]
 800a946:	2000      	movs	r0, #0
 800a948:	1b9b      	subs	r3, r3, r6
 800a94a:	60a3      	str	r3, [r4, #8]
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	4433      	add	r3, r6
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	e7db      	b.n	800a90c <__ssputs_r+0x58>
 800a954:	462a      	mov	r2, r5
 800a956:	f000 fbb1 	bl	800b0bc <_realloc_r>
 800a95a:	4606      	mov	r6, r0
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d1e1      	bne.n	800a924 <__ssputs_r+0x70>
 800a960:	4650      	mov	r0, sl
 800a962:	6921      	ldr	r1, [r4, #16]
 800a964:	f000 face 	bl	800af04 <_free_r>
 800a968:	e7c7      	b.n	800a8fa <__ssputs_r+0x46>
	...

0800a96c <_svfiprintf_r>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	4698      	mov	r8, r3
 800a972:	898b      	ldrh	r3, [r1, #12]
 800a974:	4607      	mov	r7, r0
 800a976:	061b      	lsls	r3, r3, #24
 800a978:	460d      	mov	r5, r1
 800a97a:	4614      	mov	r4, r2
 800a97c:	b09d      	sub	sp, #116	; 0x74
 800a97e:	d50e      	bpl.n	800a99e <_svfiprintf_r+0x32>
 800a980:	690b      	ldr	r3, [r1, #16]
 800a982:	b963      	cbnz	r3, 800a99e <_svfiprintf_r+0x32>
 800a984:	2140      	movs	r1, #64	; 0x40
 800a986:	f000 fb25 	bl	800afd4 <_malloc_r>
 800a98a:	6028      	str	r0, [r5, #0]
 800a98c:	6128      	str	r0, [r5, #16]
 800a98e:	b920      	cbnz	r0, 800a99a <_svfiprintf_r+0x2e>
 800a990:	230c      	movs	r3, #12
 800a992:	603b      	str	r3, [r7, #0]
 800a994:	f04f 30ff 	mov.w	r0, #4294967295
 800a998:	e0d1      	b.n	800ab3e <_svfiprintf_r+0x1d2>
 800a99a:	2340      	movs	r3, #64	; 0x40
 800a99c:	616b      	str	r3, [r5, #20]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a2:	2320      	movs	r3, #32
 800a9a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9a8:	2330      	movs	r3, #48	; 0x30
 800a9aa:	f04f 0901 	mov.w	r9, #1
 800a9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab58 <_svfiprintf_r+0x1ec>
 800a9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9ba:	4623      	mov	r3, r4
 800a9bc:	469a      	mov	sl, r3
 800a9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c2:	b10a      	cbz	r2, 800a9c8 <_svfiprintf_r+0x5c>
 800a9c4:	2a25      	cmp	r2, #37	; 0x25
 800a9c6:	d1f9      	bne.n	800a9bc <_svfiprintf_r+0x50>
 800a9c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a9cc:	d00b      	beq.n	800a9e6 <_svfiprintf_r+0x7a>
 800a9ce:	465b      	mov	r3, fp
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	f7ff ff6d 	bl	800a8b4 <__ssputs_r>
 800a9da:	3001      	adds	r0, #1
 800a9dc:	f000 80aa 	beq.w	800ab34 <_svfiprintf_r+0x1c8>
 800a9e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e2:	445a      	add	r2, fp
 800a9e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 80a2 	beq.w	800ab34 <_svfiprintf_r+0x1c8>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9fa:	f10a 0a01 	add.w	sl, sl, #1
 800a9fe:	9304      	str	r3, [sp, #16]
 800aa00:	9307      	str	r3, [sp, #28]
 800aa02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa06:	931a      	str	r3, [sp, #104]	; 0x68
 800aa08:	4654      	mov	r4, sl
 800aa0a:	2205      	movs	r2, #5
 800aa0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa10:	4851      	ldr	r0, [pc, #324]	; (800ab58 <_svfiprintf_r+0x1ec>)
 800aa12:	f000 fa41 	bl	800ae98 <memchr>
 800aa16:	9a04      	ldr	r2, [sp, #16]
 800aa18:	b9d8      	cbnz	r0, 800aa52 <_svfiprintf_r+0xe6>
 800aa1a:	06d0      	lsls	r0, r2, #27
 800aa1c:	bf44      	itt	mi
 800aa1e:	2320      	movmi	r3, #32
 800aa20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa24:	0711      	lsls	r1, r2, #28
 800aa26:	bf44      	itt	mi
 800aa28:	232b      	movmi	r3, #43	; 0x2b
 800aa2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa32:	2b2a      	cmp	r3, #42	; 0x2a
 800aa34:	d015      	beq.n	800aa62 <_svfiprintf_r+0xf6>
 800aa36:	4654      	mov	r4, sl
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f04f 0c0a 	mov.w	ip, #10
 800aa3e:	9a07      	ldr	r2, [sp, #28]
 800aa40:	4621      	mov	r1, r4
 800aa42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa46:	3b30      	subs	r3, #48	; 0x30
 800aa48:	2b09      	cmp	r3, #9
 800aa4a:	d94e      	bls.n	800aaea <_svfiprintf_r+0x17e>
 800aa4c:	b1b0      	cbz	r0, 800aa7c <_svfiprintf_r+0x110>
 800aa4e:	9207      	str	r2, [sp, #28]
 800aa50:	e014      	b.n	800aa7c <_svfiprintf_r+0x110>
 800aa52:	eba0 0308 	sub.w	r3, r0, r8
 800aa56:	fa09 f303 	lsl.w	r3, r9, r3
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	46a2      	mov	sl, r4
 800aa5e:	9304      	str	r3, [sp, #16]
 800aa60:	e7d2      	b.n	800aa08 <_svfiprintf_r+0x9c>
 800aa62:	9b03      	ldr	r3, [sp, #12]
 800aa64:	1d19      	adds	r1, r3, #4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	9103      	str	r1, [sp, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	bfbb      	ittet	lt
 800aa6e:	425b      	neglt	r3, r3
 800aa70:	f042 0202 	orrlt.w	r2, r2, #2
 800aa74:	9307      	strge	r3, [sp, #28]
 800aa76:	9307      	strlt	r3, [sp, #28]
 800aa78:	bfb8      	it	lt
 800aa7a:	9204      	strlt	r2, [sp, #16]
 800aa7c:	7823      	ldrb	r3, [r4, #0]
 800aa7e:	2b2e      	cmp	r3, #46	; 0x2e
 800aa80:	d10c      	bne.n	800aa9c <_svfiprintf_r+0x130>
 800aa82:	7863      	ldrb	r3, [r4, #1]
 800aa84:	2b2a      	cmp	r3, #42	; 0x2a
 800aa86:	d135      	bne.n	800aaf4 <_svfiprintf_r+0x188>
 800aa88:	9b03      	ldr	r3, [sp, #12]
 800aa8a:	3402      	adds	r4, #2
 800aa8c:	1d1a      	adds	r2, r3, #4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9203      	str	r2, [sp, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfb8      	it	lt
 800aa96:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ab5c <_svfiprintf_r+0x1f0>
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	7821      	ldrb	r1, [r4, #0]
 800aaa6:	f000 f9f7 	bl	800ae98 <memchr>
 800aaaa:	b140      	cbz	r0, 800aabe <_svfiprintf_r+0x152>
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	eba0 000a 	sub.w	r0, r0, sl
 800aab2:	fa03 f000 	lsl.w	r0, r3, r0
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	3401      	adds	r4, #1
 800aaba:	4303      	orrs	r3, r0
 800aabc:	9304      	str	r3, [sp, #16]
 800aabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aac2:	2206      	movs	r2, #6
 800aac4:	4826      	ldr	r0, [pc, #152]	; (800ab60 <_svfiprintf_r+0x1f4>)
 800aac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaca:	f000 f9e5 	bl	800ae98 <memchr>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d038      	beq.n	800ab44 <_svfiprintf_r+0x1d8>
 800aad2:	4b24      	ldr	r3, [pc, #144]	; (800ab64 <_svfiprintf_r+0x1f8>)
 800aad4:	bb1b      	cbnz	r3, 800ab1e <_svfiprintf_r+0x1b2>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	3307      	adds	r3, #7
 800aada:	f023 0307 	bic.w	r3, r3, #7
 800aade:	3308      	adds	r3, #8
 800aae0:	9303      	str	r3, [sp, #12]
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	4433      	add	r3, r6
 800aae6:	9309      	str	r3, [sp, #36]	; 0x24
 800aae8:	e767      	b.n	800a9ba <_svfiprintf_r+0x4e>
 800aaea:	460c      	mov	r4, r1
 800aaec:	2001      	movs	r0, #1
 800aaee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaf2:	e7a5      	b.n	800aa40 <_svfiprintf_r+0xd4>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f04f 0c0a 	mov.w	ip, #10
 800aafa:	4619      	mov	r1, r3
 800aafc:	3401      	adds	r4, #1
 800aafe:	9305      	str	r3, [sp, #20]
 800ab00:	4620      	mov	r0, r4
 800ab02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab06:	3a30      	subs	r2, #48	; 0x30
 800ab08:	2a09      	cmp	r2, #9
 800ab0a:	d903      	bls.n	800ab14 <_svfiprintf_r+0x1a8>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0c5      	beq.n	800aa9c <_svfiprintf_r+0x130>
 800ab10:	9105      	str	r1, [sp, #20]
 800ab12:	e7c3      	b.n	800aa9c <_svfiprintf_r+0x130>
 800ab14:	4604      	mov	r4, r0
 800ab16:	2301      	movs	r3, #1
 800ab18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab1c:	e7f0      	b.n	800ab00 <_svfiprintf_r+0x194>
 800ab1e:	ab03      	add	r3, sp, #12
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	462a      	mov	r2, r5
 800ab24:	4638      	mov	r0, r7
 800ab26:	4b10      	ldr	r3, [pc, #64]	; (800ab68 <_svfiprintf_r+0x1fc>)
 800ab28:	a904      	add	r1, sp, #16
 800ab2a:	f3af 8000 	nop.w
 800ab2e:	1c42      	adds	r2, r0, #1
 800ab30:	4606      	mov	r6, r0
 800ab32:	d1d6      	bne.n	800aae2 <_svfiprintf_r+0x176>
 800ab34:	89ab      	ldrh	r3, [r5, #12]
 800ab36:	065b      	lsls	r3, r3, #25
 800ab38:	f53f af2c 	bmi.w	800a994 <_svfiprintf_r+0x28>
 800ab3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3e:	b01d      	add	sp, #116	; 0x74
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	ab03      	add	r3, sp, #12
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	462a      	mov	r2, r5
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <_svfiprintf_r+0x1fc>)
 800ab4e:	a904      	add	r1, sp, #16
 800ab50:	f000 f87c 	bl	800ac4c <_printf_i>
 800ab54:	e7eb      	b.n	800ab2e <_svfiprintf_r+0x1c2>
 800ab56:	bf00      	nop
 800ab58:	0800b208 	.word	0x0800b208
 800ab5c:	0800b20e 	.word	0x0800b20e
 800ab60:	0800b212 	.word	0x0800b212
 800ab64:	00000000 	.word	0x00000000
 800ab68:	0800a8b5 	.word	0x0800a8b5

0800ab6c <_printf_common>:
 800ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	4616      	mov	r6, r2
 800ab72:	4699      	mov	r9, r3
 800ab74:	688a      	ldr	r2, [r1, #8]
 800ab76:	690b      	ldr	r3, [r1, #16]
 800ab78:	4607      	mov	r7, r0
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	bfb8      	it	lt
 800ab7e:	4613      	movlt	r3, r2
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab86:	460c      	mov	r4, r1
 800ab88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab8c:	b10a      	cbz	r2, 800ab92 <_printf_common+0x26>
 800ab8e:	3301      	adds	r3, #1
 800ab90:	6033      	str	r3, [r6, #0]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	0699      	lsls	r1, r3, #26
 800ab96:	bf42      	ittt	mi
 800ab98:	6833      	ldrmi	r3, [r6, #0]
 800ab9a:	3302      	addmi	r3, #2
 800ab9c:	6033      	strmi	r3, [r6, #0]
 800ab9e:	6825      	ldr	r5, [r4, #0]
 800aba0:	f015 0506 	ands.w	r5, r5, #6
 800aba4:	d106      	bne.n	800abb4 <_printf_common+0x48>
 800aba6:	f104 0a19 	add.w	sl, r4, #25
 800abaa:	68e3      	ldr	r3, [r4, #12]
 800abac:	6832      	ldr	r2, [r6, #0]
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	42ab      	cmp	r3, r5
 800abb2:	dc28      	bgt.n	800ac06 <_printf_common+0x9a>
 800abb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb8:	1e13      	subs	r3, r2, #0
 800abba:	6822      	ldr	r2, [r4, #0]
 800abbc:	bf18      	it	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	0692      	lsls	r2, r2, #26
 800abc2:	d42d      	bmi.n	800ac20 <_printf_common+0xb4>
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abcc:	47c0      	blx	r8
 800abce:	3001      	adds	r0, #1
 800abd0:	d020      	beq.n	800ac14 <_printf_common+0xa8>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	68e5      	ldr	r5, [r4, #12]
 800abd6:	f003 0306 	and.w	r3, r3, #6
 800abda:	2b04      	cmp	r3, #4
 800abdc:	bf18      	it	ne
 800abde:	2500      	movne	r5, #0
 800abe0:	6832      	ldr	r2, [r6, #0]
 800abe2:	f04f 0600 	mov.w	r6, #0
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	bf08      	it	eq
 800abea:	1aad      	subeq	r5, r5, r2
 800abec:	6922      	ldr	r2, [r4, #16]
 800abee:	bf08      	it	eq
 800abf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bfc4      	itt	gt
 800abf8:	1a9b      	subgt	r3, r3, r2
 800abfa:	18ed      	addgt	r5, r5, r3
 800abfc:	341a      	adds	r4, #26
 800abfe:	42b5      	cmp	r5, r6
 800ac00:	d11a      	bne.n	800ac38 <_printf_common+0xcc>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e008      	b.n	800ac18 <_printf_common+0xac>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4652      	mov	r2, sl
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	47c0      	blx	r8
 800ac10:	3001      	adds	r0, #1
 800ac12:	d103      	bne.n	800ac1c <_printf_common+0xb0>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	e7c4      	b.n	800abaa <_printf_common+0x3e>
 800ac20:	2030      	movs	r0, #48	; 0x30
 800ac22:	18e1      	adds	r1, r4, r3
 800ac24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac2e:	4422      	add	r2, r4
 800ac30:	3302      	adds	r3, #2
 800ac32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac36:	e7c5      	b.n	800abc4 <_printf_common+0x58>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c0      	blx	r8
 800ac42:	3001      	adds	r0, #1
 800ac44:	d0e6      	beq.n	800ac14 <_printf_common+0xa8>
 800ac46:	3601      	adds	r6, #1
 800ac48:	e7d9      	b.n	800abfe <_printf_common+0x92>
	...

0800ac4c <_printf_i>:
 800ac4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	7e0f      	ldrb	r7, [r1, #24]
 800ac52:	4691      	mov	r9, r2
 800ac54:	2f78      	cmp	r7, #120	; 0x78
 800ac56:	4680      	mov	r8, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	469a      	mov	sl, r3
 800ac5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac62:	d807      	bhi.n	800ac74 <_printf_i+0x28>
 800ac64:	2f62      	cmp	r7, #98	; 0x62
 800ac66:	d80a      	bhi.n	800ac7e <_printf_i+0x32>
 800ac68:	2f00      	cmp	r7, #0
 800ac6a:	f000 80d9 	beq.w	800ae20 <_printf_i+0x1d4>
 800ac6e:	2f58      	cmp	r7, #88	; 0x58
 800ac70:	f000 80a4 	beq.w	800adbc <_printf_i+0x170>
 800ac74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac7c:	e03a      	b.n	800acf4 <_printf_i+0xa8>
 800ac7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac82:	2b15      	cmp	r3, #21
 800ac84:	d8f6      	bhi.n	800ac74 <_printf_i+0x28>
 800ac86:	a101      	add	r1, pc, #4	; (adr r1, 800ac8c <_printf_i+0x40>)
 800ac88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac8c:	0800ace5 	.word	0x0800ace5
 800ac90:	0800acf9 	.word	0x0800acf9
 800ac94:	0800ac75 	.word	0x0800ac75
 800ac98:	0800ac75 	.word	0x0800ac75
 800ac9c:	0800ac75 	.word	0x0800ac75
 800aca0:	0800ac75 	.word	0x0800ac75
 800aca4:	0800acf9 	.word	0x0800acf9
 800aca8:	0800ac75 	.word	0x0800ac75
 800acac:	0800ac75 	.word	0x0800ac75
 800acb0:	0800ac75 	.word	0x0800ac75
 800acb4:	0800ac75 	.word	0x0800ac75
 800acb8:	0800ae07 	.word	0x0800ae07
 800acbc:	0800ad29 	.word	0x0800ad29
 800acc0:	0800ade9 	.word	0x0800ade9
 800acc4:	0800ac75 	.word	0x0800ac75
 800acc8:	0800ac75 	.word	0x0800ac75
 800accc:	0800ae29 	.word	0x0800ae29
 800acd0:	0800ac75 	.word	0x0800ac75
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800ac75 	.word	0x0800ac75
 800acdc:	0800ac75 	.word	0x0800ac75
 800ace0:	0800adf1 	.word	0x0800adf1
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	1d1a      	adds	r2, r3, #4
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	602a      	str	r2, [r5, #0]
 800acec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acf4:	2301      	movs	r3, #1
 800acf6:	e0a4      	b.n	800ae42 <_printf_i+0x1f6>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	6829      	ldr	r1, [r5, #0]
 800acfc:	0606      	lsls	r6, r0, #24
 800acfe:	f101 0304 	add.w	r3, r1, #4
 800ad02:	d50a      	bpl.n	800ad1a <_printf_i+0xce>
 800ad04:	680e      	ldr	r6, [r1, #0]
 800ad06:	602b      	str	r3, [r5, #0]
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	da03      	bge.n	800ad14 <_printf_i+0xc8>
 800ad0c:	232d      	movs	r3, #45	; 0x2d
 800ad0e:	4276      	negs	r6, r6
 800ad10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad14:	230a      	movs	r3, #10
 800ad16:	485e      	ldr	r0, [pc, #376]	; (800ae90 <_printf_i+0x244>)
 800ad18:	e019      	b.n	800ad4e <_printf_i+0x102>
 800ad1a:	680e      	ldr	r6, [r1, #0]
 800ad1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	bf18      	it	ne
 800ad24:	b236      	sxthne	r6, r6
 800ad26:	e7ef      	b.n	800ad08 <_printf_i+0xbc>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	6820      	ldr	r0, [r4, #0]
 800ad2c:	1d19      	adds	r1, r3, #4
 800ad2e:	6029      	str	r1, [r5, #0]
 800ad30:	0601      	lsls	r1, r0, #24
 800ad32:	d501      	bpl.n	800ad38 <_printf_i+0xec>
 800ad34:	681e      	ldr	r6, [r3, #0]
 800ad36:	e002      	b.n	800ad3e <_printf_i+0xf2>
 800ad38:	0646      	lsls	r6, r0, #25
 800ad3a:	d5fb      	bpl.n	800ad34 <_printf_i+0xe8>
 800ad3c:	881e      	ldrh	r6, [r3, #0]
 800ad3e:	2f6f      	cmp	r7, #111	; 0x6f
 800ad40:	bf0c      	ite	eq
 800ad42:	2308      	moveq	r3, #8
 800ad44:	230a      	movne	r3, #10
 800ad46:	4852      	ldr	r0, [pc, #328]	; (800ae90 <_printf_i+0x244>)
 800ad48:	2100      	movs	r1, #0
 800ad4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad4e:	6865      	ldr	r5, [r4, #4]
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	bfa8      	it	ge
 800ad54:	6821      	ldrge	r1, [r4, #0]
 800ad56:	60a5      	str	r5, [r4, #8]
 800ad58:	bfa4      	itt	ge
 800ad5a:	f021 0104 	bicge.w	r1, r1, #4
 800ad5e:	6021      	strge	r1, [r4, #0]
 800ad60:	b90e      	cbnz	r6, 800ad66 <_printf_i+0x11a>
 800ad62:	2d00      	cmp	r5, #0
 800ad64:	d04d      	beq.n	800ae02 <_printf_i+0x1b6>
 800ad66:	4615      	mov	r5, r2
 800ad68:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad6c:	fb03 6711 	mls	r7, r3, r1, r6
 800ad70:	5dc7      	ldrb	r7, [r0, r7]
 800ad72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad76:	4637      	mov	r7, r6
 800ad78:	42bb      	cmp	r3, r7
 800ad7a:	460e      	mov	r6, r1
 800ad7c:	d9f4      	bls.n	800ad68 <_printf_i+0x11c>
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d10b      	bne.n	800ad9a <_printf_i+0x14e>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	07de      	lsls	r6, r3, #31
 800ad86:	d508      	bpl.n	800ad9a <_printf_i+0x14e>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6861      	ldr	r1, [r4, #4]
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	bfde      	ittt	le
 800ad90:	2330      	movle	r3, #48	; 0x30
 800ad92:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad96:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad9a:	1b52      	subs	r2, r2, r5
 800ad9c:	6122      	str	r2, [r4, #16]
 800ad9e:	464b      	mov	r3, r9
 800ada0:	4621      	mov	r1, r4
 800ada2:	4640      	mov	r0, r8
 800ada4:	f8cd a000 	str.w	sl, [sp]
 800ada8:	aa03      	add	r2, sp, #12
 800adaa:	f7ff fedf 	bl	800ab6c <_printf_common>
 800adae:	3001      	adds	r0, #1
 800adb0:	d14c      	bne.n	800ae4c <_printf_i+0x200>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	b004      	add	sp, #16
 800adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbc:	4834      	ldr	r0, [pc, #208]	; (800ae90 <_printf_i+0x244>)
 800adbe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adc2:	6829      	ldr	r1, [r5, #0]
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	f851 6b04 	ldr.w	r6, [r1], #4
 800adca:	6029      	str	r1, [r5, #0]
 800adcc:	061d      	lsls	r5, r3, #24
 800adce:	d514      	bpl.n	800adfa <_printf_i+0x1ae>
 800add0:	07df      	lsls	r7, r3, #31
 800add2:	bf44      	itt	mi
 800add4:	f043 0320 	orrmi.w	r3, r3, #32
 800add8:	6023      	strmi	r3, [r4, #0]
 800adda:	b91e      	cbnz	r6, 800ade4 <_printf_i+0x198>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f023 0320 	bic.w	r3, r3, #32
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	2310      	movs	r3, #16
 800ade6:	e7af      	b.n	800ad48 <_printf_i+0xfc>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	f043 0320 	orr.w	r3, r3, #32
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	2378      	movs	r3, #120	; 0x78
 800adf2:	4828      	ldr	r0, [pc, #160]	; (800ae94 <_printf_i+0x248>)
 800adf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adf8:	e7e3      	b.n	800adc2 <_printf_i+0x176>
 800adfa:	0659      	lsls	r1, r3, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2b6      	uxthmi	r6, r6
 800ae00:	e7e6      	b.n	800add0 <_printf_i+0x184>
 800ae02:	4615      	mov	r5, r2
 800ae04:	e7bb      	b.n	800ad7e <_printf_i+0x132>
 800ae06:	682b      	ldr	r3, [r5, #0]
 800ae08:	6826      	ldr	r6, [r4, #0]
 800ae0a:	1d18      	adds	r0, r3, #4
 800ae0c:	6961      	ldr	r1, [r4, #20]
 800ae0e:	6028      	str	r0, [r5, #0]
 800ae10:	0635      	lsls	r5, r6, #24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	d501      	bpl.n	800ae1a <_printf_i+0x1ce>
 800ae16:	6019      	str	r1, [r3, #0]
 800ae18:	e002      	b.n	800ae20 <_printf_i+0x1d4>
 800ae1a:	0670      	lsls	r0, r6, #25
 800ae1c:	d5fb      	bpl.n	800ae16 <_printf_i+0x1ca>
 800ae1e:	8019      	strh	r1, [r3, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	4615      	mov	r5, r2
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	e7ba      	b.n	800ad9e <_printf_i+0x152>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	1d1a      	adds	r2, r3, #4
 800ae2e:	602a      	str	r2, [r5, #0]
 800ae30:	681d      	ldr	r5, [r3, #0]
 800ae32:	6862      	ldr	r2, [r4, #4]
 800ae34:	4628      	mov	r0, r5
 800ae36:	f000 f82f 	bl	800ae98 <memchr>
 800ae3a:	b108      	cbz	r0, 800ae40 <_printf_i+0x1f4>
 800ae3c:	1b40      	subs	r0, r0, r5
 800ae3e:	6060      	str	r0, [r4, #4]
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	2300      	movs	r3, #0
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4a:	e7a8      	b.n	800ad9e <_printf_i+0x152>
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4640      	mov	r0, r8
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	47d0      	blx	sl
 800ae56:	3001      	adds	r0, #1
 800ae58:	d0ab      	beq.n	800adb2 <_printf_i+0x166>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	079b      	lsls	r3, r3, #30
 800ae5e:	d413      	bmi.n	800ae88 <_printf_i+0x23c>
 800ae60:	68e0      	ldr	r0, [r4, #12]
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	4298      	cmp	r0, r3
 800ae66:	bfb8      	it	lt
 800ae68:	4618      	movlt	r0, r3
 800ae6a:	e7a4      	b.n	800adb6 <_printf_i+0x16a>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4649      	mov	r1, r9
 800ae72:	4640      	mov	r0, r8
 800ae74:	47d0      	blx	sl
 800ae76:	3001      	adds	r0, #1
 800ae78:	d09b      	beq.n	800adb2 <_printf_i+0x166>
 800ae7a:	3501      	adds	r5, #1
 800ae7c:	68e3      	ldr	r3, [r4, #12]
 800ae7e:	9903      	ldr	r1, [sp, #12]
 800ae80:	1a5b      	subs	r3, r3, r1
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	dcf2      	bgt.n	800ae6c <_printf_i+0x220>
 800ae86:	e7eb      	b.n	800ae60 <_printf_i+0x214>
 800ae88:	2500      	movs	r5, #0
 800ae8a:	f104 0619 	add.w	r6, r4, #25
 800ae8e:	e7f5      	b.n	800ae7c <_printf_i+0x230>
 800ae90:	0800b219 	.word	0x0800b219
 800ae94:	0800b22a 	.word	0x0800b22a

0800ae98 <memchr>:
 800ae98:	4603      	mov	r3, r0
 800ae9a:	b510      	push	{r4, lr}
 800ae9c:	b2c9      	uxtb	r1, r1
 800ae9e:	4402      	add	r2, r0
 800aea0:	4293      	cmp	r3, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	d101      	bne.n	800aeaa <memchr+0x12>
 800aea6:	2000      	movs	r0, #0
 800aea8:	e003      	b.n	800aeb2 <memchr+0x1a>
 800aeaa:	7804      	ldrb	r4, [r0, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	428c      	cmp	r4, r1
 800aeb0:	d1f6      	bne.n	800aea0 <memchr+0x8>
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <memcpy>:
 800aeb4:	440a      	add	r2, r1
 800aeb6:	4291      	cmp	r1, r2
 800aeb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800aebc:	d100      	bne.n	800aec0 <memcpy+0xc>
 800aebe:	4770      	bx	lr
 800aec0:	b510      	push	{r4, lr}
 800aec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aec6:	4291      	cmp	r1, r2
 800aec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aecc:	d1f9      	bne.n	800aec2 <memcpy+0xe>
 800aece:	bd10      	pop	{r4, pc}

0800aed0 <memmove>:
 800aed0:	4288      	cmp	r0, r1
 800aed2:	b510      	push	{r4, lr}
 800aed4:	eb01 0402 	add.w	r4, r1, r2
 800aed8:	d902      	bls.n	800aee0 <memmove+0x10>
 800aeda:	4284      	cmp	r4, r0
 800aedc:	4623      	mov	r3, r4
 800aede:	d807      	bhi.n	800aef0 <memmove+0x20>
 800aee0:	1e43      	subs	r3, r0, #1
 800aee2:	42a1      	cmp	r1, r4
 800aee4:	d008      	beq.n	800aef8 <memmove+0x28>
 800aee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeee:	e7f8      	b.n	800aee2 <memmove+0x12>
 800aef0:	4601      	mov	r1, r0
 800aef2:	4402      	add	r2, r0
 800aef4:	428a      	cmp	r2, r1
 800aef6:	d100      	bne.n	800aefa <memmove+0x2a>
 800aef8:	bd10      	pop	{r4, pc}
 800aefa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aefe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af02:	e7f7      	b.n	800aef4 <memmove+0x24>

0800af04 <_free_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4605      	mov	r5, r0
 800af08:	2900      	cmp	r1, #0
 800af0a:	d040      	beq.n	800af8e <_free_r+0x8a>
 800af0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af10:	1f0c      	subs	r4, r1, #4
 800af12:	2b00      	cmp	r3, #0
 800af14:	bfb8      	it	lt
 800af16:	18e4      	addlt	r4, r4, r3
 800af18:	f000 f910 	bl	800b13c <__malloc_lock>
 800af1c:	4a1c      	ldr	r2, [pc, #112]	; (800af90 <_free_r+0x8c>)
 800af1e:	6813      	ldr	r3, [r2, #0]
 800af20:	b933      	cbnz	r3, 800af30 <_free_r+0x2c>
 800af22:	6063      	str	r3, [r4, #4]
 800af24:	6014      	str	r4, [r2, #0]
 800af26:	4628      	mov	r0, r5
 800af28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af2c:	f000 b90c 	b.w	800b148 <__malloc_unlock>
 800af30:	42a3      	cmp	r3, r4
 800af32:	d908      	bls.n	800af46 <_free_r+0x42>
 800af34:	6820      	ldr	r0, [r4, #0]
 800af36:	1821      	adds	r1, r4, r0
 800af38:	428b      	cmp	r3, r1
 800af3a:	bf01      	itttt	eq
 800af3c:	6819      	ldreq	r1, [r3, #0]
 800af3e:	685b      	ldreq	r3, [r3, #4]
 800af40:	1809      	addeq	r1, r1, r0
 800af42:	6021      	streq	r1, [r4, #0]
 800af44:	e7ed      	b.n	800af22 <_free_r+0x1e>
 800af46:	461a      	mov	r2, r3
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	b10b      	cbz	r3, 800af50 <_free_r+0x4c>
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	d9fa      	bls.n	800af46 <_free_r+0x42>
 800af50:	6811      	ldr	r1, [r2, #0]
 800af52:	1850      	adds	r0, r2, r1
 800af54:	42a0      	cmp	r0, r4
 800af56:	d10b      	bne.n	800af70 <_free_r+0x6c>
 800af58:	6820      	ldr	r0, [r4, #0]
 800af5a:	4401      	add	r1, r0
 800af5c:	1850      	adds	r0, r2, r1
 800af5e:	4283      	cmp	r3, r0
 800af60:	6011      	str	r1, [r2, #0]
 800af62:	d1e0      	bne.n	800af26 <_free_r+0x22>
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	4401      	add	r1, r0
 800af6a:	6011      	str	r1, [r2, #0]
 800af6c:	6053      	str	r3, [r2, #4]
 800af6e:	e7da      	b.n	800af26 <_free_r+0x22>
 800af70:	d902      	bls.n	800af78 <_free_r+0x74>
 800af72:	230c      	movs	r3, #12
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	e7d6      	b.n	800af26 <_free_r+0x22>
 800af78:	6820      	ldr	r0, [r4, #0]
 800af7a:	1821      	adds	r1, r4, r0
 800af7c:	428b      	cmp	r3, r1
 800af7e:	bf01      	itttt	eq
 800af80:	6819      	ldreq	r1, [r3, #0]
 800af82:	685b      	ldreq	r3, [r3, #4]
 800af84:	1809      	addeq	r1, r1, r0
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6063      	str	r3, [r4, #4]
 800af8a:	6054      	str	r4, [r2, #4]
 800af8c:	e7cb      	b.n	800af26 <_free_r+0x22>
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	20001584 	.word	0x20001584

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0e      	ldr	r6, [pc, #56]	; (800afd0 <sbrk_aligned+0x3c>)
 800af98:	460c      	mov	r4, r1
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	4605      	mov	r5, r0
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f000 f8bc 	bl	800b11c <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 f8b7 	bl	800b11c <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d00a      	beq.n	800afc8 <sbrk_aligned+0x34>
 800afb2:	1cc4      	adds	r4, r0, #3
 800afb4:	f024 0403 	bic.w	r4, r4, #3
 800afb8:	42a0      	cmp	r0, r4
 800afba:	d007      	beq.n	800afcc <sbrk_aligned+0x38>
 800afbc:	1a21      	subs	r1, r4, r0
 800afbe:	4628      	mov	r0, r5
 800afc0:	f000 f8ac 	bl	800b11c <_sbrk_r>
 800afc4:	3001      	adds	r0, #1
 800afc6:	d101      	bne.n	800afcc <sbrk_aligned+0x38>
 800afc8:	f04f 34ff 	mov.w	r4, #4294967295
 800afcc:	4620      	mov	r0, r4
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	20001588 	.word	0x20001588

0800afd4 <_malloc_r>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	1ccd      	adds	r5, r1, #3
 800afda:	f025 0503 	bic.w	r5, r5, #3
 800afde:	3508      	adds	r5, #8
 800afe0:	2d0c      	cmp	r5, #12
 800afe2:	bf38      	it	cc
 800afe4:	250c      	movcc	r5, #12
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	4607      	mov	r7, r0
 800afea:	db01      	blt.n	800aff0 <_malloc_r+0x1c>
 800afec:	42a9      	cmp	r1, r5
 800afee:	d905      	bls.n	800affc <_malloc_r+0x28>
 800aff0:	230c      	movs	r3, #12
 800aff2:	2600      	movs	r6, #0
 800aff4:	603b      	str	r3, [r7, #0]
 800aff6:	4630      	mov	r0, r6
 800aff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800affc:	4e2e      	ldr	r6, [pc, #184]	; (800b0b8 <_malloc_r+0xe4>)
 800affe:	f000 f89d 	bl	800b13c <__malloc_lock>
 800b002:	6833      	ldr	r3, [r6, #0]
 800b004:	461c      	mov	r4, r3
 800b006:	bb34      	cbnz	r4, 800b056 <_malloc_r+0x82>
 800b008:	4629      	mov	r1, r5
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ffc2 	bl	800af94 <sbrk_aligned>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	4604      	mov	r4, r0
 800b014:	d14d      	bne.n	800b0b2 <_malloc_r+0xde>
 800b016:	6834      	ldr	r4, [r6, #0]
 800b018:	4626      	mov	r6, r4
 800b01a:	2e00      	cmp	r6, #0
 800b01c:	d140      	bne.n	800b0a0 <_malloc_r+0xcc>
 800b01e:	6823      	ldr	r3, [r4, #0]
 800b020:	4631      	mov	r1, r6
 800b022:	4638      	mov	r0, r7
 800b024:	eb04 0803 	add.w	r8, r4, r3
 800b028:	f000 f878 	bl	800b11c <_sbrk_r>
 800b02c:	4580      	cmp	r8, r0
 800b02e:	d13a      	bne.n	800b0a6 <_malloc_r+0xd2>
 800b030:	6821      	ldr	r1, [r4, #0]
 800b032:	3503      	adds	r5, #3
 800b034:	1a6d      	subs	r5, r5, r1
 800b036:	f025 0503 	bic.w	r5, r5, #3
 800b03a:	3508      	adds	r5, #8
 800b03c:	2d0c      	cmp	r5, #12
 800b03e:	bf38      	it	cc
 800b040:	250c      	movcc	r5, #12
 800b042:	4638      	mov	r0, r7
 800b044:	4629      	mov	r1, r5
 800b046:	f7ff ffa5 	bl	800af94 <sbrk_aligned>
 800b04a:	3001      	adds	r0, #1
 800b04c:	d02b      	beq.n	800b0a6 <_malloc_r+0xd2>
 800b04e:	6823      	ldr	r3, [r4, #0]
 800b050:	442b      	add	r3, r5
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	e00e      	b.n	800b074 <_malloc_r+0xa0>
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	1b52      	subs	r2, r2, r5
 800b05a:	d41e      	bmi.n	800b09a <_malloc_r+0xc6>
 800b05c:	2a0b      	cmp	r2, #11
 800b05e:	d916      	bls.n	800b08e <_malloc_r+0xba>
 800b060:	1961      	adds	r1, r4, r5
 800b062:	42a3      	cmp	r3, r4
 800b064:	6025      	str	r5, [r4, #0]
 800b066:	bf18      	it	ne
 800b068:	6059      	strne	r1, [r3, #4]
 800b06a:	6863      	ldr	r3, [r4, #4]
 800b06c:	bf08      	it	eq
 800b06e:	6031      	streq	r1, [r6, #0]
 800b070:	5162      	str	r2, [r4, r5]
 800b072:	604b      	str	r3, [r1, #4]
 800b074:	4638      	mov	r0, r7
 800b076:	f104 060b 	add.w	r6, r4, #11
 800b07a:	f000 f865 	bl	800b148 <__malloc_unlock>
 800b07e:	f026 0607 	bic.w	r6, r6, #7
 800b082:	1d23      	adds	r3, r4, #4
 800b084:	1af2      	subs	r2, r6, r3
 800b086:	d0b6      	beq.n	800aff6 <_malloc_r+0x22>
 800b088:	1b9b      	subs	r3, r3, r6
 800b08a:	50a3      	str	r3, [r4, r2]
 800b08c:	e7b3      	b.n	800aff6 <_malloc_r+0x22>
 800b08e:	6862      	ldr	r2, [r4, #4]
 800b090:	42a3      	cmp	r3, r4
 800b092:	bf0c      	ite	eq
 800b094:	6032      	streq	r2, [r6, #0]
 800b096:	605a      	strne	r2, [r3, #4]
 800b098:	e7ec      	b.n	800b074 <_malloc_r+0xa0>
 800b09a:	4623      	mov	r3, r4
 800b09c:	6864      	ldr	r4, [r4, #4]
 800b09e:	e7b2      	b.n	800b006 <_malloc_r+0x32>
 800b0a0:	4634      	mov	r4, r6
 800b0a2:	6876      	ldr	r6, [r6, #4]
 800b0a4:	e7b9      	b.n	800b01a <_malloc_r+0x46>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	f000 f84c 	bl	800b148 <__malloc_unlock>
 800b0b0:	e7a1      	b.n	800aff6 <_malloc_r+0x22>
 800b0b2:	6025      	str	r5, [r4, #0]
 800b0b4:	e7de      	b.n	800b074 <_malloc_r+0xa0>
 800b0b6:	bf00      	nop
 800b0b8:	20001584 	.word	0x20001584

0800b0bc <_realloc_r>:
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	4614      	mov	r4, r2
 800b0c4:	460e      	mov	r6, r1
 800b0c6:	b921      	cbnz	r1, 800b0d2 <_realloc_r+0x16>
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ce:	f7ff bf81 	b.w	800afd4 <_malloc_r>
 800b0d2:	b92a      	cbnz	r2, 800b0e0 <_realloc_r+0x24>
 800b0d4:	f7ff ff16 	bl	800af04 <_free_r>
 800b0d8:	4625      	mov	r5, r4
 800b0da:	4628      	mov	r0, r5
 800b0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e0:	f000 f838 	bl	800b154 <_malloc_usable_size_r>
 800b0e4:	4284      	cmp	r4, r0
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	d802      	bhi.n	800b0f0 <_realloc_r+0x34>
 800b0ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ee:	d812      	bhi.n	800b116 <_realloc_r+0x5a>
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	f7ff ff6e 	bl	800afd4 <_malloc_r>
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	d0ed      	beq.n	800b0da <_realloc_r+0x1e>
 800b0fe:	42bc      	cmp	r4, r7
 800b100:	4622      	mov	r2, r4
 800b102:	4631      	mov	r1, r6
 800b104:	bf28      	it	cs
 800b106:	463a      	movcs	r2, r7
 800b108:	f7ff fed4 	bl	800aeb4 <memcpy>
 800b10c:	4631      	mov	r1, r6
 800b10e:	4640      	mov	r0, r8
 800b110:	f7ff fef8 	bl	800af04 <_free_r>
 800b114:	e7e1      	b.n	800b0da <_realloc_r+0x1e>
 800b116:	4635      	mov	r5, r6
 800b118:	e7df      	b.n	800b0da <_realloc_r+0x1e>
	...

0800b11c <_sbrk_r>:
 800b11c:	b538      	push	{r3, r4, r5, lr}
 800b11e:	2300      	movs	r3, #0
 800b120:	4d05      	ldr	r5, [pc, #20]	; (800b138 <_sbrk_r+0x1c>)
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	f7f6 faa6 	bl	8001678 <_sbrk>
 800b12c:	1c43      	adds	r3, r0, #1
 800b12e:	d102      	bne.n	800b136 <_sbrk_r+0x1a>
 800b130:	682b      	ldr	r3, [r5, #0]
 800b132:	b103      	cbz	r3, 800b136 <_sbrk_r+0x1a>
 800b134:	6023      	str	r3, [r4, #0]
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	2000158c 	.word	0x2000158c

0800b13c <__malloc_lock>:
 800b13c:	4801      	ldr	r0, [pc, #4]	; (800b144 <__malloc_lock+0x8>)
 800b13e:	f000 b811 	b.w	800b164 <__retarget_lock_acquire_recursive>
 800b142:	bf00      	nop
 800b144:	20001590 	.word	0x20001590

0800b148 <__malloc_unlock>:
 800b148:	4801      	ldr	r0, [pc, #4]	; (800b150 <__malloc_unlock+0x8>)
 800b14a:	f000 b80c 	b.w	800b166 <__retarget_lock_release_recursive>
 800b14e:	bf00      	nop
 800b150:	20001590 	.word	0x20001590

0800b154 <_malloc_usable_size_r>:
 800b154:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b158:	1f18      	subs	r0, r3, #4
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bfbc      	itt	lt
 800b15e:	580b      	ldrlt	r3, [r1, r0]
 800b160:	18c0      	addlt	r0, r0, r3
 800b162:	4770      	bx	lr

0800b164 <__retarget_lock_acquire_recursive>:
 800b164:	4770      	bx	lr

0800b166 <__retarget_lock_release_recursive>:
 800b166:	4770      	bx	lr

0800b168 <_init>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	bf00      	nop
 800b16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16e:	bc08      	pop	{r3}
 800b170:	469e      	mov	lr, r3
 800b172:	4770      	bx	lr

0800b174 <_fini>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr
