
Lambe_Sujo_Receptor3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b08c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800b198  0800b198  0001b198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b254  0800b254  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b254  0800b254  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b254  0800b254  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  200001e8  0800b444  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800b444  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f22  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003590  00000000  00000000  00035133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000386c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b16d  00000000  00000000  0003aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162a8  00000000  00000000  00055c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f490  00000000  00000000  0006bef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005198  00000000  00000000  000fb3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b180 	.word	0x0800b180

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800b180 	.word	0x0800b180

0800014c <HAL_TIM_IC_CaptureCallback>:
uint32_t counter2 = 0;
uint16_t position2 = 0;
int16_t speed2 = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800015c:	d10a      	bne.n	8000174 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		counter = __HAL_TIM_GET_COUNTER(htim);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000164:	4a0d      	ldr	r2, [pc, #52]	; (800019c <HAL_TIM_IC_CaptureCallback+0x50>)
 8000166:	6013      	str	r3, [r2, #0]
		position = (int16_t)counter;
 8000168:	4b0c      	ldr	r3, [pc, #48]	; (800019c <HAL_TIM_IC_CaptureCallback+0x50>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	b29a      	uxth	r2, r3
 800016e:	4b0c      	ldr	r3, [pc, #48]	; (80001a0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000170:	801a      	strh	r2, [r3, #0]
	}else if(htim->Instance == TIM4){
		counter2 = __HAL_TIM_GET_COUNTER(htim);
		position2 = (int16_t)counter2;
	}

}
 8000172:	e00e      	b.n	8000192 <HAL_TIM_IC_CaptureCallback+0x46>
	}else if(htim->Instance == TIM4){
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0a      	ldr	r2, [pc, #40]	; (80001a4 <HAL_TIM_IC_CaptureCallback+0x58>)
 800017a:	4293      	cmp	r3, r2
 800017c:	d109      	bne.n	8000192 <HAL_TIM_IC_CaptureCallback+0x46>
		counter2 = __HAL_TIM_GET_COUNTER(htim);
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000186:	6013      	str	r3, [r2, #0]
		position2 = (int16_t)counter2;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	b29a      	uxth	r2, r3
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <HAL_TIM_IC_CaptureCallback+0x60>)
 8000190:	801a      	strh	r2, [r3, #0]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200003ac 	.word	0x200003ac
 80001a0:	200003b0 	.word	0x200003b0
 80001a4:	40000800 	.word	0x40000800
 80001a8:	200003b4 	.word	0x200003b4
 80001ac:	200003b8 	.word	0x200003b8

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b4:	f001 face 	bl	8001754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b8:	f000 f8fe 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001bc:	f000 fb62 	bl	8000884 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001c0:	f000 f954 	bl	800046c <MX_SPI1_Init>
  MX_TIM2_Init();
 80001c4:	f000 fa40 	bl	8000648 <MX_TIM2_Init>
  MX_TIM1_Init();
 80001c8:	f000 f986 	bl	80004d8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80001cc:	f000 fb06 	bl	80007dc <MX_TIM4_Init>
  MX_TIM3_Init();
 80001d0:	f000 fa8e 	bl	80006f0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80001d4:	f009 feb2 	bl	8009f3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Configuração do rádio */
  nrfRx.CE_port = CE_GPIO_Port;
 80001d8:	4b65      	ldr	r3, [pc, #404]	; (8000370 <main+0x1c0>)
 80001da:	4a66      	ldr	r2, [pc, #408]	; (8000374 <main+0x1c4>)
 80001dc:	609a      	str	r2, [r3, #8]
  nrfRx.CE_pin = CE_Pin;
 80001de:	4b64      	ldr	r3, [pc, #400]	; (8000370 <main+0x1c0>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	819a      	strh	r2, [r3, #12]
  nrfRx.CSN_port = CSN_GPIO_Port;
 80001e4:	4b62      	ldr	r3, [pc, #392]	; (8000370 <main+0x1c0>)
 80001e6:	4a64      	ldr	r2, [pc, #400]	; (8000378 <main+0x1c8>)
 80001e8:	601a      	str	r2, [r3, #0]
  nrfRx.CSN_pin = CSN_Pin;
 80001ea:	4b61      	ldr	r3, [pc, #388]	; (8000370 <main+0x1c0>)
 80001ec:	2208      	movs	r2, #8
 80001ee:	809a      	strh	r2, [r3, #4]
  nrfRx.IRQ_port = IRQ_GPIO_Port;
 80001f0:	4b5f      	ldr	r3, [pc, #380]	; (8000370 <main+0x1c0>)
 80001f2:	4a61      	ldr	r2, [pc, #388]	; (8000378 <main+0x1c8>)
 80001f4:	611a      	str	r2, [r3, #16]
  nrfRx.IRQ_pin = IRQ_Pin;
 80001f6:	4b5e      	ldr	r3, [pc, #376]	; (8000370 <main+0x1c0>)
 80001f8:	2210      	movs	r2, #16
 80001fa:	829a      	strh	r2, [r3, #20]
  nrfRx.hSPIx = &hspi1;
 80001fc:	4b5c      	ldr	r3, [pc, #368]	; (8000370 <main+0x1c0>)
 80001fe:	4a5f      	ldr	r2, [pc, #380]	; (800037c <main+0x1cc>)
 8000200:	619a      	str	r2, [r3, #24]

  nrf24_init(&nrfRx);
 8000202:	485b      	ldr	r0, [pc, #364]	; (8000370 <main+0x1c0>)
 8000204:	f000 fc29 	bl	8000a5a <nrf24_init>
  nrf24_setDataRate(&nrfRx, _250kbs);
 8000208:	2100      	movs	r1, #0
 800020a:	4859      	ldr	r0, [pc, #356]	; (8000370 <main+0x1c0>)
 800020c:	f000 fc5f 	bl	8000ace <nrf24_setDataRate>
  nrf24_setPALevel(&nrfRx, high);
 8000210:	2103      	movs	r1, #3
 8000212:	4857      	ldr	r0, [pc, #348]	; (8000370 <main+0x1c0>)
 8000214:	f000 fca6 	bl	8000b64 <nrf24_setPALevel>

  nrf24_setRxPipe(&nrfRx, rxAddr1, 0, PAYLOAD);
 8000218:	230b      	movs	r3, #11
 800021a:	2200      	movs	r2, #0
 800021c:	4958      	ldr	r1, [pc, #352]	; (8000380 <main+0x1d0>)
 800021e:	4854      	ldr	r0, [pc, #336]	; (8000370 <main+0x1c0>)
 8000220:	f000 fd60 	bl	8000ce4 <nrf24_setRxPipe>
  //nrf24_setRxPipe(&nrfRx, rxAddr2, 1, PAYLOAD);
  //nrf24_setRxPipe(&nrfRx, rxAddr4, 2, PAYLOAD);
  //nrf24_setRxPipe(&nrfRx, rxAddr3, 3, PAYLOAD);
  nrf24_setMode(&nrfRx, rxMode);
 8000224:	2103      	movs	r1, #3
 8000226:	4852      	ldr	r0, [pc, #328]	; (8000370 <main+0x1c0>)
 8000228:	f000 fd0a 	bl	8000c40 <nrf24_setMode>
  /* Configuração dos timers referentes aos encoders */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800022c:	213c      	movs	r1, #60	; 0x3c
 800022e:	4855      	ldr	r0, [pc, #340]	; (8000384 <main+0x1d4>)
 8000230:	f004 feb6 	bl	8004fa0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000234:	213c      	movs	r1, #60	; 0x3c
 8000236:	4854      	ldr	r0, [pc, #336]	; (8000388 <main+0x1d8>)
 8000238:	f004 feb2 	bl	8004fa0 <HAL_TIM_Encoder_Start_IT>
  /* Configuração dos timers referentes ao PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800023c:	2100      	movs	r1, #0
 800023e:	4853      	ldr	r0, [pc, #332]	; (800038c <main+0x1dc>)
 8000240:	f004 fd6a 	bl	8004d18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000244:	2104      	movs	r1, #4
 8000246:	4851      	ldr	r0, [pc, #324]	; (800038c <main+0x1dc>)
 8000248:	f004 fd66 	bl	8004d18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800024c:	2108      	movs	r1, #8
 800024e:	484f      	ldr	r0, [pc, #316]	; (800038c <main+0x1dc>)
 8000250:	f004 fd62 	bl	8004d18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000254:	2104      	movs	r1, #4
 8000256:	484e      	ldr	r0, [pc, #312]	; (8000390 <main+0x1e0>)
 8000258:	f004 fd5e 	bl	8004d18 <HAL_TIM_PWM_Start>

  quemSouEu();
 800025c:	f000 fbb4 	bl	80009c8 <quemSouEu>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	484b      	ldr	r0, [pc, #300]	; (8000394 <main+0x1e4>)
 8000268:	f001 fda3 	bl	8001db2 <HAL_GPIO_WritePin>

	TIM1->CCR1 = 100;
 800026c:	4b4a      	ldr	r3, [pc, #296]	; (8000398 <main+0x1e8>)
 800026e:	2264      	movs	r2, #100	; 0x64
 8000270:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 100;
 8000272:	4b49      	ldr	r3, [pc, #292]	; (8000398 <main+0x1e8>)
 8000274:	2264      	movs	r2, #100	; 0x64
 8000276:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 100;
 8000278:	4b47      	ldr	r3, [pc, #284]	; (8000398 <main+0x1e8>)
 800027a:	2264      	movs	r2, #100	; 0x64
 800027c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR2 = 100;
 800027e:	4b47      	ldr	r3, [pc, #284]	; (800039c <main+0x1ec>)
 8000280:	2264      	movs	r2, #100	; 0x64
 8000282:	639a      	str	r2, [r3, #56]	; 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (isDataAvailable(&nrfRx, 0) == 1){
 8000284:	2100      	movs	r1, #0
 8000286:	483a      	ldr	r0, [pc, #232]	; (8000370 <main+0x1c0>)
 8000288:	f000 fdc0 	bl	8000e0c <isDataAvailable>
 800028c:	4603      	mov	r3, r0
 800028e:	2b01      	cmp	r3, #1
 8000290:	d1f8      	bne.n	8000284 <main+0xd4>
			readData();
 8000292:	f000 fb85 	bl	80009a0 <readData>
			/* checando se o dado é nosso */
			if(rxData[0] == byte_confirmacao){
 8000296:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <main+0x1f0>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2bff      	cmp	r3, #255	; 0xff
 800029c:	d1f2      	bne.n	8000284 <main+0xd4>
				V_D = rxData[2*id -1];
 800029e:	4b41      	ldr	r3, [pc, #260]	; (80003a4 <main+0x1f4>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	005b      	lsls	r3, r3, #1
 80002a4:	3b01      	subs	r3, #1
 80002a6:	4a3e      	ldr	r2, [pc, #248]	; (80003a0 <main+0x1f0>)
 80002a8:	5cd2      	ldrb	r2, [r2, r3]
 80002aa:	4b3f      	ldr	r3, [pc, #252]	; (80003a8 <main+0x1f8>)
 80002ac:	701a      	strb	r2, [r3, #0]
				V_E = rxData[2*id];
 80002ae:	4b3d      	ldr	r3, [pc, #244]	; (80003a4 <main+0x1f4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	005b      	lsls	r3, r3, #1
 80002b4:	4a3a      	ldr	r2, [pc, #232]	; (80003a0 <main+0x1f0>)
 80002b6:	5cd2      	ldrb	r2, [r2, r3]
 80002b8:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <main+0x1fc>)
 80002ba:	701a      	strb	r2, [r3, #0]

				if(V_D >= 128){
 80002bc:	4b3a      	ldr	r3, [pc, #232]	; (80003a8 <main+0x1f8>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	da09      	bge.n	80002da <main+0x12a>
					V_D = V_D - 128;
 80002c6:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <main+0x1f8>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	3b80      	subs	r3, #128	; 0x80
 80002cc:	b2da      	uxtb	r2, r3
 80002ce:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <main+0x1f8>)
 80002d0:	701a      	strb	r2, [r3, #0]
					sentido_d = 0;
 80002d2:	4b37      	ldr	r3, [pc, #220]	; (80003b0 <main+0x200>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e002      	b.n	80002e0 <main+0x130>
				}else{
					sentido_d = 1;
 80002da:	4b35      	ldr	r3, [pc, #212]	; (80003b0 <main+0x200>)
 80002dc:	2201      	movs	r2, #1
 80002de:	701a      	strb	r2, [r3, #0]
				}
				if(V_E >= 128){
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <main+0x1fc>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	b25b      	sxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	da09      	bge.n	80002fe <main+0x14e>
					V_E = V_E - 128;
 80002ea:	4b30      	ldr	r3, [pc, #192]	; (80003ac <main+0x1fc>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	3b80      	subs	r3, #128	; 0x80
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <main+0x1fc>)
 80002f4:	701a      	strb	r2, [r3, #0]
					sentido_e = 0;
 80002f6:	4b2f      	ldr	r3, [pc, #188]	; (80003b4 <main+0x204>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
 80002fc:	e002      	b.n	8000304 <main+0x154>
				}else{
					sentido_e = 1;
 80002fe:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <main+0x204>)
 8000300:	2201      	movs	r2, #1
 8000302:	701a      	strb	r2, [r3, #0]
				//			  PWM REVERSE/SLOW DECAY AN1 = PWM e AN2 = 1
				// nesse caso os canais de PWM que devem ser conectados aos pinos da ponte H.
				// sendo TIM1_CH1 e TIM1_CH2 no AN1 e AN2 respectivamente (direito)
				// e     TIM1_CH3 e TIM3-CH1 no BN1 e BN2 respectivamente (esquerdo)
				// sendo sentido_x = 1 inverso e o sentido_x = 0 para frente.
				if(sentido_d == 0){
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <main+0x200>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	f083 0301 	eor.w	r3, r3, #1
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d009      	beq.n	8000326 <main+0x176>
					TIM1->CCR1 = 100 -V_D;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <main+0x1f8>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800031a:	4b1f      	ldr	r3, [pc, #124]	; (8000398 <main+0x1e8>)
 800031c:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 100;
 800031e:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <main+0x1e8>)
 8000320:	2264      	movs	r2, #100	; 0x64
 8000322:	639a      	str	r2, [r3, #56]	; 0x38
 8000324:	e008      	b.n	8000338 <main+0x188>
				}else{
					TIM1->CCR1 = 100;
 8000326:	4b1c      	ldr	r3, [pc, #112]	; (8000398 <main+0x1e8>)
 8000328:	2264      	movs	r2, #100	; 0x64
 800032a:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 100 -V_D;
 800032c:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <main+0x1f8>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <main+0x1e8>)
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
				}
				if(sentido_e == 0){
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <main+0x204>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	f083 0301 	eor.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d009      	beq.n	800035a <main+0x1aa>
					TIM1->CCR3 = 100 -V_E;
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <main+0x1fc>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <main+0x1e8>)
 8000350:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR2 = 100;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <main+0x1ec>)
 8000354:	2264      	movs	r2, #100	; 0x64
 8000356:	639a      	str	r2, [r3, #56]	; 0x38
 8000358:	e794      	b.n	8000284 <main+0xd4>

				}else{
					TIM1->CCR3 = 100;
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <main+0x1e8>)
 800035c:	2264      	movs	r2, #100	; 0x64
 800035e:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR2 = 100 -V_E;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <main+0x1fc>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <main+0x1ec>)
 800036a:	639a      	str	r2, [r3, #56]	; 0x38
		if (isDataAvailable(&nrfRx, 0) == 1){
 800036c:	e78a      	b.n	8000284 <main+0xd4>
 800036e:	bf00      	nop
 8000370:	2000037c 	.word	0x2000037c
 8000374:	40010c00 	.word	0x40010c00
 8000378:	40010800 	.word	0x40010800
 800037c:	20000204 	.word	0x20000204
 8000380:	20000000 	.word	0x20000000
 8000384:	200002a4 	.word	0x200002a4
 8000388:	20000334 	.word	0x20000334
 800038c:	2000025c 	.word	0x2000025c
 8000390:	200002ec 	.word	0x200002ec
 8000394:	40011000 	.word	0x40011000
 8000398:	40012c00 	.word	0x40012c00
 800039c:	40000400 	.word	0x40000400
 80003a0:	2000039c 	.word	0x2000039c
 80003a4:	200003a7 	.word	0x200003a7
 80003a8:	200003a9 	.word	0x200003a9
 80003ac:	200003a8 	.word	0x200003a8
 80003b0:	200003ab 	.word	0x200003ab
 80003b4:	200003aa 	.word	0x200003aa

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b094      	sub	sp, #80	; 0x50
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c2:	2228      	movs	r2, #40	; 0x28
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f00a fa58 	bl	800a87c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	f107 0314 	add.w	r3, r7, #20
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
 80003d6:	609a      	str	r2, [r3, #8]
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f6:	2301      	movs	r3, #1
 80003f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fa:	2302      	movs	r3, #2
 80003fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000408:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800040e:	4618      	mov	r0, r3
 8000410:	f003 f9c4 	bl	800379c <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800041a:	f000 fb19 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	2102      	movs	r1, #2
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fc30 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000446:	f000 fb03 	bl	8000a50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800044a:	2310      	movs	r3, #16
 800044c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4618      	mov	r0, r3
 8000456:	f003 fd89 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000460:	f000 faf6 	bl	8000a50 <Error_Handler>
  }
}
 8000464:	bf00      	nop
 8000466:	3750      	adds	r7, #80	; 0x50
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000470:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <MX_SPI1_Init+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800047c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <MX_SPI1_Init+0x64>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_SPI1_Init+0x64>)
 8000498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800049c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a0:	2208      	movs	r2, #8
 80004a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a4:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b0:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004b8:	220a      	movs	r2, #10
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_SPI1_Init+0x64>)
 80004be:	f003 fe0b 	bl	80040d8 <HAL_SPI_Init>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80004c8:	f000 fac2 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000204 	.word	0x20000204
 80004d4:	40013000 	.word	0x40013000

080004d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b096      	sub	sp, #88	; 0x58
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2220      	movs	r2, #32
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f00a f9b3 	bl	800a87c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000516:	4b4a      	ldr	r3, [pc, #296]	; (8000640 <MX_TIM1_Init+0x168>)
 8000518:	4a4a      	ldr	r2, [pc, #296]	; (8000644 <MX_TIM1_Init+0x16c>)
 800051a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 14-1;
 800051c:	4b48      	ldr	r3, [pc, #288]	; (8000640 <MX_TIM1_Init+0x168>)
 800051e:	220d      	movs	r2, #13
 8000520:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b47      	ldr	r3, [pc, #284]	; (8000640 <MX_TIM1_Init+0x168>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 101 - 1;
 8000528:	4b45      	ldr	r3, [pc, #276]	; (8000640 <MX_TIM1_Init+0x168>)
 800052a:	2264      	movs	r2, #100	; 0x64
 800052c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052e:	4b44      	ldr	r3, [pc, #272]	; (8000640 <MX_TIM1_Init+0x168>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <MX_TIM1_Init+0x168>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b41      	ldr	r3, [pc, #260]	; (8000640 <MX_TIM1_Init+0x168>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000540:	483f      	ldr	r0, [pc, #252]	; (8000640 <MX_TIM1_Init+0x168>)
 8000542:	f004 fb41 	bl	8004bc8 <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800054c:	f000 fa80 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000554:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800055a:	4619      	mov	r1, r3
 800055c:	4838      	ldr	r0, [pc, #224]	; (8000640 <MX_TIM1_Init+0x168>)
 800055e:	f004 ff93 	bl	8005488 <HAL_TIM_ConfigClockSource>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000568:	f000 fa72 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800056c:	4834      	ldr	r0, [pc, #208]	; (8000640 <MX_TIM1_Init+0x168>)
 800056e:	f004 fb7a 	bl	8004c66 <HAL_TIM_PWM_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000578:	f000 fa6a 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057c:	2300      	movs	r3, #0
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000588:	4619      	mov	r1, r3
 800058a:	482d      	ldr	r0, [pc, #180]	; (8000640 <MX_TIM1_Init+0x168>)
 800058c:	f005 fb08 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000596:	f000 fa5b 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059a:	2360      	movs	r3, #96	; 0x60
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	4820      	ldr	r0, [pc, #128]	; (8000640 <MX_TIM1_Init+0x168>)
 80005c0:	f004 fea4 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80005ca:	f000 fa41 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d2:	2204      	movs	r2, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	481a      	ldr	r0, [pc, #104]	; (8000640 <MX_TIM1_Init+0x168>)
 80005d8:	f004 fe98 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80005e2:	f000 fa35 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ea:	2208      	movs	r2, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <MX_TIM1_Init+0x168>)
 80005f0:	f004 fe8c 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80005fa:	f000 fa29 	bl	8000a50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <MX_TIM1_Init+0x168>)
 8000622:	f005 fb1b 	bl	8005c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 800062c:	f000 fa10 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <MX_TIM1_Init+0x168>)
 8000632:	f000 ff2b 	bl	800148c <HAL_TIM_MspPostInit>

}
 8000636:	bf00      	nop
 8000638:	3758      	adds	r7, #88	; 0x58
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000025c 	.word	0x2000025c
 8000644:	40012c00 	.word	0x40012c00

08000648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2224      	movs	r2, #36	; 0x24
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00a f910 	bl	800a87c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_TIM2_Init+0xa4>)
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4 - 1;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_TIM2_Init+0xa4>)
 800066e:	2203      	movs	r2, #3
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_TIM2_Init+0xa4>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_TIM2_Init+0xa4>)
 800067a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800067e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_TIM2_Init+0xa4>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_TIM2_Init+0xa4>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800068c:	2303      	movs	r3, #3
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000694:	2301      	movs	r3, #1
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	4619      	mov	r1, r3
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <MX_TIM2_Init+0xa4>)
 80006b8:	f004 fbd0 	bl	8004e5c <HAL_TIM_Encoder_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80006c2:	f000 f9c5 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_TIM2_Init+0xa4>)
 80006d4:	f005 fa64 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006de:	f000 f9b7 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3730      	adds	r7, #48	; 0x30
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200002a4 	.word	0x200002a4

080006f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000722:	4a2d      	ldr	r2, [pc, #180]	; (80007d8 <MX_TIM3_Init+0xe8>)
 8000724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14-1;
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000728:	220d      	movs	r2, #13
 800072a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <MX_TIM3_Init+0xe4>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 101-1;
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000734:	2264      	movs	r2, #100	; 0x64
 8000736:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <MX_TIM3_Init+0xe4>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000744:	4823      	ldr	r0, [pc, #140]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000746:	f004 fa3f 	bl	8004bc8 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000750:	f000 f97e 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075e:	4619      	mov	r1, r3
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000762:	f004 fe91 	bl	8005488 <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800076c:	f000 f970 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000770:	4818      	ldr	r0, [pc, #96]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000772:	f004 fa78 	bl	8004c66 <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800077c:	f000 f968 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_TIM3_Init+0xe4>)
 8000790:	f005 fa06 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800079a:	f000 f959 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	; 0x60
 80007a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2204      	movs	r2, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	; (80007d4 <MX_TIM3_Init+0xe4>)
 80007b6:	f004 fda9 	bl	800530c <HAL_TIM_PWM_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007c0:	f000 f946 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <MX_TIM3_Init+0xe4>)
 80007c6:	f000 fe61 	bl	800148c <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3738      	adds	r7, #56	; 0x38
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200002ec 	.word	0x200002ec
 80007d8:	40000400 	.word	0x40000400

080007dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2224      	movs	r2, #36	; 0x24
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00a f846 	bl	800a87c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <MX_TIM4_Init+0xa0>)
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <MX_TIM4_Init+0xa4>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4-1;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_TIM4_Init+0xa0>)
 8000800:	2203      	movs	r2, #3
 8000802:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_TIM4_Init+0xa0>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_TIM4_Init+0xa0>)
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_TIM4_Init+0xa0>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_TIM4_Init+0xa0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800081e:	2303      	movs	r3, #3
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000836:	2301      	movs	r3, #1
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_TIM4_Init+0xa0>)
 800084a:	f004 fb07 	bl	8004e5c <HAL_TIM_Encoder_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f8fc 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_TIM4_Init+0xa0>)
 8000866:	f005 f99b 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000870:	f000 f8ee 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3730      	adds	r7, #48	; 0x30
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000334 	.word	0x20000334
 8000880:	40000800 	.word	0x40000800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <MX_GPIO_Init+0x10c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <MX_GPIO_Init+0x10c>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b37      	ldr	r3, [pc, #220]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a36      	ldr	r2, [pc, #216]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a30      	ldr	r2, [pc, #192]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b2e      	ldr	r3, [pc, #184]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_GPIO_Init+0x10c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	4825      	ldr	r0, [pc, #148]	; (8000994 <MX_GPIO_Init+0x110>)
 8000900:	f001 fa57 	bl	8001db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|IRQ_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2118      	movs	r1, #24
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <MX_GPIO_Init+0x114>)
 800090a:	f001 fa52 	bl	8001db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2101      	movs	r1, #1
 8000912:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x118>)
 8000914:	f001 fa4d 	bl	8001db2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_GPIO_Init+0x110>)
 8000932:	f001 f8a3 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin IRQ_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|IRQ_Pin;
 8000936:	2318      	movs	r3, #24
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4812      	ldr	r0, [pc, #72]	; (8000998 <MX_GPIO_Init+0x114>)
 800094e:	f001 f895 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000952:	2301      	movs	r3, #1
 8000954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2302      	movs	r3, #2
 8000960:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <MX_GPIO_Init+0x118>)
 800096a:	f001 f887 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIP1_Pin DIP2_Pin DIP3_Pin DIP4_Pin */
  GPIO_InitStruct.Pin = DIP1_Pin|DIP2_Pin|DIP3_Pin|DIP4_Pin;
 800096e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_GPIO_Init+0x118>)
 8000984:	f001 f87a 	bl	8001a7c <HAL_GPIO_Init>

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	40011000 	.word	0x40011000
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00

080009a0 <readData>:

/* USER CODE BEGIN 4 */
void readData(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	nrf24_Receive(&nrfRx, rxData, PAYLOAD);
 80009a4:	220b      	movs	r2, #11
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <readData+0x1c>)
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <readData+0x20>)
 80009aa:	f000 fa5f 	bl	8000e6c <nrf24_Receive>
	//CDC_Transmit_FS(rxData, 11);
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <readData+0x24>)
 80009b4:	f001 fa15 	bl	8001de2 <HAL_GPIO_TogglePin>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000039c 	.word	0x2000039c
 80009c0:	2000037c 	.word	0x2000037c
 80009c4:	40011000 	.word	0x40011000

080009c8 <quemSouEu>:

void quemSouEu(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//se 0 então o DIP está ativado
	if(!HAL_GPIO_ReadPin(DIP1_GPIO_Port, DIP1_Pin)){
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	481d      	ldr	r0, [pc, #116]	; (8000a48 <quemSouEu+0x80>)
 80009d2:	f001 f9d7 	bl	8001d84 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10f      	bne.n	80009fc <quemSouEu+0x34>
		if(HAL_GPIO_ReadPin(DIP2_GPIO_Port, DIP2_Pin)){
 80009dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e0:	4819      	ldr	r0, [pc, #100]	; (8000a48 <quemSouEu+0x80>)
 80009e2:	f001 f9cf 	bl	8001d84 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <quemSouEu+0x2c>
			id = 1;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <quemSouEu+0x84>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
	}else if(!HAL_GPIO_ReadPin(DIP3_GPIO_Port, DIP3_Pin)){
		id = 3;
	}else if(!HAL_GPIO_ReadPin(DIP4_GPIO_Port, DIP4_Pin)){
		id = 4;
	}
}
 80009f2:	e026      	b.n	8000a42 <quemSouEu+0x7a>
			id = 5;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <quemSouEu+0x84>)
 80009f6:	2205      	movs	r2, #5
 80009f8:	701a      	strb	r2, [r3, #0]
}
 80009fa:	e022      	b.n	8000a42 <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP2_GPIO_Port, DIP2_Pin)){
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <quemSouEu+0x80>)
 8000a02:	f001 f9bf 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d103      	bne.n	8000a14 <quemSouEu+0x4c>
		id = 2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <quemSouEu+0x84>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	701a      	strb	r2, [r3, #0]
}
 8000a12:	e016      	b.n	8000a42 <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP3_GPIO_Port, DIP3_Pin)){
 8000a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <quemSouEu+0x80>)
 8000a1a:	f001 f9b3 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d103      	bne.n	8000a2c <quemSouEu+0x64>
		id = 3;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <quemSouEu+0x84>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	701a      	strb	r2, [r3, #0]
}
 8000a2a:	e00a      	b.n	8000a42 <quemSouEu+0x7a>
	}else if(!HAL_GPIO_ReadPin(DIP4_GPIO_Port, DIP4_Pin)){
 8000a2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <quemSouEu+0x80>)
 8000a32:	f001 f9a7 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <quemSouEu+0x7a>
		id = 4;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <quemSouEu+0x84>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	701a      	strb	r2, [r3, #0]
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	200003a7 	.word	0x200003a7

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>

08000a5a <nrf24_init>:
		uint16_t len);
static void nrf_sendCmd(nrf24 *node, uint8_t cmd);
static void nrf24_reset(nrf24 *node, uint8_t reg);

/* Exported functions --------------------------------------------------------*/
void nrf24_init(nrf24 *node) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 fa54 	bl	8000f10 <nrf24_CE_disable>

	nrf24_writeReg(node, CONFIG, 0);  			//No IRQ, no CRC
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 fa7f 	bl	8000f70 <nrf24_writeReg>
	node->crc = no_CRC;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	77da      	strb	r2, [r3, #31]
	nrf24_writeReg(node, EN_AA, 0x00); 			//No auto ACK
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f000 fa77 	bl	8000f70 <nrf24_writeReg>
	nrf24_writeReg(node, EN_RXADDR, 0x00);	//Not enabling any data pipe
 8000a82:	2200      	movs	r2, #0
 8000a84:	2102      	movs	r1, #2
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 fa72 	bl	8000f70 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_AW, 0x03);  	//5 Bytes for the TX/RX address
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	2103      	movs	r1, #3
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fa6d 	bl	8000f70 <nrf24_writeReg>
	nrf24_writeReg(node, SETUP_RETR, 0);   	//No retransmission
 8000a96:	2200      	movs	r2, #0
 8000a98:	2104      	movs	r1, #4
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fa68 	bl	8000f70 <nrf24_writeReg>

	nrf24_setDataRate(node, _250kbs);		//set minimum dataRate
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f000 f813 	bl	8000ace <nrf24_setDataRate>
	nrf24_setPALevel(node, high);				//set maximum PALevel 0dBm
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f85a 	bl	8000b64 <nrf24_setPALevel>
	nrf24_setChannel(node, DEFAULT_CHANNEL);	//default channel 100
 8000ab0:	2164      	movs	r1, #100	; 0x64
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f8ae 	bl	8000c14 <nrf24_setChannel>
	nrf24_setMode(node, standby);		//set STANDBY mode
 8000ab8:	2101      	movs	r1, #1
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8c0 	bl	8000c40 <nrf24_setMode>

	nrf24_CE_enable(node);	// Enable the chip after configuring the device
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 fa15 	bl	8000ef0 <nrf24_CE_enable>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <nrf24_setDataRate>:
// -----------------------------------------------------------------------------

//set module bitrate
void nrf24_setDataRate(nrf24 *node, DataRate _bitRate) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 fa18 	bl	8000f10 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000ae0:	2106      	movs	r1, #6
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 faab 	bl	800103e <nrf24_readReg>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate) {
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d01e      	beq.n	8000b30 <nrf24_setDataRate+0x62>
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	dc28      	bgt.n	8000b48 <nrf24_setDataRate+0x7a>
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <nrf24_setDataRate+0x32>
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d00c      	beq.n	8000b18 <nrf24_setDataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2mbs;
			break;

		default:
			break;
 8000afe:	e023      	b.n	8000b48 <nrf24_setDataRate+0x7a>
			config |= (1 << 5);		//write 1 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	f023 0308 	bic.w	r3, r3, #8
 8000b0e:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250kbs;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	775a      	strb	r2, [r3, #29]
			break;
 8000b16:	e018      	b.n	8000b4a <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 0 in RF_DR_HIGH bits
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	f023 0320 	bic.w	r3, r3, #32
 8000b1e:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 3);
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	f023 0308 	bic.w	r3, r3, #8
 8000b26:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1mbs;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	775a      	strb	r2, [r3, #29]
			break;
 8000b2e:	e00c      	b.n	8000b4a <nrf24_setDataRate+0x7c>
			config &= ~(1 << 5);	//write 0 in the RF_DR_LOW and 1 in RF_DR_HIGH bits
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	f023 0320 	bic.w	r3, r3, #32
 8000b36:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2mbs;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2202      	movs	r2, #2
 8000b44:	775a      	strb	r2, [r3, #29]
			break;
 8000b46:	e000      	b.n	8000b4a <nrf24_setDataRate+0x7c>
			break;
 8000b48:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2106      	movs	r1, #6
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 fa0d 	bl	8000f70 <nrf24_writeReg>
	nrf24_CE_enable(node);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f9ca 	bl	8000ef0 <nrf24_CE_enable>
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <nrf24_setPALevel>:
// -----------------------------------------------------------------------------

//set PAlevel module in TX mode
void nrf24_setPALevel(nrf24 *node, PaLevel pwr) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 f9cd 	bl	8000f10 <nrf24_CE_disable>
	uint8_t config = nrf24_readReg(node, RF_SETUP);
 8000b76:	2106      	movs	r1, #6
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 fa60 	bl	800103e <nrf24_readReg>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d837      	bhi.n	8000bf8 <nrf24_setPALevel+0x94>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <nrf24_setPALevel+0x2c>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000ba1 	.word	0x08000ba1
 8000b94:	08000bb9 	.word	0x08000bb9
 8000b98:	08000bd1 	.word	0x08000bd1
 8000b9c:	08000be9 	.word	0x08000be9
		case veryLow:
			config &= ~(1 << 2);	//write 0 in the RF_PWR bits
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f023 0304 	bic.w	r3, r3, #4
 8000ba6:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	f023 0302 	bic.w	r3, r3, #2
 8000bae:	73fb      	strb	r3, [r7, #15]
			node->pa = veryLow;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	771a      	strb	r2, [r3, #28]
			break;
 8000bb6:	e020      	b.n	8000bfa <nrf24_setPALevel+0x96>

		case low:
			config &= ~(1 << 2);	//write 1 in the RF_PWR bits
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	f023 0304 	bic.w	r3, r3, #4
 8000bbe:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	73fb      	strb	r3, [r7, #15]
			node->pa = low;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	771a      	strb	r2, [r3, #28]
			break;
 8000bce:	e014      	b.n	8000bfa <nrf24_setPALevel+0x96>

		case mid:
			config |= (1 << 2);		//write 2 in the RF_PWR bits
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 1);
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f023 0302 	bic.w	r3, r3, #2
 8000bde:	73fb      	strb	r3, [r7, #15]
			node->pa = mid;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2202      	movs	r2, #2
 8000be4:	771a      	strb	r2, [r3, #28]
			break;
 8000be6:	e008      	b.n	8000bfa <nrf24_setPALevel+0x96>

		case high:
			config |= (1 << 2) | (1 << 1);	//write 3 in the RF_PWR bits
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	f043 0306 	orr.w	r3, r3, #6
 8000bee:	73fb      	strb	r3, [r7, #15]
			node->pa = high;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	771a      	strb	r2, [r3, #28]
			break;
 8000bf6:	e000      	b.n	8000bfa <nrf24_setPALevel+0x96>

		default:
			break;
 8000bf8:	bf00      	nop
	}
	nrf24_writeReg(node, RF_SETUP, config);
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2106      	movs	r1, #6
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f9b5 	bl	8000f70 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f972 	bl	8000ef0 <nrf24_CE_enable>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <nrf24_setChannel>:
// -----------------------------------------------------------------------------

//Set the channel device
void nrf24_setChannel(nrf24 *node, uint8_t channel) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	70fb      	strb	r3, [r7, #3]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f975 	bl	8000f10 <nrf24_CE_disable>
	nrf24_writeReg(node, RF_CH, channel);  // select the channel
 8000c26:	78fb      	ldrb	r3, [r7, #3]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f99f 	bl	8000f70 <nrf24_writeReg>
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f95c 	bl	8000ef0 <nrf24_CE_enable>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <nrf24_setMode>:
// -----------------------------------------------------------------------------

//Set the module operation mode
void nrf24_setMode(nrf24 *node, Mode _mode) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	uint8_t config = nrf24_readReg(node, CONFIG);
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f9f5 	bl	800103e <nrf24_readReg>
 8000c54:	4603      	mov	r3, r0
 8000c56:	73fb      	strb	r3, [r7, #15]

	switch (_mode) {
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d837      	bhi.n	8000cce <nrf24_setMode+0x8e>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <nrf24_setMode+0x24>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000c75 	.word	0x08000c75
 8000c68:	08000c85 	.word	0x08000c85
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000cb9 	.word	0x08000cb9
		case pwrDown:
			config &= ~(1 << 1);	//write 0 in the PWR_UP bit
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	73fb      	strb	r3, [r7, #15]
			node->mode = pwrDown;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	779a      	strb	r2, [r3, #30]
			break;
 8000c82:	e025      	b.n	8000cd0 <nrf24_setMode+0x90>

		case standby:
			nrf24_CE_disable(node);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f943 	bl	8000f10 <nrf24_CE_disable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	73fb      	strb	r3, [r7, #15]
			node->mode = standby;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	779a      	strb	r2, [r3, #30]
			break;
 8000c98:	e01a      	b.n	8000cd0 <nrf24_setMode+0x90>

		case txMode:
			nrf24_CE_enable(node);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f928 	bl	8000ef0 <nrf24_CE_enable>
			config |= (1 << 1);		//write 1 in the PWR_UP bit
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	73fb      	strb	r3, [r7, #15]
			config &= ~(1 << 0);	//write 0 in the PRIM_RX bit
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f023 0301 	bic.w	r3, r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
			node->mode = txMode;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	779a      	strb	r2, [r3, #30]
			break;
 8000cb6:	e00b      	b.n	8000cd0 <nrf24_setMode+0x90>

		case rxMode:
			nrf24_CE_enable(node);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f919 	bl	8000ef0 <nrf24_CE_enable>
			config |= (1 << 1) | (1 << 0); //write 1 in the PWR_UP and PRIM_RX bits
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	f043 0303 	orr.w	r3, r3, #3
 8000cc4:	73fb      	strb	r3, [r7, #15]
			node->mode = rxMode;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2203      	movs	r2, #3
 8000cca:	779a      	strb	r2, [r3, #30]
			break;
 8000ccc:	e000      	b.n	8000cd0 <nrf24_setMode+0x90>

		default:
			break;
 8000cce:	bf00      	nop
	}
	nrf24_writeReg(node, CONFIG, config);
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 f94a 	bl	8000f70 <nrf24_writeReg>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <nrf24_setRxPipe>:
	}
	return (0);
}
// -----------------------------------------------------------------------------

void nrf24_setRxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	71bb      	strb	r3, [r7, #6]
	nrf24_CE_disable(node);	//disable the chip before configure the device
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f000 f908 	bl	8000f10 <nrf24_CE_disable>

	nrf24_reset(node, STATUS);
 8000d00:	2107      	movs	r1, #7
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f000 f9ea 	bl	80010dc <nrf24_reset>
	uint8_t en_rxaddr = nrf24_readReg(node, EN_RXADDR);	//select data pipe
 8000d08:	2102      	movs	r1, #2
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f000 f997 	bl	800103e <nrf24_readReg>
 8000d10:	4603      	mov	r3, r0
 8000d12:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	2201      	movs	r2, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	75fb      	strb	r3, [r7, #23]
	nrf24_writeReg(node, EN_RXADDR, en_rxaddr);
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f000 f91e 	bl	8000f70 <nrf24_writeReg>
	/* We must write the address for Data Pipe 1, if we want to use any pipe from 2 to 5
	 The Address from DATA Pipe 2 to Data Pipe 5 differs only in the LSB
	 Their 4 MSB Bytes will still be same as Data Pipe 1
	 For Example:
	 Pipe 1 ADDR = 0xAABBCCDD11, Pipe 2 ADDR = 0xAABBCCDD22 Pipe 3 ADDR = 0xAABBCCDD33*/
	switch (pipe) {
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d860      	bhi.n	8000dfc <nrf24_setRxPipe+0x118>
 8000d3a:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <nrf24_setRxPipe+0x5c>)
 8000d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d40:	08000d59 	.word	0x08000d59
 8000d44:	08000d73 	.word	0x08000d73
 8000d48:	08000d8d 	.word	0x08000d8d
 8000d4c:	08000da9 	.word	0x08000da9
 8000d50:	08000dc5 	.word	0x08000dc5
 8000d54:	08000de1 	.word	0x08000de1
		case 0:
			nrf24_writeRegMulti(node, RX_ADDR_P0, addr, 5); //Write the Pipe0 address
 8000d58:	2305      	movs	r3, #5
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	210a      	movs	r1, #10
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 f931 	bl	8000fc6 <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P0, payload); //payload size for pipe 0
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2111      	movs	r1, #17
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f000 f900 	bl	8000f70 <nrf24_writeReg>
			break;
 8000d70:	e045      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		case 1:
			nrf24_writeRegMulti(node, RX_ADDR_P1, addr, 5); //Write the Pipe1 address
 8000d72:	2305      	movs	r3, #5
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	210b      	movs	r1, #11
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f924 	bl	8000fc6 <nrf24_writeRegMulti>
			nrf24_writeReg(node, RX_PW_P1, payload); 	//payload size for pipe 1
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	461a      	mov	r2, r3
 8000d82:	2112      	movs	r1, #18
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 f8f3 	bl	8000f70 <nrf24_writeReg>
			break;
 8000d8a:	e038      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		case 2:
			nrf24_writeReg(node, RX_ADDR_P2, addr[0]);	//Write the Pipe2 address
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	210c      	movs	r1, #12
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 f8eb 	bl	8000f70 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P2, payload); 		//payload size for pipe 2
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	2113      	movs	r1, #19
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 f8e5 	bl	8000f70 <nrf24_writeReg>
			break;
 8000da6:	e02a      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		case 3:
			nrf24_writeReg(node, RX_ADDR_P3, addr[0]);	// Write the Pipe3 address
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	210d      	movs	r1, #13
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 f8dd 	bl	8000f70 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P3, payload); 		//payload size for pipe 3
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	461a      	mov	r2, r3
 8000dba:	2114      	movs	r1, #20
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f000 f8d7 	bl	8000f70 <nrf24_writeReg>
			break;
 8000dc2:	e01c      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		case 4:
			nrf24_writeReg(node, RX_ADDR_P4, addr[0]); 	//Write the Pipe4 address
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	210e      	movs	r1, #14
 8000dcc:	68f8      	ldr	r0, [r7, #12]
 8000dce:	f000 f8cf 	bl	8000f70 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P4, payload); 		//payload size for pipe 4
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2115      	movs	r1, #21
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f8c9 	bl	8000f70 <nrf24_writeReg>
			break;
 8000dde:	e00e      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		case 5:
			nrf24_writeReg(node, RX_ADDR_P5, addr[0]); 	// Write the Pipe5 address
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	210f      	movs	r1, #15
 8000de8:	68f8      	ldr	r0, [r7, #12]
 8000dea:	f000 f8c1 	bl	8000f70 <nrf24_writeReg>
			nrf24_writeReg(node, RX_PW_P5, payload); 		//payload size for pipe 5
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	461a      	mov	r2, r3
 8000df2:	2116      	movs	r1, #22
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f000 f8bb 	bl	8000f70 <nrf24_writeReg>
			break;
 8000dfa:	e000      	b.n	8000dfe <nrf24_setRxPipe+0x11a>

		default:
			break;
 8000dfc:	bf00      	nop
	}
	nrf24_CE_enable(node);	//Enable the chip after configuring the device
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 f876 	bl	8000ef0 <nrf24_CE_enable>
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <isDataAvailable>:
// -----------------------------------------------------------------------------

uint8_t isDataAvailable(nrf24 *node, uint8_t pipenum) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
	uint8_t status = nrf24_readReg(node, STATUS);
 8000e18:	2107      	movs	r1, #7
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f90f 	bl	800103e <nrf24_readReg>
 8000e20:	4603      	mov	r3, r0
 8000e22:	73fb      	strb	r3, [r7, #15]
	if ((status - 64 == 0) && pipenum == 0) {
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b40      	cmp	r3, #64	; 0x40
 8000e28:	d109      	bne.n	8000e3e <isDataAvailable+0x32>
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <isDataAvailable+0x32>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000e30:	2240      	movs	r2, #64	; 0x40
 8000e32:	2107      	movs	r1, #7
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 f89b 	bl	8000f70 <nrf24_writeReg>
		return 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e012      	b.n	8000e64 <isDataAvailable+0x58>
	}
	else if ((status & (1 << 6)) && (status & (pipenum << 1))) {
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00c      	beq.n	8000e62 <isDataAvailable+0x56>
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4013      	ands	r3, r2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <isDataAvailable+0x56>
		nrf24_writeReg(node, STATUS, (1 << 6));
 8000e54:	2240      	movs	r2, #64	; 0x40
 8000e56:	2107      	movs	r1, #7
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f889 	bl	8000f70 <nrf24_writeReg>
		return 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <isDataAvailable+0x58>
	}
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <nrf24_Receive>:
// -----------------------------------------------------------------------------

void nrf24_Receive(nrf24 *node, uint8_t *data, uint8_t len) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]

	nrf24_CSN_enable(node);		//select the device
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 f856 	bl	8000f30 <nrf24_CSN_enable>
	cmdtosend = R_RX_PAYLOAD;	//payload command
 8000e84:	2361      	movs	r3, #97	; 0x61
 8000e86:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6998      	ldr	r0, [r3, #24]
 8000e8c:	f107 0117 	add.w	r1, r7, #23
 8000e90:	2364      	movs	r3, #100	; 0x64
 8000e92:	2201      	movs	r2, #1
 8000e94:	f003 f9a4 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000e98:	bf00      	nop
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f003 fd8d 	bl	80049be <HAL_SPI_GetState>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d1f7      	bne.n	8000e9a <nrf24_Receive+0x2e>
	//Receive the payload
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6998      	ldr	r0, [r3, #24]
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	f003 face 	bl	8004458 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000ebc:	bf00      	nop
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f003 fd7b 	bl	80049be <HAL_SPI_GetState>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1f7      	bne.n	8000ebe <nrf24_Receive+0x52>
	nrf24_CSN_disable(node);	//Unselect the device
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 f83e 	bl	8000f50 <nrf24_CSN_disable>
	HAL_Delay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fc9f 	bl	8001818 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8000eda:	23e2      	movs	r3, #226	; 0xe2
 8000edc:	75fb      	strb	r3, [r7, #23]
	nrf_sendCmd(node, cmdtosend);
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f8d8 	bl	8001098 <nrf_sendCmd>
}
 8000ee8:	bf00      	nop
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <nrf24_CE_enable>:
		*(data + i) = nrf24_readReg(node, i - 12);
}
// -----------------------------------------------------------------------------

/* privated functions --------------------------------------------------------*/
static void nrf24_CE_enable(nrf24 *node) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	899b      	ldrh	r3, [r3, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	f000 ff55 	bl	8001db2 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <nrf24_CE_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CE_disable(nrf24 *node) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6898      	ldr	r0, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	899b      	ldrh	r3, [r3, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	f000 ff45 	bl	8001db2 <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <nrf24_CSN_enable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_enable(nrf24 *node) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	889b      	ldrh	r3, [r3, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	f000 ff35 	bl	8001db2 <HAL_GPIO_WritePin>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <nrf24_CSN_disable>:
// -----------------------------------------------------------------------------

static void nrf24_CSN_disable(nrf24 *node) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f000 ff25 	bl	8001db2 <HAL_GPIO_WritePin>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <nrf24_writeReg>:
// -----------------------------------------------------------------------------

//write a value(s) in a register(s) by an address
static void nrf24_writeReg(nrf24 *node, uint8_t reg, uint8_t data) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	f043 0320 	orr.w	r3, r3, #32
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 8000f8a:	78bb      	ldrb	r3, [r7, #2]
 8000f8c:	737b      	strb	r3, [r7, #13]
	nrf24_CSN_enable(node);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffce 	bl	8000f30 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6998      	ldr	r0, [r3, #24]
 8000f98:	f107 010c 	add.w	r1, r7, #12
 8000f9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	f003 f91d 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000fa6:	bf00      	nop
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fd06 	bl	80049be <HAL_SPI_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1f7      	bne.n	8000fa8 <nrf24_writeReg+0x38>
	nrf24_CSN_disable(node);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ffc9 	bl	8000f50 <nrf24_CSN_disable>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <nrf24_writeRegMulti>:
// -----------------------------------------------------------------------------

//write multiple values in a registers by an address
static void nrf24_writeRegMulti(nrf24 *node, uint8_t reg, uint8_t *data,
		uint16_t len) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	72fb      	strb	r3, [r7, #11]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	753b      	strb	r3, [r7, #20]
	nrf24_CSN_enable(node);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff ffa3 	bl	8000f30 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6998      	ldr	r0, [r3, #24]
 8000fee:	f107 0114 	add.w	r1, r7, #20
 8000ff2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f003 f8f2 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8000ffc:	bf00      	nop
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	4618      	mov	r0, r3
 8001004:	f003 fcdb 	bl	80049be <HAL_SPI_GetState>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d1f7      	bne.n	8000ffe <nrf24_writeRegMulti+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6998      	ldr	r0, [r3, #24]
 8001012:	893a      	ldrh	r2, [r7, #8]
 8001014:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001018:	6879      	ldr	r1, [r7, #4]
 800101a:	f003 f8e1 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800101e:	bf00      	nop
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4618      	mov	r0, r3
 8001026:	f003 fcca 	bl	80049be <HAL_SPI_GetState>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d1f7      	bne.n	8001020 <nrf24_writeRegMulti+0x5a>
	nrf24_CSN_disable(node);
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff ff8d 	bl	8000f50 <nrf24_CSN_disable>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <nrf24_readReg>:
// -----------------------------------------------------------------------------

//read a value from a register by an address
static uint8_t nrf24_readReg(nrf24 *node, uint8_t reg) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
	nrf24_CSN_enable(node);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff6e 	bl	8000f30 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6998      	ldr	r0, [r3, #24]
 8001058:	1cf9      	adds	r1, r7, #3
 800105a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800105e:	2201      	movs	r2, #1
 8001060:	f003 f8be 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8001064:	bf00      	nop
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4618      	mov	r0, r3
 800106c:	f003 fca7 	bl	80049be <HAL_SPI_GetState>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d1f7      	bne.n	8001066 <nrf24_readReg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6998      	ldr	r0, [r3, #24]
 800107a:	f107 010f 	add.w	r1, r7, #15
 800107e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001082:	2201      	movs	r2, #1
 8001084:	f003 f9e8 	bl	8004458 <HAL_SPI_Receive>
	nrf24_CSN_disable(node);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff61 	bl	8000f50 <nrf24_CSN_disable>
	return data;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <nrf_sendCmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	nrf24_CSN_disable(node);
}
// -----------------------------------------------------------------------------

static void nrf_sendCmd(nrf24 *node, uint8_t cmd) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
	nrf24_CSN_enable(node);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff43 	bl	8000f30 <nrf24_CSN_enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6998      	ldr	r0, [r3, #24]
 80010ae:	1cf9      	adds	r1, r7, #3
 80010b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010b4:	2201      	movs	r2, #1
 80010b6:	f003 f893 	bl	80041e0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80010ba:	bf00      	nop
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fc7c 	bl	80049be <HAL_SPI_GetState>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d1f7      	bne.n	80010bc <nrf_sendCmd+0x24>
	nrf24_CSN_disable(node);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff3f 	bl	8000f50 <nrf24_CSN_disable>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <nrf24_reset>:
// -----------------------------------------------------------------------------

static void nrf24_reset(nrf24 *node, uint8_t reg) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	if (reg == STATUS)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d105      	bne.n	80010fa <nrf24_reset+0x1e>
		nrf24_writeReg(node, STATUS, 0x00);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2107      	movs	r1, #7
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff3c 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
		nrf24_writeReg(node, DYNPD, 0);
		nrf24_writeReg(node, FEATURE, 0);
	}
}
 80010f8:	e0a8      	b.n	800124c <nrf24_reset+0x170>
	else if (reg == FIFO_STATUS)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	2b17      	cmp	r3, #23
 80010fe:	d105      	bne.n	800110c <nrf24_reset+0x30>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 8001100:	2211      	movs	r2, #17
 8001102:	2117      	movs	r1, #23
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff33 	bl	8000f70 <nrf24_writeReg>
}
 800110a:	e09f      	b.n	800124c <nrf24_reset+0x170>
		nrf24_writeReg(node, CONFIG, 0x08);
 800110c:	2208      	movs	r2, #8
 800110e:	2100      	movs	r1, #0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff2d 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, EN_AA, 0x3F);
 8001116:	223f      	movs	r2, #63	; 0x3f
 8001118:	2101      	movs	r1, #1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff28 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, EN_RXADDR, 0x03);
 8001120:	2203      	movs	r2, #3
 8001122:	2102      	movs	r1, #2
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff23 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_AW, 0x03);
 800112a:	2203      	movs	r2, #3
 800112c:	2103      	movs	r1, #3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff1e 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, SETUP_RETR, 0x03);
 8001134:	2203      	movs	r2, #3
 8001136:	2104      	movs	r1, #4
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff19 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RF_CH, 0x02);
 800113e:	2202      	movs	r2, #2
 8001140:	2105      	movs	r1, #5
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff14 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RF_SETUP, 0x0E);
 8001148:	220e      	movs	r2, #14
 800114a:	2106      	movs	r1, #6
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff0f 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, STATUS, 0x00);
 8001152:	2200      	movs	r2, #0
 8001154:	2107      	movs	r1, #7
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff0a 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, OBSERVE_TX, 0x00);
 800115c:	2200      	movs	r2, #0
 800115e:	2108      	movs	r1, #8
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff05 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RPD, 0x00);
 8001166:	2200      	movs	r2, #0
 8001168:	2109      	movs	r1, #9
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff00 	bl	8000f70 <nrf24_writeReg>
		uint8_t rx_addr_p0_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 8001170:	4a38      	ldr	r2, [pc, #224]	; (8001254 <nrf24_reset+0x178>)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117a:	6018      	str	r0, [r3, #0]
 800117c:	3304      	adds	r3, #4
 800117e:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 8001180:	f107 0218 	add.w	r2, r7, #24
 8001184:	2305      	movs	r3, #5
 8001186:	210a      	movs	r1, #10
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff1c 	bl	8000fc6 <nrf24_writeRegMulti>
		uint8_t rx_addr_p1_def[5] = { 0xC2, 0xC2, 0xC2, 0xC2, 0xC2 };
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <nrf24_reset+0x17c>)
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001198:	6018      	str	r0, [r3, #0]
 800119a:	3304      	adds	r3, #4
 800119c:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 800119e:	f107 0210 	add.w	r2, r7, #16
 80011a2:	2305      	movs	r3, #5
 80011a4:	210b      	movs	r1, #11
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff0d 	bl	8000fc6 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_ADDR_P2, 0xC3);
 80011ac:	22c3      	movs	r2, #195	; 0xc3
 80011ae:	210c      	movs	r1, #12
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fedd 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P3, 0xC4);
 80011b6:	22c4      	movs	r2, #196	; 0xc4
 80011b8:	210d      	movs	r1, #13
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fed8 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P4, 0xC5);
 80011c0:	22c5      	movs	r2, #197	; 0xc5
 80011c2:	210e      	movs	r1, #14
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fed3 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_ADDR_P5, 0xC6);
 80011ca:	22c6      	movs	r2, #198	; 0xc6
 80011cc:	210f      	movs	r1, #15
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fece 	bl	8000f70 <nrf24_writeReg>
		uint8_t tx_addr_def[5] = { 0xE7, 0xE7, 0xE7, 0xE7, 0xE7 };
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <nrf24_reset+0x178>)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	6018      	str	r0, [r3, #0]
 80011e0:	3304      	adds	r3, #4
 80011e2:	7019      	strb	r1, [r3, #0]
		nrf24_writeRegMulti(node, TX_ADDR, tx_addr_def, 5);
 80011e4:	f107 0208 	add.w	r2, r7, #8
 80011e8:	2305      	movs	r3, #5
 80011ea:	2110      	movs	r1, #16
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff feea 	bl	8000fc6 <nrf24_writeRegMulti>
		nrf24_writeReg(node, RX_PW_P0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2111      	movs	r1, #17
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff feba 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P1, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2112      	movs	r1, #18
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff feb5 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P2, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2113      	movs	r1, #19
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff feb0 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P3, 0);
 8001210:	2200      	movs	r2, #0
 8001212:	2114      	movs	r1, #20
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff feab 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P4, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2115      	movs	r1, #21
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fea6 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, RX_PW_P5, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2116      	movs	r1, #22
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fea1 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, FIFO_STATUS, 0x11);
 800122e:	2211      	movs	r2, #17
 8001230:	2117      	movs	r1, #23
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fe9c 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, DYNPD, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	211c      	movs	r1, #28
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fe97 	bl	8000f70 <nrf24_writeReg>
		nrf24_writeReg(node, FEATURE, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	211d      	movs	r1, #29
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fe92 	bl	8000f70 <nrf24_writeReg>
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800b198 	.word	0x0800b198
 8001258:	0800b1a0 	.word	0x0800b1a0

0800125c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_MspInit+0x40>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_MspInit+0x40>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_MspInit+0x40>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_MspInit+0x40>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_MspInit+0x40>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_MspInit+0x40>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <HAL_SPI_MspInit+0x88>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d12f      	bne.n	8001320 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012f0:	23a0      	movs	r3, #160	; 0xa0
 80012f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <HAL_SPI_MspInit+0x90>)
 8001304:	f000 fbba 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_SPI_MspInit+0x90>)
 800131c:	f000 fbae 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013000 	.word	0x40013000
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_TIM_Base_MspInit+0x58>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10c      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 800134c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800135e:	e010      	b.n	8001382 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_TIM_Base_MspInit+0x60>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10b      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_TIM_Base_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
}
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40012c00 	.word	0x40012c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40000400 	.word	0x40000400

08001398 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b6:	d12c      	bne.n	8001412 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	4a2f      	ldr	r2, [pc, #188]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	61d3      	str	r3, [r2, #28]
 80013c4:	4b2d      	ldr	r3, [pc, #180]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e8:	2303      	movs	r3, #3
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4821      	ldr	r0, [pc, #132]	; (8001480 <HAL_TIM_Encoder_MspInit+0xe8>)
 80013fc:	f000 fb3e 	bl	8001a7c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	201c      	movs	r0, #28
 8001406:	f000 fb02 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800140a:	201c      	movs	r0, #28
 800140c:	f000 fb1b 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001410:	e030      	b.n	8001474 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <HAL_TIM_Encoder_MspInit+0xec>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d12b      	bne.n	8001474 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	61d3      	str	r3, [r2, #28]
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144c:	23c0      	movs	r3, #192	; 0xc0
 800144e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4619      	mov	r1, r3
 800145e:	480a      	ldr	r0, [pc, #40]	; (8001488 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001460:	f000 fb0c 	bl	8001a7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	201e      	movs	r0, #30
 800146a:	f000 fad0 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800146e:	201e      	movs	r0, #30
 8001470:	f000 fae9 	bl	8001a46 <HAL_NVIC_EnableIRQ>
}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800
 8001484:	40000800 	.word	0x40000800
 8001488:	40010c00 	.word	0x40010c00

0800148c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_TIM_MspPostInit+0xbc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d119      	bne.n	80014e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	4a26      	ldr	r2, [pc, #152]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6193      	str	r3, [r2, #24]
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014c4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	481d      	ldr	r0, [pc, #116]	; (8001550 <HAL_TIM_MspPostInit+0xc4>)
 80014da:	f000 facf 	bl	8001a7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014de:	e02e      	b.n	800153e <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_TIM_MspPostInit+0xc8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d129      	bne.n	800153e <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_TIM_MspPostInit+0xc0>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2302      	movs	r3, #2
 800150c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <HAL_TIM_MspPostInit+0xcc>)
 8001516:	f000 fab1 	bl	8001a7c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0xd0>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
 8001538:	4a08      	ldr	r2, [pc, #32]	; (800155c <HAL_TIM_MspPostInit+0xd0>)
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	6053      	str	r3, [r2, #4]
}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40012c00 	.word	0x40012c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40010800 	.word	0x40010800
 8001554:	40000400 	.word	0x40000400
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40010000 	.word	0x40010000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <SysTick_Handler+0x88>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	4a1f      	ldr	r2, [pc, #124]	; (800162c <SysTick_Handler+0x88>)
 80015b0:	6013      	str	r3, [r2, #0]
		if (indx == 500)
 80015b2:	4b1e      	ldr	r3, [pc, #120]	; (800162c <SysTick_Handler+0x88>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015ba:	d132      	bne.n	8001622 <SysTick_Handler+0x7e>
		{
			speed = ((position - oldpos)*2);  // speed in clicks/sec
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <SysTick_Handler+0x8c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <SysTick_Handler+0x90>)
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <SysTick_Handler+0x94>)
 80015d0:	801a      	strh	r2, [r3, #0]
			oldpos = position;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <SysTick_Handler+0x8c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <SysTick_Handler+0x90>)
 80015da:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e1: %d\n",speed);
 80015dc:	4b16      	ldr	r3, [pc, #88]	; (8001638 <SysTick_Handler+0x94>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4915      	ldr	r1, [pc, #84]	; (800163c <SysTick_Handler+0x98>)
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <SysTick_Handler+0x9c>)
 80015e8:	f009 f950 	bl	800a88c <siprintf>
			//CDC_Transmit_FS(buffer, strlen(buffer));

			speed2 = ((position2 - oldpos2)*2);  // speed in clicks/sec
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <SysTick_Handler+0xa0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a15      	ldr	r2, [pc, #84]	; (8001648 <SysTick_Handler+0xa4>)
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <SysTick_Handler+0xa8>)
 8001600:	801a      	strh	r2, [r3, #0]
			oldpos2 = position2;
 8001602:	4b10      	ldr	r3, [pc, #64]	; (8001644 <SysTick_Handler+0xa0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <SysTick_Handler+0xa4>)
 800160a:	801a      	strh	r2, [r3, #0]
			sprintf(buffer,"e2: %d\n",speed2);
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SysTick_Handler+0xa8>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	461a      	mov	r2, r3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <SysTick_Handler+0xac>)
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <SysTick_Handler+0x9c>)
 8001618:	f009 f938 	bl	800a88c <siprintf>
			//CDC_Transmit_FS(buffer, strlen(buffer));

			indx = 0;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <SysTick_Handler+0x88>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f8dd 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200003bc 	.word	0x200003bc
 8001630:	200003b0 	.word	0x200003b0
 8001634:	200003c0 	.word	0x200003c0
 8001638:	200003b2 	.word	0x200003b2
 800163c:	0800b1a8 	.word	0x0800b1a8
 8001640:	200003c4 	.word	0x200003c4
 8001644:	200003b8 	.word	0x200003b8
 8001648:	200003c2 	.word	0x200003c2
 800164c:	200003ba 	.word	0x200003ba
 8001650:	0800b1b0 	.word	0x0800b1b0

08001654 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800165a:	f000 fd0c 	bl	8002076 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20001078 	.word	0x20001078

08001668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM2_IRQHandler+0x10>)
 800166e:	f003 fd45 	bl	80050fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002a4 	.word	0x200002a4

0800167c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <TIM4_IRQHandler+0x10>)
 8001682:	f003 fd3b 	bl	80050fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000334 	.word	0x20000334

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	; (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f009 f8b2 	bl	800a828 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20005000 	.word	0x20005000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	200003d8 	.word	0x200003d8
 80016f8:	20001598 	.word	0x20001598

080016fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800170a:	490d      	ldr	r1, [pc, #52]	; (8001740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001710:	e002      	b.n	8001718 <LoopCopyDataInit>

08001712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001716:	3304      	adds	r3, #4

08001718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800171c:	d3f9      	bcc.n	8001712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001720:	4c0a      	ldr	r4, [pc, #40]	; (800174c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001724:	e001      	b.n	800172a <LoopFillZerobss>

08001726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001728:	3204      	adds	r2, #4

0800172a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800172c:	d3fb      	bcc.n	8001726 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800172e:	f7ff ffe5 	bl	80016fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f009 f87f 	bl	800a834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001736:	f7fe fd3b 	bl	80001b0 <main>
  bx lr
 800173a:	4770      	bx	lr
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001744:	0800b25c 	.word	0x0800b25c
  ldr r2, =_sbss
 8001748:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800174c:	20001594 	.word	0x20001594

08001750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC1_2_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x28>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f947 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	200f      	movs	r0, #15
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff fd74 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f95f 	bl	8001a62 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f927 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20000010 	.word	0x20000010
 80017dc:	2000000c 	.word	0x2000000c

080017e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_IncTick+0x1c>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_IncTick+0x20>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a03      	ldr	r2, [pc, #12]	; (8001800 <HAL_IncTick+0x20>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000010 	.word	0x20000010
 8001800:	200003dc 	.word	0x200003dc

08001804 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return uwTick;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_GetTick+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	200003dc 	.word	0x200003dc

08001818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001820:	f7ff fff0 	bl	8001804 <HAL_GetTick>
 8001824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d005      	beq.n	800183e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_Delay+0x44>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800183e:	bf00      	nop
 8001840:	f7ff ffe0 	bl	8001804 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	429a      	cmp	r2, r3
 800184e:	d8f7      	bhi.n	8001840 <HAL_Delay+0x28>
  {
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000010 	.word	0x20000010

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <__NVIC_EnableIRQ+0x34>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff90 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff2d 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff42 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff90 	bl	8001950 <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5f 	bl	80018fc <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff35 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	; 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e169      	b.n	8001d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8158 	bne.w	8001d5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a9a      	ldr	r2, [pc, #616]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05e      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a98      	ldr	r2, [pc, #608]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d875      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001abe:	4a98      	ldr	r2, [pc, #608]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d058      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a96      	ldr	r2, [pc, #600]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d86f      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aca:	4a96      	ldr	r2, [pc, #600]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d052      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a94      	ldr	r2, [pc, #592]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d869      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ad6:	4a94      	ldr	r2, [pc, #592]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04c      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001adc:	4a92      	ldr	r2, [pc, #584]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d863      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ae2:	4a92      	ldr	r2, [pc, #584]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d046      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d85d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d82a      	bhi.n	8001b48 <HAL_GPIO_Init+0xcc>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d859      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_GPIO_Init+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001ba5 	.word	0x08001ba5
 8001b0c:	08001bab 	.word	0x08001bab
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001bab 	.word	0x08001bab
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bab 	.word	0x08001bab
 8001b2c:	08001bab 	.word	0x08001bab
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bab 	.word	0x08001bab
 8001b38:	08001bab 	.word	0x08001bab
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b6d 	.word	0x08001b6d
 8001b48:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <HAL_GPIO_Init+0x2b4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e02c      	b.n	8001baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e029      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	3308      	adds	r3, #8
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e01f      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	330c      	adds	r3, #12
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e01a      	b.n	8001bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e013      	b.n	8001bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	611a      	str	r2, [r3, #16]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	615a      	str	r2, [r3, #20]
          break;
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x130>
          break;
 8001baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d801      	bhi.n	8001bb6 <HAL_GPIO_Init+0x13a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_Init+0x13e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	; 0xff
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_GPIO_Init+0x14c>
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x152>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3b08      	subs	r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 80b1 	beq.w	8001d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfc:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_GPIO_Init+0x2b8>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c14:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a40      	ldr	r2, [pc, #256]	; (8001d3c <HAL_GPIO_Init+0x2c0>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_GPIO_Init+0x1ec>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00d      	beq.n	8001c64 <HAL_GPIO_Init+0x1e8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3e      	ldr	r2, [pc, #248]	; (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <HAL_GPIO_Init+0x1e4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3d      	ldr	r2, [pc, #244]	; (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_Init+0x1e0>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1ee>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7a:	492f      	ldr	r1, [pc, #188]	; (8001d38 <HAL_GPIO_Init+0x2bc>)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	492c      	ldr	r1, [pc, #176]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e006      	b.n	8001cb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4928      	ldr	r1, [pc, #160]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4922      	ldr	r1, [pc, #136]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cca:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	491e      	ldr	r1, [pc, #120]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4918      	ldr	r1, [pc, #96]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4914      	ldr	r1, [pc, #80]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d021      	beq.n	8001d50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e021      	b.n	8001d5e <HAL_GPIO_Init+0x2e2>
 8001d1a:	bf00      	nop
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10310000 	.word	0x10310000
 8001d24:	10220000 	.word	0x10220000
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10110000 	.word	0x10110000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40011400 	.word	0x40011400
 8001d4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	4909      	ldr	r1, [pc, #36]	; (8001d80 <HAL_GPIO_Init+0x304>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	3301      	adds	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f47f ae8e 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	372c      	adds	r7, #44	; 0x2c
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	807b      	strh	r3, [r7, #2]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dc2:	787b      	ldrb	r3, [r7, #1]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc8:	887a      	ldrh	r2, [r7, #2]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dce:	e003      	b.n	8001dd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	041a      	lsls	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df4:	887a      	ldrh	r2, [r7, #2]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	041a      	lsls	r2, r3, #16
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43d9      	mvns	r1, r3
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	400b      	ands	r3, r1
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	b08b      	sub	sp, #44	; 0x2c
 8001e18:	af06      	add	r7, sp, #24
 8001e1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0fd      	b.n	8002022 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f008 fa4a 	bl	800a2d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 ff8e 	bl	8005d6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	687e      	ldr	r6, [r7, #4]
 8001e5a:	466d      	mov	r5, sp
 8001e5c:	f106 0410 	add.w	r4, r6, #16
 8001e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	602b      	str	r3, [r5, #0]
 8001e68:	1d33      	adds	r3, r6, #4
 8001e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6c:	6838      	ldr	r0, [r7, #0]
 8001e6e:	f003 ff58 	bl	8005d22 <USB_CoreInit>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0ce      	b.n	8002022 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 ff89 	bl	8005da2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e04c      	b.n	8001f30 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	b298      	uxth	r0, r3
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3336      	adds	r3, #54	; 0x36
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3303      	adds	r3, #3
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3338      	adds	r3, #56	; 0x38
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	333c      	adds	r3, #60	; 0x3c
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3340      	adds	r3, #64	; 0x40
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3ad      	bcc.n	8001e96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
 8001f3e:	e044      	b.n	8001fca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	73fb      	strb	r3, [r7, #15]
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3b5      	bcc.n	8001f40 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	687e      	ldr	r6, [r7, #4]
 8001fdc:	466d      	mov	r5, sp
 8001fde:	f106 0410 	add.w	r4, r6, #16
 8001fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	602b      	str	r3, [r5, #0]
 8001fea:	1d33      	adds	r3, r6, #4
 8001fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fee:	6838      	ldr	r0, [r7, #0]
 8001ff0:	f003 fee3 	bl	8005dba <USB_DevInit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00d      	b.n	8002022 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f006 fb96 	bl	800874c <USB_DevDisconnect>

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_PCD_Start+0x16>
 800203c:	2302      	movs	r3, #2
 800203e:	e016      	b.n	800206e <HAL_PCD_Start+0x44>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fe78 	bl	8005d42 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002052:	2101      	movs	r1, #1
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f008 fbb0 	bl	800a7ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f006 fb6a 	bl	8008738 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f006 fb6c 	bl	8008760 <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002092:	d102      	bne.n	800209a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fb5f 	bl	8002758 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f006 fb5e 	bl	8008760 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d112      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c2:	b292      	uxth	r2, r2
 80020c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f008 f97e 	bl	800a3ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f923 	bl	800231c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f006 fb40 	bl	8008760 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ea:	d10b      	bne.n	8002104 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020fe:	b292      	uxth	r2, r2
 8002100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f006 fb29 	bl	8008760 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002118:	d10b      	bne.n	8002132 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f006 fb12 	bl	8008760 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002146:	d126      	bne.n	8002196 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0204 	bic.w	r2, r2, #4
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	b292      	uxth	r2, r2
 8002174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f008 f95f 	bl	800a43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002186:	b29a      	uxth	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002190:	b292      	uxth	r2, r2
 8002192:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f006 fae0 	bl	8008760 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021aa:	f040 8082 	bne.w	80022b2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	77fb      	strb	r3, [r7, #31]
 80021b2:	e010      	b.n	80021d6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	441a      	add	r2, r3
 80021c0:	7ffb      	ldrb	r3, [r7, #31]
 80021c2:	8812      	ldrh	r2, [r2, #0]
 80021c4:	b292      	uxth	r2, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	3320      	adds	r3, #32
 80021ca:	443b      	add	r3, r7
 80021cc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	3301      	adds	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	2b07      	cmp	r3, #7
 80021da:	d9eb      	bls.n	80021b4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	b292      	uxth	r2, r2
 80021f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	b292      	uxth	r2, r2
 8002208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800220c:	bf00      	nop
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002216:	b29b      	uxth	r3, r3
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f6      	beq.n	800220e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002232:	b292      	uxth	r2, r2
 8002234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	e00f      	b.n	800225e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800223e:	7ffb      	ldrb	r3, [r7, #31]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4611      	mov	r1, r2
 8002246:	7ffa      	ldrb	r2, [r7, #31]
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	440a      	add	r2, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	3320      	adds	r3, #32
 8002250:	443b      	add	r3, r7
 8002252:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002256:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	3301      	adds	r3, #1
 800225c:	77fb      	strb	r3, [r7, #31]
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b07      	cmp	r3, #7
 8002262:	d9ec      	bls.n	800223e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228e:	b292      	uxth	r2, r2
 8002290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	b292      	uxth	r2, r2
 80022a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f008 f8ab 	bl	800a408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f006 fa52 	bl	8008760 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c6:	d10e      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022da:	b292      	uxth	r2, r2
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f008 f864 	bl	800a3ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 fa38 	bl	8008760 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d10b      	bne.n	8002314 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230e:	b292      	uxth	r2, r2
 8002310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_PCD_SetAddress+0x1a>
 8002332:	2302      	movs	r3, #2
 8002334:	e013      	b.n	800235e <HAL_PCD_SetAddress+0x42>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f006 f9df 	bl	8008712 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	460b      	mov	r3, r1
 800237a:	803b      	strh	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0207 	and.w	r2, r3, #7
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023d4:	883a      	ldrh	r2, [r7, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	78ba      	ldrb	r2, [r7, #2]
 80023de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_PCD_EP_Open+0xa6>
 8002408:	2302      	movs	r3, #2
 800240a:	e00e      	b.n	800242a <HAL_PCD_EP_Open+0xc4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	4618      	mov	r0, r3
 800241c:	f003 fcee 	bl	8005dfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002428:	7afb      	ldrb	r3, [r7, #11]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800243e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da0e      	bge.n	8002464 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	705a      	strb	r2, [r3, #1]
 8002462:	e00e      	b.n	8002482 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0207 	and.w	r2, r3, #7
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_PCD_EP_Close+0x6a>
 8002498:	2302      	movs	r3, #2
 800249a:	e00e      	b.n	80024ba <HAL_PCD_EP_Close+0x88>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f004 f810 	bl	80064d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 0207 	and.w	r2, r3, #7
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	b2da      	uxtb	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6979      	ldr	r1, [r7, #20]
 800251e:	4618      	mov	r0, r3
 8002520:	f004 f9c2 	bl	80068a8 <USB_EPStartXfer>
 8002524:	e005      	b.n	8002532 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f004 f9bb 	bl	80068a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	f003 0207 	and.w	r2, r3, #7
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	460b      	mov	r3, r1
 8002578:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2201      	movs	r2, #1
 80025b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025b6:	7afb      	ldrb	r3, [r7, #11]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c2:	7afb      	ldrb	r3, [r7, #11]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f004 f968 	bl	80068a8 <USB_EPStartXfer>
 80025d8:	e005      	b.n	80025e6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6979      	ldr	r1, [r7, #20]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 f961 	bl	80068a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d901      	bls.n	800260e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e04c      	b.n	80026a8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800260e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002612:	2b00      	cmp	r3, #0
 8002614:	da0e      	bge.n	8002634 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	705a      	strb	r2, [r3, #1]
 8002632:	e00c      	b.n	800264e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_PCD_EP_SetStall+0x7e>
 800266a:	2302      	movs	r3, #2
 800266c:	e01c      	b.n	80026a8 <HAL_PCD_EP_SetStall+0xb8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f005 ff4b 	bl	8008518 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f006 f870 	bl	800877e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 020f 	and.w	r2, r3, #15
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d901      	bls.n	80026ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e040      	b.n	8002750 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da0e      	bge.n	80026f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	705a      	strb	r2, [r3, #1]
 80026f2:	e00e      	b.n	8002712 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	f003 0207 	and.w	r2, r3, #7
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	b2da      	uxtb	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_PCD_EP_ClrStall+0x82>
 800272e:	2302      	movs	r3, #2
 8002730:	e00e      	b.n	8002750 <HAL_PCD_EP_ClrStall+0xa0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68f9      	ldr	r1, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f005 ff39 	bl	80085b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002760:	e2ec      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800276a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800276c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002778:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 8161 	bne.w	8002a44 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002782:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d152      	bne.n	8002832 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	81fb      	strh	r3, [r7, #14]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3328      	adds	r3, #40	; 0x28
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027be:	b29b      	uxth	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	3302      	adds	r3, #2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	441a      	add	r2, r3
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027f0:	2100      	movs	r1, #0
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f007 fdc1 	bl	800a37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 829b 	beq.w	8002d3c <PCD_EP_ISR_Handler+0x5e4>
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8296 	bne.w	8002d3c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b292      	uxth	r2, r2
 8002824:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002830:	e284      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002842:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002848:	2b00      	cmp	r3, #0
 800284a:	d034      	beq.n	80028b6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	3306      	adds	r3, #6
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800288a:	b29b      	uxth	r3, r3
 800288c:	f005 ffc7 	bl	800881e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f640 738f 	movw	r3, #3983	; 0xf8f
 800289c:	4013      	ands	r3, r2
 800289e:	823b      	strh	r3, [r7, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	8a3a      	ldrh	r2, [r7, #16]
 80028a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028aa:	b292      	uxth	r2, r2
 80028ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f007 fd36 	bl	800a320 <HAL_PCD_SetupStageCallback>
 80028b4:	e242      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028b6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f280 823e 	bge.w	8002d3c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028cc:	4013      	ands	r3, r2
 80028ce:	83bb      	strh	r3, [r7, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	8bba      	ldrh	r2, [r7, #28]
 80028d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028da:	b292      	uxth	r2, r2
 80028dc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	3306      	adds	r3, #6
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <PCD_EP_ISR_Handler+0x1ee>
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	6959      	ldr	r1, [r3, #20]
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800292a:	b29b      	uxth	r3, r3
 800292c:	f005 ff77 	bl	800881e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	441a      	add	r2, r3
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800293e:	2100      	movs	r1, #0
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f007 fcff 	bl	800a344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 81f2 	bne.w	8002d3c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002966:	b29b      	uxth	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4413      	add	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d112      	bne.n	80029a6 <PCD_EP_ISR_Handler+0x24e>
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299e:	b29a      	uxth	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	e02f      	b.n	8002a06 <PCD_EP_ISR_Handler+0x2ae>
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b3e      	cmp	r3, #62	; 0x3e
 80029ac:	d813      	bhi.n	80029d6 <PCD_EP_ISR_Handler+0x27e>
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <PCD_EP_ISR_Handler+0x270>
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	3301      	adds	r3, #1
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	e017      	b.n	8002a06 <PCD_EP_ISR_Handler+0x2ae>
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <PCD_EP_ISR_Handler+0x298>
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	3b01      	subs	r3, #1
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	029b      	lsls	r3, r3, #10
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	827b      	strh	r3, [r7, #18]
 8002a18:	8a7b      	ldrh	r3, [r7, #18]
 8002a1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a1e:	827b      	strh	r3, [r7, #18]
 8002a20:	8a7b      	ldrh	r3, [r7, #18]
 8002a22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a26:	827b      	strh	r3, [r7, #18]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	8a7b      	ldrh	r3, [r7, #18]
 8002a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	8013      	strh	r3, [r2, #0]
 8002a42:	e17b      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a56:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f280 80ea 	bge.w	8002c34 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a76:	4013      	ands	r3, r2
 8002a78:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	7b1b      	ldrb	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d122      	bne.n	8002af6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002ada:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8087 	beq.w	8002bf0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	6959      	ldr	r1, [r3, #20]
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	88da      	ldrh	r2, [r3, #6]
 8002aee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002af0:	f005 fe95 	bl	800881e <USB_ReadPMA>
 8002af4:	e07c      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	78db      	ldrb	r3, [r3, #3]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d108      	bne.n	8002b10 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002afe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b00:	461a      	mov	r2, r3
 8002b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f927 	bl	8002d58 <HAL_PCD_EP_DB_Receive>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b0e:	e06f      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d021      	beq.n	8002bae <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b92:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02a      	beq.n	8002bf0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	6959      	ldr	r1, [r3, #20]
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	891a      	ldrh	r2, [r3, #8]
 8002ba6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ba8:	f005 fe39 	bl	800881e <USB_ReadPMA>
 8002bac:	e020      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3306      	adds	r3, #6
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	6959      	ldr	r1, [r3, #20]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	895a      	ldrh	r2, [r3, #10]
 8002bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bec:	f005 fe17 	bl	800881e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bf6:	441a      	add	r2, r3
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c02:	441a      	add	r2, r3
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <PCD_EP_ISR_Handler+0x4c2>
 8002c10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d206      	bcs.n	8002c28 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f007 fb8f 	bl	800a344 <HAL_PCD_DataOutStageCallback>
 8002c26:	e005      	b.n	8002c34 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fe3a 	bl	80068a8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d07e      	beq.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6c:	843b      	strh	r3, [r7, #32]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	8c3b      	ldrh	r3, [r7, #32]
 8002c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	78db      	ldrb	r3, [r3, #3]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d00c      	beq.n	8002cac <PCD_EP_ISR_Handler+0x554>
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	78db      	ldrb	r3, [r3, #3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d146      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d141      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cd4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d906      	bls.n	8002cee <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	699a      	ldr	r2, [r3, #24]
 8002ce4:	8bfb      	ldrh	r3, [r7, #30]
 8002ce6:	1ad2      	subs	r2, r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	619a      	str	r2, [r3, #24]
 8002cec:	e002      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f007 fb39 	bl	800a37a <HAL_PCD_DataInStageCallback>
 8002d08:	e018      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	8bfb      	ldrh	r3, [r7, #30]
 8002d10:	441a      	add	r2, r3
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	69da      	ldr	r2, [r3, #28]
 8002d1a:	8bfb      	ldrh	r3, [r7, #30]
 8002d1c:	441a      	add	r2, r3
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fdbd 	bl	80068a8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d2e:	e005      	b.n	8002d3c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d32:	461a      	mov	r2, r3
 8002d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f91b 	bl	8002f72 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	b21b      	sxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f6ff ad0a 	blt.w	8002762 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3738      	adds	r7, #56	; 0x38
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d07e      	beq.n	8002e6e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4413      	add	r3, r2
 8002d84:	3302      	adds	r3, #2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d98:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	8b7b      	ldrh	r3, [r7, #26]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d306      	bcc.n	8002db2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	8b7b      	ldrh	r3, [r7, #26]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	619a      	str	r2, [r3, #24]
 8002db0:	e002      	b.n	8002db8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d123      	bne.n	8002e08 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dda:	833b      	strh	r3, [r7, #24]
 8002ddc:	8b3b      	ldrh	r3, [r7, #24]
 8002dde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002de2:	833b      	strh	r3, [r7, #24]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	8b3b      	ldrh	r3, [r7, #24]
 8002df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01f      	beq.n	8002e52 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	82fb      	strh	r3, [r7, #22]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	441a      	add	r2, r3
 8002e3c:	8afb      	ldrh	r3, [r7, #22]
 8002e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e52:	8b7b      	ldrh	r3, [r7, #26]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8087 	beq.w	8002f68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6959      	ldr	r1, [r3, #20]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	891a      	ldrh	r2, [r3, #8]
 8002e66:	8b7b      	ldrh	r3, [r7, #26]
 8002e68:	f005 fcd9 	bl	800881e <USB_ReadPMA>
 8002e6c:	e07c      	b.n	8002f68 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	3306      	adds	r3, #6
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e96:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	8b7b      	ldrh	r3, [r7, #26]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d306      	bcc.n	8002eb0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	8b7b      	ldrh	r3, [r7, #26]
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	619a      	str	r2, [r3, #24]
 8002eae:	e002      	b.n	8002eb6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d123      	bne.n	8002f06 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	83fb      	strh	r3, [r7, #30]
 8002eda:	8bfb      	ldrh	r3, [r7, #30]
 8002edc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ee0:	83fb      	strh	r3, [r7, #30]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	8bfb      	ldrh	r3, [r7, #30]
 8002ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11f      	bne.n	8002f50 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	83bb      	strh	r3, [r7, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	8bbb      	ldrh	r3, [r7, #28]
 8002f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f50:	8b7b      	ldrh	r3, [r7, #26]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6959      	ldr	r1, [r3, #20]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	895a      	ldrh	r2, [r3, #10]
 8002f62:	8b7b      	ldrh	r3, [r7, #26]
 8002f64:	f005 fc5b 	bl	800881e <USB_ReadPMA>
    }
  }

  return count;
 8002f68:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b0a2      	sub	sp, #136	; 0x88
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 81c7 	beq.w	800331a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d907      	bls.n	8002fd4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fcc:	1ad2      	subs	r2, r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	619a      	str	r2, [r3, #24]
 8002fd2:	e002      	b.n	8002fda <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 80b9 	bne.w	8003156 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	785b      	ldrb	r3, [r3, #1]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d126      	bne.n	800303a <HAL_PCD_EP_DB_Transmit+0xc8>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	4413      	add	r3, r2
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	011a      	lsls	r2, r3, #4
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	4413      	add	r3, r2
 800300e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800301e:	b29a      	uxth	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003032:	b29a      	uxth	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e01a      	b.n	8003070 <HAL_PCD_EP_DB_Transmit+0xfe>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d116      	bne.n	8003070 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	633b      	str	r3, [r7, #48]	; 0x30
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	4413      	add	r3, r2
 8003058:	633b      	str	r3, [r7, #48]	; 0x30
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	011a      	lsls	r2, r3, #4
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	4413      	add	r3, r2
 8003064:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2200      	movs	r2, #0
 800306e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d126      	bne.n	80030cc <HAL_PCD_EP_DB_Transmit+0x15a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	011a      	lsls	r2, r3, #4
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	e017      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d113      	bne.n	80030fc <HAL_PCD_EP_DB_Transmit+0x18a>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	4413      	add	r3, r2
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2200      	movs	r2, #0
 80030fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	4619      	mov	r1, r3
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f007 f939 	bl	800a37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 82d4 	beq.w	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	827b      	strh	r3, [r7, #18]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	461a      	mov	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	8a7b      	ldrh	r3, [r7, #18]
 8003140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800314c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003150:	b29b      	uxth	r3, r3
 8003152:	8013      	strh	r3, [r2, #0]
 8003154:	e2b2      	b.n	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d021      	beq.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	441a      	add	r2, r3
 800318c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800319c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	f040 8286 	bne.w	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031b8:	441a      	add	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c6:	441a      	add	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a1a      	ldr	r2, [r3, #32]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d309      	bcc.n	80031ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	621a      	str	r2, [r3, #32]
 80031ea:	e015      	b.n	8003218 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80031f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003202:	e009      	b.n	8003218 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	785b      	ldrb	r3, [r3, #1]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d155      	bne.n	80032cc <HAL_PCD_EP_DB_Transmit+0x35a>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	63bb      	str	r3, [r7, #56]	; 0x38
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003234:	4413      	add	r3, r2
 8003236:	63bb      	str	r3, [r7, #56]	; 0x38
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	011a      	lsls	r2, r3, #4
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	4413      	add	r3, r2
 8003242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324a:	2b00      	cmp	r3, #0
 800324c:	d112      	bne.n	8003274 <HAL_PCD_EP_DB_Transmit+0x302>
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003258:	b29a      	uxth	r2, r3
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800326c:	b29a      	uxth	r2, r3
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	801a      	strh	r2, [r3, #0]
 8003272:	e047      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x392>
 8003274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003276:	2b3e      	cmp	r3, #62	; 0x3e
 8003278:	d811      	bhi.n	800329e <HAL_PCD_EP_DB_Transmit+0x32c>
 800327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_PCD_EP_DB_Transmit+0x31e>
 800328a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328c:	3301      	adds	r3, #1
 800328e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003292:	b29b      	uxth	r3, r3
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	b29a      	uxth	r2, r3
 8003298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329a:	801a      	strh	r2, [r3, #0]
 800329c:	e032      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x392>
 800329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x342>
 80032ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b0:	3b01      	subs	r3, #1
 80032b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	029b      	lsls	r3, r3, #10
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	801a      	strh	r2, [r3, #0]
 80032ca:	e01b      	b.n	8003304 <HAL_PCD_EP_DB_Transmit+0x392>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d117      	bne.n	8003304 <HAL_PCD_EP_DB_Transmit+0x392>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e8:	4413      	add	r3, r2
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	011a      	lsls	r2, r3, #4
 80032f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f4:	4413      	add	r3, r2
 80032f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6959      	ldr	r1, [r3, #20]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	891a      	ldrh	r2, [r3, #8]
 8003310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	f005 fa3e 	bl	8008794 <USB_WritePMA>
 8003318:	e1d0      	b.n	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	3306      	adds	r3, #6
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800334e:	429a      	cmp	r2, r3
 8003350:	d307      	bcc.n	8003362 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800335a:	1ad2      	subs	r2, r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	619a      	str	r2, [r3, #24]
 8003360:	e002      	b.n	8003368 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f040 80c4 	bne.w	80034fa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d126      	bne.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x456>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003388:	b29b      	uxth	r3, r3
 800338a:	461a      	mov	r2, r3
 800338c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338e:	4413      	add	r3, r2
 8003390:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	011a      	lsls	r2, r3, #4
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	4413      	add	r3, r2
 800339c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	e01a      	b.n	80033fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d116      	bne.n	80033fe <HAL_PCD_EP_DB_Transmit+0x48c>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	677b      	str	r3, [r7, #116]	; 0x74
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033de:	b29b      	uxth	r3, r3
 80033e0:	461a      	mov	r2, r3
 80033e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e4:	4413      	add	r3, r2
 80033e6:	677b      	str	r3, [r7, #116]	; 0x74
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	011a      	lsls	r2, r3, #4
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	4413      	add	r3, r2
 80033f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033f6:	673b      	str	r3, [r7, #112]	; 0x70
 80033f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fa:	2200      	movs	r2, #0
 80033fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	67bb      	str	r3, [r7, #120]	; 0x78
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d12f      	bne.n	800346c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800341c:	b29b      	uxth	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003424:	4413      	add	r3, r2
 8003426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	011a      	lsls	r2, r3, #4
 8003430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003434:	4413      	add	r3, r2
 8003436:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800343a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800343e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800344a:	b29a      	uxth	r2, r3
 800344c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003450:	801a      	strh	r2, [r3, #0]
 8003452:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	b29b      	uxth	r3, r3
 800345a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003462:	b29a      	uxth	r2, r3
 8003464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	e017      	b.n	800349c <HAL_PCD_EP_DB_Transmit+0x52a>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d113      	bne.n	800349c <HAL_PCD_EP_DB_Transmit+0x52a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003482:	4413      	add	r3, r2
 8003484:	67bb      	str	r3, [r7, #120]	; 0x78
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	011a      	lsls	r2, r3, #4
 800348c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348e:	4413      	add	r3, r2
 8003490:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003494:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003498:	2200      	movs	r2, #0
 800349a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f006 ff69 	bl	800a37a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 8104 	bne.w	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80034e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	8013      	strh	r3, [r2, #0]
 80034f8:	e0e0      	b.n	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d121      	bne.n	8003548 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	441a      	add	r2, r3
 8003530:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800353c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003544:	b29b      	uxth	r3, r3
 8003546:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354e:	2b01      	cmp	r3, #1
 8003550:	f040 80b4 	bne.w	80036bc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800355c:	441a      	add	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800356a:	441a      	add	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d309      	bcc.n	8003590 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	621a      	str	r2, [r3, #32]
 800358e:	e015      	b.n	80035bc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003598:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035a6:	e009      	b.n	80035bc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	667b      	str	r3, [r7, #100]	; 0x64
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d155      	bne.n	8003676 <HAL_PCD_EP_DB_Transmit+0x704>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d8:	b29b      	uxth	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035de:	4413      	add	r3, r2
 80035e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	011a      	lsls	r2, r3, #4
 80035e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ea:	4413      	add	r3, r2
 80035ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d112      	bne.n	800361e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80035f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003602:	b29a      	uxth	r2, r3
 8003604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003616:	b29a      	uxth	r2, r3
 8003618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	e044      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x736>
 800361e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003620:	2b3e      	cmp	r3, #62	; 0x3e
 8003622:	d811      	bhi.n	8003648 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	657b      	str	r3, [r7, #84]	; 0x54
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003636:	3301      	adds	r3, #1
 8003638:	657b      	str	r3, [r7, #84]	; 0x54
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	b29b      	uxth	r3, r3
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	b29a      	uxth	r2, r3
 8003642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e02f      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
 800364e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800365a:	3b01      	subs	r3, #1
 800365c:	657b      	str	r3, [r7, #84]	; 0x54
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	b29b      	uxth	r3, r3
 8003662:	029b      	lsls	r3, r3, #10
 8003664:	b29b      	uxth	r3, r3
 8003666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800366a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366e:	b29a      	uxth	r2, r3
 8003670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003672:	801a      	strh	r2, [r3, #0]
 8003674:	e018      	b.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x736>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d114      	bne.n	80036a8 <HAL_PCD_EP_DB_Transmit+0x736>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003686:	b29b      	uxth	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800368c:	4413      	add	r3, r2
 800368e:	667b      	str	r3, [r7, #100]	; 0x64
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	011a      	lsls	r2, r3, #4
 8003696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003698:	4413      	add	r3, r2
 800369a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800369e:	663b      	str	r3, [r7, #96]	; 0x60
 80036a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036a6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6959      	ldr	r1, [r3, #20]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	895a      	ldrh	r2, [r3, #10]
 80036b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f005 f86c 	bl	8008794 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d6:	823b      	strh	r3, [r7, #16]
 80036d8:	8a3b      	ldrh	r3, [r7, #16]
 80036da:	f083 0310 	eor.w	r3, r3, #16
 80036de:	823b      	strh	r3, [r7, #16]
 80036e0:	8a3b      	ldrh	r3, [r7, #16]
 80036e2:	f083 0320 	eor.w	r3, r3, #32
 80036e6:	823b      	strh	r3, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	8a3b      	ldrh	r3, [r7, #16]
 80036f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003708:	b29b      	uxth	r3, r3
 800370a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3788      	adds	r7, #136	; 0x88
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	607b      	str	r3, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	817b      	strh	r3, [r7, #10]
 8003724:	4613      	mov	r3, r2
 8003726:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003728:	897b      	ldrh	r3, [r7, #10]
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e009      	b.n	8003760 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374c:	897a      	ldrh	r2, [r7, #10]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003760:	893b      	ldrh	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	b29a      	uxth	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	80da      	strh	r2, [r3, #6]
 8003774:	e00b      	b.n	800378e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2201      	movs	r2, #1
 800377a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	b29a      	uxth	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b29a      	uxth	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr
	...

0800379c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e272      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8087 	beq.w	80038ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037bc:	4b92      	ldr	r3, [pc, #584]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d00c      	beq.n	80037e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c8:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d112      	bne.n	80037fa <HAL_RCC_OscConfig+0x5e>
 80037d4:	4b8c      	ldr	r3, [pc, #560]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d10b      	bne.n	80037fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e2:	4b89      	ldr	r3, [pc, #548]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d06c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x12c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d168      	bne.n	80038c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e24c      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d106      	bne.n	8003812 <HAL_RCC_OscConfig+0x76>
 8003804:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7f      	ldr	r2, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800380a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e02e      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0x98>
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7a      	ldr	r2, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b78      	ldr	r3, [pc, #480]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a77      	ldr	r2, [pc, #476]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800382c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e01d      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800383c:	d10c      	bne.n	8003858 <HAL_RCC_OscConfig+0xbc>
 800383e:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a71      	ldr	r2, [pc, #452]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b6f      	ldr	r3, [pc, #444]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e00b      	b.n	8003870 <HAL_RCC_OscConfig+0xd4>
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800385e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a67      	ldr	r2, [pc, #412]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800386a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d013      	beq.n	80038a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd ffc4 	bl	8001804 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003880:	f7fd ffc0 	bl	8001804 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e200      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0xe4>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7fd ffb0 	bl	8001804 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7fd ffac 	bl	8001804 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1ec      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x10c>
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038d6:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00b      	beq.n	80038fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038e2:	4b49      	ldr	r3, [pc, #292]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11c      	bne.n	8003928 <HAL_RCC_OscConfig+0x18c>
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d116      	bne.n	8003928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x176>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e1c0      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4939      	ldr	r1, [pc, #228]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003926:	e03a      	b.n	800399e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <HAL_RCC_OscConfig+0x270>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fd ff65 	bl	8001804 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393e:	f7fd ff61 	bl	8001804 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1a1      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4927      	ldr	r1, [pc, #156]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	e015      	b.n	800399e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003972:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <HAL_RCC_OscConfig+0x270>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd ff44 	bl	8001804 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003980:	f7fd ff40 	bl	8001804 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e180      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d03a      	beq.n	8003a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d019      	beq.n	80039e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b2:	4b17      	ldr	r3, [pc, #92]	; (8003a10 <HAL_RCC_OscConfig+0x274>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7fd ff24 	bl	8001804 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c0:	f7fd ff20 	bl	8001804 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e160      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039de:	2001      	movs	r0, #1
 80039e0:	f000 faa6 	bl	8003f30 <RCC_Delay>
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_OscConfig+0x274>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ec:	f7fd ff0a 	bl	8001804 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f2:	e00f      	b.n	8003a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fd ff06 	bl	8001804 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d908      	bls.n	8003a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e146      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	42420000 	.word	0x42420000
 8003a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b92      	ldr	r3, [pc, #584]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e9      	bne.n	80039f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80a6 	beq.w	8003b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b8b      	ldr	r3, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	4a87      	ldr	r2, [pc, #540]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	61d3      	str	r3, [r2, #28]
 8003a4a:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b82      	ldr	r3, [pc, #520]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fd fec7 	bl	8001804 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fd fec3 	bl	8001804 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b64      	cmp	r3, #100	; 0x64
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e103      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b75      	ldr	r3, [pc, #468]	; (8003c64 <HAL_RCC_OscConfig+0x4c8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x312>
 8003aa0:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4a6e      	ldr	r2, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	e02d      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x334>
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f023 0301 	bic.w	r3, r3, #1
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4a66      	ldr	r2, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	f023 0304 	bic.w	r3, r3, #4
 8003acc:	6213      	str	r3, [r2, #32]
 8003ace:	e01c      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d10c      	bne.n	8003af2 <HAL_RCC_OscConfig+0x356>
 8003ad8:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a60      	ldr	r2, [pc, #384]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	6213      	str	r3, [r2, #32]
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4a5d      	ldr	r2, [pc, #372]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	e00b      	b.n	8003b0a <HAL_RCC_OscConfig+0x36e>
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	4a5a      	ldr	r2, [pc, #360]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6213      	str	r3, [r2, #32]
 8003afe:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	f023 0304 	bic.w	r3, r3, #4
 8003b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d015      	beq.n	8003b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fd fe77 	bl	8001804 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd fe73 	bl	8001804 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0b1      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ee      	beq.n	8003b1a <HAL_RCC_OscConfig+0x37e>
 8003b3c:	e014      	b.n	8003b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd fe61 	bl	8001804 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b44:	e00a      	b.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b46:	f7fd fe5d 	bl	8001804 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e09b      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5c:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1ee      	bne.n	8003b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b68:	7dfb      	ldrb	r3, [r7, #23]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b3c      	ldr	r3, [pc, #240]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a3b      	ldr	r2, [pc, #236]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b84:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d061      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d146      	bne.n	8003c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b98:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd fe31 	bl	8001804 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd fe2d 	bl	8001804 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e06d      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d108      	bne.n	8003be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4921      	ldr	r1, [pc, #132]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a19      	ldr	r1, [r3, #32]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fe01 	bl	8001804 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd fdfd 	bl	8001804 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e03d      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x46a>
 8003c24:	e035      	b.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fdea 	bl	8001804 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fde6 	bl	8001804 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e026      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x498>
 8003c52:	e01e      	b.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e019      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_OscConfig+0x500>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40021000 	.word	0x40021000

08003ca0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d0      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b6a      	ldr	r3, [pc, #424]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b67      	ldr	r3, [pc, #412]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0207 	bic.w	r2, r3, #7
 8003cca:	4965      	ldr	r1, [pc, #404]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a58      	ldr	r2, [pc, #352]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4a52      	ldr	r2, [pc, #328]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b50      	ldr	r3, [pc, #320]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	494d      	ldr	r1, [pc, #308]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d040      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d115      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e073      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4936      	ldr	r1, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fd fd38 	bl	8001804 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fd fd34 	bl	8001804 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e053      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b27      	ldr	r3, [pc, #156]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d210      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b24      	ldr	r3, [pc, #144]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	4922      	ldr	r1, [pc, #136]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e032      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4916      	ldr	r1, [pc, #88]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	490e      	ldr	r1, [pc, #56]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e2e:	f000 f821 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	490a      	ldr	r1, [pc, #40]	; (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1cc>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_ClockConfig+0x1d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fc96 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	0800b210 	.word	0x0800b210
 8003e6c:	20000008 	.word	0x20000008
 8003e70:	2000000c 	.word	0x2000000c

08003e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	b490      	push	{r4, r7}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e7c:	1d3c      	adds	r4, r7, #4
 8003e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e84:	f240 2301 	movw	r3, #513	; 0x201
 8003e88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e9e:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d002      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x46>
 8003eb2:	e02b      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eb4:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eb6:	623b      	str	r3, [r7, #32]
      break;
 8003eb8:	e02b      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	0c9b      	lsrs	r3, r3, #18
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3328      	adds	r3, #40	; 0x28
 8003ec4:	443b      	add	r3, r7
 8003ec6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003eca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ed6:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	0c5b      	lsrs	r3, r3, #17
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	3328      	adds	r3, #40	; 0x28
 8003ee2:	443b      	add	r3, r7
 8003ee4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ee8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eee:	fb03 f202 	mul.w	r2, r3, r2
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8003efa:	e004      	b.n	8003f06 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f00:	fb02 f303 	mul.w	r3, r2, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	623b      	str	r3, [r7, #32]
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f0e:	623b      	str	r3, [r7, #32]
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6a3b      	ldr	r3, [r7, #32]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	; 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc90      	pop	{r4, r7}
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	0800b1b8 	.word	0x0800b1b8
 8003f24:	40021000 	.word	0x40021000
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	003d0900 	.word	0x003d0900

08003f30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f38:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <RCC_Delay+0x34>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <RCC_Delay+0x38>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0a5b      	lsrs	r3, r3, #9
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f4c:	bf00      	nop
  }
  while (Delay --);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e5a      	subs	r2, r3, #1
 8003f52:	60fa      	str	r2, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f9      	bne.n	8003f4c <RCC_Delay+0x1c>
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20000008 	.word	0x20000008
 8003f68:	10624dd3 	.word	0x10624dd3

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d07d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f98:	4b4c      	ldr	r3, [pc, #304]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	61d3      	str	r3, [r2, #28]
 8003fa4:	4b49      	ldr	r3, [pc, #292]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b46      	ldr	r3, [pc, #280]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d118      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a42      	ldr	r2, [pc, #264]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fc1a 	bl	8001804 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd4:	f7fd fc16 	bl	8001804 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e06d      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff2:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d02e      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d027      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004010:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004018:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d014      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fd fbe5 	bl	8001804 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fd fbe1 	bl	8001804 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e036      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ee      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4917      	ldr	r1, [pc, #92]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	4313      	orrs	r3, r2
 8004070:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4a13      	ldr	r2, [pc, #76]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	490b      	ldr	r1, [pc, #44]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d008      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
 80040d4:	42420440 	.word	0x42420440

080040d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e076      	b.n	80041d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d009      	beq.n	8004110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
 8004102:	e005      	b.n	8004110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f8b8 	bl	80012a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	ea42 0103 	orr.w	r1, r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	0c1a      	lsrs	r2, r3, #16
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f002 0204 	and.w	r2, r2, #4
 80041b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_SPI_Transmit+0x22>
 80041fe:	2302      	movs	r3, #2
 8004200:	e126      	b.n	8004450 <HAL_SPI_Transmit+0x270>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800420a:	f7fd fafb 	bl	8001804 <HAL_GetTick>
 800420e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d002      	beq.n	8004226 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004224:	e10b      	b.n	800443e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_SPI_Transmit+0x52>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004236:	e102      	b.n	800443e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2203      	movs	r2, #3
 800423c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800427e:	d10f      	bne.n	80042a0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800429e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d007      	beq.n	80042be <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c6:	d14b      	bne.n	8004360 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_Transmit+0xf6>
 80042d0:	8afb      	ldrh	r3, [r7, #22]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d13e      	bne.n	8004354 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042fa:	e02b      	b.n	8004354 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d112      	bne.n	8004330 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	86da      	strh	r2, [r3, #54]	; 0x36
 800432e:	e011      	b.n	8004354 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004330:	f7fd fa68 	bl	8001804 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d803      	bhi.n	8004348 <HAL_SPI_Transmit+0x168>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d102      	bne.n	800434e <HAL_SPI_Transmit+0x16e>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004352:	e074      	b.n	800443e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1ce      	bne.n	80042fc <HAL_SPI_Transmit+0x11c>
 800435e:	e04c      	b.n	80043fa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_Transmit+0x18e>
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d140      	bne.n	80043f0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004394:	e02c      	b.n	80043f0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d113      	bne.n	80043cc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	7812      	ldrb	r2, [r2, #0]
 80043b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80043ca:	e011      	b.n	80043f0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043cc:	f7fd fa1a 	bl	8001804 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d803      	bhi.n	80043e4 <HAL_SPI_Transmit+0x204>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d102      	bne.n	80043ea <HAL_SPI_Transmit+0x20a>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ee:	e026      	b.n	800443e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1cd      	bne.n	8004396 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	6839      	ldr	r1, [r7, #0]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fbc4 	bl	8004b8c <SPI_EndRxTxTransaction>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e000      	b.n	800443e <HAL_SPI_Transmit+0x25e>
  }

error:
 800443c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800444e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004474:	d112      	bne.n	800449c <HAL_SPI_Receive+0x44>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10e      	bne.n	800449c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2204      	movs	r2, #4
 8004482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f8f1 	bl	800467a <HAL_SPI_TransmitReceive>
 8004498:	4603      	mov	r3, r0
 800449a:	e0ea      	b.n	8004672 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Receive+0x52>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0e3      	b.n	8004672 <HAL_SPI_Receive+0x21a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044b2:	f7fd f9a7 	bl	8001804 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044c8:	e0ca      	b.n	8004660 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_Receive+0x7e>
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80044da:	e0c1      	b.n	8004660 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2204      	movs	r2, #4
 80044e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004522:	d10f      	bne.n	8004544 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004542:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d007      	beq.n	8004562 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d162      	bne.n	8004630 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800456a:	e02e      	b.n	80045ca <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b01      	cmp	r3, #1
 8004578:	d115      	bne.n	80045a6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f103 020c 	add.w	r2, r3, #12
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045a4:	e011      	b.n	80045ca <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045a6:	f7fd f92d 	bl	8001804 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d803      	bhi.n	80045be <HAL_SPI_Receive+0x166>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d102      	bne.n	80045c4 <HAL_SPI_Receive+0x16c>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80045c8:	e04a      	b.n	8004660 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1cb      	bne.n	800456c <HAL_SPI_Receive+0x114>
 80045d4:	e031      	b.n	800463a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d113      	bne.n	800460c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	b292      	uxth	r2, r2
 80045f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	1c9a      	adds	r2, r3, #2
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800460a:	e011      	b.n	8004630 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800460c:	f7fd f8fa 	bl	8001804 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d803      	bhi.n	8004624 <HAL_SPI_Receive+0x1cc>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d102      	bne.n	800462a <HAL_SPI_Receive+0x1d2>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800462e:	e017      	b.n	8004660 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1cd      	bne.n	80045d6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa52 	bl	8004ae8 <SPI_EndRxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	75fb      	strb	r3, [r7, #23]
 800465c:	e000      	b.n	8004660 <HAL_SPI_Receive+0x208>
  }

error :
 800465e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08c      	sub	sp, #48	; 0x30
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004688:	2301      	movs	r3, #1
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_SPI_TransmitReceive+0x26>
 800469c:	2302      	movs	r3, #2
 800469e:	e18a      	b.n	80049b6 <HAL_SPI_TransmitReceive+0x33c>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a8:	f7fd f8ac 	bl	8001804 <HAL_GetTick>
 80046ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046be:	887b      	ldrh	r3, [r7, #2]
 80046c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d00f      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x70>
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046d0:	d107      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <HAL_SPI_TransmitReceive+0x68>
 80046da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d003      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
 80046e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046e8:	e15b      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x82>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x82>
 80046f6:	887b      	ldrh	r3, [r7, #2]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004702:	e14e      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b04      	cmp	r3, #4
 800470e:	d003      	beq.n	8004718 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2205      	movs	r2, #5
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	887a      	ldrh	r2, [r7, #2]
 800472e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	887a      	ldrh	r2, [r7, #2]
 800473a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	887a      	ldrh	r2, [r7, #2]
 8004740:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d007      	beq.n	800476c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d178      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x10a>
 800477e:	8b7b      	ldrh	r3, [r7, #26]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d166      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	881a      	ldrh	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a8:	e053      	b.n	8004852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d11b      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x176>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_SPI_TransmitReceive+0x176>
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d113      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d119      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x1b8>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d014      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	b292      	uxth	r2, r2
 8004814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	1c9a      	adds	r2, r3, #2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800482e:	2301      	movs	r3, #1
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004832:	f7fc ffe7 	bl	8001804 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800483e:	429a      	cmp	r2, r3
 8004840:	d807      	bhi.n	8004852 <HAL_SPI_TransmitReceive+0x1d8>
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d003      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004850:	e0a7      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1a6      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x130>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1a1      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x130>
 8004866:	e07c      	b.n	8004962 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_SPI_TransmitReceive+0x1fc>
 8004870:	8b7b      	ldrh	r3, [r7, #26]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d16b      	bne.n	800494e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	7812      	ldrb	r2, [r2, #0]
 8004882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489c:	e057      	b.n	800494e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d11c      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x26c>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x26c>
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d114      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d119      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x2ae>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d014      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004924:	2301      	movs	r3, #1
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004928:	f7fc ff6c 	bl	8001804 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_TransmitReceive+0x2c6>
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x2cc>
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800494c:	e029      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1a2      	bne.n	800489e <HAL_SPI_TransmitReceive+0x224>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d19d      	bne.n	800489e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f910 	bl	8004b8c <SPI_EndRxTxTransaction>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800497e:	e010      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e000      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3730      	adds	r7, #48	; 0x30
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049cc:	b2db      	uxtb	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	4613      	mov	r3, r2
 80049e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e8:	f7fc ff0c 	bl	8001804 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	4413      	add	r3, r2
 80049f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f8:	f7fc ff04 	bl	8001804 <HAL_GetTick>
 80049fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fe:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	015b      	lsls	r3, r3, #5
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0e:	e054      	b.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d050      	beq.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a18:	f7fc fef4 	bl	8001804 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d902      	bls.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d13d      	bne.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a46:	d111      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a50:	d004      	beq.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5a:	d107      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a74:	d10f      	bne.n	8004a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e017      	b.n	8004ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	bf0c      	ite	eq
 8004aca:	2301      	moveq	r3, #1
 8004acc:	2300      	movne	r3, #0
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d19b      	bne.n	8004a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000008 	.word	0x20000008

08004ae8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004afc:	d111      	bne.n	8004b22 <SPI_EndRxTransaction+0x3a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b06:	d004      	beq.n	8004b12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d107      	bne.n	8004b22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b20:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b2a:	d117      	bne.n	8004b5c <SPI_EndRxTransaction+0x74>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	d112      	bne.n	8004b5c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2101      	movs	r1, #1
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff49 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e013      	b.n	8004b84 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff ff36 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f043 0220 	orr.w	r2, r3, #32
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e000      	b.n	8004b84 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	2180      	movs	r1, #128	; 0x80
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7ff ff18 	bl	80049d8 <SPI_WaitFlagStateUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e000      	b.n	8004bc0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e041      	b.n	8004c5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fba0 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fd26 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e041      	b.n	8004cfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f839 	bl	8004d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f000 fcd7 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
	...

08004d18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d109      	bne.n	8004d3c <HAL_TIM_PWM_Start+0x24>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	bf14      	ite	ne
 8004d34:	2301      	movne	r3, #1
 8004d36:	2300      	moveq	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	e022      	b.n	8004d82 <HAL_TIM_PWM_Start+0x6a>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d109      	bne.n	8004d56 <HAL_TIM_PWM_Start+0x3e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	bf14      	ite	ne
 8004d4e:	2301      	movne	r3, #1
 8004d50:	2300      	moveq	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	e015      	b.n	8004d82 <HAL_TIM_PWM_Start+0x6a>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d109      	bne.n	8004d70 <HAL_TIM_PWM_Start+0x58>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e008      	b.n	8004d82 <HAL_TIM_PWM_Start+0x6a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e05e      	b.n	8004e48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x82>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d98:	e013      	b.n	8004dc2 <HAL_TIM_PWM_Start+0xaa>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0x92>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	e00b      	b.n	8004dc2 <HAL_TIM_PWM_Start+0xaa>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0xa2>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db8:	e003      	b.n	8004dc2 <HAL_TIM_PWM_Start+0xaa>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fec4 	bl	8005b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_TIM_PWM_Start+0x138>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_TIM_PWM_Start+0x138>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIM_PWM_Start+0xfa>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIM_PWM_Start+0xfa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <HAL_TIM_PWM_Start+0x13c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_PWM_Start+0xfa>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <HAL_TIM_PWM_Start+0x140>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d111      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d010      	beq.n	8004e46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e34:	e007      	b.n	8004e46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0201 	orr.w	r2, r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800

08004e5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e093      	b.n	8004f98 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fc fa87 	bl	8001398 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea0:	f023 0307 	bic.w	r3, r3, #7
 8004ea4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f000 fbd1 	bl	8005658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004efc:	f023 030c 	bic.w	r3, r3, #12
 8004f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	031b      	lsls	r3, r3, #12
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4313      	orrs	r3, r2
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d110      	bne.n	8004ff2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e089      	b.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	e031      	b.n	8005056 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d110      	bne.n	800501a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ffe:	7b3b      	ldrb	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e075      	b.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005018:	e01d      	b.n	8005056 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005026:	7b7b      	ldrb	r3, [r7, #13]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d102      	bne.n	8005032 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800502c:	7b3b      	ldrb	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e05e      	b.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_Encoder_Start_IT+0xc4>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d010      	beq.n	8005084 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005062:	e01f      	b.n	80050a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fd73 	bl	8005b58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0202 	orr.w	r2, r2, #2
 8005080:	60da      	str	r2, [r3, #12]
      break;
 8005082:	e02e      	b.n	80050e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	2104      	movs	r1, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fd63 	bl	8005b58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0204 	orr.w	r2, r2, #4
 80050a0:	60da      	str	r2, [r3, #12]
      break;
 80050a2:	e01e      	b.n	80050e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	2100      	movs	r1, #0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fd53 	bl	8005b58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2201      	movs	r2, #1
 80050b8:	2104      	movs	r1, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fd4c 	bl	8005b58 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0202 	orr.w	r2, r2, #2
 80050ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0204 	orr.w	r2, r2, #4
 80050de:	60da      	str	r2, [r3, #12]
      break;
 80050e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0202 	mvn.w	r2, #2
 8005128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fb f804 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa6b 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fa71 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0204 	mvn.w	r2, #4
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fa ffda 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa41 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa47 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d122      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0208 	mvn.w	r2, #8
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fa ffb0 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa17 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fa1d 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2208      	movs	r2, #8
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fa ff86 	bl	800014c <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9ed 	bl	8005622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f9f3 	bl	8005634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0201 	mvn.w	r2, #1
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f9c8 	bl	8005610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b80      	cmp	r3, #128	; 0x80
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fd32 	bl	8005d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9b7 	bl	8005646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0220 	mvn.w	r2, #32
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fcfd 	bl	8005cfe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ac      	b.n	8005480 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b0c      	cmp	r3, #12
 8005332:	f200 809f 	bhi.w	8005474 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005371 	.word	0x08005371
 8005340:	08005475 	.word	0x08005475
 8005344:	08005475 	.word	0x08005475
 8005348:	08005475 	.word	0x08005475
 800534c:	080053b1 	.word	0x080053b1
 8005350:	08005475 	.word	0x08005475
 8005354:	08005475 	.word	0x08005475
 8005358:	08005475 	.word	0x08005475
 800535c:	080053f3 	.word	0x080053f3
 8005360:	08005475 	.word	0x08005475
 8005364:	08005475 	.word	0x08005475
 8005368:	08005475 	.word	0x08005475
 800536c:	08005433 	.word	0x08005433
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f9d0 	bl	800571c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0208 	orr.w	r2, r2, #8
 800538a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0204 	bic.w	r2, r2, #4
 800539a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6999      	ldr	r1, [r3, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	619a      	str	r2, [r3, #24]
      break;
 80053ae:	e062      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa16 	bl	80057e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6999      	ldr	r1, [r3, #24]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	619a      	str	r2, [r3, #24]
      break;
 80053f0:	e041      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fa5f 	bl	80058bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69da      	ldr	r2, [r3, #28]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0208 	orr.w	r2, r2, #8
 800540c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69da      	ldr	r2, [r3, #28]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0204 	bic.w	r2, r2, #4
 800541c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69d9      	ldr	r1, [r3, #28]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	61da      	str	r2, [r3, #28]
      break;
 8005430:	e021      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 faa9 	bl	8005990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69da      	ldr	r2, [r3, #28]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69d9      	ldr	r1, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	021a      	lsls	r2, r3, #8
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	61da      	str	r2, [r3, #28]
      break;
 8005472:	e000      	b.n	8005476 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005474:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <HAL_TIM_ConfigClockSource+0x18>
 800549c:	2302      	movs	r3, #2
 800549e:	e0b3      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x180>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d8:	d03e      	beq.n	8005558 <HAL_TIM_ConfigClockSource+0xd0>
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054de:	f200 8087 	bhi.w	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e6:	f000 8085 	beq.w	80055f4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ee:	d87f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054f0:	2b70      	cmp	r3, #112	; 0x70
 80054f2:	d01a      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xa2>
 80054f4:	2b70      	cmp	r3, #112	; 0x70
 80054f6:	d87b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 80054f8:	2b60      	cmp	r3, #96	; 0x60
 80054fa:	d050      	beq.n	800559e <HAL_TIM_ConfigClockSource+0x116>
 80054fc:	2b60      	cmp	r3, #96	; 0x60
 80054fe:	d877      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005500:	2b50      	cmp	r3, #80	; 0x50
 8005502:	d03c      	beq.n	800557e <HAL_TIM_ConfigClockSource+0xf6>
 8005504:	2b50      	cmp	r3, #80	; 0x50
 8005506:	d873      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d058      	beq.n	80055be <HAL_TIM_ConfigClockSource+0x136>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d86f      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005510:	2b30      	cmp	r3, #48	; 0x30
 8005512:	d064      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d86b      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d060      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d867      	bhi.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d05c      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
 8005524:	2b10      	cmp	r3, #16
 8005526:	d05a      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005528:	e062      	b.n	80055f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6899      	ldr	r1, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f000 faee 	bl	8005b1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800554c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	609a      	str	r2, [r3, #8]
      break;
 8005556:	e04e      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f000 fad7 	bl	8005b1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	609a      	str	r2, [r3, #8]
      break;
 800557c:	e03b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6859      	ldr	r1, [r3, #4]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f000 fa4e 	bl	8005a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2150      	movs	r1, #80	; 0x50
 8005596:	4618      	mov	r0, r3
 8005598:	f000 faa5 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 800559c:	e02b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6859      	ldr	r1, [r3, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f000 fa6c 	bl	8005a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2160      	movs	r1, #96	; 0x60
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa95 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 80055bc:	e01b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f000 fa2e 	bl	8005a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fa85 	bl	8005ae6 <TIM_ITRx_SetConfig>
      break;
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f000 fa7c 	bl	8005ae6 <TIM_ITRx_SetConfig>
        break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a29      	ldr	r2, [pc, #164]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d007      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a26      	ldr	r2, [pc, #152]	; (8005714 <TIM_Base_SetConfig+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x30>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a25      	ldr	r2, [pc, #148]	; (8005718 <TIM_Base_SetConfig+0xc0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <TIM_Base_SetConfig+0xbc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <TIM_Base_SetConfig+0xc0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a07      	ldr	r2, [pc, #28]	; (8005710 <TIM_Base_SetConfig+0xb8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d103      	bne.n	8005700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	615a      	str	r2, [r3, #20]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 0302 	bic.w	r3, r3, #2
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <TIM_OC1_SetConfig+0xc8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d10c      	bne.n	8005792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0308 	bic.w	r3, r3, #8
 800577e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0304 	bic.w	r3, r3, #4
 8005790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a13      	ldr	r2, [pc, #76]	; (80057e4 <TIM_OC1_SetConfig+0xc8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d111      	bne.n	80057be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00

080057e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0210 	bic.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f023 0320 	bic.w	r3, r3, #32
 8005832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <TIM_OC2_SetConfig+0xd0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d10d      	bne.n	8005864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a14      	ldr	r2, [pc, #80]	; (80058b8 <TIM_OC2_SetConfig+0xd0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d113      	bne.n	8005894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800587a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr
 80058b8:	40012c00 	.word	0x40012c00

080058bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1d      	ldr	r2, [pc, #116]	; (800598c <TIM_OC3_SetConfig+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10d      	bne.n	8005936 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <TIM_OC3_SetConfig+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d113      	bne.n	8005966 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00

08005990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0f      	ldr	r2, [pc, #60]	; (8005a28 <TIM_OC4_SetConfig+0x98>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d109      	bne.n	8005a04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00

08005a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 030a 	bic.w	r3, r3, #10
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f023 0210 	bic.w	r2, r3, #16
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	031b      	lsls	r3, r3, #12
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	621a      	str	r2, [r3, #32]
}
 8005adc:	bf00      	nop
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f043 0307 	orr.w	r3, r3, #7
 8005b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	609a      	str	r2, [r3, #8]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr

08005b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	021a      	lsls	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	609a      	str	r2, [r3, #8]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e046      	b.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a16      	ldr	r2, [pc, #88]	; (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d00e      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c04:	d009      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a12      	ldr	r2, [pc, #72]	; (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d004      	beq.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10c      	bne.n	8005c34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800

08005c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e03d      	b.n	8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr

08005cfe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d22:	b084      	sub	sp, #16
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	f107 0014 	add.w	r0, r7, #20
 8005d30:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	b004      	add	sp, #16
 8005d40:	4770      	bx	lr

08005d42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d52:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr

08005d6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d76:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr

08005da2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr

08005dba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005dba:	b084      	sub	sp, #16
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	f107 0014 	add.w	r0, r7, #20
 8005dc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	b004      	add	sp, #16
 8005df8:	4770      	bx	lr
	...

08005dfc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b09b      	sub	sp, #108	; 0x6c
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	78db      	ldrb	r3, [r3, #3]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d81f      	bhi.n	8005e6e <USB_ActivateEndpoint+0x72>
 8005e2e:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <USB_ActivateEndpoint+0x38>)
 8005e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e34:	08005e45 	.word	0x08005e45
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e77 	.word	0x08005e77
 8005e40:	08005e53 	.word	0x08005e53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e50:	e012      	b.n	8005e78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e5e:	e00b      	b.n	8005e78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e60:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e6c:	e004      	b.n	8005e78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005e74:	e000      	b.n	8005e78 <USB_ActivateEndpoint+0x7c>
      break;
 8005e76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	7b1b      	ldrb	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f040 8149 	bne.w	800617c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8084 	beq.w	8005ffc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	011a      	lsls	r2, r3, #4
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	88db      	ldrh	r3, [r3, #6]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	81fb      	strh	r3, [r7, #14]
 8005f36:	89fb      	ldrh	r3, [r7, #14]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <USB_ActivateEndpoint+0x17c>
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	81bb      	strh	r3, [r7, #12]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	441a      	add	r2, r3
 8005f62:	89bb      	ldrh	r3, [r7, #12]
 8005f64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d020      	beq.n	8005fc2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	813b      	strh	r3, [r7, #8]
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	f083 0320 	eor.w	r3, r3, #32
 8005f9e:	813b      	strh	r3, [r7, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	893b      	ldrh	r3, [r7, #8]
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e27f      	b.n	80064c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	897b      	ldrh	r3, [r7, #10]
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]
 8005ffa:	e262      	b.n	80064c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600c:	4413      	add	r3, r2
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	011a      	lsls	r2, r3, #4
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	4413      	add	r3, r2
 800601a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	88db      	ldrh	r3, [r3, #6]
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	b29b      	uxth	r3, r3
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	4413      	add	r3, r2
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	011a      	lsls	r2, r3, #4
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	4413      	add	r3, r2
 800604e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d112      	bne.n	8006082 <USB_ActivateEndpoint+0x286>
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006066:	b29a      	uxth	r2, r3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800607a:	b29a      	uxth	r2, r3
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	e02f      	b.n	80060e2 <USB_ActivateEndpoint+0x2e6>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b3e      	cmp	r3, #62	; 0x3e
 8006088:	d813      	bhi.n	80060b2 <USB_ActivateEndpoint+0x2b6>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	663b      	str	r3, [r7, #96]	; 0x60
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <USB_ActivateEndpoint+0x2a8>
 800609e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a0:	3301      	adds	r3, #1
 80060a2:	663b      	str	r3, [r7, #96]	; 0x60
 80060a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e017      	b.n	80060e2 <USB_ActivateEndpoint+0x2e6>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	663b      	str	r3, [r7, #96]	; 0x60
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <USB_ActivateEndpoint+0x2d0>
 80060c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060c8:	3b01      	subs	r3, #1
 80060ca:	663b      	str	r3, [r7, #96]	; 0x60
 80060cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	83fb      	strh	r3, [r7, #30]
 80060f0:	8bfb      	ldrh	r3, [r7, #30]
 80060f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <USB_ActivateEndpoint+0x336>
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	83bb      	strh	r3, [r7, #28]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	441a      	add	r2, r3
 800611c:	8bbb      	ldrh	r3, [r7, #28]
 800611e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800612a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	837b      	strh	r3, [r7, #26]
 800614a:	8b7b      	ldrh	r3, [r7, #26]
 800614c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006150:	837b      	strh	r3, [r7, #26]
 8006152:	8b7b      	ldrh	r3, [r7, #26]
 8006154:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006158:	837b      	strh	r3, [r7, #26]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	8b7b      	ldrh	r3, [r7, #26]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]
 800617a:	e1a2      	b.n	80064c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006192:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80061a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80061b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061c8:	4413      	add	r3, r2
 80061ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	011a      	lsls	r2, r3, #4
 80061d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061da:	657b      	str	r3, [r7, #84]	; 0x54
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	891b      	ldrh	r3, [r3, #8]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	801a      	strh	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	653b      	str	r3, [r7, #80]	; 0x50
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fc:	4413      	add	r3, r2
 80061fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011a      	lsls	r2, r3, #4
 8006206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006208:	4413      	add	r3, r2
 800620a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	895b      	ldrh	r3, [r3, #10]
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	b29b      	uxth	r3, r3
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f040 8091 	bne.w	800634c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800623a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d01b      	beq.n	800627a <USB_ActivateEndpoint+0x47e>
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006258:	877b      	strh	r3, [r7, #58]	; 0x3a
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	441a      	add	r2, r3
 8006264:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800626a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	873b      	strh	r3, [r7, #56]	; 0x38
 8006288:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01b      	beq.n	80062ca <USB_ActivateEndpoint+0x4ce>
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	441a      	add	r2, r3
 80062b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006328:	867b      	strh	r3, [r7, #50]	; 0x32
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	441a      	add	r2, r3
 8006334:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e0ba      	b.n	80064c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800635c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01d      	beq.n	80063a4 <USB_ActivateEndpoint+0x5a8>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006398:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4413      	add	r3, r2
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80063b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01d      	beq.n	80063fc <USB_ActivateEndpoint+0x600>
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d024      	beq.n	800644e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	881b      	ldrh	r3, [r3, #0]
 8006410:	b29b      	uxth	r3, r3
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800641e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006422:	f083 0320 	eor.w	r3, r3, #32
 8006426:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	441a      	add	r2, r3
 8006434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]
 800644c:	e01d      	b.n	800648a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006464:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29b      	uxth	r3, r3
 8006498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80064c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	376c      	adds	r7, #108	; 0x6c
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b08d      	sub	sp, #52	; 0x34
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	7b1b      	ldrb	r3, [r3, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 808e 	bne.w	8006600 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d044      	beq.n	8006576 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	81bb      	strh	r3, [r7, #12]
 80064fa:	89bb      	ldrh	r3, [r7, #12]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01b      	beq.n	800653c <USB_DeactivateEndpoint+0x6c>
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	817b      	strh	r3, [r7, #10]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	441a      	add	r2, r3
 8006526:	897b      	ldrh	r3, [r7, #10]
 8006528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006538:	b29b      	uxth	r3, r3
 800653a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006552:	813b      	strh	r3, [r7, #8]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	893b      	ldrh	r3, [r7, #8]
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
 8006574:	e192      	b.n	800689c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	827b      	strh	r3, [r7, #18]
 8006584:	8a7b      	ldrh	r3, [r7, #18]
 8006586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d01b      	beq.n	80065c6 <USB_DeactivateEndpoint+0xf6>
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	b29b      	uxth	r3, r3
 800659c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a4:	823b      	strh	r3, [r7, #16]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	441a      	add	r2, r3
 80065b0:	8a3b      	ldrh	r3, [r7, #16]
 80065b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065dc:	81fb      	strh	r3, [r7, #14]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
 80065fe:	e14d      	b.n	800689c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	785b      	ldrb	r3, [r3, #1]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f040 80a5 	bne.w	8006754 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	843b      	strh	r3, [r7, #32]
 8006618:	8c3b      	ldrh	r3, [r7, #32]
 800661a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01b      	beq.n	800665a <USB_DeactivateEndpoint+0x18a>
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006638:	83fb      	strh	r3, [r7, #30]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	8bfb      	ldrh	r3, [r7, #30]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	83bb      	strh	r3, [r7, #28]
 8006668:	8bbb      	ldrh	r3, [r7, #28]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01b      	beq.n	80066aa <USB_DeactivateEndpoint+0x1da>
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	837b      	strh	r3, [r7, #26]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8b7b      	ldrh	r3, [r7, #26]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	833b      	strh	r3, [r7, #24]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	8b3b      	ldrh	r3, [r7, #24]
 80066ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066de:	b29b      	uxth	r3, r3
 80066e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	82fb      	strh	r3, [r7, #22]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	441a      	add	r2, r3
 8006704:	8afb      	ldrh	r3, [r7, #22]
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006730:	82bb      	strh	r3, [r7, #20]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	441a      	add	r2, r3
 800673c:	8abb      	ldrh	r3, [r7, #20]
 800673e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674e:	b29b      	uxth	r3, r3
 8006750:	8013      	strh	r3, [r2, #0]
 8006752:	e0a3      	b.n	800689c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01b      	beq.n	80067a4 <USB_DeactivateEndpoint+0x2d4>
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006782:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80067b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01b      	beq.n	80067f4 <USB_DeactivateEndpoint+0x324>
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006842:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006860:	b29b      	uxth	r3, r3
 8006862:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	881b      	ldrh	r3, [r3, #0]
 8006870:	b29b      	uxth	r3, r3
 8006872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	847b      	strh	r3, [r7, #34]	; 0x22
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	441a      	add	r2, r3
 8006886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006898:	b29b      	uxth	r3, r3
 800689a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3734      	adds	r7, #52	; 0x34
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bc80      	pop	{r7}
 80068a6:	4770      	bx	lr

080068a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b0cc      	sub	sp, #304	; 0x130
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b6:	6018      	str	r0, [r3, #0]
 80068b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	f041 817d 	bne.w	8007bce <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d908      	bls.n	8006902 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006900:	e007      	b.n	8006912 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	7b1b      	ldrb	r3, [r3, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d152      	bne.n	80069c8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6959      	ldr	r1, [r3, #20]
 800692e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	88da      	ldrh	r2, [r3, #6]
 800693a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693e:	b29b      	uxth	r3, r3
 8006940:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006944:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006948:	6800      	ldr	r0, [r0, #0]
 800694a:	f001 ff23 	bl	8008794 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006956:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800695a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006966:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006970:	b29b      	uxth	r3, r3
 8006972:	4619      	mov	r1, r3
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800697c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006980:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	440a      	add	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	011a      	lsls	r2, r3, #4
 8006998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800699c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4413      	add	r3, r2
 80069a4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069bc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	f001 b8b5 	b.w	8007b32 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	f040 84c6 	bne.w	8007366 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6a1a      	ldr	r2, [r3, #32]
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f240 8443 	bls.w	800727e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 823e 	beq.w	8006f16 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006aa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aa6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f040 809a 	bne.w	8006bf4 <USB_EPStartXfer+0x34c>
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ac8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006acc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006af2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	440a      	add	r2, r1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	011a      	lsls	r2, r3, #4
 8006b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4413      	add	r3, r2
 8006b16:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d122      	bne.n	8006b72 <USB_EPStartXfer+0x2ca>
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	801a      	strh	r2, [r3, #0]
 8006b70:	e079      	b.n	8006c66 <USB_EPStartXfer+0x3be>
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	2b3e      	cmp	r3, #62	; 0x3e
 8006b78:	d81b      	bhi.n	8006bb2 <USB_EPStartXfer+0x30a>
 8006b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7e:	085b      	lsrs	r3, r3, #1
 8006b80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d004      	beq.n	8006b9a <USB_EPStartXfer+0x2f2>
 8006b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b94:	3301      	adds	r3, #1
 8006b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	029b      	lsls	r3, r3, #10
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e059      	b.n	8006c66 <USB_EPStartXfer+0x3be>
 8006bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0x32a>
 8006bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	e038      	b.n	8006c66 <USB_EPStartXfer+0x3be>
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d130      	bne.n	8006c66 <USB_EPStartXfer+0x3be>
 8006c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c22:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	440a      	add	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	011a      	lsls	r2, r3, #4
 8006c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	895b      	ldrh	r3, [r3, #10]
 8006c72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6959      	ldr	r1, [r3, #20]
 8006c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c94:	6800      	ldr	r0, [r0, #0]
 8006c96:	f001 fd7d 	bl	8008794 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	695a      	ldr	r2, [r3, #20]
 8006ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006caa:	441a      	add	r2, r3
 8006cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6a1a      	ldr	r2, [r3, #32]
 8006cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d90f      	bls.n	8006cf4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6a1a      	ldr	r2, [r3, #32]
 8006ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce4:	1ad2      	subs	r2, r2, r3
 8006ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	621a      	str	r2, [r3, #32]
 8006cf2:	e00e      	b.n	8006d12 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f040 809a 	bne.w	8006e58 <USB_EPStartXfer+0x5b0>
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d30:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d56:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	011a      	lsls	r2, r3, #4
 8006d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d122      	bne.n	8006dd6 <USB_EPStartXfer+0x52e>
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	801a      	strh	r2, [r3, #0]
 8006dd4:	e083      	b.n	8006ede <USB_EPStartXfer+0x636>
 8006dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dda:	2b3e      	cmp	r3, #62	; 0x3e
 8006ddc:	d81b      	bhi.n	8006e16 <USB_EPStartXfer+0x56e>
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d004      	beq.n	8006dfe <USB_EPStartXfer+0x556>
 8006df4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006df8:	3301      	adds	r3, #1
 8006dfa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	029b      	lsls	r3, r3, #10
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e063      	b.n	8006ede <USB_EPStartXfer+0x636>
 8006e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <USB_EPStartXfer+0x58e>
 8006e2c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e30:	3b01      	subs	r3, #1
 8006e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e36:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	029b      	lsls	r3, r3, #10
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e042      	b.n	8006ede <USB_EPStartXfer+0x636>
 8006e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d13a      	bne.n	8006ede <USB_EPStartXfer+0x636>
 8006e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e74:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e9a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	011a      	lsls	r2, r3, #4
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	891b      	ldrh	r3, [r3, #8]
 8006eea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6959      	ldr	r1, [r3, #20]
 8006efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f0c:	6800      	ldr	r0, [r0, #0]
 8006f0e:	f001 fc41 	bl	8008794 <USB_WritePMA>
 8006f12:	f000 be0e 	b.w	8007b32 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d16d      	bne.n	8007002 <USB_EPStartXfer+0x75a>
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	461a      	mov	r2, r3
 8006f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f46:	4413      	add	r3, r2
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	011a      	lsls	r2, r3, #4
 8006f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
 8006f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d112      	bne.n	8006f90 <USB_EPStartXfer+0x6e8>
 8006f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f78:	801a      	strh	r2, [r3, #0]
 8006f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8c:	801a      	strh	r2, [r3, #0]
 8006f8e:	e063      	b.n	8007058 <USB_EPStartXfer+0x7b0>
 8006f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f94:	2b3e      	cmp	r3, #62	; 0x3e
 8006f96:	d817      	bhi.n	8006fc8 <USB_EPStartXfer+0x720>
 8006f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <USB_EPStartXfer+0x710>
 8006fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	e047      	b.n	8007058 <USB_EPStartXfer+0x7b0>
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d104      	bne.n	8006fe8 <USB_EPStartXfer+0x740>
 8006fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e02a      	b.n	8007058 <USB_EPStartXfer+0x7b0>
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d122      	bne.n	8007058 <USB_EPStartXfer+0x7b0>
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	653b      	str	r3, [r7, #80]	; 0x50
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800702c:	b29b      	uxth	r3, r3
 800702e:	461a      	mov	r2, r3
 8007030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007032:	4413      	add	r3, r2
 8007034:	653b      	str	r3, [r7, #80]	; 0x50
 8007036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	011a      	lsls	r2, r3, #4
 8007044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007046:	4413      	add	r3, r2
 8007048:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800704c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800704e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007052:	b29a      	uxth	r2, r3
 8007054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007056:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	891b      	ldrh	r3, [r3, #8]
 8007064:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6959      	ldr	r1, [r3, #20]
 8007074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007078:	b29b      	uxth	r3, r3
 800707a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800707e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007082:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	f001 fb84 	bl	8008794 <USB_WritePMA>
            ep->xfer_buff += len;
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	695a      	ldr	r2, [r3, #20]
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	441a      	add	r2, r3
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6a1a      	ldr	r2, [r3, #32]
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d90f      	bls.n	80070e6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1a      	ldr	r2, [r3, #32]
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	1ad2      	subs	r2, r2, r3
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	621a      	str	r2, [r3, #32]
 80070e4:	e00e      	b.n	8007104 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2200      	movs	r2, #0
 8007102:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007108:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	643b      	str	r3, [r7, #64]	; 0x40
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d16d      	bne.n	80071fc <USB_EPStartXfer+0x954>
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38
 800712c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800713a:	b29b      	uxth	r3, r3
 800713c:	461a      	mov	r2, r3
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	4413      	add	r3, r2
 8007142:	63bb      	str	r3, [r7, #56]	; 0x38
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	011a      	lsls	r2, r3, #4
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	4413      	add	r3, r2
 8007156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
 800715c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d112      	bne.n	800718a <USB_EPStartXfer+0x8e2>
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800716e:	b29a      	uxth	r2, r3
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007182:	b29a      	uxth	r2, r3
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	801a      	strh	r2, [r3, #0]
 8007188:	e05d      	b.n	8007246 <USB_EPStartXfer+0x99e>
 800718a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718e:	2b3e      	cmp	r3, #62	; 0x3e
 8007190:	d817      	bhi.n	80071c2 <USB_EPStartXfer+0x91a>
 8007192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <USB_EPStartXfer+0x90a>
 80071a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071ac:	3301      	adds	r3, #1
 80071ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e041      	b.n	8007246 <USB_EPStartXfer+0x99e>
 80071c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	f003 031f 	and.w	r3, r3, #31
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d104      	bne.n	80071e2 <USB_EPStartXfer+0x93a>
 80071d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071dc:	3b01      	subs	r3, #1
 80071de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	029b      	lsls	r3, r3, #10
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f8:	801a      	strh	r2, [r3, #0]
 80071fa:	e024      	b.n	8007246 <USB_EPStartXfer+0x99e>
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d11c      	bne.n	8007246 <USB_EPStartXfer+0x99e>
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007220:	4413      	add	r3, r2
 8007222:	643b      	str	r3, [r7, #64]	; 0x40
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	011a      	lsls	r2, r3, #4
 8007232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007234:	4413      	add	r3, r2
 8007236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800723a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800723c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007240:	b29a      	uxth	r2, r3
 8007242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	895b      	ldrh	r3, [r3, #10]
 8007252:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6959      	ldr	r1, [r3, #20]
 8007262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007266:	b29b      	uxth	r3, r3
 8007268:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800726c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007270:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007274:	6800      	ldr	r0, [r0, #0]
 8007276:	f001 fa8d 	bl	8008794 <USB_WritePMA>
 800727a:	f000 bc5a 	b.w	8007b32 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800727e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80072b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	441a      	add	r2, r3
 80072d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80072d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007304:	b29b      	uxth	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800730a:	4413      	add	r3, r2
 800730c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	011a      	lsls	r2, r3, #4
 800731c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800731e:	4413      	add	r3, r2
 8007320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007324:	65bb      	str	r3, [r7, #88]	; 0x58
 8007326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732a:	b29a      	uxth	r2, r3
 800732c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800732e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	891b      	ldrh	r3, [r3, #8]
 800733c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6959      	ldr	r1, [r3, #20]
 800734c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007350:	b29b      	uxth	r3, r3
 8007352:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007356:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800735a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	f001 fa18 	bl	8008794 <USB_WritePMA>
 8007364:	e3e5      	b.n	8007b32 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800738c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007394:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	441a      	add	r2, r3
 80073aa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80073ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 81bc 	beq.w	8007780 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d16d      	bne.n	8007502 <USB_EPStartXfer+0xc5a>
 8007426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	67bb      	str	r3, [r7, #120]	; 0x78
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007440:	b29b      	uxth	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007446:	4413      	add	r3, r2
 8007448:	67bb      	str	r3, [r7, #120]	; 0x78
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	011a      	lsls	r2, r3, #4
 8007458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800745a:	4413      	add	r3, r2
 800745c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007460:	677b      	str	r3, [r7, #116]	; 0x74
 8007462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d112      	bne.n	8007490 <USB_EPStartXfer+0xbe8>
 800746a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29b      	uxth	r3, r3
 8007470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007474:	b29a      	uxth	r2, r3
 8007476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007488:	b29a      	uxth	r2, r3
 800748a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800748c:	801a      	strh	r2, [r3, #0]
 800748e:	e060      	b.n	8007552 <USB_EPStartXfer+0xcaa>
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	2b3e      	cmp	r3, #62	; 0x3e
 8007496:	d817      	bhi.n	80074c8 <USB_EPStartXfer+0xc20>
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <USB_EPStartXfer+0xc10>
 80074ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074b2:	3301      	adds	r3, #1
 80074b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074bc:	b29b      	uxth	r3, r3
 80074be:	029b      	lsls	r3, r3, #10
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e044      	b.n	8007552 <USB_EPStartXfer+0xcaa>
 80074c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <USB_EPStartXfer+0xc40>
 80074de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074e2:	3b01      	subs	r3, #1
 80074e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	029b      	lsls	r3, r3, #10
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	e027      	b.n	8007552 <USB_EPStartXfer+0xcaa>
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d11f      	bne.n	8007552 <USB_EPStartXfer+0xcaa>
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007520:	b29b      	uxth	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007528:	4413      	add	r3, r2
 800752a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	011a      	lsls	r2, r3, #4
 800753c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007540:	4413      	add	r3, r2
 8007542:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007546:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754c:	b29a      	uxth	r2, r3
 800754e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007550:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	895b      	ldrh	r3, [r3, #10]
 800755e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6959      	ldr	r1, [r3, #20]
 800756e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007572:	b29b      	uxth	r3, r3
 8007574:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007578:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800757c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007580:	6800      	ldr	r0, [r0, #0]
 8007582:	f001 f907 	bl	8008794 <USB_WritePMA>
          ep->xfer_buff += len;
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695a      	ldr	r2, [r3, #20]
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	441a      	add	r2, r3
 8007598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80075a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a1a      	ldr	r2, [r3, #32]
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d90f      	bls.n	80075e0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80075c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6a1a      	ldr	r2, [r3, #32]
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	1ad2      	subs	r2, r2, r3
 80075d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	621a      	str	r2, [r3, #32]
 80075de:	e00e      	b.n	80075fe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6a1b      	ldr	r3, [r3, #32]
 80075ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2200      	movs	r2, #0
 80075fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8295 	beq.w	8007b32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d16d      	bne.n	80076f4 <USB_EPStartXfer+0xe4c>
 8007618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	66bb      	str	r3, [r7, #104]	; 0x68
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007632:	b29b      	uxth	r3, r3
 8007634:	461a      	mov	r2, r3
 8007636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007638:	4413      	add	r3, r2
 800763a:	66bb      	str	r3, [r7, #104]	; 0x68
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	011a      	lsls	r2, r3, #4
 800764a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764c:	4413      	add	r3, r2
 800764e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007652:	667b      	str	r3, [r7, #100]	; 0x64
 8007654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d112      	bne.n	8007682 <USB_EPStartXfer+0xdda>
 800765c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007666:	b29a      	uxth	r2, r3
 8007668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767a:	b29a      	uxth	r2, r3
 800767c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	e063      	b.n	800774a <USB_EPStartXfer+0xea2>
 8007682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007686:	2b3e      	cmp	r3, #62	; 0x3e
 8007688:	d817      	bhi.n	80076ba <USB_EPStartXfer+0xe12>
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <USB_EPStartXfer+0xe02>
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	029b      	lsls	r3, r3, #10
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	e047      	b.n	800774a <USB_EPStartXfer+0xea2>
 80076ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c8:	f003 031f 	and.w	r3, r3, #31
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <USB_EPStartXfer+0xe32>
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d4:	3b01      	subs	r3, #1
 80076d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076de:	b29b      	uxth	r3, r3
 80076e0:	029b      	lsls	r3, r3, #10
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	e02a      	b.n	800774a <USB_EPStartXfer+0xea2>
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d122      	bne.n	800774a <USB_EPStartXfer+0xea2>
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	673b      	str	r3, [r7, #112]	; 0x70
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800771e:	b29b      	uxth	r3, r3
 8007720:	461a      	mov	r2, r3
 8007722:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007724:	4413      	add	r3, r2
 8007726:	673b      	str	r3, [r7, #112]	; 0x70
 8007728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	011a      	lsls	r2, r3, #4
 8007736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007738:	4413      	add	r3, r2
 800773a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	b29a      	uxth	r2, r3
 8007746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007748:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800774a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	891b      	ldrh	r3, [r3, #8]
 8007756:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6959      	ldr	r1, [r3, #20]
 8007766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776a:	b29b      	uxth	r3, r3
 800776c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007770:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007774:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007778:	6800      	ldr	r0, [r0, #0]
 800777a:	f001 f80b 	bl	8008794 <USB_WritePMA>
 800777e:	e1d8      	b.n	8007b32 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d178      	bne.n	8007882 <USB_EPStartXfer+0xfda>
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b4:	4413      	add	r3, r2
 80077b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	011a      	lsls	r2, r3, #4
 80077c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077cc:	4413      	add	r3, r2
 80077ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d116      	bne.n	800780c <USB_EPStartXfer+0xf64>
 80077de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007802:	b29a      	uxth	r2, r3
 8007804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007808:	801a      	strh	r2, [r3, #0]
 800780a:	e06b      	b.n	80078e4 <USB_EPStartXfer+0x103c>
 800780c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007810:	2b3e      	cmp	r3, #62	; 0x3e
 8007812:	d818      	bhi.n	8007846 <USB_EPStartXfer+0xf9e>
 8007814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <USB_EPStartXfer+0xf8c>
 800782a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800782e:	3301      	adds	r3, #1
 8007830:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007834:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29a      	uxth	r2, r3
 800783e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007842:	801a      	strh	r2, [r3, #0]
 8007844:	e04e      	b.n	80078e4 <USB_EPStartXfer+0x103c>
 8007846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800784a:	095b      	lsrs	r3, r3, #5
 800784c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <USB_EPStartXfer+0xfbe>
 800785c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007860:	3b01      	subs	r3, #1
 8007862:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007866:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800786a:	b29b      	uxth	r3, r3
 800786c:	029b      	lsls	r3, r3, #10
 800786e:	b29b      	uxth	r3, r3
 8007870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007878:	b29a      	uxth	r2, r3
 800787a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800787e:	801a      	strh	r2, [r3, #0]
 8007880:	e030      	b.n	80078e4 <USB_EPStartXfer+0x103c>
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d128      	bne.n	80078e4 <USB_EPStartXfer+0x103c>
 8007892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078b6:	4413      	add	r3, r2
 80078b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80078bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	011a      	lsls	r2, r3, #4
 80078ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078ce:	4413      	add	r3, r2
 80078d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078dc:	b29a      	uxth	r2, r3
 80078de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6959      	ldr	r1, [r3, #20]
 8007900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007904:	b29b      	uxth	r3, r3
 8007906:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800790a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800790e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007912:	6800      	ldr	r0, [r0, #0]
 8007914:	f000 ff3e 	bl	8008794 <USB_WritePMA>
          ep->xfer_buff += len;
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	441a      	add	r2, r3
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	429a      	cmp	r2, r3
 8007950:	d90f      	bls.n	8007972 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a1a      	ldr	r2, [r3, #32]
 800795e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	621a      	str	r2, [r3, #32]
 8007970:	e00e      	b.n	8007990 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2200      	movs	r2, #0
 800798e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80cc 	beq.w	8007b32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800799a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d178      	bne.n	8007aaa <USB_EPStartXfer+0x1202>
 80079b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079dc:	4413      	add	r3, r2
 80079de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	011a      	lsls	r2, r3, #4
 80079f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079f4:	4413      	add	r3, r2
 80079f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d116      	bne.n	8007a34 <USB_EPStartXfer+0x118c>
 8007a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a18:	801a      	strh	r2, [r3, #0]
 8007a1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	e064      	b.n	8007afe <USB_EPStartXfer+0x1256>
 8007a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a38:	2b3e      	cmp	r3, #62	; 0x3e
 8007a3a:	d818      	bhi.n	8007a6e <USB_EPStartXfer+0x11c6>
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <USB_EPStartXfer+0x11b4>
 8007a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a56:	3301      	adds	r3, #1
 8007a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	e047      	b.n	8007afe <USB_EPStartXfer+0x1256>
 8007a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7c:	f003 031f 	and.w	r3, r3, #31
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <USB_EPStartXfer+0x11e6>
 8007a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	029b      	lsls	r3, r3, #10
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	e029      	b.n	8007afe <USB_EPStartXfer+0x1256>
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d121      	bne.n	8007afe <USB_EPStartXfer+0x1256>
 8007aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	011a      	lsls	r2, r3, #4
 8007ae4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ae8:	4413      	add	r3, r2
 8007aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007afc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6959      	ldr	r1, [r3, #20]
 8007b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f000 fe31 	bl	8008794 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b54:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b60:	8013      	strh	r3, [r2, #0]
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b6e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	f082 0210 	eor.w	r2, r2, #16
 8007b78:	801a      	strh	r2, [r3, #0]
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b86:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b8a:	8812      	ldrh	r2, [r2, #0]
 8007b8c:	f082 0220 	eor.w	r2, r2, #32
 8007b90:	801a      	strh	r2, [r3, #0]
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	441a      	add	r2, r3
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]
 8007bca:	f000 bc9f 	b.w	800850c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	7b1b      	ldrb	r3, [r3, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f040 80ae 	bne.w	8007d3c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d917      	bls.n	8007c2c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1c:	1ad2      	subs	r2, r2, r3
 8007c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	619a      	str	r2, [r3, #24]
 8007c2a:	e00e      	b.n	8007c4a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2200      	movs	r2, #0
 8007c48:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c6e:	4413      	add	r3, r2
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	011a      	lsls	r2, r3, #4
 8007c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c86:	4413      	add	r3, r2
 8007c88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d116      	bne.n	8007cc6 <USB_EPStartXfer+0x141e>
 8007c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cc2:	801a      	strh	r2, [r3, #0]
 8007cc4:	e3e8      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
 8007cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cca:	2b3e      	cmp	r3, #62	; 0x3e
 8007ccc:	d818      	bhi.n	8007d00 <USB_EPStartXfer+0x1458>
 8007cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <USB_EPStartXfer+0x1446>
 8007ce4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ce8:	3301      	adds	r3, #1
 8007cea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	029b      	lsls	r3, r3, #10
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cfc:	801a      	strh	r2, [r3, #0]
 8007cfe:	e3cb      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d104      	bne.n	8007d20 <USB_EPStartXfer+0x1478>
 8007d16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	029b      	lsls	r3, r3, #10
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	e3ad      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	78db      	ldrb	r3, [r3, #3]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	f040 8200 	bne.w	800814e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	785b      	ldrb	r3, [r3, #1]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f040 8091 	bne.w	8007e82 <USB_EPStartXfer+0x15da>
 8007d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d84:	4413      	add	r3, r2
 8007d86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	011a      	lsls	r2, r3, #4
 8007d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d116      	bne.n	8007de4 <USB_EPStartXfer+0x153c>
 8007db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007de0:	801a      	strh	r2, [r3, #0]
 8007de2:	e083      	b.n	8007eec <USB_EPStartXfer+0x1644>
 8007de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b3e      	cmp	r3, #62	; 0x3e
 8007df2:	d820      	bhi.n	8007e36 <USB_EPStartXfer+0x158e>
 8007df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <USB_EPStartXfer+0x157c>
 8007e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1e:	3301      	adds	r3, #1
 8007e20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	029b      	lsls	r3, r3, #10
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e05a      	b.n	8007eec <USB_EPStartXfer+0x1644>
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f003 031f 	and.w	r3, r3, #31
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <USB_EPStartXfer+0x15be>
 8007e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e60:	3b01      	subs	r3, #1
 8007e62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	029b      	lsls	r3, r3, #10
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	e034      	b.n	8007eec <USB_EPStartXfer+0x1644>
 8007e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d12c      	bne.n	8007eec <USB_EPStartXfer+0x1644>
 8007e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	011a      	lsls	r2, r3, #4
 8007eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ece:	4413      	add	r3, r2
 8007ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 8091 	bne.w	800802e <USB_EPStartXfer+0x1786>
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f30:	4413      	add	r3, r2
 8007f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	011a      	lsls	r2, r3, #4
 8007f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f48:	4413      	add	r3, r2
 8007f4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d116      	bne.n	8007f90 <USB_EPStartXfer+0x16e8>
 8007f62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e07c      	b.n	800808a <USB_EPStartXfer+0x17e2>
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f9e:	d820      	bhi.n	8007fe2 <USB_EPStartXfer+0x173a>
 8007fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	085b      	lsrs	r3, r3, #1
 8007fae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <USB_EPStartXfer+0x1728>
 8007fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fca:	3301      	adds	r3, #1
 8007fcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	029b      	lsls	r3, r3, #10
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	e053      	b.n	800808a <USB_EPStartXfer+0x17e2>
 8007fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2b00      	cmp	r3, #0
 8008006:	d104      	bne.n	8008012 <USB_EPStartXfer+0x176a>
 8008008:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800800c:	3b01      	subs	r3, #1
 800800e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008012:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008016:	b29b      	uxth	r3, r3
 8008018:	029b      	lsls	r3, r3, #10
 800801a:	b29b      	uxth	r3, r3
 800801c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008024:	b29a      	uxth	r2, r3
 8008026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	e02d      	b.n	800808a <USB_EPStartXfer+0x17e2>
 800802e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d125      	bne.n	800808a <USB_EPStartXfer+0x17e2>
 800803e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804c:	b29b      	uxth	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008054:	4413      	add	r3, r2
 8008056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800805a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	011a      	lsls	r2, r3, #4
 8008068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800806c:	4413      	add	r3, r2
 800806e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008072:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	b29a      	uxth	r2, r3
 8008084:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008088:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 81fe 	beq.w	8008498 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4413      	add	r3, r2
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <USB_EPStartXfer+0x182c>
 80080c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10d      	bne.n	80080f0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f040 81db 	bne.w	8008498 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 81d4 	bne.w	8008498 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800813c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008148:	b29b      	uxth	r3, r3
 800814a:	8013      	strh	r3, [r2, #0]
 800814c:	e1a4      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	78db      	ldrb	r3, [r3, #3]
 800815a:	2b01      	cmp	r3, #1
 800815c:	f040 819a 	bne.w	8008494 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699a      	ldr	r2, [r3, #24]
 800816c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	429a      	cmp	r2, r3
 800817a:	d917      	bls.n	80081ac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800817c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819c:	1ad2      	subs	r2, r2, r3
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	619a      	str	r2, [r3, #24]
 80081aa:	e00e      	b.n	80081ca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80081ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80081bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d178      	bne.n	80082cc <USB_EPStartXfer+0x1a24>
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081fe:	4413      	add	r3, r2
 8008200:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	011a      	lsls	r2, r3, #4
 8008212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008216:	4413      	add	r3, r2
 8008218:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800821c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d116      	bne.n	8008256 <USB_EPStartXfer+0x19ae>
 8008228:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008234:	b29a      	uxth	r2, r3
 8008236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800824c:	b29a      	uxth	r2, r3
 800824e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008252:	801a      	strh	r2, [r3, #0]
 8008254:	e06b      	b.n	800832e <USB_EPStartXfer+0x1a86>
 8008256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800825a:	2b3e      	cmp	r3, #62	; 0x3e
 800825c:	d818      	bhi.n	8008290 <USB_EPStartXfer+0x19e8>
 800825e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008262:	085b      	lsrs	r3, r3, #1
 8008264:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <USB_EPStartXfer+0x19d6>
 8008274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008278:	3301      	adds	r3, #1
 800827a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800827e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008282:	b29b      	uxth	r3, r3
 8008284:	029b      	lsls	r3, r3, #10
 8008286:	b29a      	uxth	r2, r3
 8008288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800828c:	801a      	strh	r2, [r3, #0]
 800828e:	e04e      	b.n	800832e <USB_EPStartXfer+0x1a86>
 8008290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008294:	095b      	lsrs	r3, r3, #5
 8008296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800829a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <USB_EPStartXfer+0x1a08>
 80082a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082aa:	3b01      	subs	r3, #1
 80082ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	029b      	lsls	r3, r3, #10
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	e030      	b.n	800832e <USB_EPStartXfer+0x1a86>
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	785b      	ldrb	r3, [r3, #1]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d128      	bne.n	800832e <USB_EPStartXfer+0x1a86>
 80082dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	461a      	mov	r2, r3
 80082fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008300:	4413      	add	r3, r2
 8008302:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	011a      	lsls	r2, r3, #4
 8008314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008318:	4413      	add	r3, r2
 800831a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800831e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	b29a      	uxth	r2, r3
 8008328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008332:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	785b      	ldrb	r3, [r3, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d178      	bne.n	800843e <USB_EPStartXfer+0x1b96>
 800834c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800835a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008368:	b29b      	uxth	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008370:	4413      	add	r3, r2
 8008372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	011a      	lsls	r2, r3, #4
 8008384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008388:	4413      	add	r3, r2
 800838a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800838e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d116      	bne.n	80083c8 <USB_EPStartXfer+0x1b20>
 800839a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800839e:	881b      	ldrh	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ac:	801a      	strh	r2, [r3, #0]
 80083ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083be:	b29a      	uxth	r2, r3
 80083c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083c4:	801a      	strh	r2, [r3, #0]
 80083c6:	e067      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
 80083c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083cc:	2b3e      	cmp	r3, #62	; 0x3e
 80083ce:	d818      	bhi.n	8008402 <USB_EPStartXfer+0x1b5a>
 80083d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <USB_EPStartXfer+0x1b48>
 80083e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083ea:	3301      	adds	r3, #1
 80083ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	029b      	lsls	r3, r3, #10
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083fe:	801a      	strh	r2, [r3, #0]
 8008400:	e04a      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
 8008402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <USB_EPStartXfer+0x1b7a>
 8008418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800841c:	3b01      	subs	r3, #1
 800841e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008426:	b29b      	uxth	r3, r3
 8008428:	029b      	lsls	r3, r3, #10
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008434:	b29a      	uxth	r2, r3
 8008436:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	e02c      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d124      	bne.n	8008498 <USB_EPStartXfer+0x1bf0>
 800844e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008464:	4413      	add	r3, r2
 8008466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	011a      	lsls	r2, r3, #4
 8008478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847c:	4413      	add	r3, r2
 800847e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008482:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800848a:	b29a      	uxth	r2, r3
 800848c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008490:	801a      	strh	r2, [r3, #0]
 8008492:	e001      	b.n	8008498 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e03a      	b.n	800850e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80084ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	b29b      	uxth	r3, r3
 800850a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	785b      	ldrb	r3, [r3, #1]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d020      	beq.n	800856c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008540:	81bb      	strh	r3, [r7, #12]
 8008542:	89bb      	ldrh	r3, [r7, #12]
 8008544:	f083 0310 	eor.w	r3, r3, #16
 8008548:	81bb      	strh	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	441a      	add	r2, r3
 8008554:	89bb      	ldrh	r3, [r7, #12]
 8008556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800855e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008566:	b29b      	uxth	r3, r3
 8008568:	8013      	strh	r3, [r2, #0]
 800856a:	e01f      	b.n	80085ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800857e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008582:	81fb      	strh	r3, [r7, #14]
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800858a:	81fb      	strh	r3, [r7, #14]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	441a      	add	r2, r3
 8008596:	89fb      	ldrh	r3, [r7, #14]
 8008598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	7b1b      	ldrb	r3, [r3, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f040 809d 	bne.w	8008706 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	785b      	ldrb	r3, [r3, #1]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d04c      	beq.n	800866e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	823b      	strh	r3, [r7, #16]
 80085e2:	8a3b      	ldrh	r3, [r7, #16]
 80085e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01b      	beq.n	8008624 <USB_EPClearStall+0x6c>
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	81fb      	strh	r3, [r7, #14]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	441a      	add	r2, r3
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008614:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800861c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008620:	b29b      	uxth	r3, r3
 8008622:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	78db      	ldrb	r3, [r3, #3]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d06c      	beq.n	8008706 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29b      	uxth	r3, r3
 800863a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	81bb      	strh	r3, [r7, #12]
 8008644:	89bb      	ldrh	r3, [r7, #12]
 8008646:	f083 0320 	eor.w	r3, r3, #32
 800864a:	81bb      	strh	r3, [r7, #12]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	89bb      	ldrh	r3, [r7, #12]
 8008658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008668:	b29b      	uxth	r3, r3
 800866a:	8013      	strh	r3, [r2, #0]
 800866c:	e04b      	b.n	8008706 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	82fb      	strh	r3, [r7, #22]
 800867c:	8afb      	ldrh	r3, [r7, #22]
 800867e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01b      	beq.n	80086be <USB_EPClearStall+0x106>
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869c:	82bb      	strh	r3, [r7, #20]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	8abb      	ldrh	r3, [r7, #20]
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d4:	827b      	strh	r3, [r7, #18]
 80086d6:	8a7b      	ldrh	r3, [r7, #18]
 80086d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086dc:	827b      	strh	r3, [r7, #18]
 80086de:	8a7b      	ldrh	r3, [r7, #18]
 80086e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086e4:	827b      	strh	r3, [r7, #18]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	8a7b      	ldrh	r3, [r7, #18]
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	371c      	adds	r7, #28
 800870c:	46bd      	mov	sp, r7
 800870e:	bc80      	pop	{r7}
 8008710:	4770      	bx	lr

08008712 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2280      	movs	r2, #128	; 0x80
 8008728:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr

0800874c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800876e:	b29b      	uxth	r3, r3
 8008770:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008772:	68fb      	ldr	r3, [r7, #12]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	bc80      	pop	{r7}
 800877c:	4770      	bx	lr

0800877e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008794:	b480      	push	{r7}
 8008796:	b08d      	sub	sp, #52	; 0x34
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4611      	mov	r1, r2
 80087a0:	461a      	mov	r2, r3
 80087a2:	460b      	mov	r3, r1
 80087a4:	80fb      	strh	r3, [r7, #6]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80087aa:	88bb      	ldrh	r3, [r7, #4]
 80087ac:	3301      	adds	r3, #1
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	005a      	lsls	r2, r3, #1
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087cc:	e01e      	b.n	800880c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	3301      	adds	r3, #1
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	3302      	adds	r3, #2
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	3302      	adds	r3, #2
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	3301      	adds	r3, #1
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	3b01      	subs	r3, #1
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1dd      	bne.n	80087ce <USB_WritePMA+0x3a>
  }
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	3734      	adds	r7, #52	; 0x34
 8008818:	46bd      	mov	sp, r7
 800881a:	bc80      	pop	{r7}
 800881c:	4770      	bx	lr

0800881e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800881e:	b480      	push	{r7}
 8008820:	b08b      	sub	sp, #44	; 0x2c
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	4611      	mov	r1, r2
 800882a:	461a      	mov	r2, r3
 800882c:	460b      	mov	r3, r1
 800882e:	80fb      	strh	r3, [r7, #6]
 8008830:	4613      	mov	r3, r2
 8008832:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008834:	88bb      	ldrh	r3, [r7, #4]
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008844:	88fb      	ldrh	r3, [r7, #6]
 8008846:	005a      	lsls	r2, r3, #1
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008850:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
 8008856:	e01b      	b.n	8008890 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	3302      	adds	r3, #2
 8008864:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	b2da      	uxtb	r2, r3
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b2da      	uxtb	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	3301      	adds	r3, #1
 8008882:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	3302      	adds	r3, #2
 8008888:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	3b01      	subs	r3, #1
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e0      	bne.n	8008858 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008896:	88bb      	ldrh	r3, [r7, #4]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	701a      	strb	r2, [r3, #0]
  }
}
 80088b2:	bf00      	nop
 80088b4:	372c      	adds	r7, #44	; 0x2c
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr

080088bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7c1b      	ldrb	r3, [r3, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d115      	bne.n	8008900 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d8:	2202      	movs	r2, #2
 80088da:	2181      	movs	r1, #129	; 0x81
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fe30 	bl	800a542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ec:	2202      	movs	r2, #2
 80088ee:	2101      	movs	r1, #1
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fe26 	bl	800a542 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088fe:	e012      	b.n	8008926 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	2202      	movs	r2, #2
 8008904:	2181      	movs	r1, #129	; 0x81
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fe1b 	bl	800a542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	2202      	movs	r2, #2
 8008916:	2101      	movs	r1, #1
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fe12 	bl	800a542 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008926:	2308      	movs	r3, #8
 8008928:	2203      	movs	r2, #3
 800892a:	2182      	movs	r1, #130	; 0x82
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fe08 	bl	800a542 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008938:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800893c:	f001 ff28 	bl	800a790 <USBD_static_malloc>
 8008940:	4602      	mov	r2, r0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d102      	bne.n	8008958 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008952:	2301      	movs	r3, #1
 8008954:	73fb      	strb	r3, [r7, #15]
 8008956:	e026      	b.n	80089a6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800895e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2200      	movs	r2, #0
 800896e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	7c1b      	ldrb	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800898c:	2101      	movs	r1, #1
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 fec8 	bl	800a724 <USBD_LL_PrepareReceive>
 8008994:	e007      	b.n	80089a6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800899c:	2340      	movs	r3, #64	; 0x40
 800899e:	2101      	movs	r1, #1
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 febf 	bl	800a724 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80089c0:	2181      	movs	r1, #129	; 0x81
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fde3 	bl	800a58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80089ce:	2101      	movs	r1, #1
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f001 fddc 	bl	800a58e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089de:	2182      	movs	r1, #130	; 0x82
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fdd4 	bl	800a58e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00e      	beq.n	8008a14 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fece 	bl	800a7a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d039      	beq.n	8008abc <USBD_CDC_Setup+0x9e>
 8008a48:	2b20      	cmp	r3, #32
 8008a4a:	d17f      	bne.n	8008b4c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	88db      	ldrh	r3, [r3, #6]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d029      	beq.n	8008aa8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	b25b      	sxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da11      	bge.n	8008a82 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	88d2      	ldrh	r2, [r2, #6]
 8008a70:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a72:	6939      	ldr	r1, [r7, #16]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	88db      	ldrh	r3, [r3, #6]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 f9d9 	bl	8009e32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a80:	e06b      	b.n	8008b5a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785a      	ldrb	r2, [r3, #1]
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	88db      	ldrh	r3, [r3, #6]
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a98:	6939      	ldr	r1, [r7, #16]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 f9f4 	bl	8009e8e <USBD_CtlPrepareRx>
      break;
 8008aa6:	e058      	b.n	8008b5a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	7850      	ldrb	r0, [r2, #1]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	4798      	blx	r3
      break;
 8008aba:	e04e      	b.n	8008b5a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	785b      	ldrb	r3, [r3, #1]
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	d02e      	beq.n	8008b22 <USBD_CDC_Setup+0x104>
 8008ac4:	2b0b      	cmp	r3, #11
 8008ac6:	dc38      	bgt.n	8008b3a <USBD_CDC_Setup+0x11c>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <USBD_CDC_Setup+0xb4>
 8008acc:	2b0a      	cmp	r3, #10
 8008ace:	d014      	beq.n	8008afa <USBD_CDC_Setup+0xdc>
 8008ad0:	e033      	b.n	8008b3a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d107      	bne.n	8008aec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008adc:	f107 030c 	add.w	r3, r7, #12
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f9a4 	bl	8009e32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008aea:	e02e      	b.n	8008b4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 f935 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8008af4:	2302      	movs	r3, #2
 8008af6:	75fb      	strb	r3, [r7, #23]
          break;
 8008af8:	e027      	b.n	8008b4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d107      	bne.n	8008b14 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b04:	f107 030f 	add.w	r3, r7, #15
 8008b08:	2201      	movs	r2, #1
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f990 	bl	8009e32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b12:	e01a      	b.n	8008b4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f921 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
          break;
 8008b20:	e013      	b.n	8008b4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d00d      	beq.n	8008b48 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 f915 	bl	8009d5e <USBD_CtlError>
            ret = USBD_FAIL;
 8008b34:	2302      	movs	r3, #2
 8008b36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b38:	e006      	b.n	8008b48 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 f90e 	bl	8009d5e <USBD_CtlError>
          ret = USBD_FAIL;
 8008b42:	2302      	movs	r3, #2
 8008b44:	75fb      	strb	r3, [r7, #23]
          break;
 8008b46:	e000      	b.n	8008b4a <USBD_CDC_Setup+0x12c>
          break;
 8008b48:	bf00      	nop
      }
      break;
 8008b4a:	e006      	b.n	8008b5a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f905 	bl	8009d5e <USBD_CtlError>
      ret = USBD_FAIL;
 8008b54:	2302      	movs	r3, #2
 8008b56:	75fb      	strb	r3, [r7, #23]
      break;
 8008b58:	bf00      	nop
  }

  return ret;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b76:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b7e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d03a      	beq.n	8008c00 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	440b      	add	r3, r1
 8008b98:	331c      	adds	r3, #28
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d029      	beq.n	8008bf4 <USBD_CDC_DataIn+0x90>
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	331c      	adds	r3, #28
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	68b8      	ldr	r0, [r7, #8]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	4403      	add	r3, r0
 8008bc0:	3338      	adds	r3, #56	; 0x38
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d110      	bne.n	8008bf4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	331c      	adds	r3, #28
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008be6:	78f9      	ldrb	r1, [r7, #3]
 8008be8:	2300      	movs	r3, #0
 8008bea:	2200      	movs	r2, #0
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fd76 	bl	800a6de <USBD_LL_Transmit>
 8008bf2:	e003      	b.n	8008bfc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	e000      	b.n	8008c02 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008c00:	2302      	movs	r3, #2
  }
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	6078      	str	r0, [r7, #4]
 8008c12:	460b      	mov	r3, r1
 8008c14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 fda1 	bl	800a76a <USBD_LL_GetRxDataSize>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00d      	beq.n	8008c56 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4798      	blx	r3

    return USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	e000      	b.n	8008c58 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c56:	2302      	movs	r3, #2
  }
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d015      	beq.n	8008ca6 <USBD_CDC_EP0_RxReady+0x46>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c80:	2bff      	cmp	r3, #255	; 0xff
 8008c82:	d010      	beq.n	8008ca6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c92:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c9a:	b292      	uxth	r2, r2
 8008c9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	22ff      	movs	r2, #255	; 0xff
 8008ca2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2243      	movs	r2, #67	; 0x43
 8008cbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008cbe:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bc80      	pop	{r7}
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	2000009c 	.word	0x2000009c

08008cd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2243      	movs	r2, #67	; 0x43
 8008cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008cde:	4b03      	ldr	r3, [pc, #12]	; (8008cec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bc80      	pop	{r7}
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	20000058 	.word	0x20000058

08008cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2243      	movs	r2, #67	; 0x43
 8008cfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cfe:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bc80      	pop	{r7}
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	200000e0 	.word	0x200000e0

08008d10 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000014 	.word	0x20000014

08008d30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d70:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d7a:	88fa      	ldrh	r2, [r7, #6]
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	371c      	adds	r7, #28
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr

08008d8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3714      	adds	r7, #20
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bc80      	pop	{r7}
 8008db2:	4770      	bx	lr

08008db4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d017      	beq.n	8008dfe <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7c1b      	ldrb	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008de0:	2101      	movs	r1, #1
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fc9e 	bl	800a724 <USBD_LL_PrepareReceive>
 8008de8:	e007      	b.n	8008dfa <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	2101      	movs	r1, #1
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 fc95 	bl	800a724 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	e000      	b.n	8008e00 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008dfe:	2302      	movs	r3, #2
  }
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e01a      	b.n	8008e56 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	79fa      	ldrb	r2, [r7, #7]
 8008e4c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f001 fb02 	bl	800a458 <USBD_LL_Init>

  return USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b085      	sub	sp, #20
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
 8008e66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d006      	beq.n	8008e80 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]
 8008e7e:	e001      	b.n	8008e84 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008e80:	2302      	movs	r3, #2
 8008e82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fb37 	bl	800a50c <USBD_LL_Start>

  return USBD_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ec8:	2302      	movs	r3, #2
 8008eca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00c      	beq.n	8008ef0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	4611      	mov	r1, r2
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3

  return USBD_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fed7 	bl	8009ce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f46:	461a      	mov	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d016      	beq.n	8008f8a <USBD_LL_SetupStage+0x6a>
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d81c      	bhi.n	8008f9a <USBD_LL_SetupStage+0x7a>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_LL_SetupStage+0x4a>
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d008      	beq.n	8008f7a <USBD_LL_SetupStage+0x5a>
 8008f68:	e017      	b.n	8008f9a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f9ca 	bl	800930c <USBD_StdDevReq>
      break;
 8008f78:	e01a      	b.n	8008fb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa2c 	bl	80093e0 <USBD_StdItfReq>
      break;
 8008f88:	e012      	b.n	8008fb0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa6c 	bl	8009470 <USBD_StdEPReq>
      break;
 8008f98:	e00a      	b.n	8008fb0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fb0f 	bl	800a5cc <USBD_LL_StallEP>
      break;
 8008fae:	bf00      	nop
  }

  return USBD_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d14b      	bne.n	8009066 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008fd4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d134      	bne.n	800904a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d919      	bls.n	8009020 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	1ad2      	subs	r2, r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009002:	429a      	cmp	r2, r3
 8009004:	d203      	bcs.n	800900e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800900a:	b29b      	uxth	r3, r3
 800900c:	e002      	b.n	8009014 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009012:	b29b      	uxth	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 ff56 	bl	8009eca <USBD_CtlContinueRx>
 800901e:	e038      	b.n	8009092 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009032:	2b03      	cmp	r3, #3
 8009034:	d105      	bne.n	8009042 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 ff53 	bl	8009eee <USBD_CtlSendStatus>
 8009048:	e023      	b.n	8009092 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009050:	2b05      	cmp	r3, #5
 8009052:	d11e      	bne.n	8009092 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800905c:	2100      	movs	r1, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f001 fab4 	bl	800a5cc <USBD_LL_StallEP>
 8009064:	e015      	b.n	8009092 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009078:	2b03      	cmp	r3, #3
 800907a:	d108      	bne.n	800908e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	7afa      	ldrb	r2, [r7, #11]
 8009086:	4611      	mov	r1, r2
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	4798      	blx	r3
 800908c:	e001      	b.n	8009092 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800908e:	2302      	movs	r3, #2
 8009090:	e000      	b.n	8009094 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	460b      	mov	r3, r1
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090aa:	7afb      	ldrb	r3, [r7, #11]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d17f      	bne.n	80091b0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3314      	adds	r3, #20
 80090b4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d15c      	bne.n	800917a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d915      	bls.n	80090f8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	1ad2      	subs	r2, r2, r3
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fec0 	bl	8009e6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090ea:	2300      	movs	r3, #0
 80090ec:	2200      	movs	r2, #0
 80090ee:	2100      	movs	r1, #0
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f001 fb17 	bl	800a724 <USBD_LL_PrepareReceive>
 80090f6:	e04e      	b.n	8009196 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	6912      	ldr	r2, [r2, #16]
 8009100:	fbb3 f1f2 	udiv	r1, r3, r2
 8009104:	fb01 f202 	mul.w	r2, r1, r2
 8009108:	1a9b      	subs	r3, r3, r2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11c      	bne.n	8009148 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009116:	429a      	cmp	r2, r3
 8009118:	d316      	bcc.n	8009148 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009124:	429a      	cmp	r2, r3
 8009126:	d20f      	bcs.n	8009148 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009128:	2200      	movs	r2, #0
 800912a:	2100      	movs	r1, #0
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fe9c 	bl	8009e6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800913a:	2300      	movs	r3, #0
 800913c:	2200      	movs	r2, #0
 800913e:	2100      	movs	r1, #0
 8009140:	68f8      	ldr	r0, [r7, #12]
 8009142:	f001 faef 	bl	800a724 <USBD_LL_PrepareReceive>
 8009146:	e026      	b.n	8009196 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800915a:	2b03      	cmp	r3, #3
 800915c:	d105      	bne.n	800916a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800916a:	2180      	movs	r1, #128	; 0x80
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f001 fa2d 	bl	800a5cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 fece 	bl	8009f14 <USBD_CtlReceiveStatus>
 8009178:	e00d      	b.n	8009196 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009180:	2b04      	cmp	r3, #4
 8009182:	d004      	beq.n	800918e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f001 fa1b 	bl	800a5cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800919c:	2b01      	cmp	r3, #1
 800919e:	d11d      	bne.n	80091dc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fe81 	bl	8008ea8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091ae:	e015      	b.n	80091dc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00d      	beq.n	80091d8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d108      	bne.n	80091d8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	7afa      	ldrb	r2, [r7, #11]
 80091d0:	4611      	mov	r1, r2
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	4798      	blx	r3
 80091d6:	e001      	b.n	80091dc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80091d8:	2302      	movs	r3, #2
 80091da:	e000      	b.n	80091de <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 f9a4 	bl	800a542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2240      	movs	r2, #64	; 0x40
 8009206:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	2200      	movs	r2, #0
 800920e:	2180      	movs	r1, #128	; 0x80
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 f996 	bl	800a542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2240      	movs	r2, #64	; 0x40
 8009220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6852      	ldr	r2, [r2, #4]
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	4611      	mov	r1, r2
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4798      	blx	r3
  }

  return USBD_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	78fa      	ldrb	r2, [r7, #3]
 8009278:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr

08009286 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009286:	b480      	push	{r7}
 8009288:	b083      	sub	sp, #12
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2204      	movs	r2, #4
 800929e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bc80      	pop	{r7}
 80092ac:	4770      	bx	lr

080092ae <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d105      	bne.n	80092cc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr

080092d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d10b      	bne.n	8009302 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009322:	2b40      	cmp	r3, #64	; 0x40
 8009324:	d005      	beq.n	8009332 <USBD_StdDevReq+0x26>
 8009326:	2b40      	cmp	r3, #64	; 0x40
 8009328:	d84f      	bhi.n	80093ca <USBD_StdDevReq+0xbe>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <USBD_StdDevReq+0x36>
 800932e:	2b20      	cmp	r3, #32
 8009330:	d14b      	bne.n	80093ca <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	4798      	blx	r3
      break;
 8009340:	e048      	b.n	80093d4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b09      	cmp	r3, #9
 8009348:	d839      	bhi.n	80093be <USBD_StdDevReq+0xb2>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <USBD_StdDevReq+0x44>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	080093a1 	.word	0x080093a1
 8009354:	080093b5 	.word	0x080093b5
 8009358:	080093bf 	.word	0x080093bf
 800935c:	080093ab 	.word	0x080093ab
 8009360:	080093bf 	.word	0x080093bf
 8009364:	08009383 	.word	0x08009383
 8009368:	08009379 	.word	0x08009379
 800936c:	080093bf 	.word	0x080093bf
 8009370:	08009397 	.word	0x08009397
 8009374:	0800938d 	.word	0x0800938d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9dc 	bl	8009738 <USBD_GetDescriptor>
          break;
 8009380:	e022      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb3f 	bl	8009a08 <USBD_SetAddress>
          break;
 800938a:	e01d      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb7e 	bl	8009a90 <USBD_SetConfig>
          break;
 8009394:	e018      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fc07 	bl	8009bac <USBD_GetConfig>
          break;
 800939e:	e013      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fc37 	bl	8009c16 <USBD_GetStatus>
          break;
 80093a8:	e00e      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fc65 	bl	8009c7c <USBD_SetFeature>
          break;
 80093b2:	e009      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fc74 	bl	8009ca4 <USBD_ClrFeature>
          break;
 80093bc:	e004      	b.n	80093c8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fccc 	bl	8009d5e <USBD_CtlError>
          break;
 80093c6:	bf00      	nop
      }
      break;
 80093c8:	e004      	b.n	80093d4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fcc6 	bl	8009d5e <USBD_CtlError>
      break;
 80093d2:	bf00      	nop
  }

  return ret;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop

080093e0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d005      	beq.n	8009406 <USBD_StdItfReq+0x26>
 80093fa:	2b40      	cmp	r3, #64	; 0x40
 80093fc:	d82e      	bhi.n	800945c <USBD_StdItfReq+0x7c>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <USBD_StdItfReq+0x26>
 8009402:	2b20      	cmp	r3, #32
 8009404:	d12a      	bne.n	800945c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800940c:	3b01      	subs	r3, #1
 800940e:	2b02      	cmp	r3, #2
 8009410:	d81d      	bhi.n	800944e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	889b      	ldrh	r3, [r3, #4]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	d813      	bhi.n	8009444 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	6839      	ldr	r1, [r7, #0]
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	4798      	blx	r3
 800942a:	4603      	mov	r3, r0
 800942c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d110      	bne.n	8009458 <USBD_StdItfReq+0x78>
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10d      	bne.n	8009458 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fd56 	bl	8009eee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009442:	e009      	b.n	8009458 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc89 	bl	8009d5e <USBD_CtlError>
          break;
 800944c:	e004      	b.n	8009458 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fc84 	bl	8009d5e <USBD_CtlError>
          break;
 8009456:	e000      	b.n	800945a <USBD_StdItfReq+0x7a>
          break;
 8009458:	bf00      	nop
      }
      break;
 800945a:	e004      	b.n	8009466 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fc7d 	bl	8009d5e <USBD_CtlError>
      break;
 8009464:	bf00      	nop
  }

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	889b      	ldrh	r3, [r3, #4]
 8009482:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800948c:	2b40      	cmp	r3, #64	; 0x40
 800948e:	d007      	beq.n	80094a0 <USBD_StdEPReq+0x30>
 8009490:	2b40      	cmp	r3, #64	; 0x40
 8009492:	f200 8146 	bhi.w	8009722 <USBD_StdEPReq+0x2b2>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <USBD_StdEPReq+0x40>
 800949a:	2b20      	cmp	r3, #32
 800949c:	f040 8141 	bne.w	8009722 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
      break;
 80094ae:	e13d      	b.n	800972c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	d10a      	bne.n	80094d2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	6839      	ldr	r1, [r7, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	4798      	blx	r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	e12d      	b.n	800972e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d007      	beq.n	80094ea <USBD_StdEPReq+0x7a>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	f300 811b 	bgt.w	8009716 <USBD_StdEPReq+0x2a6>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d072      	beq.n	80095ca <USBD_StdEPReq+0x15a>
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d03a      	beq.n	800955e <USBD_StdEPReq+0xee>
 80094e8:	e115      	b.n	8009716 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d002      	beq.n	80094fa <USBD_StdEPReq+0x8a>
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d015      	beq.n	8009524 <USBD_StdEPReq+0xb4>
 80094f8:	e02b      	b.n	8009552 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00c      	beq.n	800951a <USBD_StdEPReq+0xaa>
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b80      	cmp	r3, #128	; 0x80
 8009504:	d009      	beq.n	800951a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 f85e 	bl	800a5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009510:	2180      	movs	r1, #128	; 0x80
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 f85a 	bl	800a5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009518:	e020      	b.n	800955c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fc1e 	bl	8009d5e <USBD_CtlError>
              break;
 8009522:	e01b      	b.n	800955c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	885b      	ldrh	r3, [r3, #2]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10e      	bne.n	800954a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <USBD_StdEPReq+0xda>
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	2b80      	cmp	r3, #128	; 0x80
 8009536:	d008      	beq.n	800954a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	88db      	ldrh	r3, [r3, #6]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009540:	7bbb      	ldrb	r3, [r7, #14]
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f841 	bl	800a5cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fccf 	bl	8009eee <USBD_CtlSendStatus>

              break;
 8009550:	e004      	b.n	800955c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fc02 	bl	8009d5e <USBD_CtlError>
              break;
 800955a:	bf00      	nop
          }
          break;
 800955c:	e0e0      	b.n	8009720 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009564:	2b02      	cmp	r3, #2
 8009566:	d002      	beq.n	800956e <USBD_StdEPReq+0xfe>
 8009568:	2b03      	cmp	r3, #3
 800956a:	d015      	beq.n	8009598 <USBD_StdEPReq+0x128>
 800956c:	e026      	b.n	80095bc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00c      	beq.n	800958e <USBD_StdEPReq+0x11e>
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b80      	cmp	r3, #128	; 0x80
 8009578:	d009      	beq.n	800958e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 f824 	bl	800a5cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009584:	2180      	movs	r1, #128	; 0x80
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f820 	bl	800a5cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800958c:	e01c      	b.n	80095c8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fbe4 	bl	8009d5e <USBD_CtlError>
              break;
 8009596:	e017      	b.n	80095c8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	885b      	ldrh	r3, [r3, #2]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d112      	bne.n	80095c6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d004      	beq.n	80095b4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 f82b 	bl	800a60a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fc9a 	bl	8009eee <USBD_CtlSendStatus>
              }
              break;
 80095ba:	e004      	b.n	80095c6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fbcd 	bl	8009d5e <USBD_CtlError>
              break;
 80095c4:	e000      	b.n	80095c8 <USBD_StdEPReq+0x158>
              break;
 80095c6:	bf00      	nop
          }
          break;
 80095c8:	e0aa      	b.n	8009720 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d002      	beq.n	80095da <USBD_StdEPReq+0x16a>
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d032      	beq.n	800963e <USBD_StdEPReq+0x1ce>
 80095d8:	e097      	b.n	800970a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d007      	beq.n	80095f0 <USBD_StdEPReq+0x180>
 80095e0:	7bbb      	ldrb	r3, [r7, #14]
 80095e2:	2b80      	cmp	r3, #128	; 0x80
 80095e4:	d004      	beq.n	80095f0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fbb8 	bl	8009d5e <USBD_CtlError>
                break;
 80095ee:	e091      	b.n	8009714 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	da0b      	bge.n	8009610 <USBD_StdEPReq+0x1a0>
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	3310      	adds	r3, #16
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	4413      	add	r3, r2
 800960c:	3304      	adds	r3, #4
 800960e:	e00b      	b.n	8009628 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2200      	movs	r2, #0
 800962e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2202      	movs	r2, #2
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fbfb 	bl	8009e32 <USBD_CtlSendData>
              break;
 800963c:	e06a      	b.n	8009714 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800963e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009642:	2b00      	cmp	r3, #0
 8009644:	da11      	bge.n	800966a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009646:	7bbb      	ldrb	r3, [r7, #14]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	3318      	adds	r3, #24
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d117      	bne.n	8009690 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fb7b 	bl	8009d5e <USBD_CtlError>
                  break;
 8009668:	e054      	b.n	8009714 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800966a:	7bbb      	ldrb	r3, [r7, #14]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fb68 	bl	8009d5e <USBD_CtlError>
                  break;
 800968e:	e041      	b.n	8009714 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009694:	2b00      	cmp	r3, #0
 8009696:	da0b      	bge.n	80096b0 <USBD_StdEPReq+0x240>
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	3310      	adds	r3, #16
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	3304      	adds	r3, #4
 80096ae:	e00b      	b.n	80096c8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4413      	add	r3, r2
 80096c6:	3304      	adds	r3, #4
 80096c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <USBD_StdEPReq+0x266>
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b80      	cmp	r3, #128	; 0x80
 80096d4:	d103      	bne.n	80096de <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	e00e      	b.n	80096fc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80096de:	7bbb      	ldrb	r3, [r7, #14]
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 ffb0 	bl	800a648 <USBD_LL_IsStallEP>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	e002      	b.n	80096fc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2202      	movs	r2, #2
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fb95 	bl	8009e32 <USBD_CtlSendData>
              break;
 8009708:	e004      	b.n	8009714 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fb26 	bl	8009d5e <USBD_CtlError>
              break;
 8009712:	bf00      	nop
          }
          break;
 8009714:	e004      	b.n	8009720 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fb20 	bl	8009d5e <USBD_CtlError>
          break;
 800971e:	bf00      	nop
      }
      break;
 8009720:	e004      	b.n	800972c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fb1a 	bl	8009d5e <USBD_CtlError>
      break;
 800972a:	bf00      	nop
  }

  return ret;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800974a:	2300      	movs	r3, #0
 800974c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	885b      	ldrh	r3, [r3, #2]
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	b29b      	uxth	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	2b06      	cmp	r3, #6
 800975a:	f200 8128 	bhi.w	80099ae <USBD_GetDescriptor+0x276>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <USBD_GetDescriptor+0x2c>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	08009781 	.word	0x08009781
 8009768:	08009799 	.word	0x08009799
 800976c:	080097d9 	.word	0x080097d9
 8009770:	080099af 	.word	0x080099af
 8009774:	080099af 	.word	0x080099af
 8009778:	0800994f 	.word	0x0800994f
 800977c:	0800997b 	.word	0x0800997b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	7c12      	ldrb	r2, [r2, #16]
 800978c:	f107 0108 	add.w	r1, r7, #8
 8009790:	4610      	mov	r0, r2
 8009792:	4798      	blx	r3
 8009794:	60f8      	str	r0, [r7, #12]
      break;
 8009796:	e112      	b.n	80099be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7c1b      	ldrb	r3, [r3, #16]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10d      	bne.n	80097bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a8:	f107 0208 	add.w	r2, r7, #8
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
 80097b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	2202      	movs	r2, #2
 80097b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097ba:	e100      	b.n	80099be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c4:	f107 0208 	add.w	r2, r7, #8
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
      break;
 80097d6:	e0f2      	b.n	80099be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	885b      	ldrh	r3, [r3, #2]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b05      	cmp	r3, #5
 80097e0:	f200 80ac 	bhi.w	800993c <USBD_GetDescriptor+0x204>
 80097e4:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <USBD_GetDescriptor+0xb4>)
 80097e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ea:	bf00      	nop
 80097ec:	08009805 	.word	0x08009805
 80097f0:	08009839 	.word	0x08009839
 80097f4:	0800986d 	.word	0x0800986d
 80097f8:	080098a1 	.word	0x080098a1
 80097fc:	080098d5 	.word	0x080098d5
 8009800:	08009909 	.word	0x08009909
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7c12      	ldrb	r2, [r2, #16]
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3
 8009824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009826:	e091      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa97 	bl	8009d5e <USBD_CtlError>
            err++;
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	3301      	adds	r3, #1
 8009834:	72fb      	strb	r3, [r7, #11]
          break;
 8009836:	e089      	b.n	800994c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00b      	beq.n	800985c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	7c12      	ldrb	r2, [r2, #16]
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800985a:	e077      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa7d 	bl	8009d5e <USBD_CtlError>
            err++;
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	3301      	adds	r3, #1
 8009868:	72fb      	strb	r3, [r7, #11]
          break;
 800986a:	e06f      	b.n	800994c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	7c12      	ldrb	r2, [r2, #16]
 8009884:	f107 0108 	add.w	r1, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800988e:	e05d      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa63 	bl	8009d5e <USBD_CtlError>
            err++;
 8009898:	7afb      	ldrb	r3, [r7, #11]
 800989a:	3301      	adds	r3, #1
 800989c:	72fb      	strb	r3, [r7, #11]
          break;
 800989e:	e055      	b.n	800994c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00b      	beq.n	80098c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	7c12      	ldrb	r2, [r2, #16]
 80098b8:	f107 0108 	add.w	r1, r7, #8
 80098bc:	4610      	mov	r0, r2
 80098be:	4798      	blx	r3
 80098c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098c2:	e043      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa49 	bl	8009d5e <USBD_CtlError>
            err++;
 80098cc:	7afb      	ldrb	r3, [r7, #11]
 80098ce:	3301      	adds	r3, #1
 80098d0:	72fb      	strb	r3, [r7, #11]
          break;
 80098d2:	e03b      	b.n	800994c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d00b      	beq.n	80098f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7c12      	ldrb	r2, [r2, #16]
 80098ec:	f107 0108 	add.w	r1, r7, #8
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
 80098f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098f6:	e029      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa2f 	bl	8009d5e <USBD_CtlError>
            err++;
 8009900:	7afb      	ldrb	r3, [r7, #11]
 8009902:	3301      	adds	r3, #1
 8009904:	72fb      	strb	r3, [r7, #11]
          break;
 8009906:	e021      	b.n	800994c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00b      	beq.n	800992c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	7c12      	ldrb	r2, [r2, #16]
 8009920:	f107 0108 	add.w	r1, r7, #8
 8009924:	4610      	mov	r0, r2
 8009926:	4798      	blx	r3
 8009928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800992a:	e00f      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fa15 	bl	8009d5e <USBD_CtlError>
            err++;
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	3301      	adds	r3, #1
 8009938:	72fb      	strb	r3, [r7, #11]
          break;
 800993a:	e007      	b.n	800994c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa0d 	bl	8009d5e <USBD_CtlError>
          err++;
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	3301      	adds	r3, #1
 8009948:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800994a:	e038      	b.n	80099be <USBD_GetDescriptor+0x286>
 800994c:	e037      	b.n	80099be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	7c1b      	ldrb	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d109      	bne.n	800996a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995e:	f107 0208 	add.w	r2, r7, #8
 8009962:	4610      	mov	r0, r2
 8009964:	4798      	blx	r3
 8009966:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009968:	e029      	b.n	80099be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f9f6 	bl	8009d5e <USBD_CtlError>
        err++;
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	3301      	adds	r3, #1
 8009976:	72fb      	strb	r3, [r7, #11]
      break;
 8009978:	e021      	b.n	80099be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7c1b      	ldrb	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10d      	bne.n	800999e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998a:	f107 0208 	add.w	r2, r7, #8
 800998e:	4610      	mov	r0, r2
 8009990:	4798      	blx	r3
 8009992:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3301      	adds	r3, #1
 8009998:	2207      	movs	r2, #7
 800999a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800999c:	e00f      	b.n	80099be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f9dc 	bl	8009d5e <USBD_CtlError>
        err++;
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	3301      	adds	r3, #1
 80099aa:	72fb      	strb	r3, [r7, #11]
      break;
 80099ac:	e007      	b.n	80099be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f9d4 	bl	8009d5e <USBD_CtlError>
      err++;
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	3301      	adds	r3, #1
 80099ba:	72fb      	strb	r3, [r7, #11]
      break;
 80099bc:	bf00      	nop
  }

  if (err != 0U)
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d11c      	bne.n	80099fe <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099c4:	893b      	ldrh	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d011      	beq.n	80099ee <USBD_GetDescriptor+0x2b6>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00d      	beq.n	80099ee <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	88da      	ldrh	r2, [r3, #6]
 80099d6:	893b      	ldrh	r3, [r7, #8]
 80099d8:	4293      	cmp	r3, r2
 80099da:	bf28      	it	cs
 80099dc:	4613      	movcs	r3, r2
 80099de:	b29b      	uxth	r3, r3
 80099e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099e2:	893b      	ldrh	r3, [r7, #8]
 80099e4:	461a      	mov	r2, r3
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fa22 	bl	8009e32 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88db      	ldrh	r3, [r3, #6]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d104      	bne.n	8009a00 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa79 	bl	8009eee <USBD_CtlSendStatus>
 80099fc:	e000      	b.n	8009a00 <USBD_GetDescriptor+0x2c8>
    return;
 80099fe:	bf00      	nop
    }
  }
}
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop

08009a08 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	889b      	ldrh	r3, [r3, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d130      	bne.n	8009a7c <USBD_SetAddress+0x74>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	88db      	ldrh	r3, [r3, #6]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d12c      	bne.n	8009a7c <USBD_SetAddress+0x74>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	885b      	ldrh	r3, [r3, #2]
 8009a26:	2b7f      	cmp	r3, #127	; 0x7f
 8009a28:	d828      	bhi.n	8009a7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	885b      	ldrh	r3, [r3, #2]
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a3c:	2b03      	cmp	r3, #3
 8009a3e:	d104      	bne.n	8009a4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f98b 	bl	8009d5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a48:	e01d      	b.n	8009a86 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7bfa      	ldrb	r2, [r7, #15]
 8009a4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fe22 	bl	800a6a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fa46 	bl	8009eee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a70:	e009      	b.n	8009a86 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a7a:	e004      	b.n	8009a86 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f96d 	bl	8009d5e <USBD_CtlError>
  }
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009aa4:	4b40      	ldr	r3, [pc, #256]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d904      	bls.n	8009ab6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f955 	bl	8009d5e <USBD_CtlError>
 8009ab4:	e075      	b.n	8009ba2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d002      	beq.n	8009ac6 <USBD_SetConfig+0x36>
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d023      	beq.n	8009b0c <USBD_SetConfig+0x7c>
 8009ac4:	e062      	b.n	8009b8c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009ac6:	4b38      	ldr	r3, [pc, #224]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d01a      	beq.n	8009b04 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009ace:	4b36      	ldr	r3, [pc, #216]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2203      	movs	r2, #3
 8009adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ae0:	4b31      	ldr	r3, [pc, #196]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff f9e8 	bl	8008ebc <USBD_SetClassConfig>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	d104      	bne.n	8009afc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f932 	bl	8009d5e <USBD_CtlError>
            return;
 8009afa:	e052      	b.n	8009ba2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f9f6 	bl	8009eee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b02:	e04e      	b.n	8009ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f9f2 	bl	8009eee <USBD_CtlSendStatus>
        break;
 8009b0a:	e04a      	b.n	8009ba2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b0c:	4b26      	ldr	r3, [pc, #152]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d112      	bne.n	8009b3a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b1c:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b26:	4b20      	ldr	r3, [pc, #128]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7ff f9e4 	bl	8008efa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f9db 	bl	8009eee <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b38:	e033      	b.n	8009ba2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d01d      	beq.n	8009b84 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff f9d2 	bl	8008efa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b60:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff f9a8 	bl	8008ebc <USBD_SetClassConfig>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d104      	bne.n	8009b7c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8f2 	bl	8009d5e <USBD_CtlError>
            return;
 8009b7a:	e012      	b.n	8009ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f9b6 	bl	8009eee <USBD_CtlSendStatus>
        break;
 8009b82:	e00e      	b.n	8009ba2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f9b2 	bl	8009eee <USBD_CtlSendStatus>
        break;
 8009b8a:	e00a      	b.n	8009ba2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f8e5 	bl	8009d5e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009b94:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <USBD_SetConfig+0x118>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff f9ad 	bl	8008efa <USBD_ClrClassConfig>
        break;
 8009ba0:	bf00      	nop
    }
  }
}
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	200003e0 	.word	0x200003e0

08009bac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	88db      	ldrh	r3, [r3, #6]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d004      	beq.n	8009bc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f8cc 	bl	8009d5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bc6:	e022      	b.n	8009c0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	dc02      	bgt.n	8009bd8 <USBD_GetConfig+0x2c>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dc03      	bgt.n	8009bde <USBD_GetConfig+0x32>
 8009bd6:	e015      	b.n	8009c04 <USBD_GetConfig+0x58>
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d00b      	beq.n	8009bf4 <USBD_GetConfig+0x48>
 8009bdc:	e012      	b.n	8009c04 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3308      	adds	r3, #8
 8009be8:	2201      	movs	r2, #1
 8009bea:	4619      	mov	r1, r3
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f920 	bl	8009e32 <USBD_CtlSendData>
        break;
 8009bf2:	e00c      	b.n	8009c0e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f918 	bl	8009e32 <USBD_CtlSendData>
        break;
 8009c02:	e004      	b.n	8009c0e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f8a9 	bl	8009d5e <USBD_CtlError>
        break;
 8009c0c:	bf00      	nop
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b082      	sub	sp, #8
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	3b01      	subs	r3, #1
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d81e      	bhi.n	8009c6a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	88db      	ldrh	r3, [r3, #6]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d004      	beq.n	8009c3e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f891 	bl	8009d5e <USBD_CtlError>
        break;
 8009c3c:	e01a      	b.n	8009c74 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f043 0202 	orr.w	r2, r3, #2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	330c      	adds	r3, #12
 8009c5e:	2202      	movs	r2, #2
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f8e5 	bl	8009e32 <USBD_CtlSendData>
      break;
 8009c68:	e004      	b.n	8009c74 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f876 	bl	8009d5e <USBD_CtlError>
      break;
 8009c72:	bf00      	nop
  }
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	885b      	ldrh	r3, [r3, #2]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d106      	bne.n	8009c9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f929 	bl	8009eee <USBD_CtlSendStatus>
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d80b      	bhi.n	8009cd2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	885b      	ldrh	r3, [r3, #2]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10c      	bne.n	8009cdc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f90f 	bl	8009eee <USBD_CtlSendStatus>
      }
      break;
 8009cd0:	e004      	b.n	8009cdc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f842 	bl	8009d5e <USBD_CtlError>
      break;
 8009cda:	e000      	b.n	8009cde <USBD_ClrFeature+0x3a>
      break;
 8009cdc:	bf00      	nop
  }
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b083      	sub	sp, #12
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785a      	ldrb	r2, [r3, #1]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	3302      	adds	r3, #2
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	3303      	adds	r3, #3
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	4413      	add	r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	3305      	adds	r3, #5
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	4413      	add	r3, r2
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	3306      	adds	r3, #6
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	3307      	adds	r3, #7
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	4413      	add	r3, r2
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	80da      	strh	r2, [r3, #6]

}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bc80      	pop	{r7}
 8009d5c:	4770      	bx	lr

08009d5e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d68:	2180      	movs	r1, #128	; 0x80
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc2e 	bl	800a5cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d70:	2100      	movs	r1, #0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc2a 	bl	800a5cc <USBD_LL_StallEP>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d032      	beq.n	8009dfc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f000 f834 	bl	8009e04 <USBD_GetLen>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	3301      	adds	r3, #1
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	b29a      	uxth	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	75fa      	strb	r2, [r7, #23]
 8009db0:	461a      	mov	r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009dbc:	7dfb      	ldrb	r3, [r7, #23]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	75fa      	strb	r2, [r7, #23]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	2203      	movs	r2, #3
 8009dca:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009dcc:	e012      	b.n	8009df4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	1c5a      	adds	r2, r3, #1
 8009dd2:	60fa      	str	r2, [r7, #12]
 8009dd4:	7dfa      	ldrb	r2, [r7, #23]
 8009dd6:	1c51      	adds	r1, r2, #1
 8009dd8:	75f9      	strb	r1, [r7, #23]
 8009dda:	4611      	mov	r1, r2
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	440a      	add	r2, r1
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	75fa      	strb	r2, [r7, #23]
 8009dea:	461a      	mov	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4413      	add	r3, r2
 8009df0:	2200      	movs	r2, #0
 8009df2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1e8      	bne.n	8009dce <USBD_GetString+0x4e>
    }
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e10:	e005      	b.n	8009e1e <USBD_GetLen+0x1a>
  {
    len++;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
 8009e14:	3301      	adds	r3, #1
 8009e16:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1f5      	bne.n	8009e12 <USBD_GetLen+0xe>
  }

  return len;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr

08009e32 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2202      	movs	r2, #2
 8009e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e48:	88fa      	ldrh	r2, [r7, #6]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e54:	88fb      	ldrh	r3, [r7, #6]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fc3f 	bl	800a6de <USBD_LL_Transmit>

  return USBD_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b084      	sub	sp, #16
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	4613      	mov	r3, r2
 8009e76:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e78:	88fb      	ldrh	r3, [r7, #6]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fc2d 	bl	800a6de <USBD_LL_Transmit>

  return USBD_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	4613      	mov	r3, r2
 8009e9a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009eac:	88fa      	ldrh	r2, [r7, #6]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eb4:	88fb      	ldrh	r3, [r7, #6]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 fc32 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ed8:	88fb      	ldrh	r3, [r7, #6]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	2100      	movs	r1, #0
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fc20 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2204      	movs	r2, #4
 8009efa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009efe:	2300      	movs	r3, #0
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fbea 	bl	800a6de <USBD_LL_Transmit>

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2205      	movs	r2, #5
 8009f20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f24:	2300      	movs	r3, #0
 8009f26:	2200      	movs	r2, #0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fbfa 	bl	800a724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f40:	2200      	movs	r2, #0
 8009f42:	4912      	ldr	r1, [pc, #72]	; (8009f8c <MX_USB_DEVICE_Init+0x50>)
 8009f44:	4812      	ldr	r0, [pc, #72]	; (8009f90 <MX_USB_DEVICE_Init+0x54>)
 8009f46:	f7fe ff5f 	bl	8008e08 <USBD_Init>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f50:	f7f6 fd7e 	bl	8000a50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f54:	490f      	ldr	r1, [pc, #60]	; (8009f94 <MX_USB_DEVICE_Init+0x58>)
 8009f56:	480e      	ldr	r0, [pc, #56]	; (8009f90 <MX_USB_DEVICE_Init+0x54>)
 8009f58:	f7fe ff81 	bl	8008e5e <USBD_RegisterClass>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f62:	f7f6 fd75 	bl	8000a50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f66:	490c      	ldr	r1, [pc, #48]	; (8009f98 <MX_USB_DEVICE_Init+0x5c>)
 8009f68:	4809      	ldr	r0, [pc, #36]	; (8009f90 <MX_USB_DEVICE_Init+0x54>)
 8009f6a:	f7fe fee1 	bl	8008d30 <USBD_CDC_RegisterInterface>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f74:	f7f6 fd6c 	bl	8000a50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <MX_USB_DEVICE_Init+0x54>)
 8009f7a:	f7fe ff89 	bl	8008e90 <USBD_Start>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f84:	f7f6 fd64 	bl	8000a50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f88:	bf00      	nop
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20000134 	.word	0x20000134
 8009f90:	200003e4 	.word	0x200003e4
 8009f94:	20000020 	.word	0x20000020
 8009f98:	20000124 	.word	0x20000124

08009f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4905      	ldr	r1, [pc, #20]	; (8009fb8 <CDC_Init_FS+0x1c>)
 8009fa4:	4805      	ldr	r0, [pc, #20]	; (8009fbc <CDC_Init_FS+0x20>)
 8009fa6:	f7fe fed9 	bl	8008d5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009faa:	4905      	ldr	r1, [pc, #20]	; (8009fc0 <CDC_Init_FS+0x24>)
 8009fac:	4803      	ldr	r0, [pc, #12]	; (8009fbc <CDC_Init_FS+0x20>)
 8009fae:	f7fe feee 	bl	8008d8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20000a90 	.word	0x20000a90
 8009fbc:	200003e4 	.word	0x200003e4
 8009fc0:	200006a8 	.word	0x200006a8

08009fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr
	...

08009fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	2b23      	cmp	r3, #35	; 0x23
 8009fe8:	d84a      	bhi.n	800a080 <CDC_Control_FS+0xac>
 8009fea:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <CDC_Control_FS+0x1c>)
 8009fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff0:	0800a081 	.word	0x0800a081
 8009ff4:	0800a081 	.word	0x0800a081
 8009ff8:	0800a081 	.word	0x0800a081
 8009ffc:	0800a081 	.word	0x0800a081
 800a000:	0800a081 	.word	0x0800a081
 800a004:	0800a081 	.word	0x0800a081
 800a008:	0800a081 	.word	0x0800a081
 800a00c:	0800a081 	.word	0x0800a081
 800a010:	0800a081 	.word	0x0800a081
 800a014:	0800a081 	.word	0x0800a081
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	0800a081 	.word	0x0800a081
 800a020:	0800a081 	.word	0x0800a081
 800a024:	0800a081 	.word	0x0800a081
 800a028:	0800a081 	.word	0x0800a081
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	0800a081 	.word	0x0800a081
 800a034:	0800a081 	.word	0x0800a081
 800a038:	0800a081 	.word	0x0800a081
 800a03c:	0800a081 	.word	0x0800a081
 800a040:	0800a081 	.word	0x0800a081
 800a044:	0800a081 	.word	0x0800a081
 800a048:	0800a081 	.word	0x0800a081
 800a04c:	0800a081 	.word	0x0800a081
 800a050:	0800a081 	.word	0x0800a081
 800a054:	0800a081 	.word	0x0800a081
 800a058:	0800a081 	.word	0x0800a081
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a081 	.word	0x0800a081
 800a064:	0800a081 	.word	0x0800a081
 800a068:	0800a081 	.word	0x0800a081
 800a06c:	0800a081 	.word	0x0800a081
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a081 	.word	0x0800a081
 800a078:	0800a081 	.word	0x0800a081
 800a07c:	0800a081 	.word	0x0800a081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a080:	bf00      	nop
  }

  return (USBD_OK);
 800a082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a084:	4618      	mov	r0, r3
 800a086:	370c      	adds	r7, #12
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop

0800a090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a09a:	6879      	ldr	r1, [r7, #4]
 800a09c:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <CDC_Receive_FS+0x24>)
 800a09e:	f7fe fe76 	bl	8008d8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0a2:	4804      	ldr	r0, [pc, #16]	; (800a0b4 <CDC_Receive_FS+0x24>)
 800a0a4:	f7fe fe86 	bl	8008db4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a0a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200003e4 	.word	0x200003e4

0800a0b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	6039      	str	r1, [r7, #0]
 800a0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2212      	movs	r2, #18
 800a0c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0ca:	4b03      	ldr	r3, [pc, #12]	; (800a0d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bc80      	pop	{r7}
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	20000150 	.word	0x20000150

0800a0dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0ee:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	20000164 	.word	0x20000164

0800a100 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	4603      	mov	r3, r0
 800a108:	6039      	str	r1, [r7, #0]
 800a10a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d105      	bne.n	800a11e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	4907      	ldr	r1, [pc, #28]	; (800a134 <USBD_FS_ProductStrDescriptor+0x34>)
 800a116:	4808      	ldr	r0, [pc, #32]	; (800a138 <USBD_FS_ProductStrDescriptor+0x38>)
 800a118:	f7ff fe32 	bl	8009d80 <USBD_GetString>
 800a11c:	e004      	b.n	800a128 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	4904      	ldr	r1, [pc, #16]	; (800a134 <USBD_FS_ProductStrDescriptor+0x34>)
 800a122:	4805      	ldr	r0, [pc, #20]	; (800a138 <USBD_FS_ProductStrDescriptor+0x38>)
 800a124:	f7ff fe2c 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a128:	4b02      	ldr	r3, [pc, #8]	; (800a134 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000e78 	.word	0x20000e78
 800a138:	0800b1c8 	.word	0x0800b1c8

0800a13c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	4904      	ldr	r1, [pc, #16]	; (800a15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a14c:	4804      	ldr	r0, [pc, #16]	; (800a160 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a14e:	f7ff fe17 	bl	8009d80 <USBD_GetString>
  return USBD_StrDesc;
 800a152:	4b02      	ldr	r3, [pc, #8]	; (800a15c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000e78 	.word	0x20000e78
 800a160:	0800b1e0 	.word	0x0800b1e0

0800a164 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	6039      	str	r1, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	221a      	movs	r2, #26
 800a174:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a176:	f000 f843 	bl	800a200 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a17a:	4b02      	ldr	r3, [pc, #8]	; (800a184 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000168 	.word	0x20000168

0800a188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	6039      	str	r1, [r7, #0]
 800a192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d105      	bne.n	800a1a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	4907      	ldr	r1, [pc, #28]	; (800a1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a19e:	4808      	ldr	r0, [pc, #32]	; (800a1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1a0:	f7ff fdee 	bl	8009d80 <USBD_GetString>
 800a1a4:	e004      	b.n	800a1b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	4904      	ldr	r1, [pc, #16]	; (800a1bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1aa:	4805      	ldr	r0, [pc, #20]	; (800a1c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1ac:	f7ff fde8 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1b0:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20000e78 	.word	0x20000e78
 800a1c0:	0800b1f4 	.word	0x0800b1f4

0800a1c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d105      	bne.n	800a1e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	4907      	ldr	r1, [pc, #28]	; (800a1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1da:	4808      	ldr	r0, [pc, #32]	; (800a1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1dc:	f7ff fdd0 	bl	8009d80 <USBD_GetString>
 800a1e0:	e004      	b.n	800a1ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4904      	ldr	r1, [pc, #16]	; (800a1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1e6:	4805      	ldr	r0, [pc, #20]	; (800a1fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1e8:	f7ff fdca 	bl	8009d80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1ec:	4b02      	ldr	r3, [pc, #8]	; (800a1f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3708      	adds	r7, #8
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000e78 	.word	0x20000e78
 800a1fc:	0800b200 	.word	0x0800b200

0800a200 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a206:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <Get_SerialNum+0x44>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <Get_SerialNum+0x48>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a212:	4b0e      	ldr	r3, [pc, #56]	; (800a24c <Get_SerialNum+0x4c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4413      	add	r3, r2
 800a21e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a226:	2208      	movs	r2, #8
 800a228:	4909      	ldr	r1, [pc, #36]	; (800a250 <Get_SerialNum+0x50>)
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f000 f814 	bl	800a258 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a230:	2204      	movs	r2, #4
 800a232:	4908      	ldr	r1, [pc, #32]	; (800a254 <Get_SerialNum+0x54>)
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f000 f80f 	bl	800a258 <IntToUnicode>
  }
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	1ffff7e8 	.word	0x1ffff7e8
 800a248:	1ffff7ec 	.word	0x1ffff7ec
 800a24c:	1ffff7f0 	.word	0x1ffff7f0
 800a250:	2000016a 	.word	0x2000016a
 800a254:	2000017a 	.word	0x2000017a

0800a258 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a258:	b480      	push	{r7}
 800a25a:	b087      	sub	sp, #28
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	4613      	mov	r3, r2
 800a264:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a26a:	2300      	movs	r3, #0
 800a26c:	75fb      	strb	r3, [r7, #23]
 800a26e:	e027      	b.n	800a2c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	0f1b      	lsrs	r3, r3, #28
 800a274:	2b09      	cmp	r3, #9
 800a276:	d80b      	bhi.n	800a290 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	0f1b      	lsrs	r3, r3, #28
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	4619      	mov	r1, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	440b      	add	r3, r1
 800a288:	3230      	adds	r2, #48	; 0x30
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e00a      	b.n	800a2a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	0f1b      	lsrs	r3, r3, #28
 800a294:	b2da      	uxtb	r2, r3
 800a296:	7dfb      	ldrb	r3, [r7, #23]
 800a298:	005b      	lsls	r3, r3, #1
 800a29a:	4619      	mov	r1, r3
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	440b      	add	r3, r1
 800a2a0:	3237      	adds	r2, #55	; 0x37
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]
 800a2c0:	7dfa      	ldrb	r2, [r7, #23]
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d3d3      	bcc.n	800a270 <IntToUnicode+0x18>
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bc80      	pop	{r7}
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a0d      	ldr	r2, [pc, #52]	; (800a318 <HAL_PCD_MspInit+0x44>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d113      	bne.n	800a30e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a2e6:	4b0d      	ldr	r3, [pc, #52]	; (800a31c <HAL_PCD_MspInit+0x48>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4a0c      	ldr	r2, [pc, #48]	; (800a31c <HAL_PCD_MspInit+0x48>)
 800a2ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2f0:	61d3      	str	r3, [r2, #28]
 800a2f2:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <HAL_PCD_MspInit+0x48>)
 800a2f4:	69db      	ldr	r3, [r3, #28]
 800a2f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a2fe:	2200      	movs	r2, #0
 800a300:	2100      	movs	r1, #0
 800a302:	2014      	movs	r0, #20
 800a304:	f7f7 fb83 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a308:	2014      	movs	r0, #20
 800a30a:	f7f7 fb9c 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	40005c00 	.word	0x40005c00
 800a31c:	40021000 	.word	0x40021000

0800a320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	f7fe fdf2 	bl	8008f20 <USBD_LL_SetupStage>
}
 800a33c:	bf00      	nop
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a356:	78fa      	ldrb	r2, [r7, #3]
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	00db      	lsls	r3, r3, #3
 800a362:	440b      	add	r3, r1
 800a364:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	78fb      	ldrb	r3, [r7, #3]
 800a36c:	4619      	mov	r1, r3
 800a36e:	f7fe fe24 	bl	8008fba <USBD_LL_DataOutStage>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	4613      	mov	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	00db      	lsls	r3, r3, #3
 800a398:	440b      	add	r3, r1
 800a39a:	333c      	adds	r3, #60	; 0x3c
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f7fe fe7b 	bl	800909c <USBD_LL_DataInStage>
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7fe ff8b 	bl	80092d8 <USBD_LL_SOF>
}
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d001      	beq.n	800a3e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a3de:	f7f6 fb37 	bl	8000a50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3e8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe ff3b 	bl	8009268 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe fef4 	bl	80091e6 <USBD_LL_Reset>
}
 800a3fe:	bf00      	nop
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a416:	4618      	mov	r0, r3
 800a418:	f7fe ff35 	bl	8009286 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a424:	4b04      	ldr	r3, [pc, #16]	; (800a438 <HAL_PCD_SuspendCallback+0x30>)
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4a03      	ldr	r2, [pc, #12]	; (800a438 <HAL_PCD_SuspendCallback+0x30>)
 800a42a:	f043 0306 	orr.w	r3, r3, #6
 800a42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed00 	.word	0xe000ed00

0800a43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe ff2f 	bl	80092ae <USBD_LL_Resume>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a460:	4a28      	ldr	r2, [pc, #160]	; (800a504 <USBD_LL_Init+0xac>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a26      	ldr	r2, [pc, #152]	; (800a504 <USBD_LL_Init+0xac>)
 800a46c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a470:	4b24      	ldr	r3, [pc, #144]	; (800a504 <USBD_LL_Init+0xac>)
 800a472:	4a25      	ldr	r2, [pc, #148]	; (800a508 <USBD_LL_Init+0xb0>)
 800a474:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a476:	4b23      	ldr	r3, [pc, #140]	; (800a504 <USBD_LL_Init+0xac>)
 800a478:	2208      	movs	r2, #8
 800a47a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a47c:	4b21      	ldr	r3, [pc, #132]	; (800a504 <USBD_LL_Init+0xac>)
 800a47e:	2202      	movs	r2, #2
 800a480:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a482:	4b20      	ldr	r3, [pc, #128]	; (800a504 <USBD_LL_Init+0xac>)
 800a484:	2200      	movs	r2, #0
 800a486:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a488:	4b1e      	ldr	r3, [pc, #120]	; (800a504 <USBD_LL_Init+0xac>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a48e:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <USBD_LL_Init+0xac>)
 800a490:	2200      	movs	r2, #0
 800a492:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a494:	481b      	ldr	r0, [pc, #108]	; (800a504 <USBD_LL_Init+0xac>)
 800a496:	f7f7 fcbd 	bl	8001e14 <HAL_PCD_Init>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a4a0:	f7f6 fad6 	bl	8000a50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4aa:	2318      	movs	r3, #24
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	f7f9 f931 	bl	8003716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4ba:	2358      	movs	r3, #88	; 0x58
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2180      	movs	r1, #128	; 0x80
 800a4c0:	f7f9 f929 	bl	8003716 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4ca:	23c0      	movs	r3, #192	; 0xc0
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2181      	movs	r1, #129	; 0x81
 800a4d0:	f7f9 f921 	bl	8003716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4da:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	f7f9 f918 	bl	8003716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2182      	movs	r1, #130	; 0x82
 800a4f4:	f7f9 f90f 	bl	8003716 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20001078 	.word	0x20001078
 800a508:	40005c00 	.word	0x40005c00

0800a50c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a522:	4618      	mov	r0, r3
 800a524:	f7f7 fd81 	bl	800202a <HAL_PCD_Start>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 f94e 	bl	800a7d0 <USBD_Get_USB_Status>
 800a534:	4603      	mov	r3, r0
 800a536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a538:	7bbb      	ldrb	r3, [r7, #14]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	4608      	mov	r0, r1
 800a54c:	4611      	mov	r1, r2
 800a54e:	461a      	mov	r2, r3
 800a550:	4603      	mov	r3, r0
 800a552:	70fb      	strb	r3, [r7, #3]
 800a554:	460b      	mov	r3, r1
 800a556:	70bb      	strb	r3, [r7, #2]
 800a558:	4613      	mov	r3, r2
 800a55a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a56a:	78bb      	ldrb	r3, [r7, #2]
 800a56c:	883a      	ldrh	r2, [r7, #0]
 800a56e:	78f9      	ldrb	r1, [r7, #3]
 800a570:	f7f7 fef9 	bl	8002366 <HAL_PCD_EP_Open>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a578:	7bfb      	ldrb	r3, [r7, #15]
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 f928 	bl	800a7d0 <USBD_Get_USB_Status>
 800a580:	4603      	mov	r3, r0
 800a582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a584:	7bbb      	ldrb	r3, [r7, #14]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
 800a596:	460b      	mov	r3, r1
 800a598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f7 ff40 	bl	8002432 <HAL_PCD_EP_Close>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f909 	bl	800a7d0 <USBD_Get_USB_Status>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f8 f800 	bl	80025f0 <HAL_PCD_EP_SetStall>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 f8ea 	bl	800a7d0 <USBD_Get_USB_Status>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a600:	7bbb      	ldrb	r3, [r7, #14]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	4611      	mov	r1, r2
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f8 f841 	bl	80026b0 <HAL_PCD_EP_ClrStall>
 800a62e:	4603      	mov	r3, r0
 800a630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	4618      	mov	r0, r3
 800a636:	f000 f8cb 	bl	800a7d0 <USBD_Get_USB_Status>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a65a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a660:	2b00      	cmp	r3, #0
 800a662:	da0c      	bge.n	800a67e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a664:	78fb      	ldrb	r3, [r7, #3]
 800a666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a66a:	68f9      	ldr	r1, [r7, #12]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	00db      	lsls	r3, r3, #3
 800a676:	440b      	add	r3, r1
 800a678:	3302      	adds	r3, #2
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	e00b      	b.n	800a696 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a684:	68f9      	ldr	r1, [r7, #12]
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	440b      	add	r3, r1
 800a690:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a694:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bc80      	pop	{r7}
 800a69e:	4770      	bx	lr

0800a6a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6ba:	78fa      	ldrb	r2, [r7, #3]
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7f7 fe2c 	bl	800231c <HAL_PCD_SetAddress>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f880 	bl	800a7d0 <USBD_Get_USB_Status>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b086      	sub	sp, #24
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	72fb      	strb	r3, [r7, #11]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a700:	893b      	ldrh	r3, [r7, #8]
 800a702:	7af9      	ldrb	r1, [r7, #11]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	f7f7 ff30 	bl	800256a <HAL_PCD_EP_Transmit>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	4618      	mov	r0, r3
 800a712:	f000 f85d 	bl	800a7d0 <USBD_Get_USB_Status>
 800a716:	4603      	mov	r3, r0
 800a718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a71a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	461a      	mov	r2, r3
 800a730:	460b      	mov	r3, r1
 800a732:	72fb      	strb	r3, [r7, #11]
 800a734:	4613      	mov	r3, r2
 800a736:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a746:	893b      	ldrh	r3, [r7, #8]
 800a748:	7af9      	ldrb	r1, [r7, #11]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	f7f7 feb9 	bl	80024c2 <HAL_PCD_EP_Receive>
 800a750:	4603      	mov	r3, r0
 800a752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f83a 	bl	800a7d0 <USBD_Get_USB_Status>
 800a75c:	4603      	mov	r3, r0
 800a75e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a760:	7dbb      	ldrb	r3, [r7, #22]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a77c:	78fa      	ldrb	r2, [r7, #3]
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7f7 fedb 	bl	800253c <HAL_PCD_EP_GetRxCount>
 800a786:	4603      	mov	r3, r0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <USBD_static_malloc+0x14>)
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bc80      	pop	{r7}
 800a7a2:	4770      	bx	lr
 800a7a4:	20001364 	.word	0x20001364

0800a7a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]

}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc80      	pop	{r7}
 800a7b8:	4770      	bx	lr

0800a7ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bc80      	pop	{r7}
 800a7ce:	4770      	bx	lr

0800a7d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d817      	bhi.n	800a814 <USBD_Get_USB_Status+0x44>
 800a7e4:	a201      	add	r2, pc, #4	; (adr r2, 800a7ec <USBD_Get_USB_Status+0x1c>)
 800a7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ea:	bf00      	nop
 800a7ec:	0800a7fd 	.word	0x0800a7fd
 800a7f0:	0800a803 	.word	0x0800a803
 800a7f4:	0800a809 	.word	0x0800a809
 800a7f8:	0800a80f 	.word	0x0800a80f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a800:	e00b      	b.n	800a81a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a802:	2302      	movs	r3, #2
 800a804:	73fb      	strb	r3, [r7, #15]
    break;
 800a806:	e008      	b.n	800a81a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a808:	2301      	movs	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	e005      	b.n	800a81a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a80e:	2302      	movs	r3, #2
 800a810:	73fb      	strb	r3, [r7, #15]
    break;
 800a812:	e002      	b.n	800a81a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a814:	2302      	movs	r3, #2
 800a816:	73fb      	strb	r3, [r7, #15]
    break;
 800a818:	bf00      	nop
  }
  return usb_status;
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	bc80      	pop	{r7}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop

0800a828 <__errno>:
 800a828:	4b01      	ldr	r3, [pc, #4]	; (800a830 <__errno+0x8>)
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000184 	.word	0x20000184

0800a834 <__libc_init_array>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	2600      	movs	r6, #0
 800a838:	4d0c      	ldr	r5, [pc, #48]	; (800a86c <__libc_init_array+0x38>)
 800a83a:	4c0d      	ldr	r4, [pc, #52]	; (800a870 <__libc_init_array+0x3c>)
 800a83c:	1b64      	subs	r4, r4, r5
 800a83e:	10a4      	asrs	r4, r4, #2
 800a840:	42a6      	cmp	r6, r4
 800a842:	d109      	bne.n	800a858 <__libc_init_array+0x24>
 800a844:	f000 fc9c 	bl	800b180 <_init>
 800a848:	2600      	movs	r6, #0
 800a84a:	4d0a      	ldr	r5, [pc, #40]	; (800a874 <__libc_init_array+0x40>)
 800a84c:	4c0a      	ldr	r4, [pc, #40]	; (800a878 <__libc_init_array+0x44>)
 800a84e:	1b64      	subs	r4, r4, r5
 800a850:	10a4      	asrs	r4, r4, #2
 800a852:	42a6      	cmp	r6, r4
 800a854:	d105      	bne.n	800a862 <__libc_init_array+0x2e>
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85c:	4798      	blx	r3
 800a85e:	3601      	adds	r6, #1
 800a860:	e7ee      	b.n	800a840 <__libc_init_array+0xc>
 800a862:	f855 3b04 	ldr.w	r3, [r5], #4
 800a866:	4798      	blx	r3
 800a868:	3601      	adds	r6, #1
 800a86a:	e7f2      	b.n	800a852 <__libc_init_array+0x1e>
 800a86c:	0800b254 	.word	0x0800b254
 800a870:	0800b254 	.word	0x0800b254
 800a874:	0800b254 	.word	0x0800b254
 800a878:	0800b258 	.word	0x0800b258

0800a87c <memset>:
 800a87c:	4603      	mov	r3, r0
 800a87e:	4402      	add	r2, r0
 800a880:	4293      	cmp	r3, r2
 800a882:	d100      	bne.n	800a886 <memset+0xa>
 800a884:	4770      	bx	lr
 800a886:	f803 1b01 	strb.w	r1, [r3], #1
 800a88a:	e7f9      	b.n	800a880 <memset+0x4>

0800a88c <siprintf>:
 800a88c:	b40e      	push	{r1, r2, r3}
 800a88e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a892:	b500      	push	{lr}
 800a894:	b09c      	sub	sp, #112	; 0x70
 800a896:	ab1d      	add	r3, sp, #116	; 0x74
 800a898:	9002      	str	r0, [sp, #8]
 800a89a:	9006      	str	r0, [sp, #24]
 800a89c:	9107      	str	r1, [sp, #28]
 800a89e:	9104      	str	r1, [sp, #16]
 800a8a0:	4808      	ldr	r0, [pc, #32]	; (800a8c4 <siprintf+0x38>)
 800a8a2:	4909      	ldr	r1, [pc, #36]	; (800a8c8 <siprintf+0x3c>)
 800a8a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a8:	9105      	str	r1, [sp, #20]
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	a902      	add	r1, sp, #8
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	f000 f868 	bl	800a984 <_svfiprintf_r>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	701a      	strb	r2, [r3, #0]
 800a8ba:	b01c      	add	sp, #112	; 0x70
 800a8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c0:	b003      	add	sp, #12
 800a8c2:	4770      	bx	lr
 800a8c4:	20000184 	.word	0x20000184
 800a8c8:	ffff0208 	.word	0xffff0208

0800a8cc <__ssputs_r>:
 800a8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d0:	688e      	ldr	r6, [r1, #8]
 800a8d2:	4682      	mov	sl, r0
 800a8d4:	429e      	cmp	r6, r3
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4690      	mov	r8, r2
 800a8da:	461f      	mov	r7, r3
 800a8dc:	d838      	bhi.n	800a950 <__ssputs_r+0x84>
 800a8de:	898a      	ldrh	r2, [r1, #12]
 800a8e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8e4:	d032      	beq.n	800a94c <__ssputs_r+0x80>
 800a8e6:	6825      	ldr	r5, [r4, #0]
 800a8e8:	6909      	ldr	r1, [r1, #16]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	eba5 0901 	sub.w	r9, r5, r1
 800a8f0:	6965      	ldr	r5, [r4, #20]
 800a8f2:	444b      	add	r3, r9
 800a8f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a8f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a8fc:	106d      	asrs	r5, r5, #1
 800a8fe:	429d      	cmp	r5, r3
 800a900:	bf38      	it	cc
 800a902:	461d      	movcc	r5, r3
 800a904:	0553      	lsls	r3, r2, #21
 800a906:	d531      	bpl.n	800a96c <__ssputs_r+0xa0>
 800a908:	4629      	mov	r1, r5
 800a90a:	f000 fb6f 	bl	800afec <_malloc_r>
 800a90e:	4606      	mov	r6, r0
 800a910:	b950      	cbnz	r0, 800a928 <__ssputs_r+0x5c>
 800a912:	230c      	movs	r3, #12
 800a914:	f04f 30ff 	mov.w	r0, #4294967295
 800a918:	f8ca 3000 	str.w	r3, [sl]
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a928:	464a      	mov	r2, r9
 800a92a:	6921      	ldr	r1, [r4, #16]
 800a92c:	f000 face 	bl	800aecc <memcpy>
 800a930:	89a3      	ldrh	r3, [r4, #12]
 800a932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a93a:	81a3      	strh	r3, [r4, #12]
 800a93c:	6126      	str	r6, [r4, #16]
 800a93e:	444e      	add	r6, r9
 800a940:	6026      	str	r6, [r4, #0]
 800a942:	463e      	mov	r6, r7
 800a944:	6165      	str	r5, [r4, #20]
 800a946:	eba5 0509 	sub.w	r5, r5, r9
 800a94a:	60a5      	str	r5, [r4, #8]
 800a94c:	42be      	cmp	r6, r7
 800a94e:	d900      	bls.n	800a952 <__ssputs_r+0x86>
 800a950:	463e      	mov	r6, r7
 800a952:	4632      	mov	r2, r6
 800a954:	4641      	mov	r1, r8
 800a956:	6820      	ldr	r0, [r4, #0]
 800a958:	f000 fac6 	bl	800aee8 <memmove>
 800a95c:	68a3      	ldr	r3, [r4, #8]
 800a95e:	2000      	movs	r0, #0
 800a960:	1b9b      	subs	r3, r3, r6
 800a962:	60a3      	str	r3, [r4, #8]
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	4433      	add	r3, r6
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	e7db      	b.n	800a924 <__ssputs_r+0x58>
 800a96c:	462a      	mov	r2, r5
 800a96e:	f000 fbb1 	bl	800b0d4 <_realloc_r>
 800a972:	4606      	mov	r6, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d1e1      	bne.n	800a93c <__ssputs_r+0x70>
 800a978:	4650      	mov	r0, sl
 800a97a:	6921      	ldr	r1, [r4, #16]
 800a97c:	f000 face 	bl	800af1c <_free_r>
 800a980:	e7c7      	b.n	800a912 <__ssputs_r+0x46>
	...

0800a984 <_svfiprintf_r>:
 800a984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a988:	4698      	mov	r8, r3
 800a98a:	898b      	ldrh	r3, [r1, #12]
 800a98c:	4607      	mov	r7, r0
 800a98e:	061b      	lsls	r3, r3, #24
 800a990:	460d      	mov	r5, r1
 800a992:	4614      	mov	r4, r2
 800a994:	b09d      	sub	sp, #116	; 0x74
 800a996:	d50e      	bpl.n	800a9b6 <_svfiprintf_r+0x32>
 800a998:	690b      	ldr	r3, [r1, #16]
 800a99a:	b963      	cbnz	r3, 800a9b6 <_svfiprintf_r+0x32>
 800a99c:	2140      	movs	r1, #64	; 0x40
 800a99e:	f000 fb25 	bl	800afec <_malloc_r>
 800a9a2:	6028      	str	r0, [r5, #0]
 800a9a4:	6128      	str	r0, [r5, #16]
 800a9a6:	b920      	cbnz	r0, 800a9b2 <_svfiprintf_r+0x2e>
 800a9a8:	230c      	movs	r3, #12
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	e0d1      	b.n	800ab56 <_svfiprintf_r+0x1d2>
 800a9b2:	2340      	movs	r3, #64	; 0x40
 800a9b4:	616b      	str	r3, [r5, #20]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ba:	2320      	movs	r3, #32
 800a9bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9c0:	2330      	movs	r3, #48	; 0x30
 800a9c2:	f04f 0901 	mov.w	r9, #1
 800a9c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab70 <_svfiprintf_r+0x1ec>
 800a9ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9d2:	4623      	mov	r3, r4
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9da:	b10a      	cbz	r2, 800a9e0 <_svfiprintf_r+0x5c>
 800a9dc:	2a25      	cmp	r2, #37	; 0x25
 800a9de:	d1f9      	bne.n	800a9d4 <_svfiprintf_r+0x50>
 800a9e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e4:	d00b      	beq.n	800a9fe <_svfiprintf_r+0x7a>
 800a9e6:	465b      	mov	r3, fp
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	4638      	mov	r0, r7
 800a9ee:	f7ff ff6d 	bl	800a8cc <__ssputs_r>
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	f000 80aa 	beq.w	800ab4c <_svfiprintf_r+0x1c8>
 800a9f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9fa:	445a      	add	r2, fp
 800a9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 80a2 	beq.w	800ab4c <_svfiprintf_r+0x1c8>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa12:	f10a 0a01 	add.w	sl, sl, #1
 800aa16:	9304      	str	r3, [sp, #16]
 800aa18:	9307      	str	r3, [sp, #28]
 800aa1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa1e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa20:	4654      	mov	r4, sl
 800aa22:	2205      	movs	r2, #5
 800aa24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa28:	4851      	ldr	r0, [pc, #324]	; (800ab70 <_svfiprintf_r+0x1ec>)
 800aa2a:	f000 fa41 	bl	800aeb0 <memchr>
 800aa2e:	9a04      	ldr	r2, [sp, #16]
 800aa30:	b9d8      	cbnz	r0, 800aa6a <_svfiprintf_r+0xe6>
 800aa32:	06d0      	lsls	r0, r2, #27
 800aa34:	bf44      	itt	mi
 800aa36:	2320      	movmi	r3, #32
 800aa38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa3c:	0711      	lsls	r1, r2, #28
 800aa3e:	bf44      	itt	mi
 800aa40:	232b      	movmi	r3, #43	; 0x2b
 800aa42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa46:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa4c:	d015      	beq.n	800aa7a <_svfiprintf_r+0xf6>
 800aa4e:	4654      	mov	r4, sl
 800aa50:	2000      	movs	r0, #0
 800aa52:	f04f 0c0a 	mov.w	ip, #10
 800aa56:	9a07      	ldr	r2, [sp, #28]
 800aa58:	4621      	mov	r1, r4
 800aa5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa5e:	3b30      	subs	r3, #48	; 0x30
 800aa60:	2b09      	cmp	r3, #9
 800aa62:	d94e      	bls.n	800ab02 <_svfiprintf_r+0x17e>
 800aa64:	b1b0      	cbz	r0, 800aa94 <_svfiprintf_r+0x110>
 800aa66:	9207      	str	r2, [sp, #28]
 800aa68:	e014      	b.n	800aa94 <_svfiprintf_r+0x110>
 800aa6a:	eba0 0308 	sub.w	r3, r0, r8
 800aa6e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa72:	4313      	orrs	r3, r2
 800aa74:	46a2      	mov	sl, r4
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	e7d2      	b.n	800aa20 <_svfiprintf_r+0x9c>
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	1d19      	adds	r1, r3, #4
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	9103      	str	r1, [sp, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bfbb      	ittet	lt
 800aa86:	425b      	neglt	r3, r3
 800aa88:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8c:	9307      	strge	r3, [sp, #28]
 800aa8e:	9307      	strlt	r3, [sp, #28]
 800aa90:	bfb8      	it	lt
 800aa92:	9204      	strlt	r2, [sp, #16]
 800aa94:	7823      	ldrb	r3, [r4, #0]
 800aa96:	2b2e      	cmp	r3, #46	; 0x2e
 800aa98:	d10c      	bne.n	800aab4 <_svfiprintf_r+0x130>
 800aa9a:	7863      	ldrb	r3, [r4, #1]
 800aa9c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa9e:	d135      	bne.n	800ab0c <_svfiprintf_r+0x188>
 800aaa0:	9b03      	ldr	r3, [sp, #12]
 800aaa2:	3402      	adds	r4, #2
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	9203      	str	r2, [sp, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bfb8      	it	lt
 800aaae:	f04f 33ff 	movlt.w	r3, #4294967295
 800aab2:	9305      	str	r3, [sp, #20]
 800aab4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ab74 <_svfiprintf_r+0x1f0>
 800aab8:	2203      	movs	r2, #3
 800aaba:	4650      	mov	r0, sl
 800aabc:	7821      	ldrb	r1, [r4, #0]
 800aabe:	f000 f9f7 	bl	800aeb0 <memchr>
 800aac2:	b140      	cbz	r0, 800aad6 <_svfiprintf_r+0x152>
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	eba0 000a 	sub.w	r0, r0, sl
 800aaca:	fa03 f000 	lsl.w	r0, r3, r0
 800aace:	9b04      	ldr	r3, [sp, #16]
 800aad0:	3401      	adds	r4, #1
 800aad2:	4303      	orrs	r3, r0
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aada:	2206      	movs	r2, #6
 800aadc:	4826      	ldr	r0, [pc, #152]	; (800ab78 <_svfiprintf_r+0x1f4>)
 800aade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aae2:	f000 f9e5 	bl	800aeb0 <memchr>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d038      	beq.n	800ab5c <_svfiprintf_r+0x1d8>
 800aaea:	4b24      	ldr	r3, [pc, #144]	; (800ab7c <_svfiprintf_r+0x1f8>)
 800aaec:	bb1b      	cbnz	r3, 800ab36 <_svfiprintf_r+0x1b2>
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	3307      	adds	r3, #7
 800aaf2:	f023 0307 	bic.w	r3, r3, #7
 800aaf6:	3308      	adds	r3, #8
 800aaf8:	9303      	str	r3, [sp, #12]
 800aafa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aafc:	4433      	add	r3, r6
 800aafe:	9309      	str	r3, [sp, #36]	; 0x24
 800ab00:	e767      	b.n	800a9d2 <_svfiprintf_r+0x4e>
 800ab02:	460c      	mov	r4, r1
 800ab04:	2001      	movs	r0, #1
 800ab06:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab0a:	e7a5      	b.n	800aa58 <_svfiprintf_r+0xd4>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f04f 0c0a 	mov.w	ip, #10
 800ab12:	4619      	mov	r1, r3
 800ab14:	3401      	adds	r4, #1
 800ab16:	9305      	str	r3, [sp, #20]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1e:	3a30      	subs	r2, #48	; 0x30
 800ab20:	2a09      	cmp	r2, #9
 800ab22:	d903      	bls.n	800ab2c <_svfiprintf_r+0x1a8>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0c5      	beq.n	800aab4 <_svfiprintf_r+0x130>
 800ab28:	9105      	str	r1, [sp, #20]
 800ab2a:	e7c3      	b.n	800aab4 <_svfiprintf_r+0x130>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	2301      	movs	r3, #1
 800ab30:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab34:	e7f0      	b.n	800ab18 <_svfiprintf_r+0x194>
 800ab36:	ab03      	add	r3, sp, #12
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	462a      	mov	r2, r5
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <_svfiprintf_r+0x1fc>)
 800ab40:	a904      	add	r1, sp, #16
 800ab42:	f3af 8000 	nop.w
 800ab46:	1c42      	adds	r2, r0, #1
 800ab48:	4606      	mov	r6, r0
 800ab4a:	d1d6      	bne.n	800aafa <_svfiprintf_r+0x176>
 800ab4c:	89ab      	ldrh	r3, [r5, #12]
 800ab4e:	065b      	lsls	r3, r3, #25
 800ab50:	f53f af2c 	bmi.w	800a9ac <_svfiprintf_r+0x28>
 800ab54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab56:	b01d      	add	sp, #116	; 0x74
 800ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab5c:	ab03      	add	r3, sp, #12
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	462a      	mov	r2, r5
 800ab62:	4638      	mov	r0, r7
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <_svfiprintf_r+0x1fc>)
 800ab66:	a904      	add	r1, sp, #16
 800ab68:	f000 f87c 	bl	800ac64 <_printf_i>
 800ab6c:	e7eb      	b.n	800ab46 <_svfiprintf_r+0x1c2>
 800ab6e:	bf00      	nop
 800ab70:	0800b220 	.word	0x0800b220
 800ab74:	0800b226 	.word	0x0800b226
 800ab78:	0800b22a 	.word	0x0800b22a
 800ab7c:	00000000 	.word	0x00000000
 800ab80:	0800a8cd 	.word	0x0800a8cd

0800ab84 <_printf_common>:
 800ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	4616      	mov	r6, r2
 800ab8a:	4699      	mov	r9, r3
 800ab8c:	688a      	ldr	r2, [r1, #8]
 800ab8e:	690b      	ldr	r3, [r1, #16]
 800ab90:	4607      	mov	r7, r0
 800ab92:	4293      	cmp	r3, r2
 800ab94:	bfb8      	it	lt
 800ab96:	4613      	movlt	r3, r2
 800ab98:	6033      	str	r3, [r6, #0]
 800ab9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab9e:	460c      	mov	r4, r1
 800aba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aba4:	b10a      	cbz	r2, 800abaa <_printf_common+0x26>
 800aba6:	3301      	adds	r3, #1
 800aba8:	6033      	str	r3, [r6, #0]
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	0699      	lsls	r1, r3, #26
 800abae:	bf42      	ittt	mi
 800abb0:	6833      	ldrmi	r3, [r6, #0]
 800abb2:	3302      	addmi	r3, #2
 800abb4:	6033      	strmi	r3, [r6, #0]
 800abb6:	6825      	ldr	r5, [r4, #0]
 800abb8:	f015 0506 	ands.w	r5, r5, #6
 800abbc:	d106      	bne.n	800abcc <_printf_common+0x48>
 800abbe:	f104 0a19 	add.w	sl, r4, #25
 800abc2:	68e3      	ldr	r3, [r4, #12]
 800abc4:	6832      	ldr	r2, [r6, #0]
 800abc6:	1a9b      	subs	r3, r3, r2
 800abc8:	42ab      	cmp	r3, r5
 800abca:	dc28      	bgt.n	800ac1e <_printf_common+0x9a>
 800abcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abd0:	1e13      	subs	r3, r2, #0
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	bf18      	it	ne
 800abd6:	2301      	movne	r3, #1
 800abd8:	0692      	lsls	r2, r2, #26
 800abda:	d42d      	bmi.n	800ac38 <_printf_common+0xb4>
 800abdc:	4649      	mov	r1, r9
 800abde:	4638      	mov	r0, r7
 800abe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abe4:	47c0      	blx	r8
 800abe6:	3001      	adds	r0, #1
 800abe8:	d020      	beq.n	800ac2c <_printf_common+0xa8>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	68e5      	ldr	r5, [r4, #12]
 800abee:	f003 0306 	and.w	r3, r3, #6
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	bf18      	it	ne
 800abf6:	2500      	movne	r5, #0
 800abf8:	6832      	ldr	r2, [r6, #0]
 800abfa:	f04f 0600 	mov.w	r6, #0
 800abfe:	68a3      	ldr	r3, [r4, #8]
 800ac00:	bf08      	it	eq
 800ac02:	1aad      	subeq	r5, r5, r2
 800ac04:	6922      	ldr	r2, [r4, #16]
 800ac06:	bf08      	it	eq
 800ac08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	bfc4      	itt	gt
 800ac10:	1a9b      	subgt	r3, r3, r2
 800ac12:	18ed      	addgt	r5, r5, r3
 800ac14:	341a      	adds	r4, #26
 800ac16:	42b5      	cmp	r5, r6
 800ac18:	d11a      	bne.n	800ac50 <_printf_common+0xcc>
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e008      	b.n	800ac30 <_printf_common+0xac>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4652      	mov	r2, sl
 800ac22:	4649      	mov	r1, r9
 800ac24:	4638      	mov	r0, r7
 800ac26:	47c0      	blx	r8
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d103      	bne.n	800ac34 <_printf_common+0xb0>
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac34:	3501      	adds	r5, #1
 800ac36:	e7c4      	b.n	800abc2 <_printf_common+0x3e>
 800ac38:	2030      	movs	r0, #48	; 0x30
 800ac3a:	18e1      	adds	r1, r4, r3
 800ac3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac46:	4422      	add	r2, r4
 800ac48:	3302      	adds	r3, #2
 800ac4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac4e:	e7c5      	b.n	800abdc <_printf_common+0x58>
 800ac50:	2301      	movs	r3, #1
 800ac52:	4622      	mov	r2, r4
 800ac54:	4649      	mov	r1, r9
 800ac56:	4638      	mov	r0, r7
 800ac58:	47c0      	blx	r8
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d0e6      	beq.n	800ac2c <_printf_common+0xa8>
 800ac5e:	3601      	adds	r6, #1
 800ac60:	e7d9      	b.n	800ac16 <_printf_common+0x92>
	...

0800ac64 <_printf_i>:
 800ac64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	7e0f      	ldrb	r7, [r1, #24]
 800ac6a:	4691      	mov	r9, r2
 800ac6c:	2f78      	cmp	r7, #120	; 0x78
 800ac6e:	4680      	mov	r8, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	469a      	mov	sl, r3
 800ac74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac7a:	d807      	bhi.n	800ac8c <_printf_i+0x28>
 800ac7c:	2f62      	cmp	r7, #98	; 0x62
 800ac7e:	d80a      	bhi.n	800ac96 <_printf_i+0x32>
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	f000 80d9 	beq.w	800ae38 <_printf_i+0x1d4>
 800ac86:	2f58      	cmp	r7, #88	; 0x58
 800ac88:	f000 80a4 	beq.w	800add4 <_printf_i+0x170>
 800ac8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac94:	e03a      	b.n	800ad0c <_printf_i+0xa8>
 800ac96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac9a:	2b15      	cmp	r3, #21
 800ac9c:	d8f6      	bhi.n	800ac8c <_printf_i+0x28>
 800ac9e:	a101      	add	r1, pc, #4	; (adr r1, 800aca4 <_printf_i+0x40>)
 800aca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aca4:	0800acfd 	.word	0x0800acfd
 800aca8:	0800ad11 	.word	0x0800ad11
 800acac:	0800ac8d 	.word	0x0800ac8d
 800acb0:	0800ac8d 	.word	0x0800ac8d
 800acb4:	0800ac8d 	.word	0x0800ac8d
 800acb8:	0800ac8d 	.word	0x0800ac8d
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ac8d 	.word	0x0800ac8d
 800acc4:	0800ac8d 	.word	0x0800ac8d
 800acc8:	0800ac8d 	.word	0x0800ac8d
 800accc:	0800ac8d 	.word	0x0800ac8d
 800acd0:	0800ae1f 	.word	0x0800ae1f
 800acd4:	0800ad41 	.word	0x0800ad41
 800acd8:	0800ae01 	.word	0x0800ae01
 800acdc:	0800ac8d 	.word	0x0800ac8d
 800ace0:	0800ac8d 	.word	0x0800ac8d
 800ace4:	0800ae41 	.word	0x0800ae41
 800ace8:	0800ac8d 	.word	0x0800ac8d
 800acec:	0800ad41 	.word	0x0800ad41
 800acf0:	0800ac8d 	.word	0x0800ac8d
 800acf4:	0800ac8d 	.word	0x0800ac8d
 800acf8:	0800ae09 	.word	0x0800ae09
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	602a      	str	r2, [r5, #0]
 800ad04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0a4      	b.n	800ae5a <_printf_i+0x1f6>
 800ad10:	6820      	ldr	r0, [r4, #0]
 800ad12:	6829      	ldr	r1, [r5, #0]
 800ad14:	0606      	lsls	r6, r0, #24
 800ad16:	f101 0304 	add.w	r3, r1, #4
 800ad1a:	d50a      	bpl.n	800ad32 <_printf_i+0xce>
 800ad1c:	680e      	ldr	r6, [r1, #0]
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	2e00      	cmp	r6, #0
 800ad22:	da03      	bge.n	800ad2c <_printf_i+0xc8>
 800ad24:	232d      	movs	r3, #45	; 0x2d
 800ad26:	4276      	negs	r6, r6
 800ad28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad2c:	230a      	movs	r3, #10
 800ad2e:	485e      	ldr	r0, [pc, #376]	; (800aea8 <_printf_i+0x244>)
 800ad30:	e019      	b.n	800ad66 <_printf_i+0x102>
 800ad32:	680e      	ldr	r6, [r1, #0]
 800ad34:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	bf18      	it	ne
 800ad3c:	b236      	sxthne	r6, r6
 800ad3e:	e7ef      	b.n	800ad20 <_printf_i+0xbc>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	6820      	ldr	r0, [r4, #0]
 800ad44:	1d19      	adds	r1, r3, #4
 800ad46:	6029      	str	r1, [r5, #0]
 800ad48:	0601      	lsls	r1, r0, #24
 800ad4a:	d501      	bpl.n	800ad50 <_printf_i+0xec>
 800ad4c:	681e      	ldr	r6, [r3, #0]
 800ad4e:	e002      	b.n	800ad56 <_printf_i+0xf2>
 800ad50:	0646      	lsls	r6, r0, #25
 800ad52:	d5fb      	bpl.n	800ad4c <_printf_i+0xe8>
 800ad54:	881e      	ldrh	r6, [r3, #0]
 800ad56:	2f6f      	cmp	r7, #111	; 0x6f
 800ad58:	bf0c      	ite	eq
 800ad5a:	2308      	moveq	r3, #8
 800ad5c:	230a      	movne	r3, #10
 800ad5e:	4852      	ldr	r0, [pc, #328]	; (800aea8 <_printf_i+0x244>)
 800ad60:	2100      	movs	r1, #0
 800ad62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad66:	6865      	ldr	r5, [r4, #4]
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	bfa8      	it	ge
 800ad6c:	6821      	ldrge	r1, [r4, #0]
 800ad6e:	60a5      	str	r5, [r4, #8]
 800ad70:	bfa4      	itt	ge
 800ad72:	f021 0104 	bicge.w	r1, r1, #4
 800ad76:	6021      	strge	r1, [r4, #0]
 800ad78:	b90e      	cbnz	r6, 800ad7e <_printf_i+0x11a>
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	d04d      	beq.n	800ae1a <_printf_i+0x1b6>
 800ad7e:	4615      	mov	r5, r2
 800ad80:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad84:	fb03 6711 	mls	r7, r3, r1, r6
 800ad88:	5dc7      	ldrb	r7, [r0, r7]
 800ad8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad8e:	4637      	mov	r7, r6
 800ad90:	42bb      	cmp	r3, r7
 800ad92:	460e      	mov	r6, r1
 800ad94:	d9f4      	bls.n	800ad80 <_printf_i+0x11c>
 800ad96:	2b08      	cmp	r3, #8
 800ad98:	d10b      	bne.n	800adb2 <_printf_i+0x14e>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07de      	lsls	r6, r3, #31
 800ad9e:	d508      	bpl.n	800adb2 <_printf_i+0x14e>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	6861      	ldr	r1, [r4, #4]
 800ada4:	4299      	cmp	r1, r3
 800ada6:	bfde      	ittt	le
 800ada8:	2330      	movle	r3, #48	; 0x30
 800adaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adb2:	1b52      	subs	r2, r2, r5
 800adb4:	6122      	str	r2, [r4, #16]
 800adb6:	464b      	mov	r3, r9
 800adb8:	4621      	mov	r1, r4
 800adba:	4640      	mov	r0, r8
 800adbc:	f8cd a000 	str.w	sl, [sp]
 800adc0:	aa03      	add	r2, sp, #12
 800adc2:	f7ff fedf 	bl	800ab84 <_printf_common>
 800adc6:	3001      	adds	r0, #1
 800adc8:	d14c      	bne.n	800ae64 <_printf_i+0x200>
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	b004      	add	sp, #16
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	4834      	ldr	r0, [pc, #208]	; (800aea8 <_printf_i+0x244>)
 800add6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800adda:	6829      	ldr	r1, [r5, #0]
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f851 6b04 	ldr.w	r6, [r1], #4
 800ade2:	6029      	str	r1, [r5, #0]
 800ade4:	061d      	lsls	r5, r3, #24
 800ade6:	d514      	bpl.n	800ae12 <_printf_i+0x1ae>
 800ade8:	07df      	lsls	r7, r3, #31
 800adea:	bf44      	itt	mi
 800adec:	f043 0320 	orrmi.w	r3, r3, #32
 800adf0:	6023      	strmi	r3, [r4, #0]
 800adf2:	b91e      	cbnz	r6, 800adfc <_printf_i+0x198>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	f023 0320 	bic.w	r3, r3, #32
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	2310      	movs	r3, #16
 800adfe:	e7af      	b.n	800ad60 <_printf_i+0xfc>
 800ae00:	6823      	ldr	r3, [r4, #0]
 800ae02:	f043 0320 	orr.w	r3, r3, #32
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	2378      	movs	r3, #120	; 0x78
 800ae0a:	4828      	ldr	r0, [pc, #160]	; (800aeac <_printf_i+0x248>)
 800ae0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae10:	e7e3      	b.n	800adda <_printf_i+0x176>
 800ae12:	0659      	lsls	r1, r3, #25
 800ae14:	bf48      	it	mi
 800ae16:	b2b6      	uxthmi	r6, r6
 800ae18:	e7e6      	b.n	800ade8 <_printf_i+0x184>
 800ae1a:	4615      	mov	r5, r2
 800ae1c:	e7bb      	b.n	800ad96 <_printf_i+0x132>
 800ae1e:	682b      	ldr	r3, [r5, #0]
 800ae20:	6826      	ldr	r6, [r4, #0]
 800ae22:	1d18      	adds	r0, r3, #4
 800ae24:	6961      	ldr	r1, [r4, #20]
 800ae26:	6028      	str	r0, [r5, #0]
 800ae28:	0635      	lsls	r5, r6, #24
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	d501      	bpl.n	800ae32 <_printf_i+0x1ce>
 800ae2e:	6019      	str	r1, [r3, #0]
 800ae30:	e002      	b.n	800ae38 <_printf_i+0x1d4>
 800ae32:	0670      	lsls	r0, r6, #25
 800ae34:	d5fb      	bpl.n	800ae2e <_printf_i+0x1ca>
 800ae36:	8019      	strh	r1, [r3, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4615      	mov	r5, r2
 800ae3c:	6123      	str	r3, [r4, #16]
 800ae3e:	e7ba      	b.n	800adb6 <_printf_i+0x152>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	2100      	movs	r1, #0
 800ae44:	1d1a      	adds	r2, r3, #4
 800ae46:	602a      	str	r2, [r5, #0]
 800ae48:	681d      	ldr	r5, [r3, #0]
 800ae4a:	6862      	ldr	r2, [r4, #4]
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f000 f82f 	bl	800aeb0 <memchr>
 800ae52:	b108      	cbz	r0, 800ae58 <_printf_i+0x1f4>
 800ae54:	1b40      	subs	r0, r0, r5
 800ae56:	6060      	str	r0, [r4, #4]
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	6123      	str	r3, [r4, #16]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae62:	e7a8      	b.n	800adb6 <_printf_i+0x152>
 800ae64:	462a      	mov	r2, r5
 800ae66:	4649      	mov	r1, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	47d0      	blx	sl
 800ae6e:	3001      	adds	r0, #1
 800ae70:	d0ab      	beq.n	800adca <_printf_i+0x166>
 800ae72:	6823      	ldr	r3, [r4, #0]
 800ae74:	079b      	lsls	r3, r3, #30
 800ae76:	d413      	bmi.n	800aea0 <_printf_i+0x23c>
 800ae78:	68e0      	ldr	r0, [r4, #12]
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	4298      	cmp	r0, r3
 800ae7e:	bfb8      	it	lt
 800ae80:	4618      	movlt	r0, r3
 800ae82:	e7a4      	b.n	800adce <_printf_i+0x16a>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4632      	mov	r2, r6
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	47d0      	blx	sl
 800ae8e:	3001      	adds	r0, #1
 800ae90:	d09b      	beq.n	800adca <_printf_i+0x166>
 800ae92:	3501      	adds	r5, #1
 800ae94:	68e3      	ldr	r3, [r4, #12]
 800ae96:	9903      	ldr	r1, [sp, #12]
 800ae98:	1a5b      	subs	r3, r3, r1
 800ae9a:	42ab      	cmp	r3, r5
 800ae9c:	dcf2      	bgt.n	800ae84 <_printf_i+0x220>
 800ae9e:	e7eb      	b.n	800ae78 <_printf_i+0x214>
 800aea0:	2500      	movs	r5, #0
 800aea2:	f104 0619 	add.w	r6, r4, #25
 800aea6:	e7f5      	b.n	800ae94 <_printf_i+0x230>
 800aea8:	0800b231 	.word	0x0800b231
 800aeac:	0800b242 	.word	0x0800b242

0800aeb0 <memchr>:
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	b2c9      	uxtb	r1, r1
 800aeb6:	4402      	add	r2, r0
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	d101      	bne.n	800aec2 <memchr+0x12>
 800aebe:	2000      	movs	r0, #0
 800aec0:	e003      	b.n	800aeca <memchr+0x1a>
 800aec2:	7804      	ldrb	r4, [r0, #0]
 800aec4:	3301      	adds	r3, #1
 800aec6:	428c      	cmp	r4, r1
 800aec8:	d1f6      	bne.n	800aeb8 <memchr+0x8>
 800aeca:	bd10      	pop	{r4, pc}

0800aecc <memcpy>:
 800aecc:	440a      	add	r2, r1
 800aece:	4291      	cmp	r1, r2
 800aed0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aed4:	d100      	bne.n	800aed8 <memcpy+0xc>
 800aed6:	4770      	bx	lr
 800aed8:	b510      	push	{r4, lr}
 800aeda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aede:	4291      	cmp	r1, r2
 800aee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aee4:	d1f9      	bne.n	800aeda <memcpy+0xe>
 800aee6:	bd10      	pop	{r4, pc}

0800aee8 <memmove>:
 800aee8:	4288      	cmp	r0, r1
 800aeea:	b510      	push	{r4, lr}
 800aeec:	eb01 0402 	add.w	r4, r1, r2
 800aef0:	d902      	bls.n	800aef8 <memmove+0x10>
 800aef2:	4284      	cmp	r4, r0
 800aef4:	4623      	mov	r3, r4
 800aef6:	d807      	bhi.n	800af08 <memmove+0x20>
 800aef8:	1e43      	subs	r3, r0, #1
 800aefa:	42a1      	cmp	r1, r4
 800aefc:	d008      	beq.n	800af10 <memmove+0x28>
 800aefe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af06:	e7f8      	b.n	800aefa <memmove+0x12>
 800af08:	4601      	mov	r1, r0
 800af0a:	4402      	add	r2, r0
 800af0c:	428a      	cmp	r2, r1
 800af0e:	d100      	bne.n	800af12 <memmove+0x2a>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af1a:	e7f7      	b.n	800af0c <memmove+0x24>

0800af1c <_free_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4605      	mov	r5, r0
 800af20:	2900      	cmp	r1, #0
 800af22:	d040      	beq.n	800afa6 <_free_r+0x8a>
 800af24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af28:	1f0c      	subs	r4, r1, #4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	bfb8      	it	lt
 800af2e:	18e4      	addlt	r4, r4, r3
 800af30:	f000 f910 	bl	800b154 <__malloc_lock>
 800af34:	4a1c      	ldr	r2, [pc, #112]	; (800afa8 <_free_r+0x8c>)
 800af36:	6813      	ldr	r3, [r2, #0]
 800af38:	b933      	cbnz	r3, 800af48 <_free_r+0x2c>
 800af3a:	6063      	str	r3, [r4, #4]
 800af3c:	6014      	str	r4, [r2, #0]
 800af3e:	4628      	mov	r0, r5
 800af40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af44:	f000 b90c 	b.w	800b160 <__malloc_unlock>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d908      	bls.n	800af5e <_free_r+0x42>
 800af4c:	6820      	ldr	r0, [r4, #0]
 800af4e:	1821      	adds	r1, r4, r0
 800af50:	428b      	cmp	r3, r1
 800af52:	bf01      	itttt	eq
 800af54:	6819      	ldreq	r1, [r3, #0]
 800af56:	685b      	ldreq	r3, [r3, #4]
 800af58:	1809      	addeq	r1, r1, r0
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	e7ed      	b.n	800af3a <_free_r+0x1e>
 800af5e:	461a      	mov	r2, r3
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	b10b      	cbz	r3, 800af68 <_free_r+0x4c>
 800af64:	42a3      	cmp	r3, r4
 800af66:	d9fa      	bls.n	800af5e <_free_r+0x42>
 800af68:	6811      	ldr	r1, [r2, #0]
 800af6a:	1850      	adds	r0, r2, r1
 800af6c:	42a0      	cmp	r0, r4
 800af6e:	d10b      	bne.n	800af88 <_free_r+0x6c>
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	4401      	add	r1, r0
 800af74:	1850      	adds	r0, r2, r1
 800af76:	4283      	cmp	r3, r0
 800af78:	6011      	str	r1, [r2, #0]
 800af7a:	d1e0      	bne.n	800af3e <_free_r+0x22>
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	4401      	add	r1, r0
 800af82:	6011      	str	r1, [r2, #0]
 800af84:	6053      	str	r3, [r2, #4]
 800af86:	e7da      	b.n	800af3e <_free_r+0x22>
 800af88:	d902      	bls.n	800af90 <_free_r+0x74>
 800af8a:	230c      	movs	r3, #12
 800af8c:	602b      	str	r3, [r5, #0]
 800af8e:	e7d6      	b.n	800af3e <_free_r+0x22>
 800af90:	6820      	ldr	r0, [r4, #0]
 800af92:	1821      	adds	r1, r4, r0
 800af94:	428b      	cmp	r3, r1
 800af96:	bf01      	itttt	eq
 800af98:	6819      	ldreq	r1, [r3, #0]
 800af9a:	685b      	ldreq	r3, [r3, #4]
 800af9c:	1809      	addeq	r1, r1, r0
 800af9e:	6021      	streq	r1, [r4, #0]
 800afa0:	6063      	str	r3, [r4, #4]
 800afa2:	6054      	str	r4, [r2, #4]
 800afa4:	e7cb      	b.n	800af3e <_free_r+0x22>
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20001584 	.word	0x20001584

0800afac <sbrk_aligned>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4e0e      	ldr	r6, [pc, #56]	; (800afe8 <sbrk_aligned+0x3c>)
 800afb0:	460c      	mov	r4, r1
 800afb2:	6831      	ldr	r1, [r6, #0]
 800afb4:	4605      	mov	r5, r0
 800afb6:	b911      	cbnz	r1, 800afbe <sbrk_aligned+0x12>
 800afb8:	f000 f8bc 	bl	800b134 <_sbrk_r>
 800afbc:	6030      	str	r0, [r6, #0]
 800afbe:	4621      	mov	r1, r4
 800afc0:	4628      	mov	r0, r5
 800afc2:	f000 f8b7 	bl	800b134 <_sbrk_r>
 800afc6:	1c43      	adds	r3, r0, #1
 800afc8:	d00a      	beq.n	800afe0 <sbrk_aligned+0x34>
 800afca:	1cc4      	adds	r4, r0, #3
 800afcc:	f024 0403 	bic.w	r4, r4, #3
 800afd0:	42a0      	cmp	r0, r4
 800afd2:	d007      	beq.n	800afe4 <sbrk_aligned+0x38>
 800afd4:	1a21      	subs	r1, r4, r0
 800afd6:	4628      	mov	r0, r5
 800afd8:	f000 f8ac 	bl	800b134 <_sbrk_r>
 800afdc:	3001      	adds	r0, #1
 800afde:	d101      	bne.n	800afe4 <sbrk_aligned+0x38>
 800afe0:	f04f 34ff 	mov.w	r4, #4294967295
 800afe4:	4620      	mov	r0, r4
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	20001588 	.word	0x20001588

0800afec <_malloc_r>:
 800afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff0:	1ccd      	adds	r5, r1, #3
 800aff2:	f025 0503 	bic.w	r5, r5, #3
 800aff6:	3508      	adds	r5, #8
 800aff8:	2d0c      	cmp	r5, #12
 800affa:	bf38      	it	cc
 800affc:	250c      	movcc	r5, #12
 800affe:	2d00      	cmp	r5, #0
 800b000:	4607      	mov	r7, r0
 800b002:	db01      	blt.n	800b008 <_malloc_r+0x1c>
 800b004:	42a9      	cmp	r1, r5
 800b006:	d905      	bls.n	800b014 <_malloc_r+0x28>
 800b008:	230c      	movs	r3, #12
 800b00a:	2600      	movs	r6, #0
 800b00c:	603b      	str	r3, [r7, #0]
 800b00e:	4630      	mov	r0, r6
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	4e2e      	ldr	r6, [pc, #184]	; (800b0d0 <_malloc_r+0xe4>)
 800b016:	f000 f89d 	bl	800b154 <__malloc_lock>
 800b01a:	6833      	ldr	r3, [r6, #0]
 800b01c:	461c      	mov	r4, r3
 800b01e:	bb34      	cbnz	r4, 800b06e <_malloc_r+0x82>
 800b020:	4629      	mov	r1, r5
 800b022:	4638      	mov	r0, r7
 800b024:	f7ff ffc2 	bl	800afac <sbrk_aligned>
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	4604      	mov	r4, r0
 800b02c:	d14d      	bne.n	800b0ca <_malloc_r+0xde>
 800b02e:	6834      	ldr	r4, [r6, #0]
 800b030:	4626      	mov	r6, r4
 800b032:	2e00      	cmp	r6, #0
 800b034:	d140      	bne.n	800b0b8 <_malloc_r+0xcc>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	4631      	mov	r1, r6
 800b03a:	4638      	mov	r0, r7
 800b03c:	eb04 0803 	add.w	r8, r4, r3
 800b040:	f000 f878 	bl	800b134 <_sbrk_r>
 800b044:	4580      	cmp	r8, r0
 800b046:	d13a      	bne.n	800b0be <_malloc_r+0xd2>
 800b048:	6821      	ldr	r1, [r4, #0]
 800b04a:	3503      	adds	r5, #3
 800b04c:	1a6d      	subs	r5, r5, r1
 800b04e:	f025 0503 	bic.w	r5, r5, #3
 800b052:	3508      	adds	r5, #8
 800b054:	2d0c      	cmp	r5, #12
 800b056:	bf38      	it	cc
 800b058:	250c      	movcc	r5, #12
 800b05a:	4638      	mov	r0, r7
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7ff ffa5 	bl	800afac <sbrk_aligned>
 800b062:	3001      	adds	r0, #1
 800b064:	d02b      	beq.n	800b0be <_malloc_r+0xd2>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	442b      	add	r3, r5
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	e00e      	b.n	800b08c <_malloc_r+0xa0>
 800b06e:	6822      	ldr	r2, [r4, #0]
 800b070:	1b52      	subs	r2, r2, r5
 800b072:	d41e      	bmi.n	800b0b2 <_malloc_r+0xc6>
 800b074:	2a0b      	cmp	r2, #11
 800b076:	d916      	bls.n	800b0a6 <_malloc_r+0xba>
 800b078:	1961      	adds	r1, r4, r5
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	6025      	str	r5, [r4, #0]
 800b07e:	bf18      	it	ne
 800b080:	6059      	strne	r1, [r3, #4]
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	bf08      	it	eq
 800b086:	6031      	streq	r1, [r6, #0]
 800b088:	5162      	str	r2, [r4, r5]
 800b08a:	604b      	str	r3, [r1, #4]
 800b08c:	4638      	mov	r0, r7
 800b08e:	f104 060b 	add.w	r6, r4, #11
 800b092:	f000 f865 	bl	800b160 <__malloc_unlock>
 800b096:	f026 0607 	bic.w	r6, r6, #7
 800b09a:	1d23      	adds	r3, r4, #4
 800b09c:	1af2      	subs	r2, r6, r3
 800b09e:	d0b6      	beq.n	800b00e <_malloc_r+0x22>
 800b0a0:	1b9b      	subs	r3, r3, r6
 800b0a2:	50a3      	str	r3, [r4, r2]
 800b0a4:	e7b3      	b.n	800b00e <_malloc_r+0x22>
 800b0a6:	6862      	ldr	r2, [r4, #4]
 800b0a8:	42a3      	cmp	r3, r4
 800b0aa:	bf0c      	ite	eq
 800b0ac:	6032      	streq	r2, [r6, #0]
 800b0ae:	605a      	strne	r2, [r3, #4]
 800b0b0:	e7ec      	b.n	800b08c <_malloc_r+0xa0>
 800b0b2:	4623      	mov	r3, r4
 800b0b4:	6864      	ldr	r4, [r4, #4]
 800b0b6:	e7b2      	b.n	800b01e <_malloc_r+0x32>
 800b0b8:	4634      	mov	r4, r6
 800b0ba:	6876      	ldr	r6, [r6, #4]
 800b0bc:	e7b9      	b.n	800b032 <_malloc_r+0x46>
 800b0be:	230c      	movs	r3, #12
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	f000 f84c 	bl	800b160 <__malloc_unlock>
 800b0c8:	e7a1      	b.n	800b00e <_malloc_r+0x22>
 800b0ca:	6025      	str	r5, [r4, #0]
 800b0cc:	e7de      	b.n	800b08c <_malloc_r+0xa0>
 800b0ce:	bf00      	nop
 800b0d0:	20001584 	.word	0x20001584

0800b0d4 <_realloc_r>:
 800b0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d8:	4680      	mov	r8, r0
 800b0da:	4614      	mov	r4, r2
 800b0dc:	460e      	mov	r6, r1
 800b0de:	b921      	cbnz	r1, 800b0ea <_realloc_r+0x16>
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	f7ff bf81 	b.w	800afec <_malloc_r>
 800b0ea:	b92a      	cbnz	r2, 800b0f8 <_realloc_r+0x24>
 800b0ec:	f7ff ff16 	bl	800af1c <_free_r>
 800b0f0:	4625      	mov	r5, r4
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f8:	f000 f838 	bl	800b16c <_malloc_usable_size_r>
 800b0fc:	4284      	cmp	r4, r0
 800b0fe:	4607      	mov	r7, r0
 800b100:	d802      	bhi.n	800b108 <_realloc_r+0x34>
 800b102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b106:	d812      	bhi.n	800b12e <_realloc_r+0x5a>
 800b108:	4621      	mov	r1, r4
 800b10a:	4640      	mov	r0, r8
 800b10c:	f7ff ff6e 	bl	800afec <_malloc_r>
 800b110:	4605      	mov	r5, r0
 800b112:	2800      	cmp	r0, #0
 800b114:	d0ed      	beq.n	800b0f2 <_realloc_r+0x1e>
 800b116:	42bc      	cmp	r4, r7
 800b118:	4622      	mov	r2, r4
 800b11a:	4631      	mov	r1, r6
 800b11c:	bf28      	it	cs
 800b11e:	463a      	movcs	r2, r7
 800b120:	f7ff fed4 	bl	800aecc <memcpy>
 800b124:	4631      	mov	r1, r6
 800b126:	4640      	mov	r0, r8
 800b128:	f7ff fef8 	bl	800af1c <_free_r>
 800b12c:	e7e1      	b.n	800b0f2 <_realloc_r+0x1e>
 800b12e:	4635      	mov	r5, r6
 800b130:	e7df      	b.n	800b0f2 <_realloc_r+0x1e>
	...

0800b134 <_sbrk_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	2300      	movs	r3, #0
 800b138:	4d05      	ldr	r5, [pc, #20]	; (800b150 <_sbrk_r+0x1c>)
 800b13a:	4604      	mov	r4, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	f7f6 faa6 	bl	8001690 <_sbrk>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_sbrk_r+0x1a>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_sbrk_r+0x1a>
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	2000158c 	.word	0x2000158c

0800b154 <__malloc_lock>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__malloc_lock+0x8>)
 800b156:	f000 b811 	b.w	800b17c <__retarget_lock_acquire_recursive>
 800b15a:	bf00      	nop
 800b15c:	20001590 	.word	0x20001590

0800b160 <__malloc_unlock>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__malloc_unlock+0x8>)
 800b162:	f000 b80c 	b.w	800b17e <__retarget_lock_release_recursive>
 800b166:	bf00      	nop
 800b168:	20001590 	.word	0x20001590

0800b16c <_malloc_usable_size_r>:
 800b16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b170:	1f18      	subs	r0, r3, #4
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfbc      	itt	lt
 800b176:	580b      	ldrlt	r3, [r1, r0]
 800b178:	18c0      	addlt	r0, r0, r3
 800b17a:	4770      	bx	lr

0800b17c <__retarget_lock_acquire_recursive>:
 800b17c:	4770      	bx	lr

0800b17e <__retarget_lock_release_recursive>:
 800b17e:	4770      	bx	lr

0800b180 <_init>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr

0800b18c <_fini>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr
