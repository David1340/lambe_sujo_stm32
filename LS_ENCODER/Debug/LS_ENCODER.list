
LS_ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008990  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008b3c  08008b3c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b3c  08008b3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b3c  08008b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001244  200001e0  08008d24  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001424  08008d24  00021424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119fb  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4e  00000000  00000000  00031c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00034b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00035b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a95b  00000000  00000000  000369a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135e6  00000000  00000000  000512fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d148  00000000  00000000  000648e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1a29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  000f1a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a84 	.word	0x08008a84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008a84 	.word	0x08008a84

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_IC_CaptureCallback>:
uint16_t count = 0;
uint16_t position = 0;
int16_t speed = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800016a:	4a09      	ldr	r2, [pc, #36]	; (8000190 <HAL_TIM_IC_CaptureCallback+0x34>)
 800016c:	6013      	str	r3, [r2, #0]
	count = (int16_t)counter;
 800016e:	4b08      	ldr	r3, [pc, #32]	; (8000190 <HAL_TIM_IC_CaptureCallback+0x34>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	b29a      	uxth	r2, r3
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000176:	801a      	strh	r2, [r3, #0]
	position = count/4;
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <HAL_TIM_IC_CaptureCallback+0x38>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	089b      	lsrs	r3, r3, #2
 800017e:	b29a      	uxth	r2, r3
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000182:	801a      	strh	r2, [r3, #0]
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	20000244 	.word	0x20000244
 8000194:	20000248 	.word	0x20000248
 8000198:	2000024a 	.word	0x2000024a

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fa24 	bl	80005ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f80e 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f8ba 	bl	8000320 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ac:	f000 f864 	bl	8000278 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80001b0:	f007 fb20 	bl	80077f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80001b4:	213c      	movs	r1, #60	; 0x3c
 80001b6:	4802      	ldr	r0, [pc, #8]	; (80001c0 <main+0x24>)
 80001b8:	f002 ff10 	bl	8002fdc <HAL_TIM_Encoder_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	e7fe      	b.n	80001bc <main+0x20>
 80001be:	bf00      	nop
 80001c0:	200001fc 	.word	0x200001fc

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f007 ffd4 	bl	8008180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000210:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f99e 	bl	800255c <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000226:	f000 f89d 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2102      	movs	r1, #2
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fc0a 	bl	8002a60 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000252:	f000 f887 	bl	8000364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000256:	2310      	movs	r3, #16
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025a:	2300      	movs	r3, #0
 800025c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	4618      	mov	r0, r3
 8000262:	f002 fd63 	bl	8002d2c <HAL_RCCEx_PeriphCLKConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800026c:	f000 f87a 	bl	8000364 <Error_Handler>
  }
}
 8000270:	bf00      	nop
 8000272:	3750      	adds	r7, #80	; 0x50
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}

08000278 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08c      	sub	sp, #48	; 0x30
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800027e:	f107 030c 	add.w	r3, r7, #12
 8000282:	2224      	movs	r2, #36	; 0x24
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f007 ff7a 	bl	8008180 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000294:	4b21      	ldr	r3, [pc, #132]	; (800031c <MX_TIM2_Init+0xa4>)
 8000296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <MX_TIM2_Init+0xa4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <MX_TIM2_Init+0xa4>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <MX_TIM2_Init+0xa4>)
 80002aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <MX_TIM2_Init+0xa4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <MX_TIM2_Init+0xa4>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002bc:	2303      	movs	r3, #3
 80002be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80002c0:	2302      	movs	r3, #2
 80002c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002c4:	2301      	movs	r3, #1
 80002c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80002d0:	2302      	movs	r3, #2
 80002d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002d4:	2301      	movs	r3, #1
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	4619      	mov	r1, r3
 80002e6:	480d      	ldr	r0, [pc, #52]	; (800031c <MX_TIM2_Init+0xa4>)
 80002e8:	f002 fdd6 	bl	8002e98 <HAL_TIM_Encoder_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80002f2:	f000 f837 	bl	8000364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4619      	mov	r1, r3
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <MX_TIM2_Init+0xa4>)
 8000304:	f003 f8ca 	bl	800349c <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800030e:	f000 f829 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	3730      	adds	r7, #48	; 0x30
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200001fc 	.word	0x200001fc

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <MX_GPIO_Init+0x40>)
 800032c:	f043 0320 	orr.w	r3, r3, #32
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <MX_GPIO_Init+0x40>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0320 	and.w	r3, r3, #32
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <MX_GPIO_Init+0x40>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a07      	ldr	r2, [pc, #28]	; (8000360 <MX_GPIO_Init+0x40>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <MX_GPIO_Init+0x40>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0304 	and.w	r3, r3, #4
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <HAL_MspInit+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <HAL_MspInit+0x40>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <HAL_MspInit+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <HAL_MspInit+0x40>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a07      	ldr	r2, [pc, #28]	; (80003b0 <HAL_MspInit+0x40>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <HAL_MspInit+0x40>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003d2:	d12b      	bne.n	800042c <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4a16      	ldr	r2, [pc, #88]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	61d3      	str	r3, [r2, #28]
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003e2:	69db      	ldr	r3, [r3, #28]
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <HAL_TIM_Encoder_MspInit+0x80>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000404:	2303      	movs	r3, #3
 8000406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	4808      	ldr	r0, [pc, #32]	; (8000438 <HAL_TIM_Encoder_MspInit+0x84>)
 8000418:	f000 fa58 	bl	80008cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2100      	movs	r1, #0
 8000420:	201c      	movs	r0, #28
 8000422:	f000 fa1c 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000426:	201c      	movs	r0, #28
 8000428:	f000 fa35 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	40010800 	.word	0x40010800

0800043c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x4>

08000442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <MemManage_Handler+0x4>

0800044e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <BusFault_Handler+0x4>

08000454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler+0x4>

0800045a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046a:	bf00      	nop
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	indx++;
 8000484:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <SysTick_Handler+0x68>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3301      	adds	r3, #1
 800048a:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <SysTick_Handler+0x68>)
 800048c:	6013      	str	r3, [r2, #0]

		if (indx == 500)
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <SysTick_Handler+0x68>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000496:	d123      	bne.n	80004e0 <SysTick_Handler+0x60>
		{
			speed = ((position - oldpos)*2);  // speed in clicks/sec
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <SysTick_Handler+0x6c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <SysTick_Handler+0x70>)
 800049e:	8812      	ldrh	r2, [r2, #0]
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	b21a      	sxth	r2, r3
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <SysTick_Handler+0x74>)
 80004ac:	801a      	strh	r2, [r3, #0]
			oldpos = position;
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <SysTick_Handler+0x6c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <SysTick_Handler+0x70>)
 80004b6:	801a      	strh	r2, [r3, #0]
			indx = 0;
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <SysTick_Handler+0x68>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
			sprintf(buffer,"%d\n",speed);
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <SysTick_Handler+0x74>)
 80004c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004c4:	461a      	mov	r2, r3
 80004c6:	490c      	ldr	r1, [pc, #48]	; (80004f8 <SysTick_Handler+0x78>)
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <SysTick_Handler+0x7c>)
 80004ca:	f007 fe61 	bl	8008190 <siprintf>
			CDC_Transmit_FS(buffer, strlen(buffer));
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <SysTick_Handler+0x7c>)
 80004d0:	f7ff fe3c 	bl	800014c <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	4619      	mov	r1, r3
 80004da:	4808      	ldr	r0, [pc, #32]	; (80004fc <SysTick_Handler+0x7c>)
 80004dc:	f007 fa48 	bl	8007970 <CDC_Transmit_FS>
		}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 f8ca 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000250 	.word	0x20000250
 80004ec:	2000024a 	.word	0x2000024a
 80004f0:	2000024e 	.word	0x2000024e
 80004f4:	2000024c 	.word	0x2000024c
 80004f8:	08008a9c 	.word	0x08008a9c
 80004fc:	20000254 	.word	0x20000254

08000500 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000506:	f000 fc96 	bl	8000e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000f08 	.word	0x20000f08

08000514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <TIM2_IRQHandler+0x10>)
 800051a:	f002 fe0d 	bl	8003138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200001fc 	.word	0x200001fc

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f007 fde8 	bl	800812c <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20005000 	.word	0x20005000
 8000588:	00000400 	.word	0x00000400
 800058c:	20000268 	.word	0x20000268
 8000590:	20001428 	.word	0x20001428

08000594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	; (80005d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005c6:	f7ff ffe5 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ca:	f007 fdb5 	bl	8008138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff fde5 	bl	800019c <main>
  bx lr
 80005d2:	4770      	bx	lr
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80005dc:	08008b44 	.word	0x08008b44
  ldr r2, =_sbss
 80005e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80005e4:	20001424 	.word	0x20001424

080005e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_2_IRQHandler>
	...

080005ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <HAL_Init+0x28>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <HAL_Init+0x28>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 f923 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000602:	200f      	movs	r0, #15
 8000604:	f000 f808 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000608:	f7ff feb2 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40022000 	.word	0x40022000

08000618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <HAL_InitTick+0x54>)
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x58>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000632:	fbb2 f3f3 	udiv	r3, r2, r3
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f93b 	bl	80008b2 <HAL_SYSTICK_Config>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	e00e      	b.n	8000664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b0f      	cmp	r3, #15
 800064a:	d80a      	bhi.n	8000662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064c:	2200      	movs	r2, #0
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f000 f903 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <HAL_InitTick+0x5c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800065e:	2300      	movs	r3, #0
 8000660:	e000      	b.n	8000664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000000 	.word	0x20000000
 8000670:	20000008 	.word	0x20000008
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x1c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_IncTick+0x20>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a03      	ldr	r2, [pc, #12]	; (8000698 <HAL_IncTick+0x20>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000008 	.word	0x20000008
 8000698:	2000026c 	.word	0x2000026c

0800069c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return uwTick;
 80006a0:	4b02      	ldr	r3, [pc, #8]	; (80006ac <HAL_GetTick+0x10>)
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	2000026c 	.word	0x2000026c

080006b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e2:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <__NVIC_SetPriorityGrouping+0x44>)
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	60d3      	str	r3, [r2, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__NVIC_GetPriorityGrouping+0x18>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	f003 0307 	and.w	r3, r3, #7
}
 8000706:	4618      	mov	r0, r3
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	db0b      	blt.n	800073e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	f003 021f 	and.w	r2, r3, #31
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <__NVIC_EnableIRQ+0x34>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	095b      	lsrs	r3, r3, #5
 8000734:	2001      	movs	r0, #1
 8000736:	fa00 f202 	lsl.w	r2, r0, r2
 800073a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff90 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff2d 	bl	80006b0 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff42 	bl	80006f8 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff90 	bl	80007a0 <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5f 	bl	800074c <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff35 	bl	8000714 <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b08b      	sub	sp, #44	; 0x2c
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e169      	b.n	8000bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e0:	2201      	movs	r2, #1
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	f040 8158 	bne.w	8000bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4a9a      	ldr	r2, [pc, #616]	; (8000b6c <HAL_GPIO_Init+0x2a0>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d05e      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000908:	4a98      	ldr	r2, [pc, #608]	; (8000b6c <HAL_GPIO_Init+0x2a0>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d875      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800090e:	4a98      	ldr	r2, [pc, #608]	; (8000b70 <HAL_GPIO_Init+0x2a4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d058      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000914:	4a96      	ldr	r2, [pc, #600]	; (8000b70 <HAL_GPIO_Init+0x2a4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d86f      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800091a:	4a96      	ldr	r2, [pc, #600]	; (8000b74 <HAL_GPIO_Init+0x2a8>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d052      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000920:	4a94      	ldr	r2, [pc, #592]	; (8000b74 <HAL_GPIO_Init+0x2a8>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d869      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000926:	4a94      	ldr	r2, [pc, #592]	; (8000b78 <HAL_GPIO_Init+0x2ac>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d04c      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 800092c:	4a92      	ldr	r2, [pc, #584]	; (8000b78 <HAL_GPIO_Init+0x2ac>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d863      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000932:	4a92      	ldr	r2, [pc, #584]	; (8000b7c <HAL_GPIO_Init+0x2b0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d046      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
 8000938:	4a90      	ldr	r2, [pc, #576]	; (8000b7c <HAL_GPIO_Init+0x2b0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d85d      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 800093e:	2b12      	cmp	r3, #18
 8000940:	d82a      	bhi.n	8000998 <HAL_GPIO_Init+0xcc>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d859      	bhi.n	80009fa <HAL_GPIO_Init+0x12e>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <HAL_GPIO_Init+0x80>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	080009c7 	.word	0x080009c7
 8000950:	080009a1 	.word	0x080009a1
 8000954:	080009b3 	.word	0x080009b3
 8000958:	080009f5 	.word	0x080009f5
 800095c:	080009fb 	.word	0x080009fb
 8000960:	080009fb 	.word	0x080009fb
 8000964:	080009fb 	.word	0x080009fb
 8000968:	080009fb 	.word	0x080009fb
 800096c:	080009fb 	.word	0x080009fb
 8000970:	080009fb 	.word	0x080009fb
 8000974:	080009fb 	.word	0x080009fb
 8000978:	080009fb 	.word	0x080009fb
 800097c:	080009fb 	.word	0x080009fb
 8000980:	080009fb 	.word	0x080009fb
 8000984:	080009fb 	.word	0x080009fb
 8000988:	080009fb 	.word	0x080009fb
 800098c:	080009fb 	.word	0x080009fb
 8000990:	080009a9 	.word	0x080009a9
 8000994:	080009bd 	.word	0x080009bd
 8000998:	4a79      	ldr	r2, [pc, #484]	; (8000b80 <HAL_GPIO_Init+0x2b4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d013      	beq.n	80009c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800099e:	e02c      	b.n	80009fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	623b      	str	r3, [r7, #32]
          break;
 80009a6:	e029      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	3304      	adds	r3, #4
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e024      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	3308      	adds	r3, #8
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e01f      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	330c      	adds	r3, #12
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e01a      	b.n	80009fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d102      	bne.n	80009d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ce:	2304      	movs	r3, #4
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e013      	b.n	80009fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d105      	bne.n	80009e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009dc:	2308      	movs	r3, #8
 80009de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	611a      	str	r2, [r3, #16]
          break;
 80009e6:	e009      	b.n	80009fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e8:	2308      	movs	r3, #8
 80009ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69fa      	ldr	r2, [r7, #28]
 80009f0:	615a      	str	r2, [r3, #20]
          break;
 80009f2:	e003      	b.n	80009fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
          break;
 80009f8:	e000      	b.n	80009fc <HAL_GPIO_Init+0x130>
          break;
 80009fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	2bff      	cmp	r3, #255	; 0xff
 8000a00:	d801      	bhi.n	8000a06 <HAL_GPIO_Init+0x13a>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	e001      	b.n	8000a0a <HAL_GPIO_Init+0x13e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	d802      	bhi.n	8000a18 <HAL_GPIO_Init+0x14c>
 8000a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	e002      	b.n	8000a1e <HAL_GPIO_Init+0x152>
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	3b08      	subs	r3, #8
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	210f      	movs	r1, #15
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	401a      	ands	r2, r3
 8000a30:	6a39      	ldr	r1, [r7, #32]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	fa01 f303 	lsl.w	r3, r1, r3
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 80b1 	beq.w	8000bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4c:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <HAL_GPIO_Init+0x2b8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <HAL_GPIO_Init+0x2b8>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <HAL_GPIO_Init+0x2b8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0301 	and.w	r3, r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a64:	4a48      	ldr	r2, [pc, #288]	; (8000b88 <HAL_GPIO_Init+0x2bc>)
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	220f      	movs	r2, #15
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a40      	ldr	r2, [pc, #256]	; (8000b8c <HAL_GPIO_Init+0x2c0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d013      	beq.n	8000ab8 <HAL_GPIO_Init+0x1ec>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a3f      	ldr	r2, [pc, #252]	; (8000b90 <HAL_GPIO_Init+0x2c4>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d00d      	beq.n	8000ab4 <HAL_GPIO_Init+0x1e8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <HAL_GPIO_Init+0x2c8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d007      	beq.n	8000ab0 <HAL_GPIO_Init+0x1e4>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a3d      	ldr	r2, [pc, #244]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d101      	bne.n	8000aac <HAL_GPIO_Init+0x1e0>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x1ee>
 8000aac:	2304      	movs	r3, #4
 8000aae:	e004      	b.n	8000aba <HAL_GPIO_Init+0x1ee>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e002      	b.n	8000aba <HAL_GPIO_Init+0x1ee>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <HAL_GPIO_Init+0x1ee>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000abc:	f002 0203 	and.w	r2, r2, #3
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aca:	492f      	ldr	r1, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x2bc>)
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d006      	beq.n	8000af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	492c      	ldr	r1, [pc, #176]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]
 8000af0:	e006      	b.n	8000b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	4928      	ldr	r1, [pc, #160]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	4922      	ldr	r1, [pc, #136]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	604b      	str	r3, [r1, #4]
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	491e      	ldr	r1, [pc, #120]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b36:	689a      	ldr	r2, [r3, #8]
 8000b38:	4918      	ldr	r1, [pc, #96]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	608b      	str	r3, [r1, #8]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4914      	ldr	r1, [pc, #80]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d021      	beq.n	8000ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	490e      	ldr	r1, [pc, #56]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60cb      	str	r3, [r1, #12]
 8000b68:	e021      	b.n	8000bae <HAL_GPIO_Init+0x2e2>
 8000b6a:	bf00      	nop
 8000b6c:	10320000 	.word	0x10320000
 8000b70:	10310000 	.word	0x10310000
 8000b74:	10220000 	.word	0x10220000
 8000b78:	10210000 	.word	0x10210000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10110000 	.word	0x10110000
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010000 	.word	0x40010000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	40011000 	.word	0x40011000
 8000b98:	40011400 	.word	0x40011400
 8000b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_GPIO_Init+0x304>)
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4909      	ldr	r1, [pc, #36]	; (8000bd0 <HAL_GPIO_Init+0x304>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f47f ae8e 	bne.w	80008e0 <HAL_GPIO_Init+0x14>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	372c      	adds	r7, #44	; 0x2c
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	b08b      	sub	sp, #44	; 0x2c
 8000bd8:	af06      	add	r7, sp, #24
 8000bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0fd      	b.n	8000de2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d106      	bne.n	8000c00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f006 ffec 	bl	8007bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2203      	movs	r2, #3
 8000c04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 fcdb 	bl	80035c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	687e      	ldr	r6, [r7, #4]
 8000c1a:	466d      	mov	r5, sp
 8000c1c:	f106 0410 	add.w	r4, r6, #16
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	602b      	str	r3, [r5, #0]
 8000c28:	1d33      	adds	r3, r6, #4
 8000c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2c:	6838      	ldr	r0, [r7, #0]
 8000c2e:	f002 fca5 	bl	800357c <USB_CoreInit>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d005      	beq.n	8000c44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e0ce      	b.n	8000de2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fcd6 	bl	80035fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e04c      	b.n	8000cf0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3301      	adds	r3, #1
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	7bfa      	ldrb	r2, [r7, #15]
 8000c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	b298      	uxth	r0, r3
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3336      	adds	r3, #54	; 0x36
 8000c94:	4602      	mov	r2, r0
 8000c96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	1c5a      	adds	r2, r3, #1
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	440b      	add	r3, r1
 8000ca8:	3303      	adds	r3, #3
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	440b      	add	r3, r1
 8000cbc:	3338      	adds	r3, #56	; 0x38
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	440b      	add	r3, r1
 8000cd0:	333c      	adds	r3, #60	; 0x3c
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3340      	adds	r3, #64	; 0x40
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	3301      	adds	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d3ad      	bcc.n	8000c56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]
 8000cfe:	e044      	b.n	8000d8a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	440b      	add	r3, r1
 8000d50:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	3301      	adds	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	7bfa      	ldrb	r2, [r7, #15]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d3b5      	bcc.n	8000d00 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	687e      	ldr	r6, [r7, #4]
 8000d9c:	466d      	mov	r5, sp
 8000d9e:	f106 0410 	add.w	r4, r6, #16
 8000da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	602b      	str	r3, [r5, #0]
 8000daa:	1d33      	adds	r3, r6, #4
 8000dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dae:	6838      	ldr	r0, [r7, #0]
 8000db0:	f002 fc30 	bl	8003614 <USB_DevInit>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d005      	beq.n	8000dc6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00d      	b.n	8000de2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f005 f8e2 	bl	8005fa4 <USB_DevDisconnect>

  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <HAL_PCD_Start+0x16>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e016      	b.n	8000e2e <HAL_PCD_Start+0x44>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fbc5 	bl	800359c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e12:	2101      	movs	r1, #1
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f007 f952 	bl	80080be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f005 f8b6 	bl	8005f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b088      	sub	sp, #32
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 f8b8 	bl	8005fb8 <USB_ReadInterrupts>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e52:	d102      	bne.n	8000e5a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fb5f 	bl	8001518 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f005 f8aa 	bl	8005fb8 <USB_ReadInterrupts>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e6e:	d112      	bne.n	8000e96 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e82:	b292      	uxth	r2, r2
 8000e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f006 ff20 	bl	8007cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f923 	bl	80010dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f005 f88c 	bl	8005fb8 <USB_ReadInterrupts>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eaa:	d10b      	bne.n	8000ec4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 f875 	bl	8005fb8 <USB_ReadInterrupts>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000eec:	b292      	uxth	r2, r2
 8000eee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 f85e 	bl	8005fb8 <USB_ReadInterrupts>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f06:	d126      	bne.n	8000f56 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0204 	bic.w	r2, r2, #4
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0208 	bic.w	r2, r2, #8
 8000f32:	b292      	uxth	r2, r2
 8000f34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f006 ff01 	bl	8007d40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f50:	b292      	uxth	r2, r2
 8000f52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 f82c 	bl	8005fb8 <USB_ReadInterrupts>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f6a:	f040 8082 	bne.w	8001072 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	77fb      	strb	r3, [r7, #31]
 8000f72:	e010      	b.n	8000f96 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	7ffb      	ldrb	r3, [r7, #31]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	441a      	add	r2, r3
 8000f80:	7ffb      	ldrb	r3, [r7, #31]
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	b292      	uxth	r2, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	3320      	adds	r3, #32
 8000f8a:	443b      	add	r3, r7
 8000f8c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f90:	7ffb      	ldrb	r3, [r7, #31]
 8000f92:	3301      	adds	r3, #1
 8000f94:	77fb      	strb	r3, [r7, #31]
 8000f96:	7ffb      	ldrb	r3, [r7, #31]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d9eb      	bls.n	8000f74 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	b292      	uxth	r2, r2
 8000fc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fcc:	bf00      	nop
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f6      	beq.n	8000fce <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	77fb      	strb	r3, [r7, #31]
 8000ffc:	e00f      	b.n	800101e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	4611      	mov	r1, r2
 8001006:	7ffa      	ldrb	r2, [r7, #31]
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	440a      	add	r2, r1
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	3320      	adds	r3, #32
 8001010:	443b      	add	r3, r7
 8001012:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001016:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	3301      	adds	r3, #1
 800101c:	77fb      	strb	r3, [r7, #31]
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	2b07      	cmp	r3, #7
 8001022:	d9ec      	bls.n	8000ffe <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0208 	orr.w	r2, r2, #8
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800104e:	b292      	uxth	r2, r2
 8001050:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800105c:	b29a      	uxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0204 	orr.w	r2, r2, #4
 8001066:	b292      	uxth	r2, r2
 8001068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f006 fe4d 	bl	8007d0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f004 ff9e 	bl	8005fb8 <USB_ReadInterrupts>
 800107c:	4603      	mov	r3, r0
 800107e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001086:	d10e      	bne.n	80010a6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800109a:	b292      	uxth	r2, r2
 800109c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f006 fe06 	bl	8007cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 ff84 	bl	8005fb8 <USB_ReadInterrupts>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ba:	d10b      	bne.n	80010d4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010ce:	b292      	uxth	r2, r2
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_PCD_SetAddress+0x1a>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e013      	b.n	800111e <HAL_PCD_SetAddress+0x42>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	78fa      	ldrb	r2, [r7, #3]
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f004 ff2b 	bl	8005f6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
 8001132:	461a      	mov	r2, r3
 8001134:	4603      	mov	r3, r0
 8001136:	70fb      	strb	r3, [r7, #3]
 8001138:	460b      	mov	r3, r1
 800113a:	803b      	strh	r3, [r7, #0]
 800113c:	4613      	mov	r3, r2
 800113e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001148:	2b00      	cmp	r3, #0
 800114a:	da0e      	bge.n	800116a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	705a      	strb	r2, [r3, #1]
 8001168:	e00e      	b.n	8001188 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	f003 0207 	and.w	r2, r3, #7
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	b2da      	uxtb	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001194:	883a      	ldrh	r2, [r7, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	78ba      	ldrb	r2, [r7, #2]
 800119e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d102      	bne.n	80011be <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2200      	movs	r2, #0
 80011bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <HAL_PCD_EP_Open+0xa6>
 80011c8:	2302      	movs	r3, #2
 80011ca:	e00e      	b.n	80011ea <HAL_PCD_EP_Open+0xc4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68f9      	ldr	r1, [r7, #12]
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fa3a 	bl	8003654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011e8:	7afb      	ldrb	r3, [r7, #11]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	460b      	mov	r3, r1
 80011fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001202:	2b00      	cmp	r3, #0
 8001204:	da0e      	bge.n	8001224 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	705a      	strb	r2, [r3, #1]
 8001222:	e00e      	b.n	8001242 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f003 0207 	and.w	r2, r3, #7
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	b2da      	uxtb	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_PCD_EP_Close+0x6a>
 8001258:	2302      	movs	r3, #2
 800125a:	e00e      	b.n	800127a <HAL_PCD_EP_Close+0x88>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fd5c 	bl	8003d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	460b      	mov	r3, r1
 8001290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001292:	7afb      	ldrb	r3, [r7, #11]
 8001294:	f003 0207 	and.w	r2, r3, #7
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2200      	movs	r2, #0
 80012c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ff0e 	bl	8004100 <USB_EPStartXfer>
 80012e4:	e005      	b.n	80012f2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6979      	ldr	r1, [r7, #20]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 ff07 	bl	8004100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 0207 	and.w	r2, r3, #7
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	460b      	mov	r3, r1
 8001338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2201      	movs	r2, #1
 8001374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	b2da      	uxtb	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001382:	7afb      	ldrb	r3, [r7, #11]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	2b00      	cmp	r3, #0
 800138a:	d106      	bne.n	800139a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6979      	ldr	r1, [r7, #20]
 8001392:	4618      	mov	r0, r3
 8001394:	f002 feb4 	bl	8004100 <USB_EPStartXfer>
 8001398:	e005      	b.n	80013a6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6979      	ldr	r1, [r7, #20]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fead 	bl	8004100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	f003 0207 	and.w	r2, r3, #7
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d901      	bls.n	80013ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e04c      	b.n	8001468 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da0e      	bge.n	80013f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2201      	movs	r2, #1
 80013f0:	705a      	strb	r2, [r3, #1]
 80013f2:	e00c      	b.n	800140e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_PCD_EP_SetStall+0x7e>
 800142a:	2302      	movs	r3, #2
 800142c:	e01c      	b.n	8001468 <HAL_PCD_EP_SetStall+0xb8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fc97 	bl	8005d70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	2b00      	cmp	r3, #0
 800144a:	d108      	bne.n	800145e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f004 fdbc 	bl	8005fd6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 020f 	and.w	r2, r3, #15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d901      	bls.n	800148e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e040      	b.n	8001510 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800148e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	da0e      	bge.n	80014b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001496:	78fb      	ldrb	r3, [r7, #3]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2201      	movs	r2, #1
 80014b0:	705a      	strb	r2, [r3, #1]
 80014b2:	e00e      	b.n	80014d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0207 	and.w	r2, r3, #7
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d101      	bne.n	80014f2 <HAL_PCD_EP_ClrStall+0x82>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e00e      	b.n	8001510 <HAL_PCD_EP_ClrStall+0xa0>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68f9      	ldr	r1, [r7, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fc85 	bl	8005e10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001520:	e2ec      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800152a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800152c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001538:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800153c:	2b00      	cmp	r3, #0
 800153e:	f040 8161 	bne.w	8001804 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d152      	bne.n	80015f2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
 8001554:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800156c:	b29b      	uxth	r3, r3
 800156e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3328      	adds	r3, #40	; 0x28
 8001574:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4413      	add	r3, r2
 800158a:	3302      	adds	r3, #2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	441a      	add	r2, r3
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f006 fb63 	bl	8007c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 829b 	beq.w	8001afc <PCD_EP_ISR_Handler+0x5e4>
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 8296 	bne.w	8001afc <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b292      	uxth	r2, r2
 80015e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015f0:	e284      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001602:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001608:	2b00      	cmp	r3, #0
 800160a:	d034      	beq.n	8001676 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001614:	b29b      	uxth	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	3306      	adds	r3, #6
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800164a:	b29b      	uxth	r3, r3
 800164c:	f004 fd13 	bl	8006076 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	f640 738f 	movw	r3, #3983	; 0xf8f
 800165c:	4013      	ands	r3, r2
 800165e:	823b      	strh	r3, [r7, #16]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	8a3a      	ldrh	r2, [r7, #16]
 8001666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f006 fad8 	bl	8007c24 <HAL_PCD_SetupStageCallback>
 8001674:	e242      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001676:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800167a:	2b00      	cmp	r3, #0
 800167c:	f280 823e 	bge.w	8001afc <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800168c:	4013      	ands	r3, r2
 800168e:	83bb      	strh	r3, [r7, #28]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	8bba      	ldrh	r2, [r7, #28]
 8001696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800169a:	b292      	uxth	r2, r2
 800169c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	3306      	adds	r3, #6
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d019      	beq.n	8001706 <PCD_EP_ISR_Handler+0x1ee>
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d015      	beq.n	8001706 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	6959      	ldr	r1, [r3, #20]
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f004 fcc3 	bl	8006076 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	695a      	ldr	r2, [r3, #20]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	441a      	add	r2, r3
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016fe:	2100      	movs	r1, #0
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f006 faa1 	bl	8007c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	2b00      	cmp	r3, #0
 8001714:	f040 81f2 	bne.w	8001afc <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d112      	bne.n	8001766 <PCD_EP_ISR_Handler+0x24e>
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b29b      	uxth	r3, r3
 8001746:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800174a:	b29a      	uxth	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	801a      	strh	r2, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800175a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175e:	b29a      	uxth	r2, r3
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	801a      	strh	r2, [r3, #0]
 8001764:	e02f      	b.n	80017c6 <PCD_EP_ISR_Handler+0x2ae>
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b3e      	cmp	r3, #62	; 0x3e
 800176c:	d813      	bhi.n	8001796 <PCD_EP_ISR_Handler+0x27e>
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <PCD_EP_ISR_Handler+0x270>
 8001782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001784:	3301      	adds	r3, #1
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	b29b      	uxth	r3, r3
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	b29a      	uxth	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	e017      	b.n	80017c6 <PCD_EP_ISR_Handler+0x2ae>
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <PCD_EP_ISR_Handler+0x298>
 80017aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ac:	3b01      	subs	r3, #1
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d6:	827b      	strh	r3, [r7, #18]
 80017d8:	8a7b      	ldrh	r3, [r7, #18]
 80017da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017de:	827b      	strh	r3, [r7, #18]
 80017e0:	8a7b      	ldrh	r3, [r7, #18]
 80017e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017e6:	827b      	strh	r3, [r7, #18]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fe:	b29b      	uxth	r3, r3
 8001800:	8013      	strh	r3, [r2, #0]
 8001802:	e17b      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001816:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800181a:	2b00      	cmp	r3, #0
 800181c:	f280 80ea 	bge.w	80019f4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29a      	uxth	r2, r3
 8001832:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001836:	4013      	ands	r3, r2
 8001838:	853b      	strh	r3, [r7, #40]	; 0x28
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800184a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800184e:	b292      	uxth	r2, r2
 8001850:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001852:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	7b1b      	ldrb	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d122      	bne.n	80018b6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001878:	b29b      	uxth	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4413      	add	r3, r2
 8001884:	3306      	adds	r3, #6
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	4413      	add	r3, r2
 800188e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001898:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800189a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 8087 	beq.w	80019b0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	6959      	ldr	r1, [r3, #20]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	88da      	ldrh	r2, [r3, #6]
 80018ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018b0:	f004 fbe1 	bl	8006076 <USB_ReadPMA>
 80018b4:	e07c      	b.n	80019b0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	78db      	ldrb	r3, [r3, #3]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d108      	bne.n	80018d0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018c0:	461a      	mov	r2, r3
 80018c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f927 	bl	8001b18 <HAL_PCD_EP_DB_Receive>
 80018ca:	4603      	mov	r3, r0
 80018cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018ce:	e06f      	b.n	80019b0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	441a      	add	r2, r3
 80018fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800190c:	b29b      	uxth	r3, r3
 800190e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d021      	beq.n	800196e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	3302      	adds	r3, #2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001952:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001956:	2b00      	cmp	r3, #0
 8001958:	d02a      	beq.n	80019b0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	891a      	ldrh	r2, [r3, #8]
 8001966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001968:	f004 fb85 	bl	8006076 <USB_ReadPMA>
 800196c:	e020      	b.n	80019b0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	3306      	adds	r3, #6
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	895a      	ldrh	r2, [r3, #10]
 80019aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ac:	f004 fb63 	bl	8006076 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b6:	441a      	add	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c2:	441a      	add	r2, r3
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d004      	beq.n	80019da <PCD_EP_ISR_Handler+0x4c2>
 80019d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d206      	bcs.n	80019e8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 f931 	bl	8007c48 <HAL_PCD_DataOutStageCallback>
 80019e6:	e005      	b.n	80019f4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 fb86 	bl	8004100 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d07e      	beq.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80019fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2c:	843b      	strh	r3, [r7, #32]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8c3b      	ldrh	r3, [r7, #32]
 8001a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	78db      	ldrb	r3, [r3, #3]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d00c      	beq.n	8001a6c <PCD_EP_ISR_Handler+0x554>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	78db      	ldrb	r3, [r3, #3]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d146      	bne.n	8001af0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d141      	bne.n	8001af0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	3302      	adds	r3, #2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a94:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	8bfb      	ldrh	r3, [r7, #30]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d906      	bls.n	8001aae <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	8bfb      	ldrh	r3, [r7, #30]
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	e002      	b.n	8001ab4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d106      	bne.n	8001aca <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f006 f8db 	bl	8007c7e <HAL_PCD_DataInStageCallback>
 8001ac8:	e018      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	8bfb      	ldrh	r3, [r7, #30]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	8bfb      	ldrh	r3, [r7, #30]
 8001adc:	441a      	add	r2, r3
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fb09 	bl	8004100 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001aee:	e005      	b.n	8001afc <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001af0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001af2:	461a      	mov	r2, r3
 8001af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f91b 	bl	8001d32 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f6ff ad0a 	blt.w	8001522 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3738      	adds	r7, #56	; 0x38
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	4613      	mov	r3, r2
 8001b24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d07e      	beq.n	8001c2e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	3302      	adds	r3, #2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	8b7b      	ldrh	r3, [r7, #26]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d306      	bcc.n	8001b72 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	8b7b      	ldrh	r3, [r7, #26]
 8001b6a:	1ad2      	subs	r2, r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	619a      	str	r2, [r3, #24]
 8001b70:	e002      	b.n	8001b78 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d123      	bne.n	8001bc8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9a:	833b      	strh	r3, [r7, #24]
 8001b9c:	8b3b      	ldrh	r3, [r7, #24]
 8001b9e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ba2:	833b      	strh	r3, [r7, #24]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	441a      	add	r2, r3
 8001bb2:	8b3b      	ldrh	r3, [r7, #24]
 8001bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01f      	beq.n	8001c12 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bec:	82fb      	strh	r3, [r7, #22]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	441a      	add	r2, r3
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c12:	8b7b      	ldrh	r3, [r7, #26]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 8087 	beq.w	8001d28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	891a      	ldrh	r2, [r3, #8]
 8001c26:	8b7b      	ldrh	r3, [r7, #26]
 8001c28:	f004 fa25 	bl	8006076 <USB_ReadPMA>
 8001c2c:	e07c      	b.n	8001d28 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	3306      	adds	r3, #6
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c56:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	8b7b      	ldrh	r3, [r7, #26]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d306      	bcc.n	8001c70 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	8b7b      	ldrh	r3, [r7, #26]
 8001c68:	1ad2      	subs	r2, r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	619a      	str	r2, [r3, #24]
 8001c6e:	e002      	b.n	8001c76 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d123      	bne.n	8001cc6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c98:	83fb      	strh	r3, [r7, #30]
 8001c9a:	8bfb      	ldrh	r3, [r7, #30]
 8001c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	441a      	add	r2, r3
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11f      	bne.n	8001d10 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cea:	83bb      	strh	r3, [r7, #28]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	441a      	add	r2, r3
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d10:	8b7b      	ldrh	r3, [r7, #26]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	6959      	ldr	r1, [r3, #20]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	895a      	ldrh	r2, [r3, #10]
 8001d22:	8b7b      	ldrh	r3, [r7, #26]
 8001d24:	f004 f9a7 	bl	8006076 <USB_ReadPMA>
    }
  }

  return count;
 8001d28:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b0a2      	sub	sp, #136	; 0x88
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 81c7 	beq.w	80020da <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3302      	adds	r3, #2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d907      	bls.n	8001d94 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001d8c:	1ad2      	subs	r2, r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	e002      	b.n	8001d9a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 80b9 	bne.w	8001f16 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d126      	bne.n	8001dfa <HAL_PCD_EP_DB_Transmit+0xc8>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	4413      	add	r3, r2
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	011a      	lsls	r2, r3, #4
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	4413      	add	r3, r2
 8001dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	801a      	strh	r2, [r3, #0]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	e01a      	b.n	8001e30 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	785b      	ldrb	r3, [r3, #1]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d116      	bne.n	8001e30 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	4413      	add	r3, r2
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	011a      	lsls	r2, r3, #4
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	4413      	add	r3, r2
 8001e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	785b      	ldrb	r3, [r3, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d126      	bne.n	8001e8c <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	4413      	add	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	011a      	lsls	r2, r3, #4
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	e017      	b.n	8001ebc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d113      	bne.n	8001ebc <HAL_PCD_EP_DB_Transmit+0x18a>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	011a      	lsls	r2, r3, #4
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f005 fedb 	bl	8007c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 82d4 	beq.w	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	827b      	strh	r3, [r7, #18]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	8a7b      	ldrh	r3, [r7, #18]
 8001f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	8013      	strh	r3, [r2, #0]
 8001f14:	e2b2      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d021      	beq.n	8001f64 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	441a      	add	r2, r3
 8001f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 8286 	bne.w	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f78:	441a      	add	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f86:	441a      	add	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d309      	bcc.n	8001fac <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	1ad2      	subs	r2, r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	621a      	str	r2, [r3, #32]
 8001faa:	e015      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fc2:	e009      	b.n	8001fd8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	785b      	ldrb	r3, [r3, #1]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d155      	bne.n	800208c <HAL_PCD_EP_DB_Transmit+0x35a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	4413      	add	r3, r2
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	011a      	lsls	r2, r3, #4
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	4413      	add	r3, r2
 8002002:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002006:	637b      	str	r3, [r7, #52]	; 0x34
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d112      	bne.n	8002034 <HAL_PCD_EP_DB_Transmit+0x302>
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002018:	b29a      	uxth	r2, r3
 800201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201c:	801a      	strh	r2, [r3, #0]
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202c:	b29a      	uxth	r2, r3
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	801a      	strh	r2, [r3, #0]
 8002032:	e047      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002036:	2b3e      	cmp	r3, #62	; 0x3e
 8002038:	d811      	bhi.n	800205e <HAL_PCD_EP_DB_Transmit+0x32c>
 800203a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_PCD_EP_DB_Transmit+0x31e>
 800204a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800204c:	3301      	adds	r3, #1
 800204e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002052:	b29b      	uxth	r3, r3
 8002054:	029b      	lsls	r3, r3, #10
 8002056:	b29a      	uxth	r2, r3
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	801a      	strh	r2, [r3, #0]
 800205c:	e032      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_PCD_EP_DB_Transmit+0x342>
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002070:	3b01      	subs	r3, #1
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48
 8002074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002076:	b29b      	uxth	r3, r3
 8002078:	029b      	lsls	r3, r3, #10
 800207a:	b29b      	uxth	r3, r3
 800207c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002084:	b29a      	uxth	r2, r3
 8002086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	e01b      	b.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x392>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d117      	bne.n	80020c4 <HAL_PCD_EP_DB_Transmit+0x392>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	4413      	add	r3, r2
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	011a      	lsls	r2, r3, #4
 80020b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b4:	4413      	add	r3, r2
 80020b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020be:	b29a      	uxth	r2, r3
 80020c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6959      	ldr	r1, [r3, #20]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	891a      	ldrh	r2, [r3, #8]
 80020d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	f003 ff8a 	bl	8005fec <USB_WritePMA>
 80020d8:	e1d0      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3306      	adds	r3, #6
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002102:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800210e:	429a      	cmp	r2, r3
 8002110:	d307      	bcc.n	8002122 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800211a:	1ad2      	subs	r2, r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	619a      	str	r2, [r3, #24]
 8002120:	e002      	b.n	8002128 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 80c4 	bne.w	80022ba <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d126      	bne.n	8002188 <HAL_PCD_EP_DB_Transmit+0x456>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	4413      	add	r3, r2
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	011a      	lsls	r2, r3, #4
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	4413      	add	r3, r2
 800215c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002160:	66bb      	str	r3, [r7, #104]	; 0x68
 8002162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800216c:	b29a      	uxth	r2, r3
 800216e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002180:	b29a      	uxth	r2, r3
 8002182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002184:	801a      	strh	r2, [r3, #0]
 8002186:	e01a      	b.n	80021be <HAL_PCD_EP_DB_Transmit+0x48c>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d116      	bne.n	80021be <HAL_PCD_EP_DB_Transmit+0x48c>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	677b      	str	r3, [r7, #116]	; 0x74
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a4:	4413      	add	r3, r2
 80021a6:	677b      	str	r3, [r7, #116]	; 0x74
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	011a      	lsls	r2, r3, #4
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	4413      	add	r3, r2
 80021b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
 80021b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ba:	2200      	movs	r2, #0
 80021bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d12f      	bne.n	800222c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021dc:	b29b      	uxth	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021e4:	4413      	add	r3, r2
 80021e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	011a      	lsls	r2, r3, #4
 80021f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f4:	4413      	add	r3, r2
 80021f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800220a:	b29a      	uxth	r2, r3
 800220c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002210:	801a      	strh	r2, [r3, #0]
 8002212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800221e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002222:	b29a      	uxth	r2, r3
 8002224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	e017      	b.n	800225c <HAL_PCD_EP_DB_Transmit+0x52a>
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d113      	bne.n	800225c <HAL_PCD_EP_DB_Transmit+0x52a>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002242:	4413      	add	r3, r2
 8002244:	67bb      	str	r3, [r7, #120]	; 0x78
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	011a      	lsls	r2, r3, #4
 800224c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224e:	4413      	add	r3, r2
 8002250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002254:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002258:	2200      	movs	r2, #0
 800225a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f005 fd0b 	bl	8007c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8104 	bne.w	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	441a      	add	r2, r3
 80022a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	8013      	strh	r3, [r2, #0]
 80022b8:	e0e0      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d121      	bne.n	8002308 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	441a      	add	r2, r3
 80022f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80022f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230e:	2b01      	cmp	r3, #1
 8002310:	f040 80b4 	bne.w	800247c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800231c:	441a      	add	r2, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800232a:	441a      	add	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d309      	bcc.n	8002350 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	621a      	str	r2, [r3, #32]
 800234e:	e015      	b.n	800237c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800235c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002366:	e009      	b.n	800237c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	667b      	str	r3, [r7, #100]	; 0x64
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d155      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x704>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800239e:	4413      	add	r3, r2
 80023a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	011a      	lsls	r2, r3, #4
 80023a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d112      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x6ac>
 80023b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	e044      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0x736>
 80023de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e0:	2b3e      	cmp	r3, #62	; 0x3e
 80023e2:	d811      	bhi.n	8002408 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80023e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	657b      	str	r3, [r7, #84]	; 0x54
 80023ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_PCD_EP_DB_Transmit+0x6c8>
 80023f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f6:	3301      	adds	r3, #1
 80023f8:	657b      	str	r3, [r7, #84]	; 0x54
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	b29a      	uxth	r2, r3
 8002402:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002404:	801a      	strh	r2, [r3, #0]
 8002406:	e02f      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0x736>
 8002408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	657b      	str	r3, [r7, #84]	; 0x54
 800240e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002418:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800241a:	3b01      	subs	r3, #1
 800241c:	657b      	str	r3, [r7, #84]	; 0x54
 800241e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002420:	b29b      	uxth	r3, r3
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	b29b      	uxth	r3, r3
 8002426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800242a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800242e:	b29a      	uxth	r2, r3
 8002430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002432:	801a      	strh	r2, [r3, #0]
 8002434:	e018      	b.n	8002468 <HAL_PCD_EP_DB_Transmit+0x736>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	785b      	ldrb	r3, [r3, #1]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d114      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0x736>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800244c:	4413      	add	r3, r2
 800244e:	667b      	str	r3, [r7, #100]	; 0x64
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	011a      	lsls	r2, r3, #4
 8002456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002458:	4413      	add	r3, r2
 800245a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800245e:	663b      	str	r3, [r7, #96]	; 0x60
 8002460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002462:	b29a      	uxth	r2, r3
 8002464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002466:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6959      	ldr	r1, [r3, #20]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	895a      	ldrh	r2, [r3, #10]
 8002474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002476:	b29b      	uxth	r3, r3
 8002478:	f003 fdb8 	bl	8005fec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	b29b      	uxth	r3, r3
 800248e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002496:	823b      	strh	r3, [r7, #16]
 8002498:	8a3b      	ldrh	r3, [r7, #16]
 800249a:	f083 0310 	eor.w	r3, r3, #16
 800249e:	823b      	strh	r3, [r7, #16]
 80024a0:	8a3b      	ldrh	r3, [r7, #16]
 80024a2:	f083 0320 	eor.w	r3, r3, #32
 80024a6:	823b      	strh	r3, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	8a3b      	ldrh	r3, [r7, #16]
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3788      	adds	r7, #136	; 0x88
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b087      	sub	sp, #28
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	817b      	strh	r3, [r7, #10]
 80024e4:	4613      	mov	r3, r2
 80024e6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80024e8:	897b      	ldrh	r3, [r7, #10]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f4:	897b      	ldrh	r3, [r7, #10]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e009      	b.n	8002520 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800250c:	897a      	ldrh	r2, [r7, #10]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4413      	add	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002520:	893b      	ldrh	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	b29a      	uxth	r2, r3
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	80da      	strh	r2, [r3, #6]
 8002534:	e00b      	b.n	800254e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2201      	movs	r2, #1
 800253a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	b29a      	uxth	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0c1b      	lsrs	r3, r3, #16
 8002548:	b29a      	uxth	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e272      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8087 	beq.w	800268a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d00c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002588:	4b8f      	ldr	r3, [pc, #572]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 030c 	and.w	r3, r3, #12
 8002590:	2b08      	cmp	r3, #8
 8002592:	d112      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
 8002594:	4b8c      	ldr	r3, [pc, #560]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d10b      	bne.n	80025ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d06c      	beq.n	8002688 <HAL_RCC_OscConfig+0x12c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d168      	bne.n	8002688 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e24c      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x76>
 80025c4:	4b80      	ldr	r3, [pc, #512]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7f      	ldr	r2, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	e02e      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a7a      	ldr	r2, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b78      	ldr	r3, [pc, #480]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a77      	ldr	r2, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0xbc>
 80025fe:	4b72      	ldr	r3, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6e      	ldr	r2, [pc, #440]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xd4>
 8002618:	4b6b      	ldr	r3, [pc, #428]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a6a      	ldr	r2, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe f830 	bl	800069c <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe f82c 	bl	800069c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e200      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xe4>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe f81c 	bl	800069c <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe f818 	bl	800069c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1ec      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x10c>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002696:	4b4c      	ldr	r3, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c0      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4939      	ldr	r1, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fd ffd1 	bl	800069c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fd ffcd 	bl	800069c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x270>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fd ffb0 	bl	800069c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fd ffac 	bl	800069c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e180      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d03a      	beq.n	80027e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d019      	beq.n	80027a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fd ff90 	bl	800069c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7fd ff8c 	bl	800069c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e160      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x26c>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f000 faa6 	bl	8002cf0 <RCC_Delay>
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ac:	f7fd ff76 	bl	800069c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b2:	e00f      	b.n	80027d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7fd ff72 	bl	800069c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d908      	bls.n	80027d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e146      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	42420000 	.word	0x42420000
 80027d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e9      	bne.n	80027b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a6 	beq.w	800293a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b8b      	ldr	r3, [pc, #556]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4a87      	ldr	r2, [pc, #540]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002808:	61d3      	str	r3, [r2, #28]
 800280a:	4b85      	ldr	r3, [pc, #532]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800282c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fd ff33 	bl	800069c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fd ff2f 	bl	800069c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e103      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x4c8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x312>
 8002860:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e02d      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x334>
 8002876:	4b6a      	ldr	r3, [pc, #424]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6213      	str	r3, [r2, #32]
 8002882:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6213      	str	r3, [r2, #32]
 800288e:	e01c      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_OscConfig+0x356>
 8002898:	4b61      	ldr	r3, [pc, #388]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4a60      	ldr	r2, [pc, #384]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	6213      	str	r3, [r2, #32]
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a5d      	ldr	r2, [pc, #372]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e00b      	b.n	80028ca <HAL_RCC_OscConfig+0x36e>
 80028b2:	4b5b      	ldr	r3, [pc, #364]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	4a5a      	ldr	r2, [pc, #360]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6213      	str	r3, [r2, #32]
 80028be:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	f023 0304 	bic.w	r3, r3, #4
 80028c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d015      	beq.n	80028fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d2:	f7fd fee3 	bl	800069c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	e00a      	b.n	80028f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028da:	f7fd fedf 	bl	800069c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0b1      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ee      	beq.n	80028da <HAL_RCC_OscConfig+0x37e>
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7fd fecd 	bl	800069c <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fd fec9 	bl	800069c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	; 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e09b      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291c:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ee      	bne.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d105      	bne.n	800293a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292e:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b08      	cmp	r3, #8
 800294e:	d061      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d146      	bne.n	80029e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002958:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fd fe9d 	bl	800069c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7fd fe99 	bl	800069c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e06d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1f0      	bne.n	8002966 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d108      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a0:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a19      	ldr	r1, [r3, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	430b      	orrs	r3, r1
 80029b2:	491b      	ldr	r1, [pc, #108]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fd fe6d 	bl	800069c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c6:	f7fd fe69 	bl	800069c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e03d      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x46a>
 80029e4:	e035      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_RCC_OscConfig+0x4cc>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fd fe56 	bl	800069c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fd fe52 	bl	800069c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e026      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x498>
 8002a12:	e01e      	b.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e019      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_OscConfig+0x500>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0d0      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b6a      	ldr	r3, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b67      	ldr	r3, [pc, #412]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b8      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d020      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a52      	ldr	r2, [pc, #328]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ade:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae0:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	494d      	ldr	r1, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d040      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e07f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d107      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e073      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2e:	4b3d      	ldr	r3, [pc, #244]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06b      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 0203 	bic.w	r2, r3, #3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4936      	ldr	r1, [pc, #216]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b50:	f7fd fda4 	bl	800069c <HAL_GetTick>
 8002b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b58:	f7fd fda0 	bl	800069c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e053      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	4b2d      	ldr	r3, [pc, #180]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 020c 	and.w	r2, r3, #12
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d1eb      	bne.n	8002b58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d210      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 0207 	bic.w	r2, r3, #7
 8002b96:	4922      	ldr	r1, [pc, #136]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e032      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4916      	ldr	r1, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	490e      	ldr	r1, [pc, #56]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bee:	f000 f821 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	490a      	ldr	r1, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	5ccb      	ldrb	r3, [r1, r3]
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fd02 	bl	8000618 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08008af8 	.word	0x08008af8
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b490      	push	{r4, r7}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002c3c:	1d3c      	adds	r4, r7, #4
 8002c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c44:	f240 2301 	movw	r3, #513	; 0x201
 8002c48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x46>
 8002c72:	e02b      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c76:	623b      	str	r3, [r7, #32]
      break;
 8002c78:	e02b      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	0c9b      	lsrs	r3, r3, #18
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3328      	adds	r3, #40	; 0x28
 8002c84:	443b      	add	r3, r7
 8002c86:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c8a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0c5b      	lsrs	r3, r3, #17
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	3328      	adds	r3, #40	; 0x28
 8002ca2:	443b      	add	r3, r7
 8002ca4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ca8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	4a0e      	ldr	r2, [pc, #56]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cae:	fb03 f202 	mul.w	r2, r3, r2
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	e004      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	623b      	str	r3, [r7, #32]
      break;
 8002cca:	e002      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cce:	623b      	str	r3, [r7, #32]
      break;
 8002cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc90      	pop	{r4, r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	08008aa0 	.word	0x08008aa0
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	007a1200 	.word	0x007a1200
 8002cec:	003d0900 	.word	0x003d0900

08002cf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <RCC_Delay+0x34>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <RCC_Delay+0x38>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a5b      	lsrs	r3, r3, #9
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d0c:	bf00      	nop
  }
  while (Delay --);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	60fa      	str	r2, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <RCC_Delay+0x1c>
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000000 	.word	0x20000000
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d07d      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4c:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	4a4b      	ldr	r2, [pc, #300]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	61d3      	str	r3, [r2, #28]
 8002d64:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d118      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a42      	ldr	r2, [pc, #264]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8c:	f7fd fc86 	bl	800069c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	e008      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d94:	f7fd fc82 	bl	800069c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e06d      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002db2:	4b36      	ldr	r3, [pc, #216]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02e      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d027      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002de6:	4a29      	ldr	r2, [pc, #164]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d014      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fd fc51 	bl	800069c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fd fc4d 	bl	800069c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e036      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e14:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ee      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4917      	ldr	r1, [pc, #92]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	490b      	ldr	r1, [pc, #44]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40007000 	.word	0x40007000
 8002e94:	42420440 	.word	0x42420440

08002e98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e093      	b.n	8002fd4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fd fa77 	bl	80003b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002edc:	f023 0307 	bic.w	r3, r3, #7
 8002ee0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f000 fa4f 	bl	8003390 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002f38:	f023 030c 	bic.w	r3, r3, #12
 8002f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	021b      	lsls	r3, r3, #8
 8002f54:	4313      	orrs	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	011a      	lsls	r2, r3, #4
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	031b      	lsls	r3, r3, #12
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	4313      	orrs	r3, r2
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ffc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003004:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d110      	bne.n	800302e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e089      	b.n	8003130 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800302c:	e031      	b.n	8003092 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d110      	bne.n	8003056 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003034:	7bbb      	ldrb	r3, [r7, #14]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800303a:	7b3b      	ldrb	r3, [r7, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d001      	beq.n	8003044 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e075      	b.n	8003130 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003054:	e01d      	b.n	8003092 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003056:	7bfb      	ldrb	r3, [r7, #15]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d108      	bne.n	800306e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800305c:	7bbb      	ldrb	r3, [r7, #14]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d105      	bne.n	800306e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003062:	7b7b      	ldrb	r3, [r7, #13]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003068:	7b3b      	ldrb	r3, [r7, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e05e      	b.n	8003130 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2b04      	cmp	r3, #4
 800309c:	d010      	beq.n	80030c0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800309e:	e01f      	b.n	80030e0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f9d3 	bl	8003454 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0202 	orr.w	r2, r2, #2
 80030bc:	60da      	str	r2, [r3, #12]
      break;
 80030be:	e02e      	b.n	800311e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2201      	movs	r2, #1
 80030c6:	2104      	movs	r1, #4
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f9c3 	bl	8003454 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0204 	orr.w	r2, r2, #4
 80030dc:	60da      	str	r2, [r3, #12]
      break;
 80030de:	e01e      	b.n	800311e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f9b3 	bl	8003454 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	2104      	movs	r1, #4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f9ac 	bl	8003454 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0202 	orr.w	r2, r2, #2
 800310a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0204 	orr.w	r2, r2, #4
 800311a:	60da      	str	r2, [r3, #12]
      break;
 800311c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0202 	mvn.w	r2, #2
 8003164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fc ffee 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8e9 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f8ef 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d122      	bne.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d11b      	bne.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0204 	mvn.w	r2, #4
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fc ffc4 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8bf 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f8c5 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d122      	bne.n	800323c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b08      	cmp	r3, #8
 8003202:	d11b      	bne.n	800323c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0208 	mvn.w	r2, #8
 800320c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2204      	movs	r2, #4
 8003212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fc ff9a 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 8003228:	e005      	b.n	8003236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f895 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f89b 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b10      	cmp	r3, #16
 8003248:	d122      	bne.n	8003290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b10      	cmp	r3, #16
 8003256:	d11b      	bne.n	8003290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0210 	mvn.w	r2, #16
 8003260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2208      	movs	r2, #8
 8003266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fc ff70 	bl	800015c <HAL_TIM_IC_CaptureCallback>
 800327c:	e005      	b.n	800328a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f86b 	bl	800335a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f871 	bl	800336c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0201 	mvn.w	r2, #1
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f846 	bl	8003348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b80      	cmp	r3, #128	; 0x80
 80032c8:	d10e      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d107      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f941 	bl	800356a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b40      	cmp	r3, #64	; 0x40
 80032f4:	d10e      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d107      	bne.n	8003314 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f835 	bl	800337e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b20      	cmp	r3, #32
 8003320:	d10e      	bne.n	8003340 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b20      	cmp	r3, #32
 800332e:	d107      	bne.n	8003340 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0220 	mvn.w	r2, #32
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f90c 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a29      	ldr	r2, [pc, #164]	; (8003448 <TIM_Base_SetConfig+0xb8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_Base_SetConfig+0x30>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0x30>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a26      	ldr	r2, [pc, #152]	; (800344c <TIM_Base_SetConfig+0xbc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x30>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <TIM_Base_SetConfig+0xc0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <TIM_Base_SetConfig+0xb8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0x62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x62>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a19      	ldr	r2, [pc, #100]	; (800344c <TIM_Base_SetConfig+0xbc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x62>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <TIM_Base_SetConfig+0xc0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <TIM_Base_SetConfig+0xb8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d103      	bne.n	8003438 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	615a      	str	r2, [r3, #20]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400
 8003450:	40000800 	.word	0x40000800

08003454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2201      	movs	r2, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	431a      	orrs	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e046      	b.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a16      	ldr	r2, [pc, #88]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d009      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a12      	ldr	r2, [pc, #72]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10c      	bne.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	4313      	orrs	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800357c:	b084      	sub	sp, #16
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	f107 0014 	add.w	r0, r7, #20
 800358a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr

0800359c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	f107 0014 	add.w	r0, r7, #20
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	b004      	add	sp, #16
 8003652:	4770      	bx	lr

08003654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003654:	b480      	push	{r7}
 8003656:	b09b      	sub	sp, #108	; 0x6c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d81f      	bhi.n	80036c6 <USB_ActivateEndpoint+0x72>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <USB_ActivateEndpoint+0x38>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036cf 	.word	0x080036cf
 8003698:	080036ab 	.word	0x080036ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800369c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036a8:	e012      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80036aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80036b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036b6:	e00b      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80036b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036c4:	e004      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80036cc:	e000      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>
      break;
 80036ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	b29a      	uxth	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	441a      	add	r2, r3
 8003720:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8149 	bne.w	80039d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8084 	beq.w	8003854 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	011a      	lsls	r2, r3, #4
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	88db      	ldrh	r3, [r3, #6]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	81fb      	strh	r3, [r7, #14]
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <USB_ActivateEndpoint+0x17c>
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	81bb      	strh	r3, [r7, #12]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	89bb      	ldrh	r3, [r7, #12]
 80037bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	78db      	ldrb	r3, [r3, #3]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d020      	beq.n	800381a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	813b      	strh	r3, [r7, #8]
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	f083 0320 	eor.w	r3, r3, #32
 80037f6:	813b      	strh	r3, [r7, #8]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	893b      	ldrh	r3, [r7, #8]
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
 8003818:	e27f      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384e:	b29b      	uxth	r3, r3
 8003850:	8013      	strh	r3, [r2, #0]
 8003852:	e262      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	4413      	add	r3, r2
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	011a      	lsls	r2, r3, #4
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	4413      	add	r3, r2
 8003872:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	88db      	ldrh	r3, [r3, #6]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	4413      	add	r3, r2
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d112      	bne.n	80038da <USB_ActivateEndpoint+0x286>
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e02f      	b.n	800393a <USB_ActivateEndpoint+0x2e6>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b3e      	cmp	r3, #62	; 0x3e
 80038e0:	d813      	bhi.n	800390a <USB_ActivateEndpoint+0x2b6>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <USB_ActivateEndpoint+0x2a8>
 80038f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f8:	3301      	adds	r3, #1
 80038fa:	663b      	str	r3, [r7, #96]	; 0x60
 80038fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fe:	b29b      	uxth	r3, r3
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29a      	uxth	r2, r3
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e017      	b.n	800393a <USB_ActivateEndpoint+0x2e6>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	663b      	str	r3, [r7, #96]	; 0x60
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <USB_ActivateEndpoint+0x2d0>
 800391e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003920:	3b01      	subs	r3, #1
 8003922:	663b      	str	r3, [r7, #96]	; 0x60
 8003924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003926:	b29b      	uxth	r3, r3
 8003928:	029b      	lsls	r3, r3, #10
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	83fb      	strh	r3, [r7, #30]
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <USB_ActivateEndpoint+0x336>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	83bb      	strh	r3, [r7, #28]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	8bbb      	ldrh	r3, [r7, #28]
 8003976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	837b      	strh	r3, [r7, #26]
 80039a2:	8b7b      	ldrh	r3, [r7, #26]
 80039a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039a8:	837b      	strh	r3, [r7, #26]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039b0:	837b      	strh	r3, [r7, #26]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	8b7b      	ldrh	r3, [r7, #26]
 80039be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	8013      	strh	r3, [r2, #0]
 80039d2:	e1a2      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	4413      	add	r3, r2
 8003a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	011a      	lsls	r2, r3, #4
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	891b      	ldrh	r3, [r3, #8]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	801a      	strh	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a54:	4413      	add	r3, r2
 8003a56:	653b      	str	r3, [r7, #80]	; 0x50
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	895b      	ldrh	r3, [r3, #10]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 8091 	bne.w	8003ba4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01b      	beq.n	8003ad2 <USB_ActivateEndpoint+0x47e>
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	873b      	strh	r3, [r7, #56]	; 0x38
 8003ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01b      	beq.n	8003b22 <USB_ActivateEndpoint+0x4ce>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b80:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
 8003ba2:	e0ba      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003bb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01d      	beq.n	8003bfc <USB_ActivateEndpoint+0x5a8>
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01d      	beq.n	8003c54 <USB_ActivateEndpoint+0x600>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d024      	beq.n	8003ca6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c7a:	f083 0320 	eor.w	r3, r3, #32
 8003c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	8013      	strh	r3, [r2, #0]
 8003ca4:	e01d      	b.n	8003ce2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	441a      	add	r2, r3
 8003d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	376c      	adds	r7, #108	; 0x6c
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08d      	sub	sp, #52	; 0x34
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	7b1b      	ldrb	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 808e 	bne.w	8003e58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d044      	beq.n	8003dce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	81bb      	strh	r3, [r7, #12]
 8003d52:	89bb      	ldrh	r3, [r7, #12]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <USB_DeactivateEndpoint+0x6c>
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	817b      	strh	r3, [r7, #10]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003daa:	813b      	strh	r3, [r7, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]
 8003dcc:	e192      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	827b      	strh	r3, [r7, #18]
 8003ddc:	8a7b      	ldrh	r3, [r7, #18]
 8003dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01b      	beq.n	8003e1e <USB_DeactivateEndpoint+0xf6>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	823b      	strh	r3, [r7, #16]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	8a3b      	ldrh	r3, [r7, #16]
 8003e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	81fb      	strh	r3, [r7, #14]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
 8003e56:	e14d      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 80a5 	bne.w	8003fac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	843b      	strh	r3, [r7, #32]
 8003e70:	8c3b      	ldrh	r3, [r7, #32]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <USB_DeactivateEndpoint+0x18a>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	83fb      	strh	r3, [r7, #30]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	8bfb      	ldrh	r3, [r7, #30]
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	83bb      	strh	r3, [r7, #28]
 8003ec0:	8bbb      	ldrh	r3, [r7, #28]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01b      	beq.n	8003f02 <USB_DeactivateEndpoint+0x1da>
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	837b      	strh	r3, [r7, #26]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	833b      	strh	r3, [r7, #24]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	8b3b      	ldrh	r3, [r7, #24]
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	82fb      	strh	r3, [r7, #22]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	82bb      	strh	r3, [r7, #20]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	8abb      	ldrh	r3, [r7, #20]
 8003f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	8013      	strh	r3, [r2, #0]
 8003faa:	e0a3      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <USB_DeactivateEndpoint+0x2d4>
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	857b      	strh	r3, [r7, #42]	; 0x2a
 800400a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <USB_DeactivateEndpoint+0x324>
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	853b      	strh	r3, [r7, #40]	; 0x28
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004080:	b29b      	uxth	r3, r3
 8004082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3734      	adds	r7, #52	; 0x34
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b0cc      	sub	sp, #304	; 0x130
 8004104:	af00      	add	r7, sp, #0
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800410e:	6018      	str	r0, [r3, #0]
 8004110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004118:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800411a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f041 817d 	bne.w	8005426 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800412c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004158:	e007      	b.n	800416a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800415a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800416a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	7b1b      	ldrb	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d152      	bne.n	8004220 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800417a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	88da      	ldrh	r2, [r3, #6]
 8004192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004196:	b29b      	uxth	r3, r3
 8004198:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800419c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80041a0:	6800      	ldr	r0, [r0, #0]
 80041a2:	f001 ff23 	bl	8005fec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4619      	mov	r1, r3
 80041cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041d8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	440a      	add	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	011a      	lsls	r2, r3, #4
 80041f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004204:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800420e:	b29a      	uxth	r2, r3
 8004210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004214:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	f001 b8b5 	b.w	800538a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	78db      	ldrb	r3, [r3, #3]
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 84c6 	bne.w	8004bbe <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	f240 8443 	bls.w	8004ad6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800427a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80042ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 823e 	beq.w	800476e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 809a 	bne.w	800444c <USB_EPStartXfer+0x34c>
 8004318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004324:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004346:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800434a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	440a      	add	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	011a      	lsls	r2, r3, #4
 8004362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4413      	add	r3, r2
 800436e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004376:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d122      	bne.n	80043ca <USB_EPStartXfer+0x2ca>
 8004384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004396:	b29a      	uxth	r2, r3
 8004398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e079      	b.n	80044be <USB_EPStartXfer+0x3be>
 80043ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ce:	2b3e      	cmp	r3, #62	; 0x3e
 80043d0:	d81b      	bhi.n	800440a <USB_EPStartXfer+0x30a>
 80043d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <USB_EPStartXfer+0x2f2>
 80043e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ec:	3301      	adds	r3, #1
 80043ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	029b      	lsls	r3, r3, #10
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004400:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e059      	b.n	80044be <USB_EPStartXfer+0x3be>
 800440a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <USB_EPStartXfer+0x32a>
 8004420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004424:	3b01      	subs	r3, #1
 8004426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800442a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800442e:	b29b      	uxth	r3, r3
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	e038      	b.n	80044be <USB_EPStartXfer+0x3be>
 800444c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d130      	bne.n	80044be <USB_EPStartXfer+0x3be>
 800445c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446a:	b29b      	uxth	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004472:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004476:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800447a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	440a      	add	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004496:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4413      	add	r3, r2
 800449e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80044a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	895b      	ldrh	r3, [r3, #10]
 80044ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80044e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80044e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f001 fd7d 	bl	8005fec <USB_WritePMA>
            ep->xfer_buff += len;
 80044f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004502:	441a      	add	r2, r3
 8004504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d90f      	bls.n	800454c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800452c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800453c:	1ad2      	subs	r2, r2, r3
 800453e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	621a      	str	r2, [r3, #32]
 800454a:	e00e      	b.n	800456a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800454c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800455c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800456a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 809a 	bne.w	80046b0 <USB_EPStartXfer+0x5b0>
 800457c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004580:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004584:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004588:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045ae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	440a      	add	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80045d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d122      	bne.n	800462e <USB_EPStartXfer+0x52e>
 80045e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29a      	uxth	r2, r3
 8004620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004624:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e083      	b.n	8004736 <USB_EPStartXfer+0x636>
 800462e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004632:	2b3e      	cmp	r3, #62	; 0x3e
 8004634:	d81b      	bhi.n	800466e <USB_EPStartXfer+0x56e>
 8004636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <USB_EPStartXfer+0x556>
 800464c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004650:	3301      	adds	r3, #1
 8004652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004656:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b29a      	uxth	r2, r3
 8004660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004664:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e063      	b.n	8004736 <USB_EPStartXfer+0x636>
 800466e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <USB_EPStartXfer+0x58e>
 8004684:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004688:	3b01      	subs	r3, #1
 800468a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800468e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004692:	b29b      	uxth	r3, r3
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	b29b      	uxth	r3, r3
 8004698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e042      	b.n	8004736 <USB_EPStartXfer+0x636>
 80046b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d13a      	bne.n	8004736 <USB_EPStartXfer+0x636>
 80046c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	440a      	add	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	011a      	lsls	r2, r3, #4
 800470a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4413      	add	r3, r2
 8004716:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800471a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004728:	b29a      	uxth	r2, r3
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	891b      	ldrh	r3, [r3, #8]
 8004742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004756:	b29b      	uxth	r3, r3
 8004758:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800475c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004760:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004764:	6800      	ldr	r0, [r0, #0]
 8004766:	f001 fc41 	bl	8005fec <USB_WritePMA>
 800476a:	f000 be0e 	b.w	800538a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800476e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d16d      	bne.n	800485a <USB_EPStartXfer+0x75a>
 800477e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
 800478a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	4413      	add	r3, r2
 80047a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d112      	bne.n	80047e8 <USB_EPStartXfer+0x6e8>
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e063      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 80047e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ec:	2b3e      	cmp	r3, #62	; 0x3e
 80047ee:	d817      	bhi.n	8004820 <USB_EPStartXfer+0x720>
 80047f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <USB_EPStartXfer+0x710>
 8004806:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800480a:	3301      	adds	r3, #1
 800480c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29a      	uxth	r2, r3
 800481a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e047      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 8004820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800482a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <USB_EPStartXfer+0x740>
 8004836:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800483a:	3b01      	subs	r3, #1
 800483c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004844:	b29b      	uxth	r3, r3
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e02a      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d122      	bne.n	80048b0 <USB_EPStartXfer+0x7b0>
 800486a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	653b      	str	r3, [r7, #80]	; 0x50
 8004876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004884:	b29b      	uxth	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	4413      	add	r3, r2
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	4413      	add	r3, r2
 80048a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	891b      	ldrh	r3, [r3, #8]
 80048bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6959      	ldr	r1, [r3, #20]
 80048cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80048da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80048de:	6800      	ldr	r0, [r0, #0]
 80048e0:	f001 fb84 	bl	8005fec <USB_WritePMA>
            ep->xfer_buff += len;
 80048e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f4:	441a      	add	r2, r3
 80048f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90f      	bls.n	800493e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492e:	1ad2      	subs	r2, r2, r3
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	621a      	str	r2, [r3, #32]
 800493c:	e00e      	b.n	800495c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800495c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	643b      	str	r3, [r7, #64]	; 0x40
 8004968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d16d      	bne.n	8004a54 <USB_EPStartXfer+0x954>
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	4413      	add	r3, r2
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
 800499c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
 80049b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d112      	bne.n	80049e2 <USB_EPStartXfer+0x8e2>
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e05d      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 80049e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e6:	2b3e      	cmp	r3, #62	; 0x3e
 80049e8:	d817      	bhi.n	8004a1a <USB_EPStartXfer+0x91a>
 80049ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <USB_EPStartXfer+0x90a>
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a04:	3301      	adds	r3, #1
 8004a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	e041      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <USB_EPStartXfer+0x93a>
 8004a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e024      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d11c      	bne.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	4413      	add	r3, r2
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	011a      	lsls	r2, r3, #4
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	895b      	ldrh	r3, [r3, #10]
 8004aaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6959      	ldr	r1, [r3, #20]
 8004aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ac4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ac8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f001 fa8d 	bl	8005fec <USB_WritePMA>
 8004ad2:	f000 bc5a 	b.w	800538a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	4413      	add	r3, r2
 8004b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	891b      	ldrh	r3, [r3, #8]
 8004b94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6959      	ldr	r1, [r3, #20]
 8004ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bb2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bb6:	6800      	ldr	r0, [r0, #0]
 8004bb8:	f001 fa18 	bl	8005fec <USB_WritePMA>
 8004bbc:	e3e5      	b.n	800538a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 81bc 	beq.w	8004fd8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d16d      	bne.n	8004d5a <USB_EPStartXfer+0xc5a>
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9e:	4413      	add	r3, r2
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	011a      	lsls	r2, r3, #4
 8004cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb8:	677b      	str	r3, [r7, #116]	; 0x74
 8004cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d112      	bne.n	8004ce8 <USB_EPStartXfer+0xbe8>
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e060      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cec:	2b3e      	cmp	r3, #62	; 0x3e
 8004cee:	d817      	bhi.n	8004d20 <USB_EPStartXfer+0xc20>
 8004cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <USB_EPStartXfer+0xc10>
 8004d06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	029b      	lsls	r3, r3, #10
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <USB_EPStartXfer+0xc40>
 8004d36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e027      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11f      	bne.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d80:	4413      	add	r3, r2
 8004d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	011a      	lsls	r2, r3, #4
 8004d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d98:	4413      	add	r3, r2
 8004d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004da8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dd8:	6800      	ldr	r0, [r0, #0]
 8004dda:	f001 f907 	bl	8005fec <USB_WritePMA>
          ep->xfer_buff += len;
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dee:	441a      	add	r2, r3
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d90f      	bls.n	8004e38 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	621a      	str	r2, [r3, #32]
 8004e36:	e00e      	b.n	8004e56 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8295 	beq.w	800538a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d16d      	bne.n	8004f4c <USB_EPStartXfer+0xe4c>
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e90:	4413      	add	r3, r2
 8004e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011a      	lsls	r2, r3, #4
 8004ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8004eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d112      	bne.n	8004eda <USB_EPStartXfer+0xdda>
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e063      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee0:	d817      	bhi.n	8004f12 <USB_EPStartXfer+0xe12>
 8004ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <USB_EPStartXfer+0xe02>
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	3301      	adds	r3, #1
 8004efe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e047      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <USB_EPStartXfer+0xe32>
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e02a      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d122      	bne.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	673b      	str	r3, [r7, #112]	; 0x70
 8004f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	4413      	add	r3, r2
 8004f7e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	891b      	ldrh	r3, [r3, #8]
 8004fae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fd0:	6800      	ldr	r0, [r0, #0]
 8004fd2:	f001 f80b 	bl	8005fec <USB_WritePMA>
 8004fd6:	e1d8      	b.n	800538a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d178      	bne.n	80050da <USB_EPStartXfer+0xfda>
 8004fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800500c:	4413      	add	r3, r2
 800500e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011a      	lsls	r2, r3, #4
 8005020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005024:	4413      	add	r3, r2
 8005026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800502a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800502e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d116      	bne.n	8005064 <USB_EPStartXfer+0xf64>
 8005036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005042:	b29a      	uxth	r2, r3
 8005044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e06b      	b.n	800513c <USB_EPStartXfer+0x103c>
 8005064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005068:	2b3e      	cmp	r3, #62	; 0x3e
 800506a:	d818      	bhi.n	800509e <USB_EPStartXfer+0xf9e>
 800506c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <USB_EPStartXfer+0xf8c>
 8005082:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005086:	3301      	adds	r3, #1
 8005088:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800508c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005090:	b29b      	uxth	r3, r3
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e04e      	b.n	800513c <USB_EPStartXfer+0x103c>
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <USB_EPStartXfer+0xfbe>
 80050b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050b8:	3b01      	subs	r3, #1
 80050ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e030      	b.n	800513c <USB_EPStartXfer+0x103c>
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d128      	bne.n	800513c <USB_EPStartXfer+0x103c>
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800510e:	4413      	add	r3, r2
 8005110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005126:	4413      	add	r3, r2
 8005128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800512c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	b29a      	uxth	r2, r3
 8005136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800513a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	891b      	ldrh	r3, [r3, #8]
 8005148:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515c:	b29b      	uxth	r3, r3
 800515e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005162:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005166:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	f000 ff3e 	bl	8005fec <USB_WritePMA>
          ep->xfer_buff += len;
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005180:	441a      	add	r2, r3
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d90f      	bls.n	80051ca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80051aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	621a      	str	r2, [r3, #32]
 80051c8:	e00e      	b.n	80051e8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80cc 	beq.w	800538a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d178      	bne.n	8005302 <USB_EPStartXfer+0x1202>
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005234:	4413      	add	r3, r2
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	4413      	add	r3, r2
 800524e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <USB_EPStartXfer+0x118c>
 800525e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526a:	b29a      	uxth	r2, r3
 800526c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005282:	b29a      	uxth	r2, r3
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e064      	b.n	8005356 <USB_EPStartXfer+0x1256>
 800528c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005290:	2b3e      	cmp	r3, #62	; 0x3e
 8005292:	d818      	bhi.n	80052c6 <USB_EPStartXfer+0x11c6>
 8005294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <USB_EPStartXfer+0x11b4>
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ae:	3301      	adds	r3, #1
 80052b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e047      	b.n	8005356 <USB_EPStartXfer+0x1256>
 80052c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <USB_EPStartXfer+0x11e6>
 80052dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e0:	3b01      	subs	r3, #1
 80052e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e029      	b.n	8005356 <USB_EPStartXfer+0x1256>
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d121      	bne.n	8005356 <USB_EPStartXfer+0x1256>
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005328:	4413      	add	r3, r2
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	011a      	lsls	r2, r3, #4
 800533c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005340:	4413      	add	r3, r2
 8005342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	b29a      	uxth	r2, r3
 8005350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005354:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	895b      	ldrh	r3, [r3, #10]
 8005362:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6959      	ldr	r1, [r3, #20]
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	b29b      	uxth	r3, r3
 8005378:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800537c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005380:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005384:	6800      	ldr	r0, [r0, #0]
 8005386:	f000 fe31 	bl	8005fec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053ac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	8013      	strh	r3, [r2, #0]
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053ca:	8812      	ldrh	r2, [r2, #0]
 80053cc:	f082 0210 	eor.w	r2, r2, #16
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053de:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053e2:	8812      	ldrh	r2, [r2, #0]
 80053e4:	f082 0220 	eor.w	r2, r2, #32
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
 8005422:	f000 bc9f 	b.w	8005d64 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	7b1b      	ldrb	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 80ae 	bne.w	8005594 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d917      	bls.n	8005484 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	1ad2      	subs	r2, r2, r3
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	619a      	str	r2, [r3, #24]
 8005482:	e00e      	b.n	80054a2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054c6:	4413      	add	r3, r2
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	011a      	lsls	r2, r3, #4
 80054da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054de:	4413      	add	r3, r2
 80054e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <USB_EPStartXfer+0x141e>
 80054f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29a      	uxth	r2, r3
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e3e8      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 800551e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005522:	2b3e      	cmp	r3, #62	; 0x3e
 8005524:	d818      	bhi.n	8005558 <USB_EPStartXfer+0x1458>
 8005526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <USB_EPStartXfer+0x1446>
 800553c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005540:	3301      	adds	r3, #1
 8005542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800554a:	b29b      	uxth	r3, r3
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	b29a      	uxth	r2, r3
 8005550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e3cb      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <USB_EPStartXfer+0x1478>
 800556e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005572:	3b01      	subs	r3, #1
 8005574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005578:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e3ad      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	78db      	ldrb	r3, [r3, #3]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f040 8200 	bne.w	80059a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8091 	bne.w	80056da <USB_EPStartXfer+0x15da>
 80055b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055dc:	4413      	add	r3, r2
 80055de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	011a      	lsls	r2, r3, #4
 80055f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d116      	bne.n	800563c <USB_EPStartXfer+0x153c>
 800560e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e083      	b.n	8005744 <USB_EPStartXfer+0x1644>
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b3e      	cmp	r3, #62	; 0x3e
 800564a:	d820      	bhi.n	800568e <USB_EPStartXfer+0x158e>
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <USB_EPStartXfer+0x157c>
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	3301      	adds	r3, #1
 8005678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005680:	b29b      	uxth	r3, r3
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e05a      	b.n	8005744 <USB_EPStartXfer+0x1644>
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USB_EPStartXfer+0x15be>
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e034      	b.n	8005744 <USB_EPStartXfer+0x1644>
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d12c      	bne.n	8005744 <USB_EPStartXfer+0x1644>
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570e:	4413      	add	r3, r2
 8005710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005726:	4413      	add	r3, r2
 8005728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	b29a      	uxth	r2, r3
 800573e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8091 	bne.w	8005886 <USB_EPStartXfer+0x1786>
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005788:	4413      	add	r3, r2
 800578a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	011a      	lsls	r2, r3, #4
 800579c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057a0:	4413      	add	r3, r2
 80057a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <USB_EPStartXfer+0x16e8>
 80057ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e07c      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b3e      	cmp	r3, #62	; 0x3e
 80057f6:	d820      	bhi.n	800583a <USB_EPStartXfer+0x173a>
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <USB_EPStartXfer+0x1728>
 800581e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005828:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800582c:	b29b      	uxth	r3, r3
 800582e:	029b      	lsls	r3, r3, #10
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e053      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <USB_EPStartXfer+0x176a>
 8005860:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005864:	3b01      	subs	r3, #1
 8005866:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800586a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800586e:	b29b      	uxth	r3, r3
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e02d      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d125      	bne.n	80058e2 <USB_EPStartXfer+0x17e2>
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ac:	4413      	add	r3, r2
 80058ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	011a      	lsls	r2, r3, #4
 80058c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80058e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 81fe 	beq.w	8005cf0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005914:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <USB_EPStartXfer+0x182c>
 8005920:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800592c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 81db 	bne.w	8005cf0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800593a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 81d4 	bne.w	8005cf0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
 80059a4:	e1a4      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 819a 	bne.w	8005cec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d917      	bls.n	8005a04 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e00e      	b.n	8005a22 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d178      	bne.n	8005b24 <USB_EPStartXfer+0x1a24>
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <USB_EPStartXfer+0x19ae>
 8005a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e06b      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab4:	d818      	bhi.n	8005ae8 <USB_EPStartXfer+0x19e8>
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <USB_EPStartXfer+0x19d6>
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e04e      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <USB_EPStartXfer+0x1a08>
 8005afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e030      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d128      	bne.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	4413      	add	r3, r2
 8005b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d178      	bne.n	8005c96 <USB_EPStartXfer+0x1b96>
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc8:	4413      	add	r3, r2
 8005bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d116      	bne.n	8005c20 <USB_EPStartXfer+0x1b20>
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e067      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	2b3e      	cmp	r3, #62	; 0x3e
 8005c26:	d818      	bhi.n	8005c5a <USB_EPStartXfer+0x1b5a>
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USB_EPStartXfer+0x1b48>
 8005c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e04a      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <USB_EPStartXfer+0x1b7a>
 8005c70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e02c      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d124      	bne.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	011a      	lsls	r2, r3, #4
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e001      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e03a      	b.n	8005d66 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	81bb      	strh	r3, [r7, #12]
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	f083 0310 	eor.w	r3, r3, #16
 8005da0:	81bb      	strh	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	89bb      	ldrh	r3, [r7, #12]
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]
 8005dc2:	e01f      	b.n	8005e04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	81fb      	strh	r3, [r7, #14]
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005de2:	81fb      	strh	r3, [r7, #14]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	89fb      	ldrh	r3, [r7, #14]
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 809d 	bne.w	8005f5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d04c      	beq.n	8005ec6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	823b      	strh	r3, [r7, #16]
 8005e3a:	8a3b      	ldrh	r3, [r7, #16]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <USB_EPClearStall+0x6c>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	81fb      	strh	r3, [r7, #14]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d06c      	beq.n	8005f5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	81bb      	strh	r3, [r7, #12]
 8005e9c:	89bb      	ldrh	r3, [r7, #12]
 8005e9e:	f083 0320 	eor.w	r3, r3, #32
 8005ea2:	81bb      	strh	r3, [r7, #12]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
 8005ec4:	e04b      	b.n	8005f5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	82fb      	strh	r3, [r7, #22]
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <USB_EPClearStall+0x106>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	82bb      	strh	r3, [r7, #20]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8abb      	ldrh	r3, [r7, #20]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	827b      	strh	r3, [r7, #18]
 8005f2e:	8a7b      	ldrh	r3, [r7, #18]
 8005f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f34:	827b      	strh	r3, [r7, #18]
 8005f36:	8a7b      	ldrh	r3, [r7, #18]
 8005f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f3c:	827b      	strh	r3, [r7, #18]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	8a7b      	ldrh	r3, [r7, #18]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08d      	sub	sp, #52	; 0x34
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	80fb      	strh	r3, [r7, #6]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006002:	88bb      	ldrh	r3, [r7, #4]
 8006004:	3301      	adds	r3, #1
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	e01e      	b.n	8006064 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	3301      	adds	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	b29a      	uxth	r2, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	3302      	adds	r3, #2
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	3302      	adds	r3, #2
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	3b01      	subs	r3, #1
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1dd      	bne.n	8006026 <USB_WritePMA+0x3a>
  }
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	3734      	adds	r7, #52	; 0x34
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006076:	b480      	push	{r7}
 8006078:	b08b      	sub	sp, #44	; 0x2c
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4611      	mov	r1, r2
 8006082:	461a      	mov	r2, r3
 8006084:	460b      	mov	r3, r1
 8006086:	80fb      	strh	r3, [r7, #6]
 8006088:	4613      	mov	r3, r2
 800608a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800608c:	88bb      	ldrh	r3, [r7, #4]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	005a      	lsls	r2, r3, #1
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	e01b      	b.n	80060e8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	3302      	adds	r3, #2
 80060bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	3302      	adds	r3, #2
 80060e0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	3b01      	subs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e0      	bne.n	80060b0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80060ee:	88bb      	ldrh	r3, [r7, #4]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	701a      	strb	r2, [r3, #0]
  }
}
 800610a:	bf00      	nop
 800610c:	372c      	adds	r7, #44	; 0x2c
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7c1b      	ldrb	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800612c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006130:	2202      	movs	r2, #2
 8006132:	2181      	movs	r1, #129	; 0x81
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fe86 	bl	8007e46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006144:	2202      	movs	r2, #2
 8006146:	2101      	movs	r1, #1
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fe7c 	bl	8007e46 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006156:	e012      	b.n	800617e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	2202      	movs	r2, #2
 800615c:	2181      	movs	r1, #129	; 0x81
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fe71 	bl	8007e46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	2202      	movs	r2, #2
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fe68 	bl	8007e46 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800617e:	2308      	movs	r3, #8
 8006180:	2203      	movs	r2, #3
 8006182:	2182      	movs	r1, #130	; 0x82
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 fe5e 	bl	8007e46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006190:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006194:	f001 ff7e 	bl	8008094 <USBD_static_malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e026      	b.n	80061fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	7c1b      	ldrb	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e4:	2101      	movs	r1, #1
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 ff1e 	bl	8008028 <USBD_LL_PrepareReceive>
 80061ec:	e007      	b.n	80061fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f4:	2340      	movs	r3, #64	; 0x40
 80061f6:	2101      	movs	r1, #1
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 ff15 	bl	8008028 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006218:	2181      	movs	r1, #129	; 0x81
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fe39 	bl	8007e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fe32 	bl	8007e92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006236:	2182      	movs	r1, #130	; 0x82
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fe2a 	bl	8007e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625e:	4618      	mov	r0, r3
 8006260:	f001 ff24 	bl	80080ac <USBD_static_free>
    pdev->pClassData = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800629c:	2b00      	cmp	r3, #0
 800629e:	d039      	beq.n	8006314 <USBD_CDC_Setup+0x9e>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d17f      	bne.n	80063a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	88db      	ldrh	r3, [r3, #6]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d029      	beq.n	8006300 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da11      	bge.n	80062da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80062c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	88d2      	ldrh	r2, [r2, #6]
 80062c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fa09 	bl	80076ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80062d8:	e06b      	b.n	80063b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785a      	ldrb	r2, [r3, #1]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	88db      	ldrh	r3, [r3, #6]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062f0:	6939      	ldr	r1, [r7, #16]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 fa24 	bl	8007746 <USBD_CtlPrepareRx>
      break;
 80062fe:	e058      	b.n	80063b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	7850      	ldrb	r0, [r2, #1]
 800630c:	2200      	movs	r2, #0
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4798      	blx	r3
      break;
 8006312:	e04e      	b.n	80063b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b0b      	cmp	r3, #11
 800631a:	d02e      	beq.n	800637a <USBD_CDC_Setup+0x104>
 800631c:	2b0b      	cmp	r3, #11
 800631e:	dc38      	bgt.n	8006392 <USBD_CDC_Setup+0x11c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <USBD_CDC_Setup+0xb4>
 8006324:	2b0a      	cmp	r3, #10
 8006326:	d014      	beq.n	8006352 <USBD_CDC_Setup+0xdc>
 8006328:	e033      	b.n	8006392 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	2b03      	cmp	r3, #3
 8006332:	d107      	bne.n	8006344 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	2202      	movs	r2, #2
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f9d4 	bl	80076ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006342:	e02e      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f965 	bl	8007616 <USBD_CtlError>
            ret = USBD_FAIL;
 800634c:	2302      	movs	r3, #2
 800634e:	75fb      	strb	r3, [r7, #23]
          break;
 8006350:	e027      	b.n	80063a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	2b03      	cmp	r3, #3
 800635a:	d107      	bne.n	800636c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800635c:	f107 030f 	add.w	r3, r7, #15
 8006360:	2201      	movs	r2, #1
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f9c0 	bl	80076ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800636a:	e01a      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f951 	bl	8007616 <USBD_CtlError>
            ret = USBD_FAIL;
 8006374:	2302      	movs	r3, #2
 8006376:	75fb      	strb	r3, [r7, #23]
          break;
 8006378:	e013      	b.n	80063a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006380:	2b03      	cmp	r3, #3
 8006382:	d00d      	beq.n	80063a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 f945 	bl	8007616 <USBD_CtlError>
            ret = USBD_FAIL;
 800638c:	2302      	movs	r3, #2
 800638e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006390:	e006      	b.n	80063a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f93e 	bl	8007616 <USBD_CtlError>
          ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
          break;
 800639e:	e000      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
          break;
 80063a0:	bf00      	nop
      }
      break;
 80063a2:	e006      	b.n	80063b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f935 	bl	8007616 <USBD_CtlError>
      ret = USBD_FAIL;
 80063ac:	2302      	movs	r3, #2
 80063ae:	75fb      	strb	r3, [r7, #23]
      break;
 80063b0:	bf00      	nop
  }

  return ret;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d03a      	beq.n	8006458 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	331c      	adds	r3, #28
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d029      	beq.n	800644c <USBD_CDC_DataIn+0x90>
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	331c      	adds	r3, #28
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	78f9      	ldrb	r1, [r7, #3]
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	460b      	mov	r3, r1
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4403      	add	r3, r0
 8006418:	3338      	adds	r3, #56	; 0x38
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d110      	bne.n	800644c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	331c      	adds	r3, #28
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800643e:	78f9      	ldrb	r1, [r7, #3]
 8006440:	2300      	movs	r3, #0
 8006442:	2200      	movs	r2, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fdcc 	bl	8007fe2 <USBD_LL_Transmit>
 800644a:	e003      	b.n	8006454 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fdf7 	bl	800806e <USBD_LL_GetRxDataSize>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064a6:	4611      	mov	r1, r2
 80064a8:	4798      	blx	r3

    return USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d015      	beq.n	80064fe <USBD_CDC_EP0_RxReady+0x46>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064d8:	2bff      	cmp	r3, #255	; 0xff
 80064da:	d010      	beq.n	80064fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80064ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064f2:	b292      	uxth	r2, r2
 80064f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2243      	movs	r2, #67	; 0x43
 8006514:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000094 	.word	0x20000094

08006528 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2243      	movs	r2, #67	; 0x43
 8006534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	; (8006544 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000050 	.word	0x20000050

08006548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2243      	movs	r2, #67	; 0x43
 8006554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006556:	4b03      	ldr	r3, [pc, #12]	; (8006564 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	200000d8 	.word	0x200000d8

08006568 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	220a      	movs	r2, #10
 8006574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006576:	4b03      	ldr	r3, [pc, #12]	; (8006584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c

08006588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006592:	2302      	movs	r3, #2
 8006594:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01c      	beq.n	8006660 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800662c:	2b00      	cmp	r3, #0
 800662e:	d115      	bne.n	800665c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800664e:	b29b      	uxth	r3, r3
 8006650:	2181      	movs	r1, #129	; 0x81
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 fcc5 	bl	8007fe2 <USBD_LL_Transmit>

      return USBD_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e002      	b.n	8006662 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006660:	2302      	movs	r3, #2
  }
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006678:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d017      	beq.n	80066b4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7c1b      	ldrb	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006696:	2101      	movs	r1, #1
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fcc5 	bl	8008028 <USBD_LL_PrepareReceive>
 800669e:	e007      	b.n	80066b0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a6:	2340      	movs	r3, #64	; 0x40
 80066a8:	2101      	movs	r1, #1
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fcbc 	bl	8008028 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	4613      	mov	r3, r2
 80066ca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066d2:	2302      	movs	r3, #2
 80066d4:	e01a      	b.n	800670c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	79fa      	ldrb	r2, [r7, #7]
 8006702:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f001 fb29 	bl	8007d5c <USBD_LL_Init>

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d006      	beq.n	8006736 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	e001      	b.n	800673a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800673a:	7bfb      	ldrb	r3, [r7, #15]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	bc80      	pop	{r7}
 8006744:	4770      	bx	lr

08006746 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b082      	sub	sp, #8
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fb5e 	bl	8007e10 <USBD_LL_Start>

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr

08006772 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800677e:	2302      	movs	r3, #2
 8006780:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00c      	beq.n	80067a6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	4611      	mov	r1, r2
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	4611      	mov	r1, r2
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3

  return USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fed8 	bl	800759e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067fc:	461a      	mov	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	2b02      	cmp	r3, #2
 8006810:	d016      	beq.n	8006840 <USBD_LL_SetupStage+0x6a>
 8006812:	2b02      	cmp	r3, #2
 8006814:	d81c      	bhi.n	8006850 <USBD_LL_SetupStage+0x7a>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <USBD_LL_SetupStage+0x4a>
 800681a:	2b01      	cmp	r3, #1
 800681c:	d008      	beq.n	8006830 <USBD_LL_SetupStage+0x5a>
 800681e:	e017      	b.n	8006850 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f9cb 	bl	8006bc4 <USBD_StdDevReq>
      break;
 800682e:	e01a      	b.n	8006866 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa2d 	bl	8006c98 <USBD_StdItfReq>
      break;
 800683e:	e012      	b.n	8006866 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa6d 	bl	8006d28 <USBD_StdEPReq>
      break;
 800684e:	e00a      	b.n	8006866 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fb36 	bl	8007ed0 <USBD_LL_StallEP>
      break;
 8006864:	bf00      	nop
  }

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	460b      	mov	r3, r1
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d14b      	bne.n	800691c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800688a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006892:	2b03      	cmp	r3, #3
 8006894:	d134      	bne.n	8006900 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d919      	bls.n	80068d6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d203      	bcs.n	80068c4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	e002      	b.n	80068ca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 ff57 	bl	8007782 <USBD_CtlContinueRx>
 80068d4:	e038      	b.n	8006948 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d105      	bne.n	80068f8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 ff54 	bl	80077a6 <USBD_CtlSendStatus>
 80068fe:	e023      	b.n	8006948 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006906:	2b05      	cmp	r3, #5
 8006908:	d11e      	bne.n	8006948 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006912:	2100      	movs	r1, #0
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f001 fadb 	bl	8007ed0 <USBD_LL_StallEP>
 800691a:	e015      	b.n	8006948 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00d      	beq.n	8006944 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800692e:	2b03      	cmp	r3, #3
 8006930:	d108      	bne.n	8006944 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	7afa      	ldrb	r2, [r7, #11]
 800693c:	4611      	mov	r1, r2
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	4798      	blx	r3
 8006942:	e001      	b.n	8006948 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006944:	2302      	movs	r3, #2
 8006946:	e000      	b.n	800694a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	460b      	mov	r3, r1
 800695c:	607a      	str	r2, [r7, #4]
 800695e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d17f      	bne.n	8006a66 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3314      	adds	r3, #20
 800696a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006972:	2b02      	cmp	r3, #2
 8006974:	d15c      	bne.n	8006a30 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	429a      	cmp	r2, r3
 8006980:	d915      	bls.n	80069ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	b29b      	uxth	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fec1 	bl	8007722 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069a0:	2300      	movs	r3, #0
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f001 fb3e 	bl	8008028 <USBD_LL_PrepareReceive>
 80069ac:	e04e      	b.n	8006a4c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	6912      	ldr	r2, [r2, #16]
 80069b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ba:	fb01 f202 	mul.w	r2, r1, r2
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d11c      	bne.n	80069fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d316      	bcc.n	80069fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80069da:	429a      	cmp	r2, r3
 80069dc:	d20f      	bcs.n	80069fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fe9d 	bl	8007722 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069f0:	2300      	movs	r3, #0
 80069f2:	2200      	movs	r2, #0
 80069f4:	2100      	movs	r1, #0
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f001 fb16 	bl	8008028 <USBD_LL_PrepareReceive>
 80069fc:	e026      	b.n	8006a4c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d105      	bne.n	8006a20 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f001 fa54 	bl	8007ed0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fecf 	bl	80077cc <USBD_CtlReceiveStatus>
 8006a2e:	e00d      	b.n	8006a4c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d004      	beq.n	8006a44 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f001 fa42 	bl	8007ed0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d11d      	bne.n	8006a92 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff fe81 	bl	800675e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a64:	e015      	b.n	8006a92 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d108      	bne.n	8006a8e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	7afa      	ldrb	r2, [r7, #11]
 8006a86:	4611      	mov	r1, r2
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	4798      	blx	r3
 8006a8c:	e001      	b.n	8006a92 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e000      	b.n	8006a94 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aa4:	2340      	movs	r3, #64	; 0x40
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f9cb 	bl	8007e46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f9bd 	bl	8007e46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2240      	movs	r2, #64	; 0x40
 8006ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	6852      	ldr	r2, [r2, #4]
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	4611      	mov	r1, r2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
  }

  return USBD_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	460b      	mov	r3, r1
 8006b28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	78fa      	ldrb	r2, [r7, #3]
 8006b2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2204      	movs	r2, #4
 8006b54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d105      	bne.n	8006b82 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b082      	sub	sp, #8
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d10b      	bne.n	8006bb8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d005      	beq.n	8006bea <USBD_StdDevReq+0x26>
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d84f      	bhi.n	8006c82 <USBD_StdDevReq+0xbe>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <USBD_StdDevReq+0x36>
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d14b      	bne.n	8006c82 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
      break;
 8006bf8:	e048      	b.n	8006c8c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d839      	bhi.n	8006c76 <USBD_StdDevReq+0xb2>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USBD_StdDevReq+0x44>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c59 	.word	0x08006c59
 8006c0c:	08006c6d 	.word	0x08006c6d
 8006c10:	08006c77 	.word	0x08006c77
 8006c14:	08006c63 	.word	0x08006c63
 8006c18:	08006c77 	.word	0x08006c77
 8006c1c:	08006c3b 	.word	0x08006c3b
 8006c20:	08006c31 	.word	0x08006c31
 8006c24:	08006c77 	.word	0x08006c77
 8006c28:	08006c4f 	.word	0x08006c4f
 8006c2c:	08006c45 	.word	0x08006c45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f9dc 	bl	8006ff0 <USBD_GetDescriptor>
          break;
 8006c38:	e022      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb3f 	bl	80072c0 <USBD_SetAddress>
          break;
 8006c42:	e01d      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb7e 	bl	8007348 <USBD_SetConfig>
          break;
 8006c4c:	e018      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fc07 	bl	8007464 <USBD_GetConfig>
          break;
 8006c56:	e013      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fc37 	bl	80074ce <USBD_GetStatus>
          break;
 8006c60:	e00e      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc65 	bl	8007534 <USBD_SetFeature>
          break;
 8006c6a:	e009      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fc74 	bl	800755c <USBD_ClrFeature>
          break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fccc 	bl	8007616 <USBD_CtlError>
          break;
 8006c7e:	bf00      	nop
      }
      break;
 8006c80:	e004      	b.n	8006c8c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fcc6 	bl	8007616 <USBD_CtlError>
      break;
 8006c8a:	bf00      	nop
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop

08006c98 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cae:	2b40      	cmp	r3, #64	; 0x40
 8006cb0:	d005      	beq.n	8006cbe <USBD_StdItfReq+0x26>
 8006cb2:	2b40      	cmp	r3, #64	; 0x40
 8006cb4:	d82e      	bhi.n	8006d14 <USBD_StdItfReq+0x7c>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <USBD_StdItfReq+0x26>
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d12a      	bne.n	8006d14 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d81d      	bhi.n	8006d06 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	889b      	ldrh	r3, [r3, #4]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d813      	bhi.n	8006cfc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d110      	bne.n	8006d10 <USBD_StdItfReq+0x78>
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10d      	bne.n	8006d10 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd56 	bl	80077a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cfa:	e009      	b.n	8006d10 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fc89 	bl	8007616 <USBD_CtlError>
          break;
 8006d04:	e004      	b.n	8006d10 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fc84 	bl	8007616 <USBD_CtlError>
          break;
 8006d0e:	e000      	b.n	8006d12 <USBD_StdItfReq+0x7a>
          break;
 8006d10:	bf00      	nop
      }
      break;
 8006d12:	e004      	b.n	8006d1e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fc7d 	bl	8007616 <USBD_CtlError>
      break;
 8006d1c:	bf00      	nop
  }

  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	889b      	ldrh	r3, [r3, #4]
 8006d3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d007      	beq.n	8006d58 <USBD_StdEPReq+0x30>
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	f200 8146 	bhi.w	8006fda <USBD_StdEPReq+0x2b2>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <USBD_StdEPReq+0x40>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	f040 8141 	bne.w	8006fda <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
      break;
 8006d66:	e13d      	b.n	8006fe4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d10a      	bne.n	8006d8a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	4798      	blx	r3
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	e12d      	b.n	8006fe6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d007      	beq.n	8006da2 <USBD_StdEPReq+0x7a>
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	f300 811b 	bgt.w	8006fce <USBD_StdEPReq+0x2a6>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d072      	beq.n	8006e82 <USBD_StdEPReq+0x15a>
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d03a      	beq.n	8006e16 <USBD_StdEPReq+0xee>
 8006da0:	e115      	b.n	8006fce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d002      	beq.n	8006db2 <USBD_StdEPReq+0x8a>
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d015      	beq.n	8006ddc <USBD_StdEPReq+0xb4>
 8006db0:	e02b      	b.n	8006e0a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <USBD_StdEPReq+0xaa>
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d009      	beq.n	8006dd2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dbe:	7bbb      	ldrb	r3, [r7, #14]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 f884 	bl	8007ed0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 f880 	bl	8007ed0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd0:	e020      	b.n	8006e14 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc1e 	bl	8007616 <USBD_CtlError>
              break;
 8006dda:	e01b      	b.n	8006e14 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <USBD_StdEPReq+0xda>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d008      	beq.n	8006e02 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	88db      	ldrh	r3, [r3, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f867 	bl	8007ed0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fccf 	bl	80077a6 <USBD_CtlSendStatus>

              break;
 8006e08:	e004      	b.n	8006e14 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc02 	bl	8007616 <USBD_CtlError>
              break;
 8006e12:	bf00      	nop
          }
          break;
 8006e14:	e0e0      	b.n	8006fd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d002      	beq.n	8006e26 <USBD_StdEPReq+0xfe>
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d015      	beq.n	8006e50 <USBD_StdEPReq+0x128>
 8006e24:	e026      	b.n	8006e74 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00c      	beq.n	8006e46 <USBD_StdEPReq+0x11e>
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	2b80      	cmp	r3, #128	; 0x80
 8006e30:	d009      	beq.n	8006e46 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 f84a 	bl	8007ed0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 f846 	bl	8007ed0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e44:	e01c      	b.n	8006e80 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fbe4 	bl	8007616 <USBD_CtlError>
              break;
 8006e4e:	e017      	b.n	8006e80 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	885b      	ldrh	r3, [r3, #2]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d112      	bne.n	8006e7e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 f851 	bl	8007f0e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fc9a 	bl	80077a6 <USBD_CtlSendStatus>
              }
              break;
 8006e72:	e004      	b.n	8006e7e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fbcd 	bl	8007616 <USBD_CtlError>
              break;
 8006e7c:	e000      	b.n	8006e80 <USBD_StdEPReq+0x158>
              break;
 8006e7e:	bf00      	nop
          }
          break;
 8006e80:	e0aa      	b.n	8006fd8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d002      	beq.n	8006e92 <USBD_StdEPReq+0x16a>
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d032      	beq.n	8006ef6 <USBD_StdEPReq+0x1ce>
 8006e90:	e097      	b.n	8006fc2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d007      	beq.n	8006ea8 <USBD_StdEPReq+0x180>
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	2b80      	cmp	r3, #128	; 0x80
 8006e9c:	d004      	beq.n	8006ea8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fbb8 	bl	8007616 <USBD_CtlError>
                break;
 8006ea6:	e091      	b.n	8006fcc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da0b      	bge.n	8006ec8 <USBD_StdEPReq+0x1a0>
 8006eb0:	7bbb      	ldrb	r3, [r7, #14]
 8006eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	3310      	adds	r3, #16
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	e00b      	b.n	8006ee0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	3304      	adds	r3, #4
 8006ee0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2202      	movs	r2, #2
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fbfb 	bl	80076ea <USBD_CtlSendData>
              break;
 8006ef4:	e06a      	b.n	8006fcc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da11      	bge.n	8006f22 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3318      	adds	r3, #24
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d117      	bne.n	8006f48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb7b 	bl	8007616 <USBD_CtlError>
                  break;
 8006f20:	e054      	b.n	8006fcc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fb68 	bl	8007616 <USBD_CtlError>
                  break;
 8006f46:	e041      	b.n	8006fcc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da0b      	bge.n	8006f68 <USBD_StdEPReq+0x240>
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
 8006f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	3310      	adds	r3, #16
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	3304      	adds	r3, #4
 8006f66:	e00b      	b.n	8006f80 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f68:	7bbb      	ldrb	r3, [r7, #14]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3304      	adds	r3, #4
 8006f80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <USBD_StdEPReq+0x266>
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d103      	bne.n	8006f96 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e00e      	b.n	8006fb4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 ffd6 	bl	8007f4c <USBD_LL_IsStallEP>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	e002      	b.n	8006fb4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb95 	bl	80076ea <USBD_CtlSendData>
              break;
 8006fc0:	e004      	b.n	8006fcc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fb26 	bl	8007616 <USBD_CtlError>
              break;
 8006fca:	bf00      	nop
          }
          break;
 8006fcc:	e004      	b.n	8006fd8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb20 	bl	8007616 <USBD_CtlError>
          break;
 8006fd6:	bf00      	nop
      }
      break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fb1a 	bl	8007616 <USBD_CtlError>
      break;
 8006fe2:	bf00      	nop
  }

  return ret;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	2b06      	cmp	r3, #6
 8007012:	f200 8128 	bhi.w	8007266 <USBD_GetDescriptor+0x276>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <USBD_GetDescriptor+0x2c>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007039 	.word	0x08007039
 8007020:	08007051 	.word	0x08007051
 8007024:	08007091 	.word	0x08007091
 8007028:	08007267 	.word	0x08007267
 800702c:	08007267 	.word	0x08007267
 8007030:	08007207 	.word	0x08007207
 8007034:	08007233 	.word	0x08007233
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	7c12      	ldrb	r2, [r2, #16]
 8007044:	f107 0108 	add.w	r1, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
      break;
 800704e:	e112      	b.n	8007276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	7c1b      	ldrb	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10d      	bne.n	8007074 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	f107 0208 	add.w	r2, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3301      	adds	r3, #1
 800706e:	2202      	movs	r2, #2
 8007070:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007072:	e100      	b.n	8007276 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	f107 0208 	add.w	r2, r7, #8
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3301      	adds	r3, #1
 800708a:	2202      	movs	r2, #2
 800708c:	701a      	strb	r2, [r3, #0]
      break;
 800708e:	e0f2      	b.n	8007276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	885b      	ldrh	r3, [r3, #2]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b05      	cmp	r3, #5
 8007098:	f200 80ac 	bhi.w	80071f4 <USBD_GetDescriptor+0x204>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <USBD_GetDescriptor+0xb4>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070bd 	.word	0x080070bd
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	08007125 	.word	0x08007125
 80070b0:	08007159 	.word	0x08007159
 80070b4:	0800718d 	.word	0x0800718d
 80070b8:	080071c1 	.word	0x080071c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7c12      	ldrb	r2, [r2, #16]
 80070d4:	f107 0108 	add.w	r1, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070de:	e091      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa97 	bl	8007616 <USBD_CtlError>
            err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
          break;
 80070ee:	e089      	b.n	8007204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7c12      	ldrb	r2, [r2, #16]
 8007108:	f107 0108 	add.w	r1, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007112:	e077      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa7d 	bl	8007616 <USBD_CtlError>
            err++;
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	3301      	adds	r3, #1
 8007120:	72fb      	strb	r3, [r7, #11]
          break;
 8007122:	e06f      	b.n	8007204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00b      	beq.n	8007148 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007146:	e05d      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa63 	bl	8007616 <USBD_CtlError>
            err++;
 8007150:	7afb      	ldrb	r3, [r7, #11]
 8007152:	3301      	adds	r3, #1
 8007154:	72fb      	strb	r3, [r7, #11]
          break;
 8007156:	e055      	b.n	8007204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00b      	beq.n	800717c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	7c12      	ldrb	r2, [r2, #16]
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
 8007178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800717a:	e043      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fa49 	bl	8007616 <USBD_CtlError>
            err++;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3301      	adds	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]
          break;
 800718a:	e03b      	b.n	8007204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	7c12      	ldrb	r2, [r2, #16]
 80071a4:	f107 0108 	add.w	r1, r7, #8
 80071a8:	4610      	mov	r0, r2
 80071aa:	4798      	blx	r3
 80071ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ae:	e029      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa2f 	bl	8007616 <USBD_CtlError>
            err++;
 80071b8:	7afb      	ldrb	r3, [r7, #11]
 80071ba:	3301      	adds	r3, #1
 80071bc:	72fb      	strb	r3, [r7, #11]
          break;
 80071be:	e021      	b.n	8007204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	7c12      	ldrb	r2, [r2, #16]
 80071d8:	f107 0108 	add.w	r1, r7, #8
 80071dc:	4610      	mov	r0, r2
 80071de:	4798      	blx	r3
 80071e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e2:	e00f      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e4:	6839      	ldr	r1, [r7, #0]
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa15 	bl	8007616 <USBD_CtlError>
            err++;
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	3301      	adds	r3, #1
 80071f0:	72fb      	strb	r3, [r7, #11]
          break;
 80071f2:	e007      	b.n	8007204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa0d 	bl	8007616 <USBD_CtlError>
          err++;
 80071fc:	7afb      	ldrb	r3, [r7, #11]
 80071fe:	3301      	adds	r3, #1
 8007200:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007202:	e038      	b.n	8007276 <USBD_GetDescriptor+0x286>
 8007204:	e037      	b.n	8007276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7c1b      	ldrb	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007216:	f107 0208 	add.w	r2, r7, #8
 800721a:	4610      	mov	r0, r2
 800721c:	4798      	blx	r3
 800721e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007220:	e029      	b.n	8007276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f9f6 	bl	8007616 <USBD_CtlError>
        err++;
 800722a:	7afb      	ldrb	r3, [r7, #11]
 800722c:	3301      	adds	r3, #1
 800722e:	72fb      	strb	r3, [r7, #11]
      break;
 8007230:	e021      	b.n	8007276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7c1b      	ldrb	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10d      	bne.n	8007256 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	f107 0208 	add.w	r2, r7, #8
 8007246:	4610      	mov	r0, r2
 8007248:	4798      	blx	r3
 800724a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
 8007250:	2207      	movs	r2, #7
 8007252:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007254:	e00f      	b.n	8007276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f9dc 	bl	8007616 <USBD_CtlError>
        err++;
 800725e:	7afb      	ldrb	r3, [r7, #11]
 8007260:	3301      	adds	r3, #1
 8007262:	72fb      	strb	r3, [r7, #11]
      break;
 8007264:	e007      	b.n	8007276 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9d4 	bl	8007616 <USBD_CtlError>
      err++;
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	3301      	adds	r3, #1
 8007272:	72fb      	strb	r3, [r7, #11]
      break;
 8007274:	bf00      	nop
  }

  if (err != 0U)
 8007276:	7afb      	ldrb	r3, [r7, #11]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11c      	bne.n	80072b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d011      	beq.n	80072a6 <USBD_GetDescriptor+0x2b6>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88db      	ldrh	r3, [r3, #6]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00d      	beq.n	80072a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88da      	ldrh	r2, [r3, #6]
 800728e:	893b      	ldrh	r3, [r7, #8]
 8007290:	4293      	cmp	r3, r2
 8007292:	bf28      	it	cs
 8007294:	4613      	movcs	r3, r2
 8007296:	b29b      	uxth	r3, r3
 8007298:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800729a:	893b      	ldrh	r3, [r7, #8]
 800729c:	461a      	mov	r2, r3
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fa22 	bl	80076ea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa79 	bl	80077a6 <USBD_CtlSendStatus>
 80072b4:	e000      	b.n	80072b8 <USBD_GetDescriptor+0x2c8>
    return;
 80072b6:	bf00      	nop
    }
  }
}
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop

080072c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	889b      	ldrh	r3, [r3, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d130      	bne.n	8007334 <USBD_SetAddress+0x74>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	88db      	ldrh	r3, [r3, #6]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d12c      	bne.n	8007334 <USBD_SetAddress+0x74>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	2b7f      	cmp	r3, #127	; 0x7f
 80072e0:	d828      	bhi.n	8007334 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	885b      	ldrh	r3, [r3, #2]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d104      	bne.n	8007302 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f98b 	bl	8007616 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	e01d      	b.n	800733e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fe48 	bl	8007fa4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fa46 	bl	80077a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d004      	beq.n	800732a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007328:	e009      	b.n	800733e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	e004      	b.n	800733e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f96d 	bl	8007616 <USBD_CtlError>
  }
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b41      	ldr	r3, [pc, #260]	; (8007460 <USBD_SetConfig+0x118>)
 800735a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800735c:	4b40      	ldr	r3, [pc, #256]	; (8007460 <USBD_SetConfig+0x118>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d904      	bls.n	800736e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f955 	bl	8007616 <USBD_CtlError>
 800736c:	e075      	b.n	800745a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	2b02      	cmp	r3, #2
 8007376:	d002      	beq.n	800737e <USBD_SetConfig+0x36>
 8007378:	2b03      	cmp	r3, #3
 800737a:	d023      	beq.n	80073c4 <USBD_SetConfig+0x7c>
 800737c:	e062      	b.n	8007444 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800737e:	4b38      	ldr	r3, [pc, #224]	; (8007460 <USBD_SetConfig+0x118>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01a      	beq.n	80073bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007386:	4b36      	ldr	r3, [pc, #216]	; (8007460 <USBD_SetConfig+0x118>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2203      	movs	r2, #3
 8007394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007398:	4b31      	ldr	r3, [pc, #196]	; (8007460 <USBD_SetConfig+0x118>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff f9e7 	bl	8006772 <USBD_SetClassConfig>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d104      	bne.n	80073b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f932 	bl	8007616 <USBD_CtlError>
            return;
 80073b2:	e052      	b.n	800745a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9f6 	bl	80077a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073ba:	e04e      	b.n	800745a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f9f2 	bl	80077a6 <USBD_CtlSendStatus>
        break;
 80073c2:	e04a      	b.n	800745a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80073c4:	4b26      	ldr	r3, [pc, #152]	; (8007460 <USBD_SetConfig+0x118>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d112      	bne.n	80073f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80073d4:	4b22      	ldr	r3, [pc, #136]	; (8007460 <USBD_SetConfig+0x118>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80073de:	4b20      	ldr	r3, [pc, #128]	; (8007460 <USBD_SetConfig+0x118>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7ff f9e3 	bl	80067b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9db 	bl	80077a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073f0:	e033      	b.n	800745a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80073f2:	4b1b      	ldr	r3, [pc, #108]	; (8007460 <USBD_SetConfig+0x118>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d01d      	beq.n	800743c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	b2db      	uxtb	r3, r3
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7ff f9d1 	bl	80067b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <USBD_SetConfig+0x118>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007418:	4b11      	ldr	r3, [pc, #68]	; (8007460 <USBD_SetConfig+0x118>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f9a7 	bl	8006772 <USBD_SetClassConfig>
 8007424:	4603      	mov	r3, r0
 8007426:	2b02      	cmp	r3, #2
 8007428:	d104      	bne.n	8007434 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f8f2 	bl	8007616 <USBD_CtlError>
            return;
 8007432:	e012      	b.n	800745a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f9b6 	bl	80077a6 <USBD_CtlSendStatus>
        break;
 800743a:	e00e      	b.n	800745a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9b2 	bl	80077a6 <USBD_CtlSendStatus>
        break;
 8007442:	e00a      	b.n	800745a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f8e5 	bl	8007616 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <USBD_SetConfig+0x118>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff f9ac 	bl	80067b0 <USBD_ClrClassConfig>
        break;
 8007458:	bf00      	nop
    }
  }
}
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	20000270 	.word	0x20000270

08007464 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	88db      	ldrh	r3, [r3, #6]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d004      	beq.n	8007480 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f8cc 	bl	8007616 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800747e:	e022      	b.n	80074c6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007486:	2b02      	cmp	r3, #2
 8007488:	dc02      	bgt.n	8007490 <USBD_GetConfig+0x2c>
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc03      	bgt.n	8007496 <USBD_GetConfig+0x32>
 800748e:	e015      	b.n	80074bc <USBD_GetConfig+0x58>
 8007490:	2b03      	cmp	r3, #3
 8007492:	d00b      	beq.n	80074ac <USBD_GetConfig+0x48>
 8007494:	e012      	b.n	80074bc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3308      	adds	r3, #8
 80074a0:	2201      	movs	r2, #1
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f920 	bl	80076ea <USBD_CtlSendData>
        break;
 80074aa:	e00c      	b.n	80074c6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	2201      	movs	r2, #1
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f918 	bl	80076ea <USBD_CtlSendData>
        break;
 80074ba:	e004      	b.n	80074c6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8a9 	bl	8007616 <USBD_CtlError>
        break;
 80074c4:	bf00      	nop
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d81e      	bhi.n	8007522 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	88db      	ldrh	r3, [r3, #6]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d004      	beq.n	80074f6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f891 	bl	8007616 <USBD_CtlError>
        break;
 80074f4:	e01a      	b.n	800752c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2201      	movs	r2, #1
 80074fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f043 0202 	orr.w	r2, r3, #2
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	330c      	adds	r3, #12
 8007516:	2202      	movs	r2, #2
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8e5 	bl	80076ea <USBD_CtlSendData>
      break;
 8007520:	e004      	b.n	800752c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f876 	bl	8007616 <USBD_CtlError>
      break;
 800752a:	bf00      	nop
  }
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f929 	bl	80077a6 <USBD_CtlSendStatus>
  }
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	3b01      	subs	r3, #1
 800756e:	2b02      	cmp	r3, #2
 8007570:	d80b      	bhi.n	800758a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	885b      	ldrh	r3, [r3, #2]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d10c      	bne.n	8007594 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f90f 	bl	80077a6 <USBD_CtlSendStatus>
      }
      break;
 8007588:	e004      	b.n	8007594 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f842 	bl	8007616 <USBD_CtlError>
      break;
 8007592:	e000      	b.n	8007596 <USBD_ClrFeature+0x3a>
      break;
 8007594:	bf00      	nop
  }
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785a      	ldrb	r2, [r3, #1]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	3302      	adds	r3, #2
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b29a      	uxth	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	3303      	adds	r3, #3
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	3304      	adds	r3, #4
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	3305      	adds	r3, #5
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	3306      	adds	r3, #6
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	3307      	adds	r3, #7
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	b29b      	uxth	r3, r3
 8007604:	4413      	add	r3, r2
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	80da      	strh	r2, [r3, #6]

}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fc54 	bl	8007ed0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fc50 	bl	8007ed0 <USBD_LL_StallEP>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d032      	beq.n	80076b4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 f834 	bl	80076bc <USBD_GetLen>
 8007654:	4603      	mov	r3, r0
 8007656:	3301      	adds	r3, #1
 8007658:	b29b      	uxth	r3, r3
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	75fa      	strb	r2, [r7, #23]
 8007668:	461a      	mov	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	4413      	add	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	75fa      	strb	r2, [r7, #23]
 800767a:	461a      	mov	r2, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4413      	add	r3, r2
 8007680:	2203      	movs	r2, #3
 8007682:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007684:	e012      	b.n	80076ac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	60fa      	str	r2, [r7, #12]
 800768c:	7dfa      	ldrb	r2, [r7, #23]
 800768e:	1c51      	adds	r1, r2, #1
 8007690:	75f9      	strb	r1, [r7, #23]
 8007692:	4611      	mov	r1, r2
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	440a      	add	r2, r1
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	75fa      	strb	r2, [r7, #23]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4413      	add	r3, r2
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e8      	bne.n	8007686 <USBD_GetString+0x4e>
    }
  }
}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80076c8:	e005      	b.n	80076d6 <USBD_GetLen+0x1a>
  {
    len++;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	3301      	adds	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
    buf++;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3301      	adds	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f5      	bne.n	80076ca <USBD_GetLen+0xe>
  }

  return len;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr

080076ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	4613      	mov	r3, r2
 80076f6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fc65 	bl	8007fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	4613      	mov	r3, r2
 800772e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fc53 	bl	8007fe2 <USBD_LL_Transmit>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	4613      	mov	r3, r2
 8007752:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2203      	movs	r2, #3
 8007758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800776c:	88fb      	ldrh	r3, [r7, #6]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fc58 	bl	8008028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	4613      	mov	r3, r2
 800778e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	2100      	movs	r1, #0
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fc46 	bl	8008028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2204      	movs	r2, #4
 80077b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077b6:	2300      	movs	r3, #0
 80077b8:	2200      	movs	r2, #0
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fc10 	bl	8007fe2 <USBD_LL_Transmit>

  return USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2205      	movs	r2, #5
 80077d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077dc:	2300      	movs	r3, #0
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc20 	bl	8008028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077f8:	2200      	movs	r2, #0
 80077fa:	4912      	ldr	r1, [pc, #72]	; (8007844 <MX_USB_DEVICE_Init+0x50>)
 80077fc:	4812      	ldr	r0, [pc, #72]	; (8007848 <MX_USB_DEVICE_Init+0x54>)
 80077fe:	f7fe ff5e 	bl	80066be <USBD_Init>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007808:	f7f8 fdac 	bl	8000364 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800780c:	490f      	ldr	r1, [pc, #60]	; (800784c <MX_USB_DEVICE_Init+0x58>)
 800780e:	480e      	ldr	r0, [pc, #56]	; (8007848 <MX_USB_DEVICE_Init+0x54>)
 8007810:	f7fe ff80 	bl	8006714 <USBD_RegisterClass>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800781a:	f7f8 fda3 	bl	8000364 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800781e:	490c      	ldr	r1, [pc, #48]	; (8007850 <MX_USB_DEVICE_Init+0x5c>)
 8007820:	4809      	ldr	r0, [pc, #36]	; (8007848 <MX_USB_DEVICE_Init+0x54>)
 8007822:	f7fe feb1 	bl	8006588 <USBD_CDC_RegisterInterface>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800782c:	f7f8 fd9a 	bl	8000364 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007830:	4805      	ldr	r0, [pc, #20]	; (8007848 <MX_USB_DEVICE_Init+0x54>)
 8007832:	f7fe ff88 	bl	8006746 <USBD_Start>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800783c:	f7f8 fd92 	bl	8000364 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007840:	bf00      	nop
 8007842:	bd80      	pop	{r7, pc}
 8007844:	2000012c 	.word	0x2000012c
 8007848:	20000274 	.word	0x20000274
 800784c:	20000018 	.word	0x20000018
 8007850:	2000011c 	.word	0x2000011c

08007854 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007858:	2200      	movs	r2, #0
 800785a:	4905      	ldr	r1, [pc, #20]	; (8007870 <CDC_Init_FS+0x1c>)
 800785c:	4805      	ldr	r0, [pc, #20]	; (8007874 <CDC_Init_FS+0x20>)
 800785e:	f7fe fea9 	bl	80065b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007862:	4905      	ldr	r1, [pc, #20]	; (8007878 <CDC_Init_FS+0x24>)
 8007864:	4803      	ldr	r0, [pc, #12]	; (8007874 <CDC_Init_FS+0x20>)
 8007866:	f7fe febe 	bl	80065e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800786a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800786c:	4618      	mov	r0, r3
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000920 	.word	0x20000920
 8007874:	20000274 	.word	0x20000274
 8007878:	20000538 	.word	0x20000538

0800787c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007880:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
	...

0800788c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
 8007898:	4613      	mov	r3, r2
 800789a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b23      	cmp	r3, #35	; 0x23
 80078a0:	d84a      	bhi.n	8007938 <CDC_Control_FS+0xac>
 80078a2:	a201      	add	r2, pc, #4	; (adr r2, 80078a8 <CDC_Control_FS+0x1c>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	08007939 	.word	0x08007939
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007939 	.word	0x08007939
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007939 	.word	0x08007939
 80078bc:	08007939 	.word	0x08007939
 80078c0:	08007939 	.word	0x08007939
 80078c4:	08007939 	.word	0x08007939
 80078c8:	08007939 	.word	0x08007939
 80078cc:	08007939 	.word	0x08007939
 80078d0:	08007939 	.word	0x08007939
 80078d4:	08007939 	.word	0x08007939
 80078d8:	08007939 	.word	0x08007939
 80078dc:	08007939 	.word	0x08007939
 80078e0:	08007939 	.word	0x08007939
 80078e4:	08007939 	.word	0x08007939
 80078e8:	08007939 	.word	0x08007939
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007939 	.word	0x08007939
 80078f4:	08007939 	.word	0x08007939
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
 8007904:	08007939 	.word	0x08007939
 8007908:	08007939 	.word	0x08007939
 800790c:	08007939 	.word	0x08007939
 8007910:	08007939 	.word	0x08007939
 8007914:	08007939 	.word	0x08007939
 8007918:	08007939 	.word	0x08007939
 800791c:	08007939 	.word	0x08007939
 8007920:	08007939 	.word	0x08007939
 8007924:	08007939 	.word	0x08007939
 8007928:	08007939 	.word	0x08007939
 800792c:	08007939 	.word	0x08007939
 8007930:	08007939 	.word	0x08007939
 8007934:	08007939 	.word	0x08007939
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007938:	bf00      	nop
  }

  return (USBD_OK);
 800793a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop

08007948 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	4805      	ldr	r0, [pc, #20]	; (800796c <CDC_Receive_FS+0x24>)
 8007956:	f7fe fe46 	bl	80065e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800795a:	4804      	ldr	r0, [pc, #16]	; (800796c <CDC_Receive_FS+0x24>)
 800795c:	f7fe fe85 	bl	800666a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007960:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000274 	.word	0x20000274

08007970 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <CDC_Transmit_FS+0x48>)
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007992:	2301      	movs	r3, #1
 8007994:	e00b      	b.n	80079ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007996:	887b      	ldrh	r3, [r7, #2]
 8007998:	461a      	mov	r2, r3
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4806      	ldr	r0, [pc, #24]	; (80079b8 <CDC_Transmit_FS+0x48>)
 800799e:	f7fe fe09 	bl	80065b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <CDC_Transmit_FS+0x48>)
 80079a4:	f7fe fe32 	bl	800660c <USBD_CDC_TransmitPacket>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000274 	.word	0x20000274

080079bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2212      	movs	r2, #18
 80079cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079ce:	4b03      	ldr	r3, [pc, #12]	; (80079dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000148 	.word	0x20000148

080079e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2204      	movs	r2, #4
 80079f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079f2:	4b03      	ldr	r3, [pc, #12]	; (8007a00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	2000015c 	.word	0x2000015c

08007a04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4907      	ldr	r1, [pc, #28]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a1a:	4808      	ldr	r0, [pc, #32]	; (8007a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a1c:	f7ff fe0c 	bl	8007638 <USBD_GetString>
 8007a20:	e004      	b.n	8007a2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	4904      	ldr	r1, [pc, #16]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a26:	4805      	ldr	r0, [pc, #20]	; (8007a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007a28:	f7ff fe06 	bl	8007638 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000d08 	.word	0x20000d08
 8007a3c:	08008ab0 	.word	0x08008ab0

08007a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4904      	ldr	r1, [pc, #16]	; (8007a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a50:	4804      	ldr	r0, [pc, #16]	; (8007a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a52:	f7ff fdf1 	bl	8007638 <USBD_GetString>
  return USBD_StrDesc;
 8007a56:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20000d08 	.word	0x20000d08
 8007a64:	08008ac8 	.word	0x08008ac8

08007a68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	221a      	movs	r2, #26
 8007a78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a7a:	f000 f843 	bl	8007b04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a7e:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20000160 	.word	0x20000160

08007a8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	6039      	str	r1, [r7, #0]
 8007a96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	4907      	ldr	r1, [pc, #28]	; (8007ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aa2:	4808      	ldr	r0, [pc, #32]	; (8007ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aa4:	f7ff fdc8 	bl	8007638 <USBD_GetString>
 8007aa8:	e004      	b.n	8007ab4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	4904      	ldr	r1, [pc, #16]	; (8007ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ab0:	f7ff fdc2 	bl	8007638 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab4:	4b02      	ldr	r3, [pc, #8]	; (8007ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	20000d08 	.word	0x20000d08
 8007ac4:	08008adc 	.word	0x08008adc

08007ac8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	4907      	ldr	r1, [pc, #28]	; (8007afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ade:	4808      	ldr	r0, [pc, #32]	; (8007b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ae0:	f7ff fdaa 	bl	8007638 <USBD_GetString>
 8007ae4:	e004      	b.n	8007af0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4904      	ldr	r1, [pc, #16]	; (8007afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007aea:	4805      	ldr	r0, [pc, #20]	; (8007b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007aec:	f7ff fda4 	bl	8007638 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af0:	4b02      	ldr	r3, [pc, #8]	; (8007afc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000d08 	.word	0x20000d08
 8007b00:	08008ae8 	.word	0x08008ae8

08007b04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b0a:	4b0f      	ldr	r3, [pc, #60]	; (8007b48 <Get_SerialNum+0x44>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b10:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <Get_SerialNum+0x48>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <Get_SerialNum+0x4c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4413      	add	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	4909      	ldr	r1, [pc, #36]	; (8007b54 <Get_SerialNum+0x50>)
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 f814 	bl	8007b5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b34:	2204      	movs	r2, #4
 8007b36:	4908      	ldr	r1, [pc, #32]	; (8007b58 <Get_SerialNum+0x54>)
 8007b38:	68b8      	ldr	r0, [r7, #8]
 8007b3a:	f000 f80f 	bl	8007b5c <IntToUnicode>
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	1ffff7e8 	.word	0x1ffff7e8
 8007b4c:	1ffff7ec 	.word	0x1ffff7ec
 8007b50:	1ffff7f0 	.word	0x1ffff7f0
 8007b54:	20000162 	.word	0x20000162
 8007b58:	20000172 	.word	0x20000172

08007b5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b6e:	2300      	movs	r3, #0
 8007b70:	75fb      	strb	r3, [r7, #23]
 8007b72:	e027      	b.n	8007bc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	0f1b      	lsrs	r3, r3, #28
 8007b78:	2b09      	cmp	r3, #9
 8007b7a:	d80b      	bhi.n	8007b94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	0f1b      	lsrs	r3, r3, #28
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	4619      	mov	r1, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	440b      	add	r3, r1
 8007b8c:	3230      	adds	r2, #48	; 0x30
 8007b8e:	b2d2      	uxtb	r2, r2
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e00a      	b.n	8007baa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	0f1b      	lsrs	r3, r3, #28
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	440b      	add	r3, r1
 8007ba4:	3237      	adds	r2, #55	; 0x37
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	4413      	add	r3, r2
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	75fb      	strb	r3, [r7, #23]
 8007bc4:	7dfa      	ldrb	r2, [r7, #23]
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d3d3      	bcc.n	8007b74 <IntToUnicode+0x18>
  }
}
 8007bcc:	bf00      	nop
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <HAL_PCD_MspInit+0x44>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d113      	bne.n	8007c12 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <HAL_PCD_MspInit+0x48>)
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	4a0c      	ldr	r2, [pc, #48]	; (8007c20 <HAL_PCD_MspInit+0x48>)
 8007bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007bf4:	61d3      	str	r3, [r2, #28]
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <HAL_PCD_MspInit+0x48>)
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c02:	2200      	movs	r2, #0
 8007c04:	2100      	movs	r1, #0
 8007c06:	2014      	movs	r0, #20
 8007c08:	f7f8 fe29 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c0c:	2014      	movs	r0, #20
 8007c0e:	f7f8 fe42 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40005c00 	.word	0x40005c00
 8007c20:	40021000 	.word	0x40021000

08007c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f7fe fdcb 	bl	80067d6 <USBD_LL_SetupStage>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	440b      	add	r3, r1
 8007c68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f7fe fdfd 	bl	8006870 <USBD_LL_DataOutStage>
}
 8007c76:	bf00      	nop
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c90:	78fa      	ldrb	r2, [r7, #3]
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	440b      	add	r3, r1
 8007c9e:	333c      	adds	r3, #60	; 0x3c
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	f7fe fe54 	bl	8006952 <USBD_LL_DataInStage>
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe ff64 	bl	8006b8e <USBD_LL_SOF>
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d001      	beq.n	8007ce6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ce2:	f7f8 fb3f 	bl	8000364 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fe ff14 	bl	8006b1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fe fecd 	bl	8006a9c <USBD_LL_Reset>
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
	...

08007d0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fe ff0e 	bl	8006b3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d28:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <HAL_PCD_SuspendCallback+0x30>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <HAL_PCD_SuspendCallback+0x30>)
 8007d2e:	f043 0306 	orr.w	r3, r3, #6
 8007d32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	e000ed00 	.word	0xe000ed00

08007d40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe ff08 	bl	8006b64 <USBD_LL_Resume>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d64:	4a28      	ldr	r2, [pc, #160]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a26      	ldr	r2, [pc, #152]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007d74:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d76:	4a25      	ldr	r2, [pc, #148]	; (8007e0c <USBD_LL_Init+0xb0>)
 8007d78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d7a:	4b23      	ldr	r3, [pc, #140]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d82:	2202      	movs	r2, #2
 8007d84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d86:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d8c:	4b1e      	ldr	r3, [pc, #120]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d92:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d98:	481b      	ldr	r0, [pc, #108]	; (8007e08 <USBD_LL_Init+0xac>)
 8007d9a:	f7f8 ff1b 	bl	8000bd4 <HAL_PCD_Init>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007da4:	f7f8 fade 	bl	8000364 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dae:	2318      	movs	r3, #24
 8007db0:	2200      	movs	r2, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	f7fa fb8f 	bl	80024d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dbe:	2358      	movs	r3, #88	; 0x58
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2180      	movs	r1, #128	; 0x80
 8007dc4:	f7fa fb87 	bl	80024d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dce:	23c0      	movs	r3, #192	; 0xc0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2181      	movs	r1, #129	; 0x81
 8007dd4:	f7fa fb7f 	bl	80024d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dde:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007de2:	2200      	movs	r2, #0
 8007de4:	2101      	movs	r1, #1
 8007de6:	f7fa fb76 	bl	80024d6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007df4:	2200      	movs	r2, #0
 8007df6:	2182      	movs	r1, #130	; 0x82
 8007df8:	f7fa fb6d 	bl	80024d6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000f08 	.word	0x20000f08
 8007e0c:	40005c00 	.word	0x40005c00

08007e10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7f8 ffdf 	bl	8000dea <HAL_PCD_Start>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f94e 	bl	80080d4 <USBD_Get_USB_Status>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	4608      	mov	r0, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	461a      	mov	r2, r3
 8007e54:	4603      	mov	r3, r0
 8007e56:	70fb      	strb	r3, [r7, #3]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70bb      	strb	r3, [r7, #2]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e6e:	78bb      	ldrb	r3, [r7, #2]
 8007e70:	883a      	ldrh	r2, [r7, #0]
 8007e72:	78f9      	ldrb	r1, [r7, #3]
 8007e74:	f7f9 f957 	bl	8001126 <HAL_PCD_EP_Open>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f928 	bl	80080d4 <USBD_Get_USB_Status>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eac:	78fa      	ldrb	r2, [r7, #3]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7f9 f99e 	bl	80011f2 <HAL_PCD_EP_Close>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 f909 	bl	80080d4 <USBD_Get_USB_Status>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	4611      	mov	r1, r2
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7f9 fa5e 	bl	80013b0 <HAL_PCD_EP_SetStall>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f8ea 	bl	80080d4 <USBD_Get_USB_Status>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	460b      	mov	r3, r1
 8007f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7f9 fa9f 	bl	8001470 <HAL_PCD_EP_ClrStall>
 8007f32:	4603      	mov	r3, r0
 8007f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 f8cb 	bl	80080d4 <USBD_Get_USB_Status>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da0c      	bge.n	8007f82 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	e00b      	b.n	8007f9a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f88:	68f9      	ldr	r1, [r7, #12]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	440b      	add	r3, r1
 8007f94:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007f98:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr

08007fa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7f9 f88a 	bl	80010dc <HAL_PCD_SetAddress>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f880 	bl	80080d4 <USBD_Get_USB_Status>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	461a      	mov	r2, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	72fb      	strb	r3, [r7, #11]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008004:	893b      	ldrh	r3, [r7, #8]
 8008006:	7af9      	ldrb	r1, [r7, #11]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	f7f9 f98e 	bl	800132a <HAL_PCD_EP_Transmit>
 800800e:	4603      	mov	r3, r0
 8008010:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f85d 	bl	80080d4 <USBD_Get_USB_Status>
 800801a:	4603      	mov	r3, r0
 800801c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800801e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	461a      	mov	r2, r3
 8008034:	460b      	mov	r3, r1
 8008036:	72fb      	strb	r3, [r7, #11]
 8008038:	4613      	mov	r3, r2
 800803a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800804a:	893b      	ldrh	r3, [r7, #8]
 800804c:	7af9      	ldrb	r1, [r7, #11]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	f7f9 f917 	bl	8001282 <HAL_PCD_EP_Receive>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f83a 	bl	80080d4 <USBD_Get_USB_Status>
 8008060:	4603      	mov	r3, r0
 8008062:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008064:	7dbb      	ldrb	r3, [r7, #22]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f7f9 f939 	bl	80012fc <HAL_PCD_EP_GetRxCount>
 800808a:	4603      	mov	r3, r0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800809c:	4b02      	ldr	r3, [pc, #8]	; (80080a8 <USBD_static_malloc+0x14>)
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	200011f4 	.word	0x200011f4

080080ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]

}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr

080080be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr

080080d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080e2:	79fb      	ldrb	r3, [r7, #7]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d817      	bhi.n	8008118 <USBD_Get_USB_Status+0x44>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USBD_Get_USB_Status+0x1c>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008101 	.word	0x08008101
 80080f4:	08008107 	.word	0x08008107
 80080f8:	0800810d 	.word	0x0800810d
 80080fc:	08008113 	.word	0x08008113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	73fb      	strb	r3, [r7, #15]
    break;
 8008104:	e00b      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008106:	2302      	movs	r3, #2
 8008108:	73fb      	strb	r3, [r7, #15]
    break;
 800810a:	e008      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
    break;
 8008110:	e005      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	73fb      	strb	r3, [r7, #15]
    break;
 8008116:	e002      	b.n	800811e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008118:	2302      	movs	r3, #2
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	bf00      	nop
  }
  return usb_status;
 800811e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <__errno>:
 800812c:	4b01      	ldr	r3, [pc, #4]	; (8008134 <__errno+0x8>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	2000017c 	.word	0x2000017c

08008138 <__libc_init_array>:
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	2600      	movs	r6, #0
 800813c:	4d0c      	ldr	r5, [pc, #48]	; (8008170 <__libc_init_array+0x38>)
 800813e:	4c0d      	ldr	r4, [pc, #52]	; (8008174 <__libc_init_array+0x3c>)
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	42a6      	cmp	r6, r4
 8008146:	d109      	bne.n	800815c <__libc_init_array+0x24>
 8008148:	f000 fc9c 	bl	8008a84 <_init>
 800814c:	2600      	movs	r6, #0
 800814e:	4d0a      	ldr	r5, [pc, #40]	; (8008178 <__libc_init_array+0x40>)
 8008150:	4c0a      	ldr	r4, [pc, #40]	; (800817c <__libc_init_array+0x44>)
 8008152:	1b64      	subs	r4, r4, r5
 8008154:	10a4      	asrs	r4, r4, #2
 8008156:	42a6      	cmp	r6, r4
 8008158:	d105      	bne.n	8008166 <__libc_init_array+0x2e>
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008160:	4798      	blx	r3
 8008162:	3601      	adds	r6, #1
 8008164:	e7ee      	b.n	8008144 <__libc_init_array+0xc>
 8008166:	f855 3b04 	ldr.w	r3, [r5], #4
 800816a:	4798      	blx	r3
 800816c:	3601      	adds	r6, #1
 800816e:	e7f2      	b.n	8008156 <__libc_init_array+0x1e>
 8008170:	08008b3c 	.word	0x08008b3c
 8008174:	08008b3c 	.word	0x08008b3c
 8008178:	08008b3c 	.word	0x08008b3c
 800817c:	08008b40 	.word	0x08008b40

08008180 <memset>:
 8008180:	4603      	mov	r3, r0
 8008182:	4402      	add	r2, r0
 8008184:	4293      	cmp	r3, r2
 8008186:	d100      	bne.n	800818a <memset+0xa>
 8008188:	4770      	bx	lr
 800818a:	f803 1b01 	strb.w	r1, [r3], #1
 800818e:	e7f9      	b.n	8008184 <memset+0x4>

08008190 <siprintf>:
 8008190:	b40e      	push	{r1, r2, r3}
 8008192:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008196:	b500      	push	{lr}
 8008198:	b09c      	sub	sp, #112	; 0x70
 800819a:	ab1d      	add	r3, sp, #116	; 0x74
 800819c:	9002      	str	r0, [sp, #8]
 800819e:	9006      	str	r0, [sp, #24]
 80081a0:	9107      	str	r1, [sp, #28]
 80081a2:	9104      	str	r1, [sp, #16]
 80081a4:	4808      	ldr	r0, [pc, #32]	; (80081c8 <siprintf+0x38>)
 80081a6:	4909      	ldr	r1, [pc, #36]	; (80081cc <siprintf+0x3c>)
 80081a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	6800      	ldr	r0, [r0, #0]
 80081b0:	a902      	add	r1, sp, #8
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	f000 f868 	bl	8008288 <_svfiprintf_r>
 80081b8:	2200      	movs	r2, #0
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	b01c      	add	sp, #112	; 0x70
 80081c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c4:	b003      	add	sp, #12
 80081c6:	4770      	bx	lr
 80081c8:	2000017c 	.word	0x2000017c
 80081cc:	ffff0208 	.word	0xffff0208

080081d0 <__ssputs_r>:
 80081d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081d4:	688e      	ldr	r6, [r1, #8]
 80081d6:	4682      	mov	sl, r0
 80081d8:	429e      	cmp	r6, r3
 80081da:	460c      	mov	r4, r1
 80081dc:	4690      	mov	r8, r2
 80081de:	461f      	mov	r7, r3
 80081e0:	d838      	bhi.n	8008254 <__ssputs_r+0x84>
 80081e2:	898a      	ldrh	r2, [r1, #12]
 80081e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081e8:	d032      	beq.n	8008250 <__ssputs_r+0x80>
 80081ea:	6825      	ldr	r5, [r4, #0]
 80081ec:	6909      	ldr	r1, [r1, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	eba5 0901 	sub.w	r9, r5, r1
 80081f4:	6965      	ldr	r5, [r4, #20]
 80081f6:	444b      	add	r3, r9
 80081f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008200:	106d      	asrs	r5, r5, #1
 8008202:	429d      	cmp	r5, r3
 8008204:	bf38      	it	cc
 8008206:	461d      	movcc	r5, r3
 8008208:	0553      	lsls	r3, r2, #21
 800820a:	d531      	bpl.n	8008270 <__ssputs_r+0xa0>
 800820c:	4629      	mov	r1, r5
 800820e:	f000 fb6f 	bl	80088f0 <_malloc_r>
 8008212:	4606      	mov	r6, r0
 8008214:	b950      	cbnz	r0, 800822c <__ssputs_r+0x5c>
 8008216:	230c      	movs	r3, #12
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	f8ca 3000 	str.w	r3, [sl]
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822c:	464a      	mov	r2, r9
 800822e:	6921      	ldr	r1, [r4, #16]
 8008230:	f000 face 	bl	80087d0 <memcpy>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800823a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	6126      	str	r6, [r4, #16]
 8008242:	444e      	add	r6, r9
 8008244:	6026      	str	r6, [r4, #0]
 8008246:	463e      	mov	r6, r7
 8008248:	6165      	str	r5, [r4, #20]
 800824a:	eba5 0509 	sub.w	r5, r5, r9
 800824e:	60a5      	str	r5, [r4, #8]
 8008250:	42be      	cmp	r6, r7
 8008252:	d900      	bls.n	8008256 <__ssputs_r+0x86>
 8008254:	463e      	mov	r6, r7
 8008256:	4632      	mov	r2, r6
 8008258:	4641      	mov	r1, r8
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	f000 fac6 	bl	80087ec <memmove>
 8008260:	68a3      	ldr	r3, [r4, #8]
 8008262:	2000      	movs	r0, #0
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	60a3      	str	r3, [r4, #8]
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	4433      	add	r3, r6
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	e7db      	b.n	8008228 <__ssputs_r+0x58>
 8008270:	462a      	mov	r2, r5
 8008272:	f000 fbb1 	bl	80089d8 <_realloc_r>
 8008276:	4606      	mov	r6, r0
 8008278:	2800      	cmp	r0, #0
 800827a:	d1e1      	bne.n	8008240 <__ssputs_r+0x70>
 800827c:	4650      	mov	r0, sl
 800827e:	6921      	ldr	r1, [r4, #16]
 8008280:	f000 face 	bl	8008820 <_free_r>
 8008284:	e7c7      	b.n	8008216 <__ssputs_r+0x46>
	...

08008288 <_svfiprintf_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4698      	mov	r8, r3
 800828e:	898b      	ldrh	r3, [r1, #12]
 8008290:	4607      	mov	r7, r0
 8008292:	061b      	lsls	r3, r3, #24
 8008294:	460d      	mov	r5, r1
 8008296:	4614      	mov	r4, r2
 8008298:	b09d      	sub	sp, #116	; 0x74
 800829a:	d50e      	bpl.n	80082ba <_svfiprintf_r+0x32>
 800829c:	690b      	ldr	r3, [r1, #16]
 800829e:	b963      	cbnz	r3, 80082ba <_svfiprintf_r+0x32>
 80082a0:	2140      	movs	r1, #64	; 0x40
 80082a2:	f000 fb25 	bl	80088f0 <_malloc_r>
 80082a6:	6028      	str	r0, [r5, #0]
 80082a8:	6128      	str	r0, [r5, #16]
 80082aa:	b920      	cbnz	r0, 80082b6 <_svfiprintf_r+0x2e>
 80082ac:	230c      	movs	r3, #12
 80082ae:	603b      	str	r3, [r7, #0]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295
 80082b4:	e0d1      	b.n	800845a <_svfiprintf_r+0x1d2>
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	616b      	str	r3, [r5, #20]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9309      	str	r3, [sp, #36]	; 0x24
 80082be:	2320      	movs	r3, #32
 80082c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082c4:	2330      	movs	r3, #48	; 0x30
 80082c6:	f04f 0901 	mov.w	r9, #1
 80082ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008474 <_svfiprintf_r+0x1ec>
 80082d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d6:	4623      	mov	r3, r4
 80082d8:	469a      	mov	sl, r3
 80082da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082de:	b10a      	cbz	r2, 80082e4 <_svfiprintf_r+0x5c>
 80082e0:	2a25      	cmp	r2, #37	; 0x25
 80082e2:	d1f9      	bne.n	80082d8 <_svfiprintf_r+0x50>
 80082e4:	ebba 0b04 	subs.w	fp, sl, r4
 80082e8:	d00b      	beq.n	8008302 <_svfiprintf_r+0x7a>
 80082ea:	465b      	mov	r3, fp
 80082ec:	4622      	mov	r2, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff ff6d 	bl	80081d0 <__ssputs_r>
 80082f6:	3001      	adds	r0, #1
 80082f8:	f000 80aa 	beq.w	8008450 <_svfiprintf_r+0x1c8>
 80082fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082fe:	445a      	add	r2, fp
 8008300:	9209      	str	r2, [sp, #36]	; 0x24
 8008302:	f89a 3000 	ldrb.w	r3, [sl]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80a2 	beq.w	8008450 <_svfiprintf_r+0x1c8>
 800830c:	2300      	movs	r3, #0
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008316:	f10a 0a01 	add.w	sl, sl, #1
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	9307      	str	r3, [sp, #28]
 800831e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008322:	931a      	str	r3, [sp, #104]	; 0x68
 8008324:	4654      	mov	r4, sl
 8008326:	2205      	movs	r2, #5
 8008328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832c:	4851      	ldr	r0, [pc, #324]	; (8008474 <_svfiprintf_r+0x1ec>)
 800832e:	f000 fa41 	bl	80087b4 <memchr>
 8008332:	9a04      	ldr	r2, [sp, #16]
 8008334:	b9d8      	cbnz	r0, 800836e <_svfiprintf_r+0xe6>
 8008336:	06d0      	lsls	r0, r2, #27
 8008338:	bf44      	itt	mi
 800833a:	2320      	movmi	r3, #32
 800833c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008340:	0711      	lsls	r1, r2, #28
 8008342:	bf44      	itt	mi
 8008344:	232b      	movmi	r3, #43	; 0x2b
 8008346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800834a:	f89a 3000 	ldrb.w	r3, [sl]
 800834e:	2b2a      	cmp	r3, #42	; 0x2a
 8008350:	d015      	beq.n	800837e <_svfiprintf_r+0xf6>
 8008352:	4654      	mov	r4, sl
 8008354:	2000      	movs	r0, #0
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	9a07      	ldr	r2, [sp, #28]
 800835c:	4621      	mov	r1, r4
 800835e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008362:	3b30      	subs	r3, #48	; 0x30
 8008364:	2b09      	cmp	r3, #9
 8008366:	d94e      	bls.n	8008406 <_svfiprintf_r+0x17e>
 8008368:	b1b0      	cbz	r0, 8008398 <_svfiprintf_r+0x110>
 800836a:	9207      	str	r2, [sp, #28]
 800836c:	e014      	b.n	8008398 <_svfiprintf_r+0x110>
 800836e:	eba0 0308 	sub.w	r3, r0, r8
 8008372:	fa09 f303 	lsl.w	r3, r9, r3
 8008376:	4313      	orrs	r3, r2
 8008378:	46a2      	mov	sl, r4
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	e7d2      	b.n	8008324 <_svfiprintf_r+0x9c>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	1d19      	adds	r1, r3, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	9103      	str	r1, [sp, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfbb      	ittet	lt
 800838a:	425b      	neglt	r3, r3
 800838c:	f042 0202 	orrlt.w	r2, r2, #2
 8008390:	9307      	strge	r3, [sp, #28]
 8008392:	9307      	strlt	r3, [sp, #28]
 8008394:	bfb8      	it	lt
 8008396:	9204      	strlt	r2, [sp, #16]
 8008398:	7823      	ldrb	r3, [r4, #0]
 800839a:	2b2e      	cmp	r3, #46	; 0x2e
 800839c:	d10c      	bne.n	80083b8 <_svfiprintf_r+0x130>
 800839e:	7863      	ldrb	r3, [r4, #1]
 80083a0:	2b2a      	cmp	r3, #42	; 0x2a
 80083a2:	d135      	bne.n	8008410 <_svfiprintf_r+0x188>
 80083a4:	9b03      	ldr	r3, [sp, #12]
 80083a6:	3402      	adds	r4, #2
 80083a8:	1d1a      	adds	r2, r3, #4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	9203      	str	r2, [sp, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	bfb8      	it	lt
 80083b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008478 <_svfiprintf_r+0x1f0>
 80083bc:	2203      	movs	r2, #3
 80083be:	4650      	mov	r0, sl
 80083c0:	7821      	ldrb	r1, [r4, #0]
 80083c2:	f000 f9f7 	bl	80087b4 <memchr>
 80083c6:	b140      	cbz	r0, 80083da <_svfiprintf_r+0x152>
 80083c8:	2340      	movs	r3, #64	; 0x40
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	fa03 f000 	lsl.w	r0, r3, r0
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	3401      	adds	r4, #1
 80083d6:	4303      	orrs	r3, r0
 80083d8:	9304      	str	r3, [sp, #16]
 80083da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083de:	2206      	movs	r2, #6
 80083e0:	4826      	ldr	r0, [pc, #152]	; (800847c <_svfiprintf_r+0x1f4>)
 80083e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083e6:	f000 f9e5 	bl	80087b4 <memchr>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d038      	beq.n	8008460 <_svfiprintf_r+0x1d8>
 80083ee:	4b24      	ldr	r3, [pc, #144]	; (8008480 <_svfiprintf_r+0x1f8>)
 80083f0:	bb1b      	cbnz	r3, 800843a <_svfiprintf_r+0x1b2>
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	3307      	adds	r3, #7
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	3308      	adds	r3, #8
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008400:	4433      	add	r3, r6
 8008402:	9309      	str	r3, [sp, #36]	; 0x24
 8008404:	e767      	b.n	80082d6 <_svfiprintf_r+0x4e>
 8008406:	460c      	mov	r4, r1
 8008408:	2001      	movs	r0, #1
 800840a:	fb0c 3202 	mla	r2, ip, r2, r3
 800840e:	e7a5      	b.n	800835c <_svfiprintf_r+0xd4>
 8008410:	2300      	movs	r3, #0
 8008412:	f04f 0c0a 	mov.w	ip, #10
 8008416:	4619      	mov	r1, r3
 8008418:	3401      	adds	r4, #1
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	4620      	mov	r0, r4
 800841e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008422:	3a30      	subs	r2, #48	; 0x30
 8008424:	2a09      	cmp	r2, #9
 8008426:	d903      	bls.n	8008430 <_svfiprintf_r+0x1a8>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0c5      	beq.n	80083b8 <_svfiprintf_r+0x130>
 800842c:	9105      	str	r1, [sp, #20]
 800842e:	e7c3      	b.n	80083b8 <_svfiprintf_r+0x130>
 8008430:	4604      	mov	r4, r0
 8008432:	2301      	movs	r3, #1
 8008434:	fb0c 2101 	mla	r1, ip, r1, r2
 8008438:	e7f0      	b.n	800841c <_svfiprintf_r+0x194>
 800843a:	ab03      	add	r3, sp, #12
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	462a      	mov	r2, r5
 8008440:	4638      	mov	r0, r7
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <_svfiprintf_r+0x1fc>)
 8008444:	a904      	add	r1, sp, #16
 8008446:	f3af 8000 	nop.w
 800844a:	1c42      	adds	r2, r0, #1
 800844c:	4606      	mov	r6, r0
 800844e:	d1d6      	bne.n	80083fe <_svfiprintf_r+0x176>
 8008450:	89ab      	ldrh	r3, [r5, #12]
 8008452:	065b      	lsls	r3, r3, #25
 8008454:	f53f af2c 	bmi.w	80082b0 <_svfiprintf_r+0x28>
 8008458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800845a:	b01d      	add	sp, #116	; 0x74
 800845c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008460:	ab03      	add	r3, sp, #12
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	462a      	mov	r2, r5
 8008466:	4638      	mov	r0, r7
 8008468:	4b06      	ldr	r3, [pc, #24]	; (8008484 <_svfiprintf_r+0x1fc>)
 800846a:	a904      	add	r1, sp, #16
 800846c:	f000 f87c 	bl	8008568 <_printf_i>
 8008470:	e7eb      	b.n	800844a <_svfiprintf_r+0x1c2>
 8008472:	bf00      	nop
 8008474:	08008b08 	.word	0x08008b08
 8008478:	08008b0e 	.word	0x08008b0e
 800847c:	08008b12 	.word	0x08008b12
 8008480:	00000000 	.word	0x00000000
 8008484:	080081d1 	.word	0x080081d1

08008488 <_printf_common>:
 8008488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800848c:	4616      	mov	r6, r2
 800848e:	4699      	mov	r9, r3
 8008490:	688a      	ldr	r2, [r1, #8]
 8008492:	690b      	ldr	r3, [r1, #16]
 8008494:	4607      	mov	r7, r0
 8008496:	4293      	cmp	r3, r2
 8008498:	bfb8      	it	lt
 800849a:	4613      	movlt	r3, r2
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084a2:	460c      	mov	r4, r1
 80084a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084a8:	b10a      	cbz	r2, 80084ae <_printf_common+0x26>
 80084aa:	3301      	adds	r3, #1
 80084ac:	6033      	str	r3, [r6, #0]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	0699      	lsls	r1, r3, #26
 80084b2:	bf42      	ittt	mi
 80084b4:	6833      	ldrmi	r3, [r6, #0]
 80084b6:	3302      	addmi	r3, #2
 80084b8:	6033      	strmi	r3, [r6, #0]
 80084ba:	6825      	ldr	r5, [r4, #0]
 80084bc:	f015 0506 	ands.w	r5, r5, #6
 80084c0:	d106      	bne.n	80084d0 <_printf_common+0x48>
 80084c2:	f104 0a19 	add.w	sl, r4, #25
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	6832      	ldr	r2, [r6, #0]
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	42ab      	cmp	r3, r5
 80084ce:	dc28      	bgt.n	8008522 <_printf_common+0x9a>
 80084d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084d4:	1e13      	subs	r3, r2, #0
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	bf18      	it	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	0692      	lsls	r2, r2, #26
 80084de:	d42d      	bmi.n	800853c <_printf_common+0xb4>
 80084e0:	4649      	mov	r1, r9
 80084e2:	4638      	mov	r0, r7
 80084e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e8:	47c0      	blx	r8
 80084ea:	3001      	adds	r0, #1
 80084ec:	d020      	beq.n	8008530 <_printf_common+0xa8>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	68e5      	ldr	r5, [r4, #12]
 80084f2:	f003 0306 	and.w	r3, r3, #6
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	bf18      	it	ne
 80084fa:	2500      	movne	r5, #0
 80084fc:	6832      	ldr	r2, [r6, #0]
 80084fe:	f04f 0600 	mov.w	r6, #0
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	bf08      	it	eq
 8008506:	1aad      	subeq	r5, r5, r2
 8008508:	6922      	ldr	r2, [r4, #16]
 800850a:	bf08      	it	eq
 800850c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008510:	4293      	cmp	r3, r2
 8008512:	bfc4      	itt	gt
 8008514:	1a9b      	subgt	r3, r3, r2
 8008516:	18ed      	addgt	r5, r5, r3
 8008518:	341a      	adds	r4, #26
 800851a:	42b5      	cmp	r5, r6
 800851c:	d11a      	bne.n	8008554 <_printf_common+0xcc>
 800851e:	2000      	movs	r0, #0
 8008520:	e008      	b.n	8008534 <_printf_common+0xac>
 8008522:	2301      	movs	r3, #1
 8008524:	4652      	mov	r2, sl
 8008526:	4649      	mov	r1, r9
 8008528:	4638      	mov	r0, r7
 800852a:	47c0      	blx	r8
 800852c:	3001      	adds	r0, #1
 800852e:	d103      	bne.n	8008538 <_printf_common+0xb0>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008538:	3501      	adds	r5, #1
 800853a:	e7c4      	b.n	80084c6 <_printf_common+0x3e>
 800853c:	2030      	movs	r0, #48	; 0x30
 800853e:	18e1      	adds	r1, r4, r3
 8008540:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800854a:	4422      	add	r2, r4
 800854c:	3302      	adds	r3, #2
 800854e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008552:	e7c5      	b.n	80084e0 <_printf_common+0x58>
 8008554:	2301      	movs	r3, #1
 8008556:	4622      	mov	r2, r4
 8008558:	4649      	mov	r1, r9
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	3001      	adds	r0, #1
 8008560:	d0e6      	beq.n	8008530 <_printf_common+0xa8>
 8008562:	3601      	adds	r6, #1
 8008564:	e7d9      	b.n	800851a <_printf_common+0x92>
	...

08008568 <_printf_i>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	7e0f      	ldrb	r7, [r1, #24]
 800856e:	4691      	mov	r9, r2
 8008570:	2f78      	cmp	r7, #120	; 0x78
 8008572:	4680      	mov	r8, r0
 8008574:	460c      	mov	r4, r1
 8008576:	469a      	mov	sl, r3
 8008578:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800857a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800857e:	d807      	bhi.n	8008590 <_printf_i+0x28>
 8008580:	2f62      	cmp	r7, #98	; 0x62
 8008582:	d80a      	bhi.n	800859a <_printf_i+0x32>
 8008584:	2f00      	cmp	r7, #0
 8008586:	f000 80d9 	beq.w	800873c <_printf_i+0x1d4>
 800858a:	2f58      	cmp	r7, #88	; 0x58
 800858c:	f000 80a4 	beq.w	80086d8 <_printf_i+0x170>
 8008590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008594:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008598:	e03a      	b.n	8008610 <_printf_i+0xa8>
 800859a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800859e:	2b15      	cmp	r3, #21
 80085a0:	d8f6      	bhi.n	8008590 <_printf_i+0x28>
 80085a2:	a101      	add	r1, pc, #4	; (adr r1, 80085a8 <_printf_i+0x40>)
 80085a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085a8:	08008601 	.word	0x08008601
 80085ac:	08008615 	.word	0x08008615
 80085b0:	08008591 	.word	0x08008591
 80085b4:	08008591 	.word	0x08008591
 80085b8:	08008591 	.word	0x08008591
 80085bc:	08008591 	.word	0x08008591
 80085c0:	08008615 	.word	0x08008615
 80085c4:	08008591 	.word	0x08008591
 80085c8:	08008591 	.word	0x08008591
 80085cc:	08008591 	.word	0x08008591
 80085d0:	08008591 	.word	0x08008591
 80085d4:	08008723 	.word	0x08008723
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008705 	.word	0x08008705
 80085e0:	08008591 	.word	0x08008591
 80085e4:	08008591 	.word	0x08008591
 80085e8:	08008745 	.word	0x08008745
 80085ec:	08008591 	.word	0x08008591
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008591 	.word	0x08008591
 80085f8:	08008591 	.word	0x08008591
 80085fc:	0800870d 	.word	0x0800870d
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	1d1a      	adds	r2, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	602a      	str	r2, [r5, #0]
 8008608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800860c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008610:	2301      	movs	r3, #1
 8008612:	e0a4      	b.n	800875e <_printf_i+0x1f6>
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	6829      	ldr	r1, [r5, #0]
 8008618:	0606      	lsls	r6, r0, #24
 800861a:	f101 0304 	add.w	r3, r1, #4
 800861e:	d50a      	bpl.n	8008636 <_printf_i+0xce>
 8008620:	680e      	ldr	r6, [r1, #0]
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	2e00      	cmp	r6, #0
 8008626:	da03      	bge.n	8008630 <_printf_i+0xc8>
 8008628:	232d      	movs	r3, #45	; 0x2d
 800862a:	4276      	negs	r6, r6
 800862c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008630:	230a      	movs	r3, #10
 8008632:	485e      	ldr	r0, [pc, #376]	; (80087ac <_printf_i+0x244>)
 8008634:	e019      	b.n	800866a <_printf_i+0x102>
 8008636:	680e      	ldr	r6, [r1, #0]
 8008638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800863c:	602b      	str	r3, [r5, #0]
 800863e:	bf18      	it	ne
 8008640:	b236      	sxthne	r6, r6
 8008642:	e7ef      	b.n	8008624 <_printf_i+0xbc>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	1d19      	adds	r1, r3, #4
 800864a:	6029      	str	r1, [r5, #0]
 800864c:	0601      	lsls	r1, r0, #24
 800864e:	d501      	bpl.n	8008654 <_printf_i+0xec>
 8008650:	681e      	ldr	r6, [r3, #0]
 8008652:	e002      	b.n	800865a <_printf_i+0xf2>
 8008654:	0646      	lsls	r6, r0, #25
 8008656:	d5fb      	bpl.n	8008650 <_printf_i+0xe8>
 8008658:	881e      	ldrh	r6, [r3, #0]
 800865a:	2f6f      	cmp	r7, #111	; 0x6f
 800865c:	bf0c      	ite	eq
 800865e:	2308      	moveq	r3, #8
 8008660:	230a      	movne	r3, #10
 8008662:	4852      	ldr	r0, [pc, #328]	; (80087ac <_printf_i+0x244>)
 8008664:	2100      	movs	r1, #0
 8008666:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800866a:	6865      	ldr	r5, [r4, #4]
 800866c:	2d00      	cmp	r5, #0
 800866e:	bfa8      	it	ge
 8008670:	6821      	ldrge	r1, [r4, #0]
 8008672:	60a5      	str	r5, [r4, #8]
 8008674:	bfa4      	itt	ge
 8008676:	f021 0104 	bicge.w	r1, r1, #4
 800867a:	6021      	strge	r1, [r4, #0]
 800867c:	b90e      	cbnz	r6, 8008682 <_printf_i+0x11a>
 800867e:	2d00      	cmp	r5, #0
 8008680:	d04d      	beq.n	800871e <_printf_i+0x1b6>
 8008682:	4615      	mov	r5, r2
 8008684:	fbb6 f1f3 	udiv	r1, r6, r3
 8008688:	fb03 6711 	mls	r7, r3, r1, r6
 800868c:	5dc7      	ldrb	r7, [r0, r7]
 800868e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008692:	4637      	mov	r7, r6
 8008694:	42bb      	cmp	r3, r7
 8008696:	460e      	mov	r6, r1
 8008698:	d9f4      	bls.n	8008684 <_printf_i+0x11c>
 800869a:	2b08      	cmp	r3, #8
 800869c:	d10b      	bne.n	80086b6 <_printf_i+0x14e>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	07de      	lsls	r6, r3, #31
 80086a2:	d508      	bpl.n	80086b6 <_printf_i+0x14e>
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	4299      	cmp	r1, r3
 80086aa:	bfde      	ittt	le
 80086ac:	2330      	movle	r3, #48	; 0x30
 80086ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086b6:	1b52      	subs	r2, r2, r5
 80086b8:	6122      	str	r2, [r4, #16]
 80086ba:	464b      	mov	r3, r9
 80086bc:	4621      	mov	r1, r4
 80086be:	4640      	mov	r0, r8
 80086c0:	f8cd a000 	str.w	sl, [sp]
 80086c4:	aa03      	add	r2, sp, #12
 80086c6:	f7ff fedf 	bl	8008488 <_printf_common>
 80086ca:	3001      	adds	r0, #1
 80086cc:	d14c      	bne.n	8008768 <_printf_i+0x200>
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	b004      	add	sp, #16
 80086d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d8:	4834      	ldr	r0, [pc, #208]	; (80087ac <_printf_i+0x244>)
 80086da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086de:	6829      	ldr	r1, [r5, #0]
 80086e0:	6823      	ldr	r3, [r4, #0]
 80086e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80086e6:	6029      	str	r1, [r5, #0]
 80086e8:	061d      	lsls	r5, r3, #24
 80086ea:	d514      	bpl.n	8008716 <_printf_i+0x1ae>
 80086ec:	07df      	lsls	r7, r3, #31
 80086ee:	bf44      	itt	mi
 80086f0:	f043 0320 	orrmi.w	r3, r3, #32
 80086f4:	6023      	strmi	r3, [r4, #0]
 80086f6:	b91e      	cbnz	r6, 8008700 <_printf_i+0x198>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	f023 0320 	bic.w	r3, r3, #32
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	2310      	movs	r3, #16
 8008702:	e7af      	b.n	8008664 <_printf_i+0xfc>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	f043 0320 	orr.w	r3, r3, #32
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	2378      	movs	r3, #120	; 0x78
 800870e:	4828      	ldr	r0, [pc, #160]	; (80087b0 <_printf_i+0x248>)
 8008710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008714:	e7e3      	b.n	80086de <_printf_i+0x176>
 8008716:	0659      	lsls	r1, r3, #25
 8008718:	bf48      	it	mi
 800871a:	b2b6      	uxthmi	r6, r6
 800871c:	e7e6      	b.n	80086ec <_printf_i+0x184>
 800871e:	4615      	mov	r5, r2
 8008720:	e7bb      	b.n	800869a <_printf_i+0x132>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	6826      	ldr	r6, [r4, #0]
 8008726:	1d18      	adds	r0, r3, #4
 8008728:	6961      	ldr	r1, [r4, #20]
 800872a:	6028      	str	r0, [r5, #0]
 800872c:	0635      	lsls	r5, r6, #24
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	d501      	bpl.n	8008736 <_printf_i+0x1ce>
 8008732:	6019      	str	r1, [r3, #0]
 8008734:	e002      	b.n	800873c <_printf_i+0x1d4>
 8008736:	0670      	lsls	r0, r6, #25
 8008738:	d5fb      	bpl.n	8008732 <_printf_i+0x1ca>
 800873a:	8019      	strh	r1, [r3, #0]
 800873c:	2300      	movs	r3, #0
 800873e:	4615      	mov	r5, r2
 8008740:	6123      	str	r3, [r4, #16]
 8008742:	e7ba      	b.n	80086ba <_printf_i+0x152>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	2100      	movs	r1, #0
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	602a      	str	r2, [r5, #0]
 800874c:	681d      	ldr	r5, [r3, #0]
 800874e:	6862      	ldr	r2, [r4, #4]
 8008750:	4628      	mov	r0, r5
 8008752:	f000 f82f 	bl	80087b4 <memchr>
 8008756:	b108      	cbz	r0, 800875c <_printf_i+0x1f4>
 8008758:	1b40      	subs	r0, r0, r5
 800875a:	6060      	str	r0, [r4, #4]
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	2300      	movs	r3, #0
 8008762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008766:	e7a8      	b.n	80086ba <_printf_i+0x152>
 8008768:	462a      	mov	r2, r5
 800876a:	4649      	mov	r1, r9
 800876c:	4640      	mov	r0, r8
 800876e:	6923      	ldr	r3, [r4, #16]
 8008770:	47d0      	blx	sl
 8008772:	3001      	adds	r0, #1
 8008774:	d0ab      	beq.n	80086ce <_printf_i+0x166>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	079b      	lsls	r3, r3, #30
 800877a:	d413      	bmi.n	80087a4 <_printf_i+0x23c>
 800877c:	68e0      	ldr	r0, [r4, #12]
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	4298      	cmp	r0, r3
 8008782:	bfb8      	it	lt
 8008784:	4618      	movlt	r0, r3
 8008786:	e7a4      	b.n	80086d2 <_printf_i+0x16a>
 8008788:	2301      	movs	r3, #1
 800878a:	4632      	mov	r2, r6
 800878c:	4649      	mov	r1, r9
 800878e:	4640      	mov	r0, r8
 8008790:	47d0      	blx	sl
 8008792:	3001      	adds	r0, #1
 8008794:	d09b      	beq.n	80086ce <_printf_i+0x166>
 8008796:	3501      	adds	r5, #1
 8008798:	68e3      	ldr	r3, [r4, #12]
 800879a:	9903      	ldr	r1, [sp, #12]
 800879c:	1a5b      	subs	r3, r3, r1
 800879e:	42ab      	cmp	r3, r5
 80087a0:	dcf2      	bgt.n	8008788 <_printf_i+0x220>
 80087a2:	e7eb      	b.n	800877c <_printf_i+0x214>
 80087a4:	2500      	movs	r5, #0
 80087a6:	f104 0619 	add.w	r6, r4, #25
 80087aa:	e7f5      	b.n	8008798 <_printf_i+0x230>
 80087ac:	08008b19 	.word	0x08008b19
 80087b0:	08008b2a 	.word	0x08008b2a

080087b4 <memchr>:
 80087b4:	4603      	mov	r3, r0
 80087b6:	b510      	push	{r4, lr}
 80087b8:	b2c9      	uxtb	r1, r1
 80087ba:	4402      	add	r2, r0
 80087bc:	4293      	cmp	r3, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	d101      	bne.n	80087c6 <memchr+0x12>
 80087c2:	2000      	movs	r0, #0
 80087c4:	e003      	b.n	80087ce <memchr+0x1a>
 80087c6:	7804      	ldrb	r4, [r0, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	428c      	cmp	r4, r1
 80087cc:	d1f6      	bne.n	80087bc <memchr+0x8>
 80087ce:	bd10      	pop	{r4, pc}

080087d0 <memcpy>:
 80087d0:	440a      	add	r2, r1
 80087d2:	4291      	cmp	r1, r2
 80087d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d8:	d100      	bne.n	80087dc <memcpy+0xc>
 80087da:	4770      	bx	lr
 80087dc:	b510      	push	{r4, lr}
 80087de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e2:	4291      	cmp	r1, r2
 80087e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e8:	d1f9      	bne.n	80087de <memcpy+0xe>
 80087ea:	bd10      	pop	{r4, pc}

080087ec <memmove>:
 80087ec:	4288      	cmp	r0, r1
 80087ee:	b510      	push	{r4, lr}
 80087f0:	eb01 0402 	add.w	r4, r1, r2
 80087f4:	d902      	bls.n	80087fc <memmove+0x10>
 80087f6:	4284      	cmp	r4, r0
 80087f8:	4623      	mov	r3, r4
 80087fa:	d807      	bhi.n	800880c <memmove+0x20>
 80087fc:	1e43      	subs	r3, r0, #1
 80087fe:	42a1      	cmp	r1, r4
 8008800:	d008      	beq.n	8008814 <memmove+0x28>
 8008802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800880a:	e7f8      	b.n	80087fe <memmove+0x12>
 800880c:	4601      	mov	r1, r0
 800880e:	4402      	add	r2, r0
 8008810:	428a      	cmp	r2, r1
 8008812:	d100      	bne.n	8008816 <memmove+0x2a>
 8008814:	bd10      	pop	{r4, pc}
 8008816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800881a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800881e:	e7f7      	b.n	8008810 <memmove+0x24>

08008820 <_free_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	4605      	mov	r5, r0
 8008824:	2900      	cmp	r1, #0
 8008826:	d040      	beq.n	80088aa <_free_r+0x8a>
 8008828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800882c:	1f0c      	subs	r4, r1, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	bfb8      	it	lt
 8008832:	18e4      	addlt	r4, r4, r3
 8008834:	f000 f910 	bl	8008a58 <__malloc_lock>
 8008838:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <_free_r+0x8c>)
 800883a:	6813      	ldr	r3, [r2, #0]
 800883c:	b933      	cbnz	r3, 800884c <_free_r+0x2c>
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6014      	str	r4, [r2, #0]
 8008842:	4628      	mov	r0, r5
 8008844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008848:	f000 b90c 	b.w	8008a64 <__malloc_unlock>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d908      	bls.n	8008862 <_free_r+0x42>
 8008850:	6820      	ldr	r0, [r4, #0]
 8008852:	1821      	adds	r1, r4, r0
 8008854:	428b      	cmp	r3, r1
 8008856:	bf01      	itttt	eq
 8008858:	6819      	ldreq	r1, [r3, #0]
 800885a:	685b      	ldreq	r3, [r3, #4]
 800885c:	1809      	addeq	r1, r1, r0
 800885e:	6021      	streq	r1, [r4, #0]
 8008860:	e7ed      	b.n	800883e <_free_r+0x1e>
 8008862:	461a      	mov	r2, r3
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	b10b      	cbz	r3, 800886c <_free_r+0x4c>
 8008868:	42a3      	cmp	r3, r4
 800886a:	d9fa      	bls.n	8008862 <_free_r+0x42>
 800886c:	6811      	ldr	r1, [r2, #0]
 800886e:	1850      	adds	r0, r2, r1
 8008870:	42a0      	cmp	r0, r4
 8008872:	d10b      	bne.n	800888c <_free_r+0x6c>
 8008874:	6820      	ldr	r0, [r4, #0]
 8008876:	4401      	add	r1, r0
 8008878:	1850      	adds	r0, r2, r1
 800887a:	4283      	cmp	r3, r0
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	d1e0      	bne.n	8008842 <_free_r+0x22>
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4401      	add	r1, r0
 8008886:	6011      	str	r1, [r2, #0]
 8008888:	6053      	str	r3, [r2, #4]
 800888a:	e7da      	b.n	8008842 <_free_r+0x22>
 800888c:	d902      	bls.n	8008894 <_free_r+0x74>
 800888e:	230c      	movs	r3, #12
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	e7d6      	b.n	8008842 <_free_r+0x22>
 8008894:	6820      	ldr	r0, [r4, #0]
 8008896:	1821      	adds	r1, r4, r0
 8008898:	428b      	cmp	r3, r1
 800889a:	bf01      	itttt	eq
 800889c:	6819      	ldreq	r1, [r3, #0]
 800889e:	685b      	ldreq	r3, [r3, #4]
 80088a0:	1809      	addeq	r1, r1, r0
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	6054      	str	r4, [r2, #4]
 80088a8:	e7cb      	b.n	8008842 <_free_r+0x22>
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20001414 	.word	0x20001414

080088b0 <sbrk_aligned>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	4e0e      	ldr	r6, [pc, #56]	; (80088ec <sbrk_aligned+0x3c>)
 80088b4:	460c      	mov	r4, r1
 80088b6:	6831      	ldr	r1, [r6, #0]
 80088b8:	4605      	mov	r5, r0
 80088ba:	b911      	cbnz	r1, 80088c2 <sbrk_aligned+0x12>
 80088bc:	f000 f8bc 	bl	8008a38 <_sbrk_r>
 80088c0:	6030      	str	r0, [r6, #0]
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f8b7 	bl	8008a38 <_sbrk_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d00a      	beq.n	80088e4 <sbrk_aligned+0x34>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d007      	beq.n	80088e8 <sbrk_aligned+0x38>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f8ac 	bl	8008a38 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d101      	bne.n	80088e8 <sbrk_aligned+0x38>
 80088e4:	f04f 34ff 	mov.w	r4, #4294967295
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	20001418 	.word	0x20001418

080088f0 <_malloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4607      	mov	r7, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d905      	bls.n	8008918 <_malloc_r+0x28>
 800890c:	230c      	movs	r3, #12
 800890e:	2600      	movs	r6, #0
 8008910:	603b      	str	r3, [r7, #0]
 8008912:	4630      	mov	r0, r6
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4e2e      	ldr	r6, [pc, #184]	; (80089d4 <_malloc_r+0xe4>)
 800891a:	f000 f89d 	bl	8008a58 <__malloc_lock>
 800891e:	6833      	ldr	r3, [r6, #0]
 8008920:	461c      	mov	r4, r3
 8008922:	bb34      	cbnz	r4, 8008972 <_malloc_r+0x82>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc2 	bl	80088b0 <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d14d      	bne.n	80089ce <_malloc_r+0xde>
 8008932:	6834      	ldr	r4, [r6, #0]
 8008934:	4626      	mov	r6, r4
 8008936:	2e00      	cmp	r6, #0
 8008938:	d140      	bne.n	80089bc <_malloc_r+0xcc>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4631      	mov	r1, r6
 800893e:	4638      	mov	r0, r7
 8008940:	eb04 0803 	add.w	r8, r4, r3
 8008944:	f000 f878 	bl	8008a38 <_sbrk_r>
 8008948:	4580      	cmp	r8, r0
 800894a:	d13a      	bne.n	80089c2 <_malloc_r+0xd2>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	3503      	adds	r5, #3
 8008950:	1a6d      	subs	r5, r5, r1
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	4638      	mov	r0, r7
 8008960:	4629      	mov	r1, r5
 8008962:	f7ff ffa5 	bl	80088b0 <sbrk_aligned>
 8008966:	3001      	adds	r0, #1
 8008968:	d02b      	beq.n	80089c2 <_malloc_r+0xd2>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	442b      	add	r3, r5
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	e00e      	b.n	8008990 <_malloc_r+0xa0>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	1b52      	subs	r2, r2, r5
 8008976:	d41e      	bmi.n	80089b6 <_malloc_r+0xc6>
 8008978:	2a0b      	cmp	r2, #11
 800897a:	d916      	bls.n	80089aa <_malloc_r+0xba>
 800897c:	1961      	adds	r1, r4, r5
 800897e:	42a3      	cmp	r3, r4
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	bf18      	it	ne
 8008984:	6059      	strne	r1, [r3, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	bf08      	it	eq
 800898a:	6031      	streq	r1, [r6, #0]
 800898c:	5162      	str	r2, [r4, r5]
 800898e:	604b      	str	r3, [r1, #4]
 8008990:	4638      	mov	r0, r7
 8008992:	f104 060b 	add.w	r6, r4, #11
 8008996:	f000 f865 	bl	8008a64 <__malloc_unlock>
 800899a:	f026 0607 	bic.w	r6, r6, #7
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	1af2      	subs	r2, r6, r3
 80089a2:	d0b6      	beq.n	8008912 <_malloc_r+0x22>
 80089a4:	1b9b      	subs	r3, r3, r6
 80089a6:	50a3      	str	r3, [r4, r2]
 80089a8:	e7b3      	b.n	8008912 <_malloc_r+0x22>
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bf0c      	ite	eq
 80089b0:	6032      	streq	r2, [r6, #0]
 80089b2:	605a      	strne	r2, [r3, #4]
 80089b4:	e7ec      	b.n	8008990 <_malloc_r+0xa0>
 80089b6:	4623      	mov	r3, r4
 80089b8:	6864      	ldr	r4, [r4, #4]
 80089ba:	e7b2      	b.n	8008922 <_malloc_r+0x32>
 80089bc:	4634      	mov	r4, r6
 80089be:	6876      	ldr	r6, [r6, #4]
 80089c0:	e7b9      	b.n	8008936 <_malloc_r+0x46>
 80089c2:	230c      	movs	r3, #12
 80089c4:	4638      	mov	r0, r7
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	f000 f84c 	bl	8008a64 <__malloc_unlock>
 80089cc:	e7a1      	b.n	8008912 <_malloc_r+0x22>
 80089ce:	6025      	str	r5, [r4, #0]
 80089d0:	e7de      	b.n	8008990 <_malloc_r+0xa0>
 80089d2:	bf00      	nop
 80089d4:	20001414 	.word	0x20001414

080089d8 <_realloc_r>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	4680      	mov	r8, r0
 80089de:	4614      	mov	r4, r2
 80089e0:	460e      	mov	r6, r1
 80089e2:	b921      	cbnz	r1, 80089ee <_realloc_r+0x16>
 80089e4:	4611      	mov	r1, r2
 80089e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ea:	f7ff bf81 	b.w	80088f0 <_malloc_r>
 80089ee:	b92a      	cbnz	r2, 80089fc <_realloc_r+0x24>
 80089f0:	f7ff ff16 	bl	8008820 <_free_r>
 80089f4:	4625      	mov	r5, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fc:	f000 f838 	bl	8008a70 <_malloc_usable_size_r>
 8008a00:	4284      	cmp	r4, r0
 8008a02:	4607      	mov	r7, r0
 8008a04:	d802      	bhi.n	8008a0c <_realloc_r+0x34>
 8008a06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a0a:	d812      	bhi.n	8008a32 <_realloc_r+0x5a>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f7ff ff6e 	bl	80088f0 <_malloc_r>
 8008a14:	4605      	mov	r5, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0ed      	beq.n	80089f6 <_realloc_r+0x1e>
 8008a1a:	42bc      	cmp	r4, r7
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4631      	mov	r1, r6
 8008a20:	bf28      	it	cs
 8008a22:	463a      	movcs	r2, r7
 8008a24:	f7ff fed4 	bl	80087d0 <memcpy>
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff fef8 	bl	8008820 <_free_r>
 8008a30:	e7e1      	b.n	80089f6 <_realloc_r+0x1e>
 8008a32:	4635      	mov	r5, r6
 8008a34:	e7df      	b.n	80089f6 <_realloc_r+0x1e>
	...

08008a38 <_sbrk_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	4d05      	ldr	r5, [pc, #20]	; (8008a54 <_sbrk_r+0x1c>)
 8008a3e:	4604      	mov	r4, r0
 8008a40:	4608      	mov	r0, r1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	f7f7 fd70 	bl	8000528 <_sbrk>
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	d102      	bne.n	8008a52 <_sbrk_r+0x1a>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	b103      	cbz	r3, 8008a52 <_sbrk_r+0x1a>
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	2000141c 	.word	0x2000141c

08008a58 <__malloc_lock>:
 8008a58:	4801      	ldr	r0, [pc, #4]	; (8008a60 <__malloc_lock+0x8>)
 8008a5a:	f000 b811 	b.w	8008a80 <__retarget_lock_acquire_recursive>
 8008a5e:	bf00      	nop
 8008a60:	20001420 	.word	0x20001420

08008a64 <__malloc_unlock>:
 8008a64:	4801      	ldr	r0, [pc, #4]	; (8008a6c <__malloc_unlock+0x8>)
 8008a66:	f000 b80c 	b.w	8008a82 <__retarget_lock_release_recursive>
 8008a6a:	bf00      	nop
 8008a6c:	20001420 	.word	0x20001420

08008a70 <_malloc_usable_size_r>:
 8008a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a74:	1f18      	subs	r0, r3, #4
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bfbc      	itt	lt
 8008a7a:	580b      	ldrlt	r3, [r1, r0]
 8008a7c:	18c0      	addlt	r0, r0, r3
 8008a7e:	4770      	bx	lr

08008a80 <__retarget_lock_acquire_recursive>:
 8008a80:	4770      	bx	lr

08008a82 <__retarget_lock_release_recursive>:
 8008a82:	4770      	bx	lr

08008a84 <_init>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr

08008a90 <_fini>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	bf00      	nop
 8008a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a96:	bc08      	pop	{r3}
 8008a98:	469e      	mov	lr, r3
 8008a9a:	4770      	bx	lr
